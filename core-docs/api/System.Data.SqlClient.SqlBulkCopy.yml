items:
- uid: System.Data.SqlClient.SqlBulkCopy
  commentId: T:System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlBulkCopy
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 135
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Lets you efficiently bulk load a SQL Server table with data from another source.</p>\n"
  remarks: "\n<p>Microsoft SQL Server includes a popular command-prompt utility named <strong>bcp</strong> for moving data from one table to another, whether on a single server or between servers. The <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class lets you write managed code solutions that provide similar functionality. There are other ways to load data into a SQL Server table (INSERT statements, for example), but <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> offers a significant performance advantage over them.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class can be used to write data only to SQL Server tables. However, the data source is not limited to SQL Server; any data source can be used, as long as the data can be loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> instance or read with a <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> will fail when bulk loading a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> column of type <xref href=\"System.Data.SqlTypes.SqlDateTime\" data-throw-if-not-resolved=\"false\"></xref> into a SQL Server column whose type is one of the date/time types added in SQL Server 2008.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to load data using the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class. In this example, a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is used to copy data from the <strong>Production.Product</strong> table in the SQL Server<strong>AdventureWorks</strong> database to a similar table in the same database. </p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks BulkCopy.Single#1"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
    content.vb: >-
      Public NotInheritable Class SqlBulkCopy
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.Data.SqlClient.SqlConnection)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 232
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class using the specified open instance of <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>Because the connection is already open when the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance is initialized, the connection remains open after the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance is closed.</p>\n<p>If the <em>connection</em> argument is null, an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is used to copy data from the <strong>Production.Product</strong> table in the SQL Server<strong>AdventureWorks</strong> database to a similar table in the same database. This example is for demonstration purposes only. You would not use <strong>SqlBulkCopy</strong> to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks BulkCopy.Single#1"
  syntax:
    content: public SqlBulkCopy(SqlConnection connection)
    content.vb: Public Sub New(connection As SqlConnection)
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.Data.SqlClient.SqlConnection, System.Data.SqlClient.SqlBulkCopyOptions, System.Data.SqlClient.SqlTransaction)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 242
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class using the supplied existing open instance of <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance behaves according to options supplied in the <em>copyOptions</em> parameter. If a non-null <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref> is supplied, the copy operations will be performed within that transaction.</p>\n"
  remarks: "\n<p>If options include <strong>UseInternalTransaction</strong> and the <em>externalTransaction</em> argument is not null, an <strong>InvalidArgumentException</strong> is thrown.</p>\n<p>For examples demonstrating how to use <strong>SqlBulkCopy</strong> in a transaction, see Transaction and Bulk Copy Operations.</p>\n"
  syntax:
    content: public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction)
    content.vb: Public Sub New(connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 257
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes and opens a new instance of <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> based on the supplied <em>connectionString</em>. The constructor uses the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to initialize a new instance of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The connection is automatically closed at the end of the bulk copy operation.</p>\n<p>If <em>connectionString</em> is null, an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. If <em>connectionString</em> is an empty string, an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance is closed.</p>\n<p>In this example, the source data is first read from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ConnectionString#1"
  syntax:
    content: public SqlBulkCopy(string connectionString)
    content.vb: Public Sub New(connectionString As String)
    parameters:
    - id: connectionString
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: SqlBulkCopy(String, SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.String, System.Data.SqlClient.SqlBulkCopyOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 268
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes and opens a new instance of <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> based on the supplied <em>connectionString</em>. The constructor uses that <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to initialize a new instance of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class. The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> instance behaves according to options supplied in the <em>copyOptions</em> parameter.</p>\n"
  remarks: "\n<p>You can obtain detailed information about all the bulk copy options in the <xref href=\"System.Data.SqlClient.SqlBulkCopyOptions\" data-throw-if-not-resolved=\"false\"></xref> topic.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. The source table and destination table each include an Identity column. By default, a new value for the <strong>Identity</strong> column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the <strong>Identity</strong> values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the <strong>dbo.BulkCopyDemoMatchingColumns</strong> table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.KeepIdentity#1"
  syntax:
    content: public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions)
    content.vb: Public Sub New(connectionString As String, copyOptions As SqlBulkCopyOptions)
    parameters:
    - id: connectionString
      type: System.String
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  commentId: P:System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BatchSize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 274
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</p>\n"
  remarks: "\n<p>A batch is complete when <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref> rows have been processed or there are no more rows to send to the destination data source.</p>\n<p>Zero (the default) indicates that each <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> operation is a single batch.</p>\n<p>If the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance has been declared without the <xref href=\"System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction\" data-throw-if-not-resolved=\"false\"></xref> option in effect, rows are sent to the server <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref> rows at a time, but no transaction-related action is taken. If <xref href=\"System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction\" data-throw-if-not-resolved=\"false\"></xref> is in effect, each batch of rows is inserted as a separate transaction.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref> property can be set at any time. If a bulk copy is already in progress, the current batch is sized according to the previous batch size. Subsequent batches use the new size. If the <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref> is initially zero and changed while a <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> operation is already in progress, that operation loads the data as a single batch. Any subsequent <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> operations on the same <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance use the new <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref> works with a transaction, see Transaction and Bulk Copy Operations.</p>\n<p>In this example, the source data is first read from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.BatchSize#1"
  syntax:
    content: public int BatchSize { get; set; }
    content.vb: Public Property BatchSize As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  commentId: P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BulkCopyTimeout
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 293
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Number of seconds for the operation to complete before it times out.</p>\n"
  remarks: "\n<p>If the operation does time out, the transaction is not committed and all copied rows are removed from the destination table.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.</p>\n<p>In this example, the source data is first read from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL<code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.Timeout#1"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    content.vb: Public Property BulkCopyTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  commentId: P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ColumnMappings
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 321
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Returns a collection of <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> items. Column mappings define the relationships between columns in the data source and columns in the destination.</p>\n"
  remarks: "\n<p>If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the <xref href=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\" data-throw-if-not-resolved=\"false\"></xref> collection is unnecessary. However, if the column counts differ, or the ordinal positions are not consistent, you must use <xref href=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\" data-throw-if-not-resolved=\"false\"></xref> to make sure that data is copied into the correct columns.</p>\n<p>During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed. Any attempt to change it will throw an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    content.vb: Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  seealso:
  - type: System.Data.SqlClient.SqlBulkCopyColumnMapping
    commentId: T:System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  commentId: P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DestinationTableName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 329
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Name of the destination table on the server. </p>\n"
  remarks: "\n<p>If <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> has not been set when <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> is called, an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>If <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> is modified while a <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> operation is running, the change does not affect the current operation. The new <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> value is used the next time a <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> method is called.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> is a three-part name (<code><database>.<owningschema>.<name></code>). You can qualify the table name with its database and owning schema if you choose. However, if the table name uses an underscore (\"_\") or any other special characters, you must escape the name using surrounding brackets as in (<code>[<database>.<owningschema>.<name_01>]</code>). For more information, see \"Identifiers\" in SQL Server Books Online.</p>\n<p>You can bulk-copy data to a temporary table by using a value such as <code>tempdb..#table</code> or<code> tempdb.<owner>.#table</code> for the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the <strong>AdventureWorks</strong> database.</p>\n<p>In this example, the connection is first used to read data from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.Single#1"
  syntax:
    content: public string DestinationTableName { get; set; }
    content.vb: Public Property DestinationTableName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  commentId: P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableStreaming
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 309
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Enables or disables a <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object to stream data from an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> object</p>\n"
  remarks: "\n<p>When <xref href=\"System.Data.SqlClient.SqlBulkCopy.EnableStreaming\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> reads from an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> object using <xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref>, optimizing memory usage by using the <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> streaming capabilities. When it’s set to false, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class loads all the data returned by the <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> object into memory before sending it to SQL Server or SQL Azure.</p>\n"
  syntax:
    content: public bool EnableStreaming { get; set; }
    content.vb: Public Property EnableStreaming As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  commentId: P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotifyAfter
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 349
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Defines the number of rows to be processed before generating a notification event.</p>\n"
  remarks: "\n<p>This property is designed for user interface components that illustrate the progress of a bulk copy operation. It indicates the number of rows to be processed before generating a notification event. The <xref href=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\" data-throw-if-not-resolved=\"false\"></xref> property can be set at any time, even while a bulk copy operation is underway. Changes made during a bulk copy operation take effect after the next notification. The new setting applies to all subsequent operations on the same instance.</p>\n<p>If <xref href=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\" data-throw-if-not-resolved=\"false\"></xref> is set to a number less than zero, an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to bulk load data using a connection that is already open. The <xref href=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\" data-throw-if-not-resolved=\"false\"></xref> property is set so that the event handler is called after every 50 rows copied to the table.</p>\n<p>In this example, the connection is first used to read data from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.NotifyAfter#1"
  syntax:
    content: public int NotifyAfter { get; set; }
    content.vb: Public Property NotifyAfter As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  commentId: E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlRowsCopied
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 369
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Occurs every time that the number of rows specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\" data-throw-if-not-resolved=\"false\"></xref> property have been processed.</p>\n"
  remarks: "\n<p>Note that the settings of <xref href=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\" data-throw-if-not-resolved=\"false\"></xref> are independent. Receipt of a <xref href=\"System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\" data-throw-if-not-resolved=\"false\"></xref> event does not imply that any rows have been sent to the server or committed.</p>\n<p>You cannot call SqlBulkCopy.Close (<xref href=\"System.Data.SqlClient.SqlBulkCopy.Close\" data-throw-if-not-resolved=\"false\"></xref>) or SqlConnection.Close (<xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref>) from this event. Doing this will cause an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> being thrown, and the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object state will not change. If the user wants to cancel the operation from the event, the <xref href=\"System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlRowsCopiedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> can be used. (See Transaction and Bulk Copy Operations for examples that use the <xref href=\"System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort\" data-throw-if-not-resolved=\"false\"></xref> property.)</p>\n<p>No action, such as transaction activity, is supported in the connection during the execution of the bulk copy operation, and it is recommended that you not use the same connection used during the <xref href=\"System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\" data-throw-if-not-resolved=\"false\"></xref> event. However, you can open a different connection.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how to bulk load data using a connection that is already open. The <xref href=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\" data-throw-if-not-resolved=\"false\"></xref> property is set so that the event handler is called after every 50 rows copied to the table.</p>\n<p>In this example, the connection is first used to read data from a SQL Server table to a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> or loaded to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.NotifyAfter#1"
  syntax:
    content: public event SqlRowsCopiedEventHandler SqlRowsCopied
    content.vb: Public Event SqlRowsCopied As SqlRowsCopiedEventHandler
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  commentId: M:System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Close
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 779
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Closes the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>After you call a <xref href=\"System.Data.SqlClient.SqlBulkCopy.Close\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object, no other operation will succeed. Calls to the <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> method will throw an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calling the <xref href=\"System.Data.SqlClient.SqlBulkCopy.Close\" data-throw-if-not-resolved=\"false\"></xref> method from the <xref href=\"System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\" data-throw-if-not-resolved=\"false\"></xref> event causes an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown.</p>\n<p>Note that open <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instances are closed implicitly at the end of a <strong>using</strong> block.</p>\n"
  example:
  - "\n<p>The following example uses the same <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance to add sales orders and their associated details to two destination tables. Because the <strong>AdventureWorks</strong> sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The <xref href=\"System.Data.SqlClient.SqlBulkCopy.Close\" data-throw-if-not-resolved=\"false\"></xref> method is used only after both bulk copy operations are complete.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.OrdersDetails#1"
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  commentId: M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IDisposable.Dispose
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs
    startLine: 399
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: void IDisposable.Dispose()
    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose
  implements:
  - System.IDisposable.Dispose
  name.vb: System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: WriteToServer(Common.DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteToServer
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 233
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Copies all rows from the supplied <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> array to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public void WriteToServer(Common.DbDataReader reader)
    content.vb: Public Sub WriteToServer(reader As Common.DbDataReader)
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "\n<p>A <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> whose rows will be copied to the destination table.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: WriteToServerAsync(Common.DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteToServerAsync
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 234
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>The asynchronous version of <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\" data-throw-if-not-resolved=\"false\"></xref>, which copies all rows from the supplied <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> array to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public Task WriteToServerAsync(Common.DbDataReader reader)
    content.vb: Public Function WriteToServerAsync(reader As Common.DbDataReader) As Task
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "\n<p>A <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> whose rows will be copied to the destination table.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  - vb
  name: WriteToServerAsync(Common.DbDataReader, CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteToServerAsync
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 235
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>The asynchronous version of <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\" data-throw-if-not-resolved=\"false\"></xref>, which copies all rows from the supplied <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> array to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public Task WriteToServerAsync(Common.DbDataReader reader, CancellationToken cancellationToken)
    content.vb: Public Function WriteToServerAsync(reader As Common.DbDataReader, cancellationToken As CancellationToken) As Task
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "\n<p>A <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> whose rows will be copied to the destination table.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction. A <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref> value in this parameter makes this method equivalent to <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
