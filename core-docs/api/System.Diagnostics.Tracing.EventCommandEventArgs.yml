items:
- uid: System.Diagnostics.Tracing.EventCommandEventArgs
  commentId: T:System.Diagnostics.Tracing.EventCommandEventArgs
  id: EventCommandEventArgs
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventCommandEventArgs.Arguments
  - System.Diagnostics.Tracing.EventCommandEventArgs.Command
  - System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)
  - System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)
  langs:
  - csharp
  - vb
  name: EventCommandEventArgs
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventCommandEventArgs
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 48
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Provides the arguments for the <xref href=\"System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> callback.</p>\n"
  syntax:
    content: 'public class EventCommandEventArgs : EventArgs'
    content.vb: >-
      Public Class EventCommandEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Tracing.EventCommandEventArgs.Arguments
  commentId: P:System.Diagnostics.Tracing.EventCommandEventArgs.Arguments
  id: Arguments
  parent: System.Diagnostics.Tracing.EventCommandEventArgs
  langs:
  - csharp
  - vb
  name: Arguments
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.Arguments
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Arguments
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 51
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the array of arguments for the callback.</p>\n"
  syntax:
    content: public Collections.Generic.IDictionary<string, string> Arguments { get; }
    content.vb: Public ReadOnly Property Arguments As Collections.Generic.IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>An array of callback arguments.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventCommandEventArgs.Command
  commentId: P:System.Diagnostics.Tracing.EventCommandEventArgs.Command
  id: Command
  parent: System.Diagnostics.Tracing.EventCommandEventArgs
  langs:
  - csharp
  - vb
  name: Command
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.Command
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Command
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 52
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the command for the callback.</p>\n"
  syntax:
    content: public EventCommand Command { get; }
    content.vb: Public ReadOnly Property Command As EventCommand
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventCommand
      description: "\n<p>The callback command.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)
  id: DisableEvent(System.Int32)
  parent: System.Diagnostics.Tracing.EventCommandEventArgs
  langs:
  - csharp
  - vb
  name: DisableEvent(Int32)
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DisableEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 53
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Disables the event that have the specified identifier.</p>\n"
  remarks: "\n<p>You can turn off all events in an event listener by calling <xref href=\"System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> starting with <em>eventID</em> = 1 and continuing until <xref href=\"System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>.</p>\n"
  syntax:
    content: public bool DisableEvent(int eventId)
    content.vb: Public Function DisableEvent(eventId As Integer) As Boolean
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The identifier of the event to disable.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>eventId</em> is in range; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)
  id: EnableEvent(System.Int32)
  parent: System.Diagnostics.Tracing.EventCommandEventArgs
  langs:
  - csharp
  - vb
  name: EnableEvent(Int32)
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 54
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables the event that has the specified identifier.</p>\n"
  remarks: "\n<p>You can turn on all events in an event listener by calling <xref href=\"System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> starting with <em>eventID</em> = 1 and continuing until <xref href=\"System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>.</p>\n"
  syntax:
    content: public bool EnableEvent(int eventId)
    content.vb: Public Function EnableEvent(eventId As Integer) As Boolean
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The identifier of the event to enable.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>eventId</em> is in range; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2
  name: Collections.Generic.IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: Collections.Generic.IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Diagnostics.Tracing.EventCommand
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventCommand
  fullName: System.Diagnostics.Tracing.EventCommand
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
