items:
- uid: System.Text.RegularExpressions.Match
  commentId: T:System.Text.RegularExpressions.Match
  id: Match
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.Match.Empty
  - System.Text.RegularExpressions.Match.Groups
  - System.Text.RegularExpressions.Match.NextMatch
  - System.Text.RegularExpressions.Match.Result(System.String)
  langs:
  - csharp
  - vb
  name: Match
  fullName: System.Text.RegularExpressions.Match
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 45
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Represents the results from a single regular expression match.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object is immutable and has no public constructor. An instance of the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> class is returned by the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and represents the first pattern match in a string. Subsequent matches are represented by <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects returned by the <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method. In addition, a <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object that consists of zero, one, or more <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects is returned by the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method fails to match a regular expression pattern in an input string, it returns an empty <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. You can then use a <strong>foreach</strong> construct in C# or a <strong>For Each</strong> construct in Visual Basic to iterate the collection. </p>\n<p>If the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method fails to match the regular expression pattern, it returns a <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object that is equal to <xref href=\"System.Text.RegularExpressions.Match.Empty\" data-throw-if-not-resolved=\"false\"></xref>. You can use the <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the match was successful. The following example provides an illustration.</p>System.Text.RegularExpressions.Match.Class#1<p>If a pattern match is successful, the <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the matched substring, the <xref href=\"System.Text.RegularExpressions.Capture.Index\" data-throw-if-not-resolved=\"false\"></xref> property indicates the zero-based starting position of the matched substring in the input string, and the <xref href=\"System.Text.RegularExpressions.Capture.Length\" data-throw-if-not-resolved=\"false\"></xref> property indicates the length of matched substring in the input string.</p><p>Because a single match can involve multiple capturing groups, <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> has a <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property that returns the <xref href=\"System.Text.RegularExpressions.GroupCollection\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> instance itself is equivalent to the first object in the collection, at <code>Match.Groups[0]</code> (<code>Match.Groups(0)</code> in Visual Basic), which represents the entire match. You can access the captured groups in a match in the following ways: </p><ul><li><p>You can iterate the members of the <xref href=\"System.Text.RegularExpressions.GroupCollection\" data-throw-if-not-resolved=\"false\"></xref> object  by using a <strong>foreach</strong> (C#) or <strong>For Each</strong> (Visual Basic) construct. </p></li><li><p>You can use the <xref href=\"System.Text.RegularExpressions.GroupCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve groups by the number of the capturing group. Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref href=\"System.Text.RegularExpressions.Regex.GetGroupNumbers\" data-throw-if-not-resolved=\"false\"></xref> method. </p></li><li><p>You can use the <xref href=\"System.Text.RegularExpressions.GroupCollection.Item(System.String)\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve groups by the name of the capturing group. Note that you can determine which named groups are present in a regular expression by calling the instance <xref href=\"System.Text.RegularExpressions.Regex.GetGroupNames\" data-throw-if-not-resolved=\"false\"></xref> method. </p></li></ul>"
  example:
  - "\n<p>The following examples use the regular expression <strong>Console\\.Write(Line)?</strong>. The regular expression is interpreted as follows:</p>\n<table><tbody><tr><td>\n<p>Console\\.Write</p>\n</td><td>\n<p>Match the string \"Console.Write\". Note that the \".\" character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</p>\n</td></tr><tr><td>\n<p>(Line)?</p>\n</td><td>\n<p>Match zero or one occurrence of the string \"Line\". </p>\n</td></tr></tbody></table>\n<p>Example 1</p>\n<p>The following example calls the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve all pattern matches in an input string. It then iterates the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object to display information about each match.</p>System.Text.RegularExpressions.Match.Class#2<p>Example 2</p><p>The following example calls the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> methods to retrieve one match at a time.</p>System.Text.RegularExpressions.Match.Class#3"
  syntax:
    content: 'public class Match : Group'
    content.vb: >-
      Public Class Match
          Inherits Group
  seealso:
  - type: System.Text.RegularExpressions.MatchCollection
    commentId: T:System.Text.RegularExpressions.MatchCollection
  - type: System.Text.RegularExpressions.Regex
    commentId: T:System.Text.RegularExpressions.Regex
  inheritance:
  - System.Object
  - System.Text.RegularExpressions.Capture
  - System.Text.RegularExpressions.Group
  inheritedMembers:
  - System.Text.RegularExpressions.Group.Captures
  - System.Text.RegularExpressions.Group.Success
  - System.Text.RegularExpressions.Capture.Index
  - System.Text.RegularExpressions.Capture.Length
  - System.Text.RegularExpressions.Capture.Value
  - System.Text.RegularExpressions.Capture.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.RegularExpressions.Match.Empty
  commentId: P:System.Text.RegularExpressions.Match.Empty
  id: Empty
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.Text.RegularExpressions.Match.Empty
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 48
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the empty group. All failed matches return this empty match.</p>\n"
  remarks: "\n<p>This property should not be used to determine if a match is successful. Instead, use the <strong>Match.Success</strong> property (which is inherited from <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  syntax:
    content: public static Match Empty { get; }
    content.vb: Public Shared ReadOnly Property Empty As Match
    parameters: []
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An empty match.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.RegularExpressions.Match.Groups
  commentId: P:System.Text.RegularExpressions.Match.Groups
  id: Groups
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  - vb
  name: Groups
  fullName: System.Text.RegularExpressions.Match.Groups
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Groups
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 49
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets a collection of groups matched by the regular expression.</p>\n"
  remarks: "\n<p>A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses. Every such subexpression forms a group. The <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property provides access to information about those subexpression matches. For example, the regular expression pattern <code>(\\d{3})-(\\d{3}-\\d{4})</code>, which matches North American telephone numbers, has two subexpressions. The first consists of the area code, which composes the first three digits of the telephone number. This group is captured by the first portion of the regular expression, <code>(\\d{3})</code>.The second consists of the individual telephone number, which composes the last seven digits of the telephone number. This group is captured by the second portion of the regular expression, <code>(\\d{3}-\\d{4})</code>. These two groups can then be retrieved from the <xref href=\"System.Text.RegularExpressions.GroupCollection\" data-throw-if-not-resolved=\"false\"></xref> object that is returned by the <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property, as the following example shows.</p>System.Text.RegularExpressions.Match.Groups#1<p>The <xref href=\"System.Text.RegularExpressions.GroupCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property is a zero-based collection object that always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property of the single <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object in the collection (the object at index 0) is set to <strong>false</strong> and the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If the regular expression engine can find a match, the first element of the <xref href=\"System.Text.RegularExpressions.GroupCollection\" data-throw-if-not-resolved=\"false\"></xref> object (the element at index 0) returned by the <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property contains a string that matches the entire regular expression pattern. Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups. For more information, see the \"Grouping Constructs and Regular Expression Objects\" section of the Grouping Constructs in Regular Expressions article. </p>"
  example:
  - "\n<p>The following example attempts to match a regular expression pattern against a sample string. The example uses the <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property to store information that is retrieved by the match for display to the console.</p>Regex Match, NextMatch, Groups, Captures#8"
  syntax:
    content: public virtual GroupCollection Groups { get; }
    content.vb: Public Overridable ReadOnly Property Groups As GroupCollection
    parameters: []
    return:
      type: System.Text.RegularExpressions.GroupCollection
      description: "\n<p>The character groups matched by the pattern.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Text.RegularExpressions.Match.NextMatch
  commentId: M:System.Text.RegularExpressions.Match.NextMatch
  id: NextMatch
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  - vb
  name: NextMatch()
  fullName: System.Text.RegularExpressions.Match.NextMatch()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextMatch
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 50
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Returns a new <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</p>\n"
  remarks: "\n<p>This method is similar to calling <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> again and passing (<code>Index+Length</code>) as the new starting position. </p>\n<p>This method does not modify the current instance. Instead, it returns a new <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about the next match.</p>\n<p>Attempting to retrieve the next match may throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method to capture regular expression matches beyond the first match.</p>Regex Match, NextMatch, Groups, Captures#8"
  syntax:
    content: public Match NextMatch()
    content.vb: Public Function NextMatch As Match
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>The next regular expression match.</p>\n"
  exceptions:
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Match.Result(System.String)
  commentId: M:System.Text.RegularExpressions.Match.Result(System.String)
  id: Result(System.String)
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  - vb
  name: Result(String)
  fullName: System.Text.RegularExpressions.Match.Result(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Result
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 51
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Returns the expansion of the specified replacement pattern. </p>\n"
  remarks: "\n<p>Whereas the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method replaces all matches in an input string with a specified replacement pattern, the <xref href=\"System.Text.RegularExpressions.Match.Result(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method replaces a single match with a specified replacement pattern. Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref href=\"System.Text.RegularExpressions.Match.Result(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>replacement</em> parameter is a standard regular expression replacement pattern. It can consist of literal characters and regular expression substitutions. For more information, see Substitutions in Regular Expressions.</p>\n"
  example:
  - "\n<p>The following example replaces the hyphens that begin and end a parenthetical expression with parentheses. </p>System.Text.RegularExpressions.Match.Result#1<p>The regular expression pattern <code>--(.+?)--</code> is interpreted as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>--</code></p></td><td><p>Match two hyphens.</p></td></tr><tr><td><p><code>(.+?)</code></p></td><td><p>Match any character one or more times, but as few times as possible. This is the first capturing group.</p></td></tr><tr><td><p><code>--</code></p></td><td><p>Match two hyphens.</p></td></tr></tbody></table><p>Note that the regular expression pattern <code>--(.+?)--</code> uses the lazy quantifier <strong>+?</strong>. If the greedy quantifier <strong>+</strong> were used instead, the regular expression engine would find only a single match in the input string.</p><p>The replacement string <code>($1)</code> replaces the match with the first captured group, which is enclosed in parentheses.</p>"
  syntax:
    content: public virtual string Result(string replacement)
    content.vb: Public Overridable Function Result(replacement As String) As String
    parameters:
    - id: replacement
      type: System.String
      description: "\n<p>The replacement pattern to use. </p>\n"
    return:
      type: System.String
      description: "\n<p>The expanded version of the <em>replacement</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Expansion is not allowed for this pattern.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
    commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Text.RegularExpressions.Capture
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Capture
  fullName: System.Text.RegularExpressions.Capture
- uid: System.Text.RegularExpressions.Group
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Group
  fullName: System.Text.RegularExpressions.Group
- uid: System.Text.RegularExpressions.Group.Captures
  parent: System.Text.RegularExpressions.Group
  isExternal: false
  name: Captures
  fullName: System.Text.RegularExpressions.Group.Captures
- uid: System.Text.RegularExpressions.Group.Success
  parent: System.Text.RegularExpressions.Group
  isExternal: false
  name: Success
  fullName: System.Text.RegularExpressions.Group.Success
- uid: System.Text.RegularExpressions.Capture.Index
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Index
  fullName: System.Text.RegularExpressions.Capture.Index
- uid: System.Text.RegularExpressions.Capture.Length
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Length
  fullName: System.Text.RegularExpressions.Capture.Length
- uid: System.Text.RegularExpressions.Capture.Value
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Value
  fullName: System.Text.RegularExpressions.Capture.Value
- uid: System.Text.RegularExpressions.Capture.ToString
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: ToString()
  fullName: System.Text.RegularExpressions.Capture.ToString()
  spec.csharp:
  - uid: System.Text.RegularExpressions.Capture.ToString
    name: ToString
    fullName: System.Text.RegularExpressions.Capture.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.RegularExpressions.Capture.ToString
    name: ToString
    fullName: System.Text.RegularExpressions.Capture.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Text.RegularExpressions.Match
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Match
  fullName: System.Text.RegularExpressions.Match
- uid: System.Text.RegularExpressions.GroupCollection
  parent: System.Text.RegularExpressions
  isExternal: false
  name: GroupCollection
  fullName: System.Text.RegularExpressions.GroupCollection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Text.RegularExpressions.RegexMatchTimeoutException
  isExternal: false
  name: RegexMatchTimeoutException
  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
