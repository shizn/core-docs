items:
- uid: System.Reflection.Emit.ModuleBuilder
  commentId: T:System.Reflection.Emit.ModuleBuilder
  id: ModuleBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ModuleBuilder.Assembly
  - System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  - System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  - System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  - System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.GetHashCode
  - System.Reflection.Emit.ModuleBuilder.Name
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ModuleBuilder
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 52
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and represents a module in a dynamic assembly.</p>\n"
  remarks: "\n<p>To get an instance of <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of <strong>ModuleBuilder</strong> to create a dynamic module. Note that the ModuleBuilder is created by calling <xref href=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"System.Reflection.Emit.AssemblyBuilder\" data-throw-if-not-resolved=\"false\"></xref>, rather than through a constructor.</p>ModuleBuilder_Class#1"
  syntax:
    content: >-
      [HostProtection(MayLeakOnAbort = true)]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_ModuleBuilder))]

      [ComVisible(true)]

      public class ModuleBuilder : Module, _Module, ISerializable, ICustomAttributeProvider, _ModuleBuilder
    content.vb: >-
      <HostProtection(MayLeakOnAbort:=True)>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_ModuleBuilder))>

      <ComVisible(True)>

      Public Class ModuleBuilder
          Inherits
           Module  Implements _Module, ISerializable, ICustomAttributeProvider, _ModuleBuilder
  inheritance:
  - System.Object
  - System.Reflection.Module
  implements:
  - System.Runtime.InteropServices._Module
  - System.Runtime.Serialization.ISerializable
  - System.Reflection.ICustomAttributeProvider
  inheritedMembers:
  - System.Reflection.Module.FilterTypeName
  - System.Reflection.Module.FilterTypeNameIgnoreCase
  - System.Reflection.Module.ToString
  - System.Reflection.Module.GetCustomAttributes(System.Boolean)
  - System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Module.GetCustomAttributesData
  - System.Reflection.Module.ResolveMethod(System.Int32)
  - System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveField(System.Int32)
  - System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveType(System.Int32)
  - System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveMember(System.Int32)
  - System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveSignature(System.Int32)
  - System.Reflection.Module.ResolveString(System.Int32)
  - System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  - System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.Module.GetType(System.String,System.Boolean)
  - System.Reflection.Module.GetType(System.String)
  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  - System.Reflection.Module.GetTypes
  - System.Reflection.Module.IsResource
  - System.Reflection.Module.GetFields
  - System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.Module.GetField(System.String)
  - System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Module.GetMethods
  - System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetMethod(System.String,System.Type[])
  - System.Reflection.Module.GetMethod(System.String)
  - System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetSignerCertificate
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.MDStreamVersion
  - System.Reflection.Module.ModuleVersionId
  - System.Reflection.Module.MetadataToken
  - System.Reflection.Module.ScopeName
  - System.Reflection.Module.ModuleHandle
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ModuleBuilder.Assembly
  commentId: P:System.Reflection.Emit.ModuleBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.Emit.ModuleBuilder.Assembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1079
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the dynamic assembly that defined this instance of <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> object that is returned is the <xref href=\"System.Reflection.Emit.AssemblyBuilder\" data-throw-if-not-resolved=\"false\"></xref> that defined this instance of <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Assembly Assembly { get; }
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
  overridden: System.Reflection.Module.Assembly
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  commentId: P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: FullyQualifiedName
  fullName: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullyQualifiedName
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 950
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a <strong>String</strong> representing the fully qualified name and path to this module.</p>\n"
  remarks: "\n<p>To get the name without the path, use <strong>Name</strong>.</p>\n<p>The case of a module name is platform dependent.</p>\n"
  syntax:
    content: >-
      public override string FullyQualifiedName

      {
          [SecurityCritical]
          get;
      }
    content.vb: Public Overrides ReadOnly Property FullyQualifiedName As String
    parameters: []
    return:
      type: System.String
  overridden: System.Reflection.Module.FullyQualifiedName
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.Name
  commentId: P:System.Reflection.Emit.ModuleBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.ModuleBuilder.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1071
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>A string that indicates that this is an in-memory module.</p>\n"
  remarks: "\n<p>The name of a dynamic module cannot be obtained until the module has been saved and reloaded from disk.</p>\n"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overridden: System.Reflection.Module.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  commentId: M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  id: CreateGlobalFunctions
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: CreateGlobalFunctions()
  fullName: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateGlobalFunctions
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1528
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Completes the global function definitions and global data definitions for this dynamic module.</p>\n"
  remarks: "\n<p>This method should be called when the user is done with defining all the global functions within this dynamic module. After calling this function, no more new global functions or new global data are allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following sample illustrates the use of <strong>CreateGlobalFunctions</strong> to create a static global method from a <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> implemented with <xref href=\"System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref>.</p>ModuleBuilder_CreateGlobalFunctions#2"
  syntax:
    content: public void CreateGlobalFunctions()
    content.vb: Public Sub CreateGlobalFunctions
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method was called previously. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineEnum(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineEnum
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1214
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines an enumeration type that is a value type with a single non-static field called <em>value__</em> of the specified type.</p>\n"
  remarks: "\n<p>The defined enum is a derived class of <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. The <em>value__</em> field has <xref href=\"System.Reflection.FieldAttributes.Private\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.FieldAttributes.SpecialName\" data-throw-if-not-resolved=\"false\"></xref> attributes set.</p>\n<p>For more information about the built-in integer types that can be specified as the underlying types of enumerations, see .NET Framework Class Library Overview. </p>\n<p>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> because <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> emits enumerations whose elements are of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> instead of the enumeration type. In the .NET Framework version 2.0, <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> emits enumerations whose elements have the correct type.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>DefineEnum</strong> to implement an enumeration class in a dynamic module. The example defines an enumeration named <code>Elevation</code> that has an underlying type of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and creates two elements: <code>Low</code>, with a value of 0, and <code>High</code>, with a value of 1. After the type has been created, the assembly is saved with the name <code>TempAssembly.dll</code>. You can use the Ildasm.exe (IL Disassembler) to examine the contents of this assembly.</p>\n<p>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</p>ModuleBuilder_DefineEnum#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineEnum(name As String, visibility As TypeAttributes, underlyingType As Type) As EnumBuilder
    parameters:
    - id: name
      type: System.String
    - id: visibility
      type: System.Reflection.TypeAttributes
    - id: underlyingType
      type: System.Type
    return:
      type: System.Reflection.Emit.EnumBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Attributes other than visibility attributes are provided.</p>\n<p>-or- </p>\n<p>An enumeration with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>The visibility attributes do not match the scope of the enumeration. For example, <xref href=\"System.Reflection.TypeAttributes.NestedPublic\" data-throw-if-not-resolved=\"false\"></xref> is specified for <em>visibility</em>, but the enumeration is not a nested type. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGlobalMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1428
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</p>\n"
  remarks: "\n<p>You cannot use the global method that this method defines until you call <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>DefineGlobalMethod</strong> to create a type-independent method tied to the current <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>. After building the global method, <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> must be called in order to complete it.</p>ModuleBuilder_CreateGlobalFunctions#1"
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    return:
      type: System.Reflection.Emit.MethodBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is not static. That is, <em>attributes</em> does not include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>An element in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type())
  name.vb: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGlobalMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1436
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</p>\n"
  remarks: "\n<p>This overload is provided for designers of managed compilers.</p>\n<p>You cannot use the global method that this method defines until you call <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
    - id: parameterTypes
      type: System.Type[]
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
    return:
      type: System.Reflection.Emit.MethodBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is not static. That is, <em>attributes</em> does not include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>An element in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> method has been previously called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGlobalMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1421
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a global method with the specified name, attributes, return type, and parameter types.</p>\n"
  remarks: "\n<p>The global method that this method defines is not usable until you call <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>DefineGlobalMethod</strong> to create a type-independent method tied to the current <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>. After building the global method, <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> must be called in order to complete it.</p>ModuleBuilder_CreateGlobalFunctions#1"
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    return:
      type: System.Reflection.Emit.MethodBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is not static. That is, <em>attributes</em> does not include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The length of <em>name</em> is zero </p>\n<p>-or-</p>\n<p>An element in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type())
  name.vb: DefineGlobalMethod(String, MethodAttributes, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  id: DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineInitializedData(String, Byte[], FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineInitializedData
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1552
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines an initialized data field in the .sdata section of the portable executable (PE) file.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Reflection.FieldAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref> is automatically included in <em>attributes</em>.</p>\n<p>The data defined by this method is not created until the <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> method is called.  </p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method to define an initialized data field in the <code>.sdata</code> section of the portable executable (PE) file.</p>ModuleBuilder_DefineInitializedData#1"
  syntax:
    content: >-
      [SecurityCritical]

      public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineInitializedData(name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
    - id: data
      type: System.Byte[]
    - id: attributes
      type: System.Reflection.FieldAttributes
    return:
      type: System.Reflection.Emit.FieldBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>name</em> is zero.</p>\n<p>-or- </p>\n<p>The size of <em>data</em> is less than or equal to zero or greater than or equal to 0x3f0000. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> or <em>data</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String, System.Byte(), System.Reflection.FieldAttributes)
  name.vb: DefineInitializedData(String, Byte(), FieldAttributes)
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  id: DefineType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1099
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> for a private type with the specified name in this module.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TypeBuilder DefineType(string name)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineType(name As String) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  id: DefineType(System.String,System.Reflection.TypeAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1110
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name and the type attributes.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineType(name As String, attr As TypeAttributes) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1121
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given type name, its attributes, and the type that the defined type extends.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1136
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, the attributes, the type that the defined type extends, and the total size of the type.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. It is forbidden to have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecurityCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, typesize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: typesize
      type: System.Int32
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, PackingSize)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1186
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, the attributes, the type that the defined type extends, and the packing size of the type.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecurityCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, packsize As PackingSize) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: packsize
      type: System.Reflection.Emit.PackingSize
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, PackingSize, Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1151
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecurityCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, packingSize As PackingSize, typesize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: packingSize
      type: System.Reflection.Emit.PackingSize
    - id: typesize
      type: System.Int32
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1165
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.</p>\n"
  remarks: "\n<p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> in the current dynamic module using <strong>CreateType</strong>, builds and completes the type, and saves the assembly.</p>Classic ModuleBuilder.DefineType Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(True)>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: interfaces
      type: System.Type[]
    return:
      type: System.Reflection.Emit.TypeBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type())
  name.vb: DefineType(String, TypeAttributes, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  id: DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineUninitializedData(String, Int32, FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineUninitializedData
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1587
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Reflection.FieldAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref> is automatically included in <em>attributes</em>.</p>\n<p>The data defined by this method is not created until the <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> method is called.  </p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineUninitializedData(name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
    - id: size
      type: System.Int32
    - id: attributes
      type: System.Reflection.FieldAttributes
    return:
      type: System.Reflection.Emit.FieldBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>name</em> is zero.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than or equal to zero, or greater than or equal to 0x003f0000. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 764
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Reflection.Module.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: GetArrayMethod(Type, String, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArrayMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 2038
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the named method on an array class.</p>\n"
  remarks: "\n<p>\n<strong>GetArrayMethod</strong> is useful when you have an array of a type whose definition has not been completed and you want to access methods defined on <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. For example, you might define a type and want to define a method that takes an array of the type as a parameter. In order to access the elements of the array, you will need to call methods of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> to obtain the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> corresponding to a method that returns an array value.</p>ModuleBuilder_GetArrayMethod#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetArrayMethod(arrayClass As Type, methodName As String, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodInfo
    parameters:
    - id: arrayClass
      type: System.Type
    - id: methodName
      type: System.String
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>arrayClass</em> is not an array. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>arrayClass</em> or <em>methodName</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type())
  name.vb: GetArrayMethod(Type, String, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.ModuleBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Emit.ModuleBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 769
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Reflection.Module.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 2212
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</p>\n"
  remarks: "\n<p>For more information about how to format <em>binaryAttribute</em>, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ComVisible(true)]

      public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: >-
      <SecurityCritical>

      <ComVisible(True)>

      Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
    - id: binaryAttribute
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 2233
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Applies a custom attribute to this module by using a custom attribute builder.</p>\n"
  remarks: "\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>customBuilder</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Runtime.InteropServices._Module
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Module
  fullName: System.Runtime.InteropServices._Module
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.Module.FilterTypeName
  parent: System.Reflection.Module
  isExternal: true
  name: FilterTypeName
  fullName: System.Reflection.Module.FilterTypeName
- uid: System.Reflection.Module.FilterTypeNameIgnoreCase
  parent: System.Reflection.Module
  isExternal: true
  name: FilterTypeNameIgnoreCase
  fullName: System.Reflection.Module.FilterTypeNameIgnoreCase
- uid: System.Reflection.Module.ToString
  parent: System.Reflection.Module
  isExternal: true
  name: ToString()
  fullName: System.Reflection.Module.ToString()
  spec.csharp:
  - uid: System.Reflection.Module.ToString
    name: ToString
    fullName: System.Reflection.Module.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ToString
    name: ToString
    fullName: System.Reflection.Module.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetCustomAttributes(Boolean)
  fullName: System.Reflection.Module.GetCustomAttributes(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.Module.GetCustomAttributes(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: IsDefined(Type, Boolean)
  fullName: System.Reflection.Module.IsDefined(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    fullName: System.Reflection.Module.IsDefined
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    fullName: System.Reflection.Module.IsDefined
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetCustomAttributesData
  parent: System.Reflection.Module
  isExternal: true
  name: GetCustomAttributesData()
  fullName: System.Reflection.Module.GetCustomAttributesData()
  spec.csharp:
  - uid: System.Reflection.Module.GetCustomAttributesData
    name: GetCustomAttributesData
    fullName: System.Reflection.Module.GetCustomAttributesData
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetCustomAttributesData
    name: GetCustomAttributesData
    fullName: System.Reflection.Module.GetCustomAttributesData
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveMethod(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMethod(Int32)
  fullName: System.Reflection.Module.ResolveMethod(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32)
    name: ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32)
    name: ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMethod(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveMethod(System.Int32, System.Type[], System.Type[])
  fullname.vb: System.Reflection.Module.ResolveMethod(System.Int32, System.Type(), System.Type())
  name.vb: ResolveMethod(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
    name: ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
    name: ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveField(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveField(Int32)
  fullName: System.Reflection.Module.ResolveField(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveField(System.Int32)
    name: ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveField(System.Int32)
    name: ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveField(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveField(System.Int32, System.Type[], System.Type[])
  fullname.vb: System.Reflection.Module.ResolveField(System.Int32, System.Type(), System.Type())
  name.vb: ResolveField(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
    name: ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
    name: ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveType(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveType(Int32)
  fullName: System.Reflection.Module.ResolveType(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveType(System.Int32)
    name: ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveType(System.Int32)
    name: ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveType(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveType(System.Int32, System.Type[], System.Type[])
  fullname.vb: System.Reflection.Module.ResolveType(System.Int32, System.Type(), System.Type())
  name.vb: ResolveType(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
    name: ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
    name: ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveMember(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMember(Int32)
  fullName: System.Reflection.Module.ResolveMember(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMember(System.Int32)
    name: ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMember(System.Int32)
    name: ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMember(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveMember(System.Int32, System.Type[], System.Type[])
  fullname.vb: System.Reflection.Module.ResolveMember(System.Int32, System.Type(), System.Type())
  name.vb: ResolveMember(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
    name: ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
    name: ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveSignature(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveSignature(Int32)
  fullName: System.Reflection.Module.ResolveSignature(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveSignature(System.Int32)
    name: ResolveSignature
    fullName: System.Reflection.Module.ResolveSignature
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveSignature(System.Int32)
    name: ResolveSignature
    fullName: System.Reflection.Module.ResolveSignature
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.ResolveString(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveString(Int32)
  fullName: System.Reflection.Module.ResolveString(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveString(System.Int32)
    name: ResolveString
    fullName: System.Reflection.Module.ResolveString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveString(System.Int32)
    name: ResolveString
    fullName: System.Reflection.Module.ResolveString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  parent: System.Reflection.Module
  isExternal: true
  name: GetPEKind(PortableExecutableKinds, ImageFileMachine)
  fullName: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds, System.Reflection.ImageFileMachine)
  spec.csharp:
  - uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    name: GetPEKind
    fullName: System.Reflection.Module.GetPEKind
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.PortableExecutableKinds
    name: PortableExecutableKinds
    fullName: System.Reflection.PortableExecutableKinds
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.ImageFileMachine
    name: ImageFileMachine
    fullName: System.Reflection.ImageFileMachine
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    name: GetPEKind
    fullName: System.Reflection.Module.GetPEKind
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.PortableExecutableKinds
    name: PortableExecutableKinds
    fullName: System.Reflection.PortableExecutableKinds
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.ImageFileMachine
    name: ImageFileMachine
    fullName: System.Reflection.ImageFileMachine
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Module
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Reflection.Module.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Reflection.Module.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetType(System.String,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetType(String, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean)
    name: GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean)
    name: GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetType(System.String)
  parent: System.Reflection.Module
  isExternal: true
  name: GetType(String)
  fullName: System.Reflection.Module.GetType(System.String)
  spec.csharp:
  - uid: System.Reflection.Module.GetType(System.String)
    name: GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetType(System.String)
    name: GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
    name: GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
    name: GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  parent: System.Reflection.Module
  isExternal: true
  name: FindTypes(TypeFilter, Object)
  fullName: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter, System.Object)
  spec.csharp:
  - uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
    name: FindTypes
    fullName: System.Reflection.Module.FindTypes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.TypeFilter
    name: TypeFilter
    fullName: System.Reflection.TypeFilter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
    name: FindTypes
    fullName: System.Reflection.Module.FindTypes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.TypeFilter
    name: TypeFilter
    fullName: System.Reflection.TypeFilter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetTypes
  parent: System.Reflection.Module
  isExternal: true
  name: GetTypes()
  fullName: System.Reflection.Module.GetTypes()
  spec.csharp:
  - uid: System.Reflection.Module.GetTypes
    name: GetTypes
    fullName: System.Reflection.Module.GetTypes
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetTypes
    name: GetTypes
    fullName: System.Reflection.Module.GetTypes
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.IsResource
  parent: System.Reflection.Module
  isExternal: true
  name: IsResource()
  fullName: System.Reflection.Module.IsResource()
  spec.csharp:
  - uid: System.Reflection.Module.IsResource
    name: IsResource
    fullName: System.Reflection.Module.IsResource
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.IsResource
    name: IsResource
    fullName: System.Reflection.Module.IsResource
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetFields
  parent: System.Reflection.Module
  isExternal: true
  name: GetFields()
  fullName: System.Reflection.Module.GetFields()
  spec.csharp:
  - uid: System.Reflection.Module.GetFields
    name: GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetFields
    name: GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: true
  name: GetFields(BindingFlags)
  fullName: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
    name: GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
    name: GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetField(System.String)
  parent: System.Reflection.Module
  isExternal: true
  name: GetField(String)
  fullName: System.Reflection.Module.GetField(System.String)
  spec.csharp:
  - uid: System.Reflection.Module.GetField(System.String)
    name: GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetField(System.String)
    name: GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: true
  name: GetField(String, BindingFlags)
  fullName: System.Reflection.Module.GetField(System.String, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
    name: GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
    name: GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetMethods
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethods()
  fullName: System.Reflection.Module.GetMethods()
  spec.csharp:
  - uid: System.Reflection.Module.GetMethods
    name: GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethods
    name: GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethods(BindingFlags)
  fullName: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
    name: GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
    name: GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: System.Reflection.Module.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  fullname.vb: System.Reflection.Module.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  name.vb: GetMethod(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  spec.csharp:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethod(String, Type[])
  fullName: System.Reflection.Module.GetMethod(System.String, System.Type[])
  fullname.vb: System.Reflection.Module.GetMethod(System.String, System.Type())
  name.vb: GetMethod(String, Type())
  spec.csharp:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
    name: GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
    name: GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetMethod(System.String)
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethod(String)
  fullName: System.Reflection.Module.GetMethod(System.String)
  spec.csharp:
  - uid: System.Reflection.Module.GetMethod(System.String)
    name: GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethod(System.String)
    name: GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: System.Reflection.Module.GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  fullname.vb: System.Reflection.Module.GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  name.vb: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  spec.csharp:
  - uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethodImpl
    fullName: System.Reflection.Module.GetMethodImpl
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethodImpl
    fullName: System.Reflection.Module.GetMethodImpl
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.Module.GetSignerCertificate
  parent: System.Reflection.Module
  isExternal: true
  name: GetSignerCertificate()
  fullName: System.Reflection.Module.GetSignerCertificate()
  spec.csharp:
  - uid: System.Reflection.Module.GetSignerCertificate
    name: GetSignerCertificate
    fullName: System.Reflection.Module.GetSignerCertificate
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetSignerCertificate
    name: GetSignerCertificate
    fullName: System.Reflection.Module.GetSignerCertificate
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount(System.UInt32)
  name.vb: System.Runtime.InteropServices._Module.GetTypeInfoCount(UInt32)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
    name: _Module.GetTypeInfoCount
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
    name: System.Runtime.InteropServices._Module.GetTypeInfoCount
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: _Module.GetTypeInfo
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._Module.GetTypeInfo
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: _Module.GetIDsOfNames
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._Module.GetIDsOfNames
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: System.Runtime.InteropServices._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: _Module.Invoke
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: System.Runtime.InteropServices._Module.Invoke
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Module.CustomAttributes
  parent: System.Reflection.Module
  isExternal: true
  name: CustomAttributes
  fullName: System.Reflection.Module.CustomAttributes
- uid: System.Reflection.Module.MDStreamVersion
  parent: System.Reflection.Module
  isExternal: true
  name: MDStreamVersion
  fullName: System.Reflection.Module.MDStreamVersion
- uid: System.Reflection.Module.ModuleVersionId
  parent: System.Reflection.Module
  isExternal: true
  name: ModuleVersionId
  fullName: System.Reflection.Module.ModuleVersionId
- uid: System.Reflection.Module.MetadataToken
  parent: System.Reflection.Module
  isExternal: true
  name: MetadataToken
  fullName: System.Reflection.Module.MetadataToken
- uid: System.Reflection.Module.ScopeName
  parent: System.Reflection.Module
  isExternal: true
  name: ScopeName
  fullName: System.Reflection.Module.ScopeName
- uid: System.Reflection.Module.ModuleHandle
  parent: System.Reflection.Module
  isExternal: true
  name: ModuleHandle
  fullName: System.Reflection.Module.ModuleHandle
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Reflection.Module.Assembly
  parent: System.Reflection.Module
  isExternal: true
  name: Assembly
  fullName: System.Reflection.Module.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Module.FullyQualifiedName
  parent: System.Reflection.Module
  isExternal: true
  name: FullyQualifiedName
  fullName: System.Reflection.Module.FullyQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.Module.Name
  parent: System.Reflection.Module
  isExternal: true
  name: Name
  fullName: System.Reflection.Module.Name
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: EnumBuilder
  fullName: System.Reflection.Emit.EnumBuilder
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.Type[][]
  isExternal: true
  name: Type[][]
  fullName: System.Type[][]
  fullname.vb: System.Type()()
  name.vb: Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ()
    fullName: ()
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.PackingSize
  parent: System.Reflection.Emit
  isExternal: false
  name: PackingSize
  fullName: System.Reflection.Emit.PackingSize
- uid: System.Reflection.Module.Equals(System.Object)
  parent: System.Reflection.Module
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.Module.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.Module.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.Module.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.Module.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Module.GetHashCode
  parent: System.Reflection.Module
  isExternal: true
  name: GetHashCode()
  fullName: System.Reflection.Module.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.Module.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.Module.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.Module.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
