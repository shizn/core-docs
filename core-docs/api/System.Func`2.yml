items:
- uid: System.Func`2
  commentId: T:System.Func`2
  id: Func`2
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  type: Delegate
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Func
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 889
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has one parameter and returns a value of the type specified by the <em>TResult</em> parameter.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#7a86aba051da82dd\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#7a86aba051da82dd\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</p>\n<p>To reference a method that has one parameter and returns <strong>void</strong> (or in Visual Basic, that is declared as a <strong>Sub</strong> rather than as a <strong>Function</strong>), use the generic <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate instead. </p>\n<p>When you use the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter. For example, the following code explicitly declares a delegate named <code>ConvertMethod</code> and assigns a reference to the <code>UppercaseString</code> method to its delegate instance. </p>System.Func~2#1<p>The following example simplifies this code by instantiating the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate instead of explicitly defining a new delegate and assigning a named method to it. </p>System.Func~2#2<p>You can also use the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see Anonymous Methods (C# Programming Guide).)</p>System.Func~2#3<p>You can also assign a lambda expression to a <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate, as the following example illustrates. (For an introduction to lambda expressions, see Lambda Expressions (Visual Basic) and Lambda Expressions (C# Programming Guide).)</p>System.Func~2#4<p>The underlying type of a lambda expression is one of the generic <strong>Func</strong> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <xref href=\"System.Linq\" data-throw-if-not-resolved=\"false\"></xref> namespace have <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>"
  example:
  - "\n<p>The following example demonstrates how to declare and use a <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate. This example declares a <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> variable and assigns it a lambda expression that converts the characters in a string to uppercase. The delegate that encapsulates this method is subsequently passed to the <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> method to change the strings in an array of strings to uppercase.</p>System.Func~2#5"
  syntax:
    content: public delegate TResult Func<in T, out TResult>(T arg);
    content.vb: Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult
    parameters:
    - id: arg
      type: '{T}'
      description: "\n<p>The parameter of the method that this delegate encapsulates.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the parameter of the method that this delegate encapsulates.</p>\n"
    - id: TResult
      description: "\n<p>The type of the return value of the method that this delegate encapsulates.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The return value of the method that this delegate encapsulates.</p>\n"
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
