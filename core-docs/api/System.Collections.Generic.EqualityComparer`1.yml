items:
- uid: System.Collections.Generic.EqualityComparer`1
  commentId: T:System.Collections.Generic.EqualityComparer`1
  id: EqualityComparer`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.EqualityComparer`1.#ctor
  - System.Collections.Generic.EqualityComparer`1.Default
  - System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)
  - System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)
  langs:
  - csharp
  - vb
  name: EqualityComparer<T>
  fullName: System.Collections.Generic.EqualityComparer<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EqualityComparer
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 157
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Provides a base class for implementations of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  remarks: "\n<p>Derive from this class to provide a custom implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface for use with collection classes such as the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic class, or with methods such as <xref href=\"System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property checks whether type <em>T</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and, if so, returns an <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> that invokes the implementation of the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. Otherwise, it returns an <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>, as provided by <em>T</em>.</p>\n<p>We recommend that you derive from the <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> class instead of implementing the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> interface, because the <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> class tests for equality using the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method instead of the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This is consistent with the <strong>Contains</strong>, <strong>IndexOf</strong>, <strong>LastIndexOf</strong>, and <strong>Remove</strong> methods of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class and other generic collections.</p>\n"
  example:
  - "\n<p>The following example creates a dictionary collection of objects of type <code>Box</code> with an equality comparer. Two boxes are considered equal if their dimensions are the same. It then adds the boxes to the collection. </p>\n<p>The dictionary is recreated with an equality comparer that defines equality in a different way: Two boxes are considered equal if their volumes are the same.</p>System.Collections.Generic.EqualityComparer#1"
  syntax:
    content: 'public abstract class EqualityComparer<T> : IEqualityComparer<T>, IEqualityComparer'
    content.vb: >-
      Public MustInherit Class EqualityComparer(Of T)
          Inherits IEqualityComparer(Of T)
          Implements IEqualityComparer
    typeParameters:
    - id: T
      description: "\n<p>The type of objects to compare.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T)
  name.vb: EqualityComparer(Of T)
- uid: System.Collections.Generic.EqualityComparer`1.#ctor
  commentId: M:System.Collections.Generic.EqualityComparer`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.EqualityComparer`1
  langs:
  - csharp
  - vb
  name: EqualityComparer()
  fullName: System.Collections.Generic.EqualityComparer<T>.EqualityComparer()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 159
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected EqualityComparer()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).EqualityComparer()
- uid: System.Collections.Generic.EqualityComparer`1.Default
  commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  id: Default
  parent: System.Collections.Generic.EqualityComparer`1
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.Collections.Generic.EqualityComparer<T>.Default
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 160
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns a default equality comparer for the type specified by the generic argument.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property checks whether type <em>T</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and, if so, returns an <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> that uses that implementation. Otherwise, it returns an <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> that uses the overrides of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> provided by <em>T</em>.</p>\n"
  example:
  - "\n<p>The following example creates two dictionary collections of type <code>Box</code>. Both dictionaries are created with the constructor that takes an <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n<p>To determine the equality of dictionary keys, the <code>boxesByDim</code> dictionary uses an equality comparer (<code>BoxEqDimensions</code>) that uses the implementation of the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method in the <code>Box</code> class. Two boxes are considered equal if their dimensions are the same.</p>\n<p>The <code>boxesByVol</code> dictionary uses an equality comparer (<code>BoxEqVolume</code>) that defines equality by volume. Two boxes are considered equal if their volumes are the same.</p>System.Collections.Generic.EqualityComparer.Default#1"
  syntax:
    content: public static EqualityComparer<T> Default { get; }
    content.vb: Public Shared ReadOnly Property Default As EqualityComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.EqualityComparer`1
      description: "\n<p>The default instance of the <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> class for type <em>T</em>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).Default
- uid: System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)
  commentId: M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)
  id: Equals(`0,`0)
  parent: System.Collections.Generic.EqualityComparer`1
  langs:
  - csharp
  - vb
  name: Equals(T, T)
  fullName: System.Collections.Generic.EqualityComparer<T>.Equals(T, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 161
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>When overridden in a derived class, determines whether two objects of type <em>T</em> are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)\" data-throw-if-not-resolved=\"false\"></xref> method is reflexive, symmetric, and transitive. That is, it returns <strong>true</strong> if used to compare an object with itself; <strong>true</strong> for two objects <code>x</code> and <code>y</code> if it is <strong>true</strong> for <code>y</code> and<code> x</code>; and <strong>true</strong> for two objects <code>x</code> and <code>z</code> if it is <strong>true</strong> for <code>x</code> and<code> y</code> and also <strong>true</strong> for <code>y</code> and<code> z</code>.</p>\n"
  syntax:
    content: public abstract bool Equals(T x, T y)
    content.vb: Public MustOverride Function Equals(x As T, y As T) As Boolean
    parameters:
    - id: x
      type: '{T}'
      description: "\n<p>The first object to compare.</p>\n"
    - id: y
      type: '{T}'
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified objects are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).Equals(T, T)
- uid: System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)
  commentId: M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)
  id: GetHashCode(`0)
  parent: System.Collections.Generic.EqualityComparer`1
  langs:
  - csharp
  - vb
  name: GetHashCode(T)
  fullName: System.Collections.Generic.EqualityComparer<T>.GetHashCode(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 162
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.</p>\n"
  syntax:
    content: public abstract int GetHashCode(T obj)
    content.vb: Public MustOverride Function GetHashCode(obj As T) As Integer
    parameters:
    - id: obj
      type: '{T}'
      description: "\n<p>The object for which to get a hash code.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A hash code for the specified object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The type of <em>obj</em> is a reference type and <em>obj</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).GetHashCode(T)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.EqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: EqualityComparer<T>
  fullName: System.Collections.Generic.EqualityComparer<T>
  fullname.vb: System.Collections.Generic.EqualityComparer(Of T)
  name.vb: EqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
