items:
- uid: System.Security.AccessControl.ObjectSecurity
  commentId: T:System.Security.AccessControl.ObjectSecurity
  id: ObjectSecurity
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.ObjectSecurity.#ctor
  - System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)
  - System.Security.AccessControl.ObjectSecurity.AccessRightType
  - System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AccessRuleType
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.AuditRuleType
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  langs:
  - csharp
  - vb
  name: ObjectSecurity
  fullName: System.Security.AccessControl.ObjectSecurity
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectSecurity
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 368
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Provides the ability to control access to objects without direct manipulation of Access Control Lists (ACLs). This class is the abstract base class for the <xref href=\"System.Security.AccessControl.CommonObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.DirectoryObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n"
  syntax:
    content: public abstract class ObjectSecurity
    content.vb: Public MustInherit Class ObjectSecurity
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.AccessControl.ObjectSecurity.#ctor
  commentId: M:System.Security.AccessControl.ObjectSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ObjectSecurity()
  fullName: System.Security.AccessControl.ObjectSecurity.ObjectSecurity()
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 370
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected ObjectSecurity()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)
  commentId: M:System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean)'
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ObjectSecurity(Boolean, Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.ObjectSecurity(System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 371
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: protected ObjectSecurity(bool isContainer, bool isDS)
    content.vb: Protected Sub New(isContainer As Boolean, isDS As Boolean)
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is a container object.</p>\n"
    - id: isDS
      type: System.Boolean
      description: "\n<p>True if the new <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is a directory object.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)
  commentId: M:System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)
  id: '#ctor(System.Security.AccessControl.CommonSecurityDescriptor)'
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ObjectSecurity(CommonSecurityDescriptor)
  fullName: System.Security.AccessControl.ObjectSecurity.ObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 372
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected ObjectSecurity(CommonSecurityDescriptor securityDescriptor)
    content.vb: Protected Sub New(securityDescriptor As CommonSecurityDescriptor)
    parameters:
    - id: securityDescriptor
      type: System.Security.AccessControl.CommonSecurityDescriptor
      description: "\n<p>The <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref>of the new <xref href=\"System.Security.AccessControl.CommonObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.AccessRightType
  commentId: P:System.Security.AccessControl.ObjectSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AccessRightType
  fullName: System.Security.AccessControl.ObjectSecurity.AccessRightType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRightType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 373
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the securable object associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public abstract Type AccessRightType { get; }
    content.vb: Public MustOverride ReadOnly Property AccessRightType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the securable object associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  commentId: P:System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  id: AccessRulesModified
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AccessRulesModified
  fullName: System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRulesModified
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 374
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets a Boolean value that specifies whether the access rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object have been modified.</p>\n"
  example:
  - 
  syntax:
    content: protected bool AccessRulesModified { get; set; }
    content.vb: Protected Property AccessRulesModified As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the access rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object have been modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.AccessRuleType
  commentId: P:System.Security.AccessControl.ObjectSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleType
  fullName: System.Security.AccessControl.ObjectSecurity.AccessRuleType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 375
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the object associated with the access rules of this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public abstract Type AccessRuleType { get; }
    content.vb: Public MustOverride ReadOnly Property AccessRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the object associated with the access rules of this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  id: AreAccessRulesCanonical
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AreAccessRulesCanonical
  fullName: System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AreAccessRulesCanonical
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 376
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the access rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object are in canonical order.</p>\n"
  example:
  - 
  syntax:
    content: public bool AreAccessRulesCanonical { get; }
    content.vb: Public ReadOnly Property AreAccessRulesCanonical As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the access rules are in canonical order; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  id: AreAccessRulesProtected
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AreAccessRulesProtected
  fullName: System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AreAccessRulesProtected
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 377
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is protected.</p>\n"
  example:
  - 
  syntax:
    content: public bool AreAccessRulesProtected { get; }
    content.vb: Public ReadOnly Property AreAccessRulesProtected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the DACL is protected; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  id: AreAuditRulesCanonical
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AreAuditRulesCanonical
  fullName: System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AreAuditRulesCanonical
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 378
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the audit rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object are in canonical order.</p>\n"
  example:
  - 
  syntax:
    content: public bool AreAuditRulesCanonical { get; }
    content.vb: Public ReadOnly Property AreAuditRulesCanonical As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the audit rules are in canonical order; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  id: AreAuditRulesProtected
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AreAuditRulesProtected
  fullName: System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AreAuditRulesProtected
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 379
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is protected.</p>\n"
  example:
  - 
  syntax:
    content: public bool AreAuditRulesProtected { get; }
    content.vb: Public ReadOnly Property AreAuditRulesProtected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the SACL is protected; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  commentId: P:System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  id: AuditRulesModified
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AuditRulesModified
  fullName: System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRulesModified
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 380
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets a Boolean value that specifies whether the audit rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object have been modified.</p>\n"
  example:
  - 
  syntax:
    content: protected bool AuditRulesModified { get; set; }
    content.vb: Protected Property AuditRulesModified As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the audit rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object have been modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.AuditRuleType
  commentId: P:System.Security.AccessControl.ObjectSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleType
  fullName: System.Security.AccessControl.ObjectSecurity.AuditRuleType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 381
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object associated with the audit rules of this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public abstract Type AuditRuleType { get; }
    content.vb: Public MustOverride ReadOnly Property AuditRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the object associated with the audit rules of this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.GroupModified
  commentId: P:System.Security.AccessControl.ObjectSecurity.GroupModified
  id: GroupModified
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: GroupModified
  fullName: System.Security.AccessControl.ObjectSecurity.GroupModified
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupModified
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 382
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets a Boolean value that specifies whether the group associated with the securable object has been modified. </p>\n"
  syntax:
    content: protected bool GroupModified { get; set; }
    content.vb: Protected Property GroupModified As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the group associated with the securable object has been modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.IsContainer
  commentId: P:System.Security.AccessControl.ObjectSecurity.IsContainer
  id: IsContainer
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: IsContainer
  fullName: System.Security.AccessControl.ObjectSecurity.IsContainer
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsContainer
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 383
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is a container object.</p>\n"
  example:
  - 
  syntax:
    content: protected bool IsContainer { get; }
    content.vb: Protected ReadOnly Property IsContainer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is a container object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.IsDS
  commentId: P:System.Security.AccessControl.ObjectSecurity.IsDS
  id: IsDS
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: IsDS
  fullName: System.Security.AccessControl.ObjectSecurity.IsDS
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDS
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 384
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is a directory object.</p>\n"
  example:
  - 
  syntax:
    content: protected bool IsDS { get; }
    content.vb: Protected ReadOnly Property IsDS As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is a directory object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Security.AccessControl.ObjectSecurity.OwnerModified
  commentId: P:System.Security.AccessControl.ObjectSecurity.OwnerModified
  id: OwnerModified
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: OwnerModified
  fullName: System.Security.AccessControl.ObjectSecurity.OwnerModified
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OwnerModified
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 385
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets a Boolean value that specifies whether the owner of the securable object has been modified.</p>\n"
  syntax:
    content: protected bool OwnerModified { get; set; }
    content.vb: Protected Property OwnerModified As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the owner of the securable object has been modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)
  fullName: System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleFactory
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 386
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified values.</p>\n"
  example:
  - 
  syntax:
    content: public abstract AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public MustOverride Function AccessRuleFactory(identityReference As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType) As AccessRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity to which the access rule applies.  It must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>true if this rule is inherited from a parent container.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>Specifies the inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>Specifies the valid access control type.</p>\n"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that this method creates.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  commentId: M:System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)
  fullName: System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleFactory
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 387
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified values.</p>\n"
  example:
  - 
  syntax:
    content: public abstract AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)
    content.vb: Public MustOverride Function AuditRuleFactory(identityReference As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags) As AuditRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity to which the audit rule applies.  It must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this rule is inherited from a parent container.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>Specifies the inheritance properties of the audit rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Specifies whether inherited audit rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "\n<p>Specifies the conditions for which the rule is audited.</p>\n"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref> object that this method creates.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  commentId: M:System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  id: GetGroup(System.Type)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: GetGroup(Type)
  fullName: System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGroup
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 388
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the primary group associated with the specified owner.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReference GetGroup(Type targetType)
    content.vb: Public Function GetGroup(targetType As Type) As IdentityReference
    parameters:
    - id: targetType
      type: System.Type
      description: "\n<p>The owner for which to get the primary group. </p>\n"
    return:
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The primary group associated with the specified owner.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  commentId: M:System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  id: GetOwner(System.Type)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: GetOwner(Type)
  fullName: System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOwner
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 389
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the owner associated with the specified primary group.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReference GetOwner(Type targetType)
    content.vb: Public Function GetOwner(targetType As Type) As IdentityReference
    parameters:
    - id: targetType
      type: System.Type
      description: "\n<p>The primary group for which to get the owner.</p>\n"
    return:
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The owner associated with the specified group.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>targetType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>targetType</em> is not an <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> type. </p>\n"
  - type: System.Security.Principal.IdentityNotMappedException
    commentId: T:System.Security.Principal.IdentityNotMappedException
    description: "\n<p>Some or all identity references could not be translated. </p>\n"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "\n<p>A Win32 error code was returned. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  commentId: M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  id: GetSecurityDescriptorBinaryForm
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: GetSecurityDescriptorBinaryForm()
  fullName: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSecurityDescriptorBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 390
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns an array of byte values that represents the security descriptor information for this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method returns the security descriptor information currently in memory. It does not retrieve information saved in permanent storage.</p>\n"
  syntax:
    content: public byte[] GetSecurityDescriptorBinaryForm()
    content.vb: Public Function GetSecurityDescriptorBinaryForm As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>An array of byte values that represents the security descriptor for this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. This method returns <strong>null</strong> if there is no security information in this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  commentId: M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  id: GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: GetSecurityDescriptorSddlForm(AccessControlSections)
  fullName: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSecurityDescriptorSddlForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 391
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public string GetSecurityDescriptorSddlForm(AccessControlSections includeSections)
    content.vb: Public Function GetSecurityDescriptorSddlForm(includeSections As AccessControlSections) As String
    parameters:
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "\n<p>Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</p>\n"
    return:
      type: System.String
      description: "\n<p>The SDDL representation of the specified sections of the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  commentId: M:System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  id: IsSddlConversionSupported
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: IsSddlConversionSupported()
  fullName: System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSddlConversionSupported
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 392
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns a Boolean value that specifies whether the security descriptor associated with this  <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object can be converted to the Security Descriptor Definition Language (SDDL) format.</p>\n"
  example:
  - 
  syntax:
    content: public static bool IsSddlConversionSupported()
    content.vb: Public Shared Function IsSddlConversionSupported As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the security descriptor associated with this  <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  id: ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ModifyAccess(AccessControlModification, AccessRule, out Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModifyAccess
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 393
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.</p>\n"
  example:
  - 
  syntax:
    content: protected abstract bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified)
    content.vb: Protected MustOverride Function ModifyAccess(modification As AccessControlModification, rule As AccessRule, ByRef modified As Boolean) As Boolean
    parameters:
    - id: modification
      type: System.Security.AccessControl.AccessControlModification
      description: "\n<p>The modification to apply to the DACL.</p>\n"
    - id: rule
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>The access rule to modify.</p>\n"
    - id: modified
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, ByRef System.Boolean)
  name.vb: ModifyAccess(AccessControlModification, AccessRule, ByRef Boolean)
- uid: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  id: ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ModifyAccessRule(AccessControlModification, AccessRule, out Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModifyAccessRule
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 394
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, out bool modified)
    content.vb: Public Overridable Function ModifyAccessRule(modification As AccessControlModification, rule As AccessRule, ByRef modified As Boolean) As Boolean
    parameters:
    - id: modification
      type: System.Security.AccessControl.AccessControlModification
      description: "\n<p>The modification to apply to the DACL.</p>\n"
    - id: rule
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>The access rule to modify.</p>\n"
    - id: modified
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, ByRef System.Boolean)
  name.vb: ModifyAccessRule(AccessControlModification, AccessRule, ByRef Boolean)
- uid: System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  id: ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ModifyAudit(AccessControlModification, AuditRule, out Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModifyAudit
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 395
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Applies the specified modification to the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: protected abstract bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified)
    content.vb: Protected MustOverride Function ModifyAudit(modification As AccessControlModification, rule As AuditRule, ByRef modified As Boolean) As Boolean
    parameters:
    - id: modification
      type: System.Security.AccessControl.AccessControlModification
      description: "\n<p>The modification to apply to the SACL.</p>\n"
    - id: rule
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>The audit rule to modify.</p>\n"
    - id: modified
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, ByRef System.Boolean)
  name.vb: ModifyAudit(AccessControlModification, AuditRule, ByRef Boolean)
- uid: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  id: ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ModifyAuditRule(AccessControlModification, AuditRule, out Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModifyAuditRule
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 396
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Applies the specified modification to the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, out bool modified)
    content.vb: Public Overridable Function ModifyAuditRule(modification As AccessControlModification, rule As AuditRule, ByRef modified As Boolean) As Boolean
    parameters:
    - id: modification
      type: System.Security.AccessControl.AccessControlModification
      description: "\n<p>The modification to apply to the SACL.</p>\n"
    - id: rule
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>The audit rule to modify.</p>\n"
    - id: modified
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, ByRef System.Boolean)
  name.vb: ModifyAuditRule(AccessControlModification, AuditRule, ByRef Boolean)
- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  commentId: M:System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  id: Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: Persist(Boolean, String, AccessControlSections)
  fullName: System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean, System.String, System.Security.AccessControl.AccessControlSections)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Persist
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 397
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Saves the specified sections of the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object to permanent storage. We recommend that the values of the <em>includeSections</em> parameters passed to the constructor and persist methods be identical. For more information, see Remarks.</p>\n"
  remarks: "\n<p>When persisting a <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, if the value of the <em>includeSections</em> parameter passed to the <xref href=\"System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method is not identical to the value of the <em>includeSections</em> parameter passed to the constructor used to create that <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, sections of the persisted <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object can contain unpredictable values. For example, if a constructor is called with an <em>includeSections</em> value of <xref href=\"System.Security.AccessControl.AccessControlSections.Access\" data-throw-if-not-resolved=\"false\"></xref>, and later a <xref href=\"System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method is called on that object with an <em>includeSections</em> value of <xref href=\"System.Security.AccessControl.AccessControlSections.All\" data-throw-if-not-resolved=\"false\"></xref>, the resulting persisted <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object will contain unpredictable values for its audit rules, group, and owner.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Persist(bool enableOwnershipPrivilege, string name, AccessControlSections includeSections)
    content.vb: Protected Overridable Sub Persist(enableOwnershipPrivilege As Boolean, name As String, includeSections As AccessControlSections)
    parameters:
    - id: enableOwnershipPrivilege
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to enable the privilege that allows the caller to take ownership of the object.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name used to retrieve the persisted information.</p>\n"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlSections\" data-throw-if-not-resolved=\"false\"></xref> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  commentId: M:System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  id: Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: Persist(SafeHandle, AccessControlSections)
  fullName: System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle, System.Security.AccessControl.AccessControlSections)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Persist
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 398
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Saves the specified sections of the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object to permanent storage. We recommend that the values of the <em>includeSections</em> parameters passed to the constructor and persist methods be identical. For more information, see Remarks.</p>\n"
  remarks: "\n<p>When persisting a <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, if the value of the <em>includeSections</em> parameter passed to the <xref href=\"System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method is not identical to the value of the <em>includeSections</em> parameter passed to the constructor used to create that <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, sections of the persisted <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object can contain unpredictable values. For example, if a constructor is called with an <em>includeSections</em> value of <xref href=\"System.Security.AccessControl.AccessControlSections.Access\" data-throw-if-not-resolved=\"false\"></xref>, and later a <xref href=\"System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method is called on that object with an <em>includeSections</em> value of <xref href=\"System.Security.AccessControl.AccessControlSections.All\" data-throw-if-not-resolved=\"false\"></xref>, the resulting persisted <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object will contain unpredictable values for its audit rules, group, and owner.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Persist(SafeHandle handle, AccessControlSections includeSections)
    content.vb: Protected Overridable Sub Persist(handle As SafeHandle, includeSections As AccessControlSections)
    parameters:
    - id: handle
      type: System.Runtime.InteropServices.SafeHandle
      description: "\n<p>The handle used to retrieve the persisted information.</p>\n"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlSections\" data-throw-if-not-resolved=\"false\"></xref> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  commentId: M:System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  id: Persist(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: Persist(String, AccessControlSections)
  fullName: System.Security.AccessControl.ObjectSecurity.Persist(System.String, System.Security.AccessControl.AccessControlSections)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Persist
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 399
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Saves the specified sections of the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object to permanent storage. We recommend that the values of the <em>includeSections</em> parameters passed to the constructor and persist methods be identical. For more information, see Remarks.</p>\n"
  remarks: "\n<p>When persisting a <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, if the value of the <em>includeSections</em> parameter passed to the <xref href=\"System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method is not identical to the value of the <em>includeSections</em> parameter passed to the constructor used to create that <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, sections of the persisted <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object can contain unpredictable values. For example, if a constructor is called with an <em>includeSections</em> value of <xref href=\"System.Security.AccessControl.AccessControlSections.Access\" data-throw-if-not-resolved=\"false\"></xref>, and later a <xref href=\"System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method is called on that object with an <em>includeSections</em> value of <xref href=\"System.Security.AccessControl.AccessControlSections.All\" data-throw-if-not-resolved=\"false\"></xref>, the resulting persisted <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object will contain unpredictable values for its audit rules, group, and owner.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Persist(string name, AccessControlSections includeSections)
    content.vb: Protected Overridable Sub Persist(name As String, includeSections As AccessControlSections)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name used to retrieve the persisted information.</p>\n"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlSections\" data-throw-if-not-resolved=\"false\"></xref> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  id: PurgeAccessRules(System.Security.Principal.IdentityReference)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: PurgeAccessRules(IdentityReference)
  fullName: System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PurgeAccessRules
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 400
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access rules associated with the specified <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void PurgeAccessRules(IdentityReference identity)
    content.vb: Public Overridable Sub PurgeAccessRules(identity As IdentityReference)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> for which to remove all access rules.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>All access rules are not in canonical order.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  id: PurgeAuditRules(System.Security.Principal.IdentityReference)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: PurgeAuditRules(IdentityReference)
  fullName: System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PurgeAuditRules
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 401
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all audit rules associated with the specified <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void PurgeAuditRules(IdentityReference identity)
    content.vb: Public Overridable Sub PurgeAuditRules(identity As IdentityReference)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> for which to remove all audit rules.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>All audit rules are not in canonical order.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.AccessControl.ObjectSecurity.ReadLock
  commentId: M:System.Security.AccessControl.ObjectSecurity.ReadLock
  id: ReadLock
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ReadLock()
  fullName: System.Security.AccessControl.ObjectSecurity.ReadLock()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadLock
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 402
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Locks this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object for read access.</p>\n"
  example:
  - 
  syntax:
    content: protected void ReadLock()
    content.vb: Protected Sub ReadLock
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.ReadUnlock
  commentId: M:System.Security.AccessControl.ObjectSecurity.ReadUnlock
  id: ReadUnlock
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: ReadUnlock()
  fullName: System.Security.AccessControl.ObjectSecurity.ReadUnlock()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadUnlock
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 403
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Unlocks this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object for read access.</p>\n"
  example:
  - 
  syntax:
    content: protected void ReadUnlock()
    content.vb: Protected Sub ReadUnlock
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  id: SetAccessRuleProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetAccessRuleProtection(Boolean, Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAccessRuleProtection
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 404
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets or removes protection of the access rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Protected access rules cannot be modified by parent objects through inheritance.</p>\n"
  example:
  - 
  syntax:
    content: public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance)
    content.vb: Public Sub SetAccessRuleProtection(isProtected As Boolean, preserveInheritance As Boolean)
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to protect the access rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object from inheritance; <strong>false</strong> to allow inheritance.</p>\n"
    - id: preserveInheritance
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to preserve inherited access rules; <strong>false</strong> to remove inherited access rules. This parameter is ignored if <em>isProtected</em> is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method attempts to remove inherited rules from a non-canonical Discretionary Access Control List (DACL).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  id: SetAuditRuleProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetAuditRuleProtection(Boolean, Boolean)
  fullName: System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAuditRuleProtection
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 405
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets or removes protection of the audit rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Protected audit rules cannot be modified by parent objects through inheritance.</p>\n"
  example:
  - 
  syntax:
    content: public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance)
    content.vb: Public Sub SetAuditRuleProtection(isProtected As Boolean, preserveInheritance As Boolean)
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to protect the audit rules associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object from inheritance; <strong>false</strong> to allow inheritance.</p>\n"
    - id: preserveInheritance
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to preserve inherited audit rules; <strong>false</strong> to remove inherited audit rules. This parameter is ignored if <em>isProtected</em> is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method attempts to remove inherited rules from a non-canonical System Access Control List (SACL).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  id: SetGroup(System.Security.Principal.IdentityReference)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetGroup(IdentityReference)
  fullName: System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetGroup
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 406
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the primary group for the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public void SetGroup(IdentityReference identity)
    content.vb: Public Sub SetGroup(identity As IdentityReference)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The primary group to set.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  id: SetOwner(System.Security.Principal.IdentityReference)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetOwner(IdentityReference)
  fullName: System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetOwner
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 407
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the owner for the security descriptor associated with this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public void SetOwner(IdentityReference identity)
    content.vb: Public Sub SetOwner(identity As IdentityReference)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The owner to set.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  id: SetSecurityDescriptorBinaryForm(System.Byte[])
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetSecurityDescriptorBinaryForm(Byte[])
  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSecurityDescriptorBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 408
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the security descriptor for this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object from the specified array of byte values.</p>\n"
  remarks: "\n<p>If the security descriptor represented by the binary data contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public void SetSecurityDescriptorBinaryForm(byte[] binaryForm)
    content.vb: Public Sub SetSecurityDescriptorBinaryForm(binaryForm As Byte())
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The array of bytes from which to set the security descriptor.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte())
  name.vb: SetSecurityDescriptorBinaryForm(Byte())
- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  id: SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)
  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[], System.Security.AccessControl.AccessControlSections)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSecurityDescriptorBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 409
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the specified sections of the security descriptor for this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object from the specified array of byte values.</p>\n"
  remarks: "\n<p>If the security descriptor represented by the binary data contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, AccessControlSections includeSections)
    content.vb: Public Sub SetSecurityDescriptorBinaryForm(binaryForm As Byte(), includeSections As AccessControlSections)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The array of bytes from which to set the security descriptor.</p>\n"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "\n<p>The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte(), System.Security.AccessControl.AccessControlSections)
  name.vb: SetSecurityDescriptorBinaryForm(Byte(), AccessControlSections)
- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  id: SetSecurityDescriptorSddlForm(System.String)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetSecurityDescriptorSddlForm(String)
  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSecurityDescriptorSddlForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 410
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the security descriptor for this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object from the specified Security Descriptor Definition Language (SDDL) string.</p>\n"
  remarks: "\n<p>If the security descriptor represented by the SDDL string contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public void SetSecurityDescriptorSddlForm(string sddlForm)
    content.vb: Public Sub SetSecurityDescriptorSddlForm(sddlForm As String)
    parameters:
    - id: sddlForm
      type: System.String
      description: "\n<p>The SDDL string from which to set the security descriptor.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  id: SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: SetSecurityDescriptorSddlForm(String, AccessControlSections)
  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String, System.Security.AccessControl.AccessControlSections)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSecurityDescriptorSddlForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 411
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the specified sections of the security descriptor for this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object from the specified Security Descriptor Definition Language (SDDL) string.</p>\n"
  remarks: "\n<p>If the security descriptor represented by the SDDL string contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public void SetSecurityDescriptorSddlForm(string sddlForm, AccessControlSections includeSections)
    content.vb: Public Sub SetSecurityDescriptorSddlForm(sddlForm As String, includeSections As AccessControlSections)
    parameters:
    - id: sddlForm
      type: System.String
      description: "\n<p>The SDDL string from which to set the security descriptor.</p>\n"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "\n<p>The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectSecurity.WriteLock
  commentId: M:System.Security.AccessControl.ObjectSecurity.WriteLock
  id: WriteLock
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: WriteLock()
  fullName: System.Security.AccessControl.ObjectSecurity.WriteLock()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLock
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 412
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Locks this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object for write access.</p>\n"
  example:
  - 
  syntax:
    content: protected void WriteLock()
    content.vb: Protected Sub WriteLock
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectSecurity.WriteUnlock
  commentId: M:System.Security.AccessControl.ObjectSecurity.WriteUnlock
  id: WriteUnlock
  parent: System.Security.AccessControl.ObjectSecurity
  langs:
  - csharp
  - vb
  name: WriteUnlock()
  fullName: System.Security.AccessControl.ObjectSecurity.WriteUnlock()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteUnlock
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 413
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Unlocks this <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> object for write access.</p>\n"
  example:
  - "\n<p></p>\n"
  syntax:
    content: protected void WriteUnlock()
    content.vb: Protected Sub WriteUnlock
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.CommonSecurityDescriptor
  parent: System.Security.AccessControl
  isExternal: false
  name: CommonSecurityDescriptor
  fullName: System.Security.AccessControl.CommonSecurityDescriptor
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlModification
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlModification
  fullName: System.Security.AccessControl.AccessControlModification
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.Principal.IdentityNotMappedException
  isExternal: false
  name: IdentityNotMappedException
  fullName: System.Security.Principal.IdentityNotMappedException
- uid: System.SystemException
  parent: System
  isExternal: true
  name: SystemException
  fullName: System.SystemException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
