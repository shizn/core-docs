items:
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  id: IReadOnlyDictionary`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  - System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  - System.Collections.Generic.IReadOnlyDictionary`2.Keys
  - System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.IReadOnlyDictionary`2.Values
  langs:
  - csharp
  - vb
  name: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IReadOnlyDictionary
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2410
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a generic read-only collection of key/value pairs.</p>\n"
  remarks: "\n<p>Each element is a key/value pair that is stored in a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Each pair must have a unique key. Implementations can vary in whether they allow you to specify a key that is <strong>null</strong>. The value can be <strong>null</strong> and does not have to be unique. The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>For Each</strong> in Visual Basic, <strong>for each</strong> in C++) requires the type of each element in the collection. Because each element of the <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref>, as the following example illustrates.</p>Generic.IDictionary#11<p>The <strong>foreach</strong> statement is a wrapper around the enumerator; it allows only reading from the collection, not writing to the collection. </p>"
  syntax:
    content: 'public interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable'
    content.vb: >-
      Public Interface IReadOnlyDictionary(Of TKey, TValue)
          Inherits IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of keys in the read-only dictionary. </p>\n"
    - id: TValue
      description: "\n<p>The type of values in the read-only dictionary. </p>\n"
  inheritedMembers:
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2412
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the element that has the specified key in the read-only dictionary.</p>\n"
  remarks: "\n<p>This property lets you access a specific element in the collection by using the following syntax: <code>myCollection[key]</code> (<code>myCollection(key)</code> in Visual Basic).</p>\n<p>Implementations can vary in how they determine the equality of objects: for example, the class that implements <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> might use the <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property, or it might implement the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Implementations can vary in whether they allow <em>key</em> to be <strong>null</strong>.</p>\n"
  syntax:
    content: TValue this[TKey key] { get; }
    content.vb: ReadOnly Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The element that has the specified key in the read-only dictionary.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>The property is retrieved and <em>key</em> is not found. </p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  commentId: P:System.Collections.Generic.IReadOnlyDictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2413
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets an enumerable collection that contains the keys in the read-only dictionary. </p>\n"
  remarks: "\n<p>The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the keys are in the same order as the corresponding values in the enumerable collection that is returned by the <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: IEnumerable<TKey> Keys { get; }
    content.vb: ReadOnly Property Keys As IEnumerable(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TKey}}
      description: "\n<p>An enumerable collection that contains the keys in the read-only dictionary.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Values
  commentId: P:System.Collections.Generic.IReadOnlyDictionary`2.Values
  id: Values
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2414
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets an enumerable collection that contains the values in the read-only dictionary.</p>\n"
  remarks: "\n<p>The order of the values in the enumerable collection is unspecified, but the implementation must guarantee that the values are in the same order as the corresponding keys in the enumerable collection that is returned by the <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: IEnumerable<TValue> Values { get; }
    content.vb: ReadOnly Property Values As IEnumerable(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
      description: "\n<p>An enumerable collection that contains the values in the read-only dictionary.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2415
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the read-only dictionary contains an element that has the specified key.</p>\n"
  remarks: "\n<p>Implementations can vary in how they determine the equality of objects; for example, the class that implements <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> might use the <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property, or it might implement the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Implementations can vary in whether they allow <em>key</em> to be <strong>null</strong>.</p>\n"
  syntax:
    content: bool ContainsKey(TKey key)
    content.vb: Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the read-only dictionary contains an element that has the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2416
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the value that is associated with the specified key.</p>\n"
  remarks: "\n<p>This method combines the functionality of the <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the key is not found, the <em>value</em> parameter gets the appropriate default value for the type <em>TValue</em>: for example, 0 (zero) for integer types, <strong>false</strong> for Boolean types, and <strong>null</strong> for reference types.</p>\n"
  syntax:
    content: bool TryGetValue(TKey key, out TValue value)
    content.vb: Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <em>value</em> parameter. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object that implements the <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface contains an element that has the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: Generic.IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: Generic.IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
