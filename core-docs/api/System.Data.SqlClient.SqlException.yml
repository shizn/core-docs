items:
- uid: System.Data.SqlClient.SqlException
  commentId: T:System.Data.SqlClient.SqlException
  id: SqlException
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlException.Class
  - System.Data.SqlClient.SqlException.ClientConnectionId
  - System.Data.SqlClient.SqlException.Errors
  - System.Data.SqlClient.SqlException.LineNumber
  - System.Data.SqlClient.SqlException.Number
  - System.Data.SqlClient.SqlException.Procedure
  - System.Data.SqlClient.SqlException.Server
  - System.Data.SqlClient.SqlException.Source
  - System.Data.SqlClient.SqlException.State
  - System.Data.SqlClient.SqlException.ToString
  langs:
  - csharp
  - vb
  name: SqlException
  fullName: System.Data.SqlClient.SqlException
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlException
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 17
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.</p>\n"
  remarks: "\n<p>This class is created whenever the .NET Framework Data Provider for SQL Server encounters an error generated from the server. (Client side errors are thrown as standard common language runtime exceptions.) <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> always contains at least one instance of <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>. However, the user can reopen the connection and continue. In both cases, a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is generated by the method executing the command.</p>\n<p>For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of SQL Server Books Online. The <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> class maps to SQL Server severity.</p>\n<p>The following is general information on handling exceptions. Your code should catch exceptions to prevent the application from crashing and to allow displaying a relevant error message to the user.  You can use database transactions to ensure that the data is consistent regardless of what happens in the client application (including a crash). Features like System.Transaction.TransactionScope or the BeginTransaction method (in System.Data.OleDb.OleDbConnection, System.Data.ODBC.ODBCConnection, and System.Data.SqlClient.SqlConnection) ensure consistent data regardless of exceptions raised by a provider. Transactions can fail, so catch failures and retry the transaction.</p>\n<p>The exception class of a .Net Framework data provider reports provider-specific errors. For example System.Data.Odbc has OdbcException, System.Data.OleDb has OleDbException, and System.Data.SqlClient has SqlException. For the best level of error detail, catch these exceptions and use the members of these exception classes to get details of the error.</p>\n<p>In addition to the provider-specific errors, .NET Framework data provider types can raise .NET Framework exceptions such as System.OutOfMemoryException and System.Threading.ThreadAbortException. Recovery from these exceptions may not be possible.</p>\n<p>Bad input can cause a .NET Framework data provider type to raise an exception such as System.ArgumentException or System.IndexOutOfRangeException.  Calling a method at the wrong time can raise System.InvalidOperationException.</p>\n<p>So, in general, write an exception handler that catches the provider specific exception as well as exceptions from the common language runtime.  These can be layered as follows:</p>\n<pre><code>Try {\n// code here\n}\ncatch (SqlException odbcEx) {\n// Handle more specific SqlException exception here.\n}\ncatch (Exception ex) {\n// Handle generic ones here.\n}</code></pre>\n<p>Or:</p>\n<pre><code>Try {\n// code here\n}\ncatch (Exception ex) {\nif (ex is SqlException) {\n// Handle more specific SqlException exception here.\n}\nElse {\n// Handle generic ones here.\n}\n}</code></pre>\n<p>It is also possible for a .NET Framework data provider method call to fail on a thread pool thread with no user code on the stack. In this case, and when using asynchronous method calls, you must register the <xref href=\"System.AppDomain.UnhandledException\" data-throw-if-not-resolved=\"false\"></xref> event to handle those exceptions and avoid application crash.</p>\n"
  example:
  - "\n<p>The following example generates a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> and then displays the exception.</p>Classic WebData SqlException Example#1"
  syntax:
    content: 'public sealed class SqlException : DbException'
    content.vb: >-
      Public NotInheritable Class SqlException
          Inherits DbException
  seealso:
  - type: System.Data.SqlClient.SqlError
    commentId: T:System.Data.SqlClient.SqlError
  - type: System.Data.SqlClient.SqlErrorCollection
    commentId: T:System.Data.SqlClient.SqlErrorCollection
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlException.Class
  commentId: P:System.Data.SqlClient.SqlException.Class
  id: Class
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: Class
  fullName: System.Data.SqlClient.SqlException.Class
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Class
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 54
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.</p>\n"
  remarks: "\n<p>Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>. However, the user can reopen the connection and continue. In both cases, a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is generated by the method executing the command.</p>\n<p>For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of the SQL Server documentation.</p>\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.Class\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public byte Class { get; }
    content.vb: Public ReadOnly Property Class As Byte
    parameters: []
    return:
      type: System.Byte
  seealso:
  - type: System.Data.SqlClient.SqlException.Number
    commentId: P:System.Data.SqlClient.SqlException.Number
  - type: System.Data.SqlClient.SqlException.Source
    commentId: P:System.Data.SqlClient.SqlException.Source
  - type: System.Data.SqlClient.SqlException.State
    commentId: P:System.Data.SqlClient.SqlException.State
  - type: System.Data.SqlClient.SqlException.Server
    commentId: P:System.Data.SqlClient.SqlException.Server
  - type: System.Data.SqlClient.SqlException.Procedure
    commentId: P:System.Data.SqlClient.SqlException.Procedure
  - type: System.Data.SqlClient.SqlException.LineNumber
    commentId: P:System.Data.SqlClient.SqlException.LineNumber
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  commentId: P:System.Data.SqlClient.SqlException.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientConnectionId
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 45
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Represents the client connection ID. For more information, see Data Tracing in ADO.NET.</p>\n"
  remarks: "\n<p>For a code sample, see <xref href=\"System.Data.SqlClient.SqlException.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public Guid ClientConnectionId { get; }
    content.vb: Public ReadOnly Property ClientConnectionId As Guid
    parameters: []
    return:
      type: System.Guid
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.Errors
  commentId: P:System.Data.SqlClient.SqlException.Errors
  id: Errors
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: Errors
  fullName: System.Data.SqlClient.SqlException.Errors
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Errors
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 33
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a collection of one or more <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> class always contains at least one instance of the <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>This is a wrapper for <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref>. For more information on SQL Server engine errors, see SQL Server Books Online.</p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlError Example#1"
  syntax:
    content: public SqlErrorCollection Errors { get; }
    content.vb: Public ReadOnly Property Errors As SqlErrorCollection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlErrorCollection
  seealso:
  - type: System.Data.SqlClient.SqlErrorCollection
    commentId: T:System.Data.SqlClient.SqlErrorCollection
  - type: System.Data.SqlClient.SqlError
    commentId: T:System.Data.SqlClient.SqlError
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.LineNumber
  commentId: P:System.Data.SqlClient.SqlException.LineNumber
  id: LineNumber
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LineNumber
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 59
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.</p>\n"
  remarks: "\n<p>The line numbering starts at 1; if 0 is returned, the line number is not applicable.</p>\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.LineNumber\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public int LineNumber { get; }
    content.vb: Public ReadOnly Property LineNumber As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Data.SqlClient.SqlException.Number
    commentId: P:System.Data.SqlClient.SqlException.Number
  - type: System.Data.SqlClient.SqlException.Source
    commentId: P:System.Data.SqlClient.SqlException.Source
  - type: System.Data.SqlClient.SqlException.State
    commentId: P:System.Data.SqlClient.SqlException.State
  - type: System.Data.SqlClient.SqlException.Class
    commentId: P:System.Data.SqlClient.SqlException.Class
  - type: System.Data.SqlClient.SqlException.Server
    commentId: P:System.Data.SqlClient.SqlException.Server
  - type: System.Data.SqlClient.SqlException.Procedure
    commentId: P:System.Data.SqlClient.SqlException.Procedure
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.Number
  commentId: P:System.Data.SqlClient.SqlException.Number
  id: Number
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: Number
  fullName: System.Data.SqlClient.SqlException.Number
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Number
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 64
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a number that identifies the type of error.</p>\n"
  remarks: "\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.Number\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property. For more information on SQL Server engine errors, see SQL Server Books Online.</p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public int Number { get; }
    content.vb: Public ReadOnly Property Number As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Data.SqlClient.SqlException.State
    commentId: P:System.Data.SqlClient.SqlException.State
  - type: System.Data.SqlClient.SqlException.Class
    commentId: P:System.Data.SqlClient.SqlException.Class
  - type: System.Data.SqlClient.SqlException.Source
    commentId: P:System.Data.SqlClient.SqlException.Source
  - type: System.Data.SqlClient.SqlException.Server
    commentId: P:System.Data.SqlClient.SqlException.Server
  - type: System.Data.SqlClient.SqlException.Procedure
    commentId: P:System.Data.SqlClient.SqlException.Procedure
  - type: System.Data.SqlClient.SqlException.LineNumber
    commentId: P:System.Data.SqlClient.SqlException.LineNumber
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.Procedure
  commentId: P:System.Data.SqlClient.SqlException.Procedure
  id: Procedure
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Procedure
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 69
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</p>\n"
  remarks: "\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.Procedure\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public string Procedure { get; }
    content.vb: Public ReadOnly Property Procedure As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Data.SqlClient.SqlException.Number
    commentId: P:System.Data.SqlClient.SqlException.Number
  - type: System.Data.SqlClient.SqlException.State
    commentId: P:System.Data.SqlClient.SqlException.State
  - type: System.Data.SqlClient.SqlException.Class
    commentId: P:System.Data.SqlClient.SqlException.Class
  - type: System.Data.SqlClient.SqlException.Server
    commentId: P:System.Data.SqlClient.SqlException.Server
  - type: System.Data.SqlClient.SqlException.Source
    commentId: P:System.Data.SqlClient.SqlException.Source
  - type: System.Data.SqlClient.SqlException.LineNumber
    commentId: P:System.Data.SqlClient.SqlException.LineNumber
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.Server
  commentId: P:System.Data.SqlClient.SqlException.Server
  id: Server
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: Server
  fullName: System.Data.SqlClient.SqlException.Server
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Server
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 74
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the name of the computer that is running an instance of SQL Server that generated the error.</p>\n"
  remarks: "\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.Server\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public string Server { get; }
    content.vb: Public ReadOnly Property Server As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Data.SqlClient.SqlException.Number
    commentId: P:System.Data.SqlClient.SqlException.Number
  - type: System.Data.SqlClient.SqlException.State
    commentId: P:System.Data.SqlClient.SqlException.State
  - type: System.Data.SqlClient.SqlException.Source
    commentId: P:System.Data.SqlClient.SqlException.Source
  - type: System.Data.SqlClient.SqlException.Class
    commentId: P:System.Data.SqlClient.SqlException.Class
  - type: System.Data.SqlClient.SqlException.Procedure
    commentId: P:System.Data.SqlClient.SqlException.Procedure
  - type: System.Data.SqlClient.SqlException.LineNumber
    commentId: P:System.Data.SqlClient.SqlException.LineNumber
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.Source
  commentId: P:System.Data.SqlClient.SqlException.Source
  id: Source
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: Source
  fullName: System.Data.SqlClient.SqlException.Source
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Source
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 84
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the name of the provider that generated the error.</p>\n"
  remarks: "\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.Source\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public override string Source { get; }
    content.vb: Public Overrides ReadOnly Property Source As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Data.SqlClient.SqlException.Number
    commentId: P:System.Data.SqlClient.SqlException.Number
  - type: System.Data.SqlClient.SqlException.State
    commentId: P:System.Data.SqlClient.SqlException.State
  - type: System.Data.SqlClient.SqlException.Class
    commentId: P:System.Data.SqlClient.SqlException.Class
  - type: System.Data.SqlClient.SqlException.Server
    commentId: P:System.Data.SqlClient.SqlException.Server
  - type: System.Data.SqlClient.SqlException.Procedure
    commentId: P:System.Data.SqlClient.SqlException.Procedure
  - type: System.Data.SqlClient.SqlException.LineNumber
    commentId: P:System.Data.SqlClient.SqlException.LineNumber
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.State
  commentId: P:System.Data.SqlClient.SqlException.State
  id: State
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: State
  fullName: System.Data.SqlClient.SqlException.State
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: State
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 79
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a numeric error code from SQL Server that represents an error, warning or \"no data found\" message. For more information about how to decode these values, see SQL Server Books Online.</p>\n"
  remarks: "\n<p>This is a wrapper for the <xref href=\"System.Data.SqlClient.SqlError.State\" data-throw-if-not-resolved=\"false\"></xref> property of the first <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.Data.SqlClient.SqlException.Errors\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example displays each <xref href=\"System.Data.SqlClient.SqlError\" data-throw-if-not-resolved=\"false\"></xref> within the <xref href=\"System.Data.SqlClient.SqlErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>Classic WebData SqlException.State Example#1"
  syntax:
    content: public byte State { get; }
    content.vb: Public ReadOnly Property State As Byte
    parameters: []
    return:
      type: System.Byte
  seealso:
  - type: System.Data.SqlClient.SqlException.Number
    commentId: P:System.Data.SqlClient.SqlException.Number
  - type: System.Data.SqlClient.SqlException.Class
    commentId: P:System.Data.SqlClient.SqlException.Class
  - type: System.Data.SqlClient.SqlException.Source
    commentId: P:System.Data.SqlClient.SqlException.Source
  - type: System.Data.SqlClient.SqlException.Server
    commentId: P:System.Data.SqlClient.SqlException.Server
  - type: System.Data.SqlClient.SqlException.Procedure
    commentId: P:System.Data.SqlClient.SqlException.Procedure
  - type: System.Data.SqlClient.SqlException.LineNumber
    commentId: P:System.Data.SqlClient.SqlException.LineNumber
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlException.ToString
  commentId: M:System.Data.SqlClient.SqlException.ToString
  id: ToString
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlException.cs
    startLine: 89
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> object, and includes the client connection ID (for more information, see <xref href=\"System.Data.SqlClient.SqlException.ClientConnectionId\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - "\n<p>The following C# example shows how a connection attempt to a valid server but non-existent database causes a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref>, which includes the client connection ID:</p>\n<pre><code>using System.Data.SqlClient;\nusing System;\n\npublic class A {\npublic static void Main() {\nSqlConnection connection = new SqlConnection();\nconnection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\";\ntry {\n connection.Open();\n}\ncatch (SqlException p) {\n Console.WriteLine(\"{0}\", p.ClientConnectionId);\n Console.WriteLine(\"{0}\", p.ToString());\n}\nconnection.Close();\n}\n}</code></pre>\n"
  - "\n<p>The following Visual Basic sample is functionally equivalent to the previous (C#) sample:</p>\n<pre><code>Imports System.Data.SqlClient\nImports System\n\nModule Module1\n\nSub Main()\nDim connection As New SqlConnection()\nconnection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\"\nTry\n    connection.Open()\nCatch p As SqlException\n    Console.WriteLine(\"{0}\", p.ClientConnectionId)\n    Console.WriteLine(\"{0}\", p.ToString())\nEnd Try\nconnection.Close()\nEnd Sub\n\nEnd Module</code></pre>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlErrorCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlErrorCollection
  fullName: System.Data.SqlClient.SqlErrorCollection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
