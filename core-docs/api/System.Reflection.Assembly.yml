items:
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  id: Assembly
  parent: System.Reflection
  children:
  - System.Reflection.Assembly.CustomAttributes
  - System.Reflection.Assembly.DefinedTypes
  - System.Reflection.Assembly.Equals(System.Object)
  - System.Reflection.Assembly.ExportedTypes
  - System.Reflection.Assembly.FullName
  - System.Reflection.Assembly.GetHashCode
  - System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  - System.Reflection.Assembly.GetManifestResourceNames
  - System.Reflection.Assembly.GetManifestResourceStream(System.String)
  - System.Reflection.Assembly.GetName
  - System.Reflection.Assembly.GetType(System.String)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Assembly.IsDynamic
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  - System.Reflection.Assembly.ManifestModule
  - System.Reflection.Assembly.Modules
  - System.Reflection.Assembly.ToString
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.Assembly
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 49
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.</p>\n<p>To get an array of <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref href=\"System.AppDomain.GetAssemblies\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To load assemblies dynamically, the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> class provides the following static methods (<strong>Shared</strong> methods in Visual Basic). Assemblies are loaded into the application domain where the load operation occurs.</p>\n<ul><li>\n<p>The recommended way to load assemblies is to use the <see cref=\"Overload:System.AppDomain.Load\"></see> method, which identifies the assembly to be loaded by its display name (for example, \"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). The search for the assembly follows the rules described in How the Runtime Locates Assemblies.</p>\n</li><li>\n<p>The <see cref=\"Overload:System.Reflection.Assembly.ReflectionOnlyLoad\"></see> and <xref href=\"System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.</p>\n</li><li>\n<p>The <see cref=\"Overload:System.Reflection.Assembly.LoadFile\"></see> and <see cref=\"Overload:System.Reflection.Assembly.LoadFrom\"></see> methods are provided for rare scenarios in which an assembly must be identified by path. </p>\n</li></ul>\n<p>To get an <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> object for the currently executing assembly, use the <xref href=\"System.Reflection.Assembly.GetExecutingAssembly\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Many members of the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> class provide information about an assembly. For example:</p>\n<ul><li>\n<p>The <xref href=\"System.Reflection.Assembly.GetName\" data-throw-if-not-resolved=\"false\"></xref> method returns an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object that provides access to the parts of the assembly display name. </p>\n</li><li>\n<p>The <see cref=\"Overload:System.Reflection.Assembly.GetCustomAttributes\"></see> method lists the attributes applied to the assembly. </p>\n</li><li>\n<p>The <see cref=\"Overload:System.Reflection.Assembly.GetFiles\"></see> method provides access to the files in the assembly manifest. </p>\n</li><li>\n<p>The <xref href=\"System.Reflection.Assembly.GetManifestResourceNames\" data-throw-if-not-resolved=\"false\"></xref> method provides the names of the resources in the assembly manifest.</p>\n</li></ul>\n<p>The <xref href=\"System.Reflection.Assembly.GetTypes\" data-throw-if-not-resolved=\"false\"></xref> method lists all the types in the assembly. The <xref href=\"System.Reflection.Assembly.GetExportedTypes\" data-throw-if-not-resolved=\"false\"></xref> method lists the types that are visible to callers outside the assembly. The <see cref=\"Overload:System.Reflection.Assembly.GetType\"></see> method can be used to search for a particular type in the assembly. The <see cref=\"Overload:System.Reflection.Assembly.CreateInstance\"></see> method can be used to search for and create instances of types in the assembly. </p>\n<p>For more information on assemblies, see the \"Application Domains and Assemblies\" section in the Application Domains topic. </p>\n"
  example:
  - "\n<p>The following code example shows how to obtain the currently executing assembly, create an instance of a type contained in that assembly, and invoke one of the type's methods with late binding. For this purpose, the code example defines a class named <code>Example</code>, with a method named <code>SampleMethod</code>. The constructor of the class accepts an integer, which is used to compute the return value of the method.</p>\n<p>The code example also demonstrates the use of the <xref href=\"System.Reflection.Assembly.GetName\" data-throw-if-not-resolved=\"false\"></xref> method to obtain an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to parse the full name of the assembly. The example displays the version number of the assembly, the <xref href=\"System.Reflection.Assembly.CodeBase\" data-throw-if-not-resolved=\"false\"></xref> property, and the <xref href=\"System.Reflection.Assembly.EntryPoint\" data-throw-if-not-resolved=\"false\"></xref> property. </p>AssemblyClass#1"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_Assembly))]

      [ComVisible(true)]

      [PermissionSet(SecurityAction.InheritanceDemand, Unrestricted = true)]

      public abstract class Assembly : _Assembly, IEvidenceFactory, ICustomAttributeProvider, ISerializable
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_Assembly))>

      <ComVisible(True)>

      <PermissionSet(SecurityAction.InheritanceDemand, Unrestricted:=True)>

      Public MustInherit Class Assembly
          Implements _Assembly, IEvidenceFactory, ICustomAttributeProvider, ISerializable
  seealso:
  - type: System.AppDomain
    commentId: T:System.AppDomain
  - type: System.Reflection.AssemblyName
    commentId: T:System.Reflection.AssemblyName
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.Assembly.CustomAttributes
  commentId: P:System.Reflection.Assembly.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: CustomAttributes
  fullName: System.Reflection.Assembly.CustomAttributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributes
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 833
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection that contains this assembly's custom attributes.</p>\n"
  syntax:
    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.DefinedTypes
  commentId: P:System.Reflection.Assembly.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: DefinedTypes
  fullName: System.Reflection.Assembly.DefinedTypes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefinedTypes
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 702
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the types defined in this assembly.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Assembly.DefinedTypes\" data-throw-if-not-resolved=\"false\"></xref> property is comparable to the <xref href=\"System.Reflection.Assembly.GetTypes\" data-throw-if-not-resolved=\"false\"></xref> method, except that the <xref href=\"System.Reflection.Assembly.DefinedTypes\" data-throw-if-not-resolved=\"false\"></xref> property returns a collection of <xref href=\"System.Reflection.TypeInfo\" data-throw-if-not-resolved=\"false\"></xref> objects, and the <xref href=\"System.Reflection.Assembly.GetTypes\" data-throw-if-not-resolved=\"false\"></xref> method returns an array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects.  </p>\n<p>The returned array includes nested types. </p>\n"
  syntax:
    content: public virtual IEnumerable<TypeInfo> DefinedTypes { get; }
    content.vb: Public Overridable ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  seealso:
  - type: System.Reflection.Assembly.GetTypes
    commentId: M:System.Reflection.Assembly.GetTypes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.Assembly.ExportedTypes
  commentId: P:System.Reflection.Assembly.ExportedTypes
  id: ExportedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ExportedTypes
  fullName: System.Reflection.Assembly.ExportedTypes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ExportedTypes
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 689
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the public types defined in this assembly that are visible outside the assembly.</p>\n"
  syntax:
    content: public virtual IEnumerable<Type> ExportedTypes { get; }
    content.vb: Public Overridable ReadOnly Property ExportedTypes As IEnumerable(Of Type)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.FullName
  commentId: P:System.Reflection.Assembly.FullName
  id: FullName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Reflection.Assembly.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 651
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the display name of the assembly.</p>\n"
  remarks: "\n<p>See <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> for a description of the format of the display name of an assembly.</p>\n<p>Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref href=\"System.Reflection.AssemblyName.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, which parses it and populates the appropriate fields of the new <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the <xref href=\"System.Reflection.Assembly.FullName\" data-throw-if-not-resolved=\"false\"></xref> property, for compatibility reasons. See <xref href=\"System.Reflection.AssemblyName.ProcessorArchitecture\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example retrieves the display name of the currently executing assembly, and the display name of the assembly that contains the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type (<strong>int</strong> in C#, <strong>Integer</strong> in Visual Basic).</p>Assembly.FullName#1"
  syntax:
    content: public virtual string FullName { get; }
    content.vb: Public Overridable ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.IsDynamic
  commentId: P:System.Reflection.Assembly.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: IsDynamic
  fullName: System.Reflection.Assembly.IsDynamic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDynamic
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 1064
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</p>\n"
  remarks: "\n<p>Dynamic assemblies are represented by the derived class <xref href=\"System.Reflection.Emit.AssemblyBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When a dynamic assembly is saved to disk, the saved assembly is not dynamic. If the saved assembly is loaded into another application domain or process, the <xref href=\"System.Reflection.Assembly.IsDynamic\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>. </p>\n"
  syntax:
    content: public virtual bool IsDynamic { get; }
    content.vb: Public Overridable ReadOnly Property IsDynamic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.ManifestModule
  commentId: P:System.Reflection.Assembly.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ManifestModule
  fullName: System.Reflection.Assembly.ManifestModule
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ManifestModule
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 817
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the module that contains the manifest for the current assembly. </p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public virtual Module ManifestModule { get; }
    content.vb: "<ComVisible(False)>\nPublic Overridable ReadOnly Property ManifestModule As "
    parameters: []
    return:
      type: System.Reflection.Module
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.Modules
  commentId: P:System.Reflection.Assembly.Modules
  id: Modules
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Modules
  fullName: System.Reflection.Assembly.Modules
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Modules
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 934
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection that contains the modules in this assembly.</p>\n"
  syntax:
    content: public virtual IEnumerable<Module> Modules { get; }
    content.vb: Public Overridable ReadOnly Property Modules As IEnumerable(Of  Module)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.Assembly.Equals(System.Object)
  commentId: M:System.Reflection.Assembly.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Assembly.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 102
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Determines whether this assembly and the specified object are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Assembly.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method performs a test for reference equality to determine whether the current instance and <em>o</em> are equal. </p>\n"
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Assembly.GetHashCode
  commentId: M:System.Reflection.Assembly.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Assembly.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 107
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceInfo(String)
  fullName: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceInfo
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 1001
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns information about how the given resource has been persisted.</p>\n"
  remarks: "\n<p>Resource information is returned only if the resource is visible to the caller, or the caller has <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName)
    content.vb: Public Overridable Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo
    parameters:
    - id: resourceName
      type: System.String
    return:
      type: System.Reflection.ManifestResourceInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>resourceName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>resourceName</em> parameter is an empty string (\"\"). </p>\n"
  seealso:
  - type: System.Reflection.Assembly.GetManifestResourceNames
    commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetManifestResourceNames
  commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceNames()
  fullName: System.Reflection.Assembly.GetManifestResourceNames()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceNames
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 991
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the names of all the resources in this assembly.</p>\n"
  remarks: "\n<p>You can use each resource name in the array returned by this method as follows: </p>\n<ul><li>\n<p>You can pass the resource name to the <xref href=\"System.Reflection.Assembly.GetManifestResourceInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to get additional information about the resource. </p>\n</li><li>\n<p>If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref href=\"System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate the resource manager. </p>\n</li><li>\n<p>You can pass the resource name to the <xref href=\"System.Reflection.Assembly.GetManifestResourceStream(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object that you can then pass to the <xref href=\"System.Resources.ResourceReader.#ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n</li><li>\n<p>You can pass the resource name to the <xref href=\"System.Reflection.Assembly.GetManifestResourceStream(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object that you can then pass to the <xref href=\"System.Resources.ResourceSet.#ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n</li></ul>\n<p>Resource information is returned only if the resource is visible to the caller, or the caller has <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual string[] GetManifestResourceNames()
    content.vb: Public Overridable Function GetManifestResourceNames As String()
    return:
      type: System.String[]
  seealso:
  - type: System.Reflection.Assembly.GetManifestResourceStream(System.String)
    commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceStream(String)
  fullName: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceStream
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 756
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Loads the specified manifest resource from this assembly.</p>\n"
  remarks: "\n<p>A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=204554\">Microsoft .NET Framework Resource Basics</see> in the MSDN Library.</p>\n<p>Resource information is returned only if the resource is visible to the caller, or the caller has <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns <strong>null</strong> if a private resource in another assembly is accessed and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n<p>If the assembly manifest lists a resource file, <xref href=\"System.Reflection.Assembly.GetManifestResourceStream(System.String)\" data-throw-if-not-resolved=\"false\"></xref> returns a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> constructor causes an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public virtual Stream GetManifestResourceStream(string name)
    content.vb: Public Overridable Function GetManifestResourceStream(name As String) As Stream
    parameters:
    - id: name
      type: System.String
    return:
      type: System.IO.Stream
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>name</em> parameter is an empty string (\"\"). </p>\n"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>A file that was found could not be loaded. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>name</em> was not found. </p>\n"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<p>\n<em>name</em> is not a valid assembly. </p>\n"
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Resource length is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Reflection.Assembly.GetManifestResourceNames
    commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetName
  commentId: M:System.Reflection.Assembly.GetName
  id: GetName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetName()
  fullName: System.Reflection.Assembly.GetName()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetName
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 636
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> for this assembly.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual AssemblyName GetName()
    content.vb: >-
      <SecurityCritical>

      Public Overridable Function GetName As AssemblyName
    return:
      type: System.Reflection.AssemblyName
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetType(System.String)
  commentId: M:System.Reflection.Assembly.GetType(System.String)
  id: GetType(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetType(String)
  fullName: System.Reflection.Assembly.GetType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 674
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object with the specified name in the assembly instance.</p>\n"
  remarks: "\n<p>This method only searches the current assembly instance. The <em>name</em> parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref href=\"System.Type.GetType(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload, which can optionally include an assembly display name as part of the type name.</p>\n<p>If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see Type Forwarding in the Common Language Runtime.</p>\n"
  example:
  - "\n<p>The following example defines an abstract <code>MeansOfTransportation</code> class in the <code>Transportation</code> namespace. It calls the <xref href=\"System.Reflection.Assembly.GetType(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve its <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object, calls the <xref href=\"System.Type.GetProperties\" data-throw-if-not-resolved=\"false\"></xref> method to get an array of <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the type's properties, and then displays information on the type's abstract properties. Note that the call to the <xref href=\"System.Reflection.Assembly.GetType(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method uses the type's fully qualified name (that is, its namespace along with its type name). </p>System.Reflection.Assembly.GetType#1"
  syntax:
    content: public virtual Type GetType(string name)
    content.vb: Public Overridable Function GetType(name As String) As Type
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is invalid. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>name</em> requires a dependent assembly that could not be found. </p>\n"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\n<p>-or-</p>\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. </p>\n"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<p>\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. </p>\n<p>-or-</p>\n<p>\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 684
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</p>\n"
  remarks: "\n<p>This method only searches the current assembly instance. The <em>name</em> parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref href=\"System.Type.GetType(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload, which can optionally include an assembly display name as part of the type name.</p>\n<p>If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see Type Forwarding in the Common Language Runtime.</p>\n<p>The <em>throwOnError</em> parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> can be thrown even if <em>throwOnError</em> is <strong>false</strong>.</p>\n"
  syntax:
    content: public virtual Type GetType(string name, bool throwOnError, bool ignoreCase)
    content.vb: Public Overridable Function GetType(name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: name
      type: System.String
    - id: throwOnError
      type: System.Boolean
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is invalid.</p>\n<p>-or- </p>\n<p>The length of <em>name</em> exceeds 1024 characters. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>name</em> requires a dependent assembly that could not be found. </p>\n"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<p>\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\n<p>-or-</p>\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. </p>\n"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<p>\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. </p>\n<p>-or-</p>\n<p>\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  id: Load(System.Reflection.AssemblyName)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Load(AssemblyName)
  fullName: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Load
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 315
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.FileLoadException\" data-throw-if-not-resolved=\"false\"></xref> is thrown if <em>assemblyRef</em> specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name. </p>\n<p>Do not use an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> with only the <xref href=\"System.Reflection.AssemblyName.CodeBase\" data-throw-if-not-resolved=\"false\"></xref> property set. The <xref href=\"System.Reflection.AssemblyName.CodeBase\" data-throw-if-not-resolved=\"false\"></xref> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref href=\"System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref href=\"System.Reflection.Assembly.LoadFrom(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload or Best Practices for Assembly Loading.</p>\n<p>Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows: </p>\n<ul><li>\n<p>When you use a <xref href=\"System.Reflection.Assembly.Load(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with no <xref href=\"System.Security.Policy.Evidence\" data-throw-if-not-resolved=\"false\"></xref> parameter, the assembly is loaded with the evidence that the loader supplies.</p>\n</li><li>\n<p>When you use a <xref href=\"System.Reflection.Assembly.Load(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with an <xref href=\"System.Security.Policy.Evidence\" data-throw-if-not-resolved=\"false\"></xref> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref href=\"System.Reflection.Assembly.Load(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method supersede pieces of evidence supplied by the loader.</p>\n</li><li>\n<p>When you use a <xref href=\"System.Reflection.Assembly.Load(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload with a <strong>Byte[]</strong> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</p>\n<p>In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref href=\"System.Reflection.Assembly.Load(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload with a <strong>Byte[]</strong> parameter to load a COFF image, evidence is combined. <strong>Zone</strong>, <strong>Url</strong> and <strong>Site</strong> are inherited from the calling assembly, and <strong>Hash</strong> and <strong>StrongName</strong> are taken from the COFF assembly.</p>\n</li><li>\n<p>When you use a <xref href=\"System.Reflection.Assembly.Load(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with a <strong>Byte[]</strong> parameter and <xref href=\"System.Security.Policy.Evidence\" data-throw-if-not-resolved=\"false\"></xref> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.</p>\n</li></ul>\n<p>Reflecting on C++ executable files might throw a <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <strong>.reloc</strong> section from your executable file. To preserve the <strong>.reloc</strong> address for your C++ executable file, specify <strong>/fixed:no</strong> when you are linking.</p>\n<p>If both the <xref href=\"System.Reflection.AssemblyName.Name\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Reflection.AssemblyName.CodeBase\" data-throw-if-not-resolved=\"false\"></xref> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref href=\"System.Reflection.Assembly.FullName\" data-throw-if-not-resolved=\"false\"></xref> property). If the file is not found, <xref href=\"System.Reflection.AssemblyName.CodeBase\" data-throw-if-not-resolved=\"false\"></xref> is used to search for the assembly. If the assembly is found using <xref href=\"System.Reflection.AssemblyName.CodeBase\" data-throw-if-not-resolved=\"false\"></xref>, the display name is matched against the assembly. If the match fails, a <xref href=\"System.IO.FileLoadException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following example instantiates an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object and uses it to load the <strong>sysglobal.dll</strong> assembly. The example then displays the full name of the assembly's public types. </p>System.Reflection.Assembly.Load#2"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Assembly Load(AssemblyName assemblyRef)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function Load(assemblyRef As AssemblyName) As Assembly
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
    return:
      type: System.Reflection.Assembly
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>assemblyRef</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>assemblyRef</em> is not found. </p>\n"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>A file that was found could not be loaded. </p>\n"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<p>\n<em>assemblyRef</em> is not a valid assembly. -or-</p>\n<p>Version 2.0 or later of the common language runtime is currently loaded and <em>assemblyRef</em> was compiled with a later version.</p>\n"
  seealso:
  - type: System.Reflection.AssemblyName
    commentId: T:System.Reflection.AssemblyName
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Net.WebPermission
    commentId: T:System.Net.WebPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Assembly.ToString
  commentId: M:System.Reflection.Assembly.ToString
  id: ToString
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Assembly.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 1006
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the full name of the assembly, also known as the display name.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Module)
  name.vb: IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.Module
    name: Module
    fullName: System.Reflection.Module
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Module
    name: Module
    fullName: System.Reflection.Module
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.FileLoadException
  isExternal: false
  name: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.BadImageFormatException
  isExternal: false
  name: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  fullName: System.TypeLoadException
