items:
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  id: Assembly
  parent: System.Reflection
  children:
  - System.Reflection.Assembly.CustomAttributes
  - System.Reflection.Assembly.DefinedTypes
  - System.Reflection.Assembly.Equals(System.Object)
  - System.Reflection.Assembly.ExportedTypes
  - System.Reflection.Assembly.FullName
  - System.Reflection.Assembly.GetHashCode
  - System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  - System.Reflection.Assembly.GetManifestResourceNames
  - System.Reflection.Assembly.GetManifestResourceStream(System.String)
  - System.Reflection.Assembly.GetName
  - System.Reflection.Assembly.GetType(System.String)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Assembly.IsDynamic
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  - System.Reflection.Assembly.ManifestModule
  - System.Reflection.Assembly.Modules
  - System.Reflection.Assembly.ToString
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.Assembly
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 49
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.
  syntax:
    content: 'public abstract class Assembly : object'
    content.vb: >-
      Public MustInherit Class Assembly
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.Assembly.CustomAttributes
  commentId: P:System.Reflection.Assembly.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: CustomAttributes
  fullName: System.Reflection.Assembly.CustomAttributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributes
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 833
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection that contains this assembly's custom attributes.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As Collections.Generic.IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: A collection that contains this assembly's custom attributes.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.DefinedTypes
  commentId: P:System.Reflection.Assembly.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: DefinedTypes
  fullName: System.Reflection.Assembly.DefinedTypes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefinedTypes
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 702
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the types defined in this assembly.
  syntax:
    content: public abstract Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
    content.vb: Public MustOverride ReadOnly Property DefinedTypes As Collections.Generic.IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
      description: A collection of the types defined in this assembly.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.Assembly.ExportedTypes
  commentId: P:System.Reflection.Assembly.ExportedTypes
  id: ExportedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ExportedTypes
  fullName: System.Reflection.Assembly.ExportedTypes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ExportedTypes
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 689
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the public types defined in this assembly that are visible outside the assembly.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<Type> ExportedTypes { get; }
    content.vb: Public Overridable ReadOnly Property ExportedTypes As Collections.Generic.IEnumerable(Of Type)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: A collection of the public types defined in this assembly that are visible outside the assembly.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.FullName
  commentId: P:System.Reflection.Assembly.FullName
  id: FullName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Reflection.Assembly.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 651
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the display name of the assembly.
  syntax:
    content: public virtual string FullName { get; }
    content.vb: Public Overridable ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: The display name of the assembly.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.IsDynamic
  commentId: P:System.Reflection.Assembly.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: IsDynamic
  fullName: System.Reflection.Assembly.IsDynamic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDynamic
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 1064
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.
  syntax:
    content: public virtual bool IsDynamic { get; }
    content.vb: Public Overridable ReadOnly Property IsDynamic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current assembly was generated dynamically in the current process; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.ManifestModule
  commentId: P:System.Reflection.Assembly.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ManifestModule
  fullName: System.Reflection.Assembly.ManifestModule
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ManifestModule
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 817
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: 'Gets the module that contains the manifest for the current assembly. '
  syntax:
    content: public virtual Module ManifestModule { get; }
    content.vb: 'Public Overridable ReadOnly Property ManifestModule As '
    parameters: []
    return:
      type: System.Reflection.Module
      description: 'The module that contains the manifest for the assembly. '
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.Modules
  commentId: P:System.Reflection.Assembly.Modules
  id: Modules
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Modules
  fullName: System.Reflection.Assembly.Modules
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Modules
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 934
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection that contains the modules in this assembly.
  syntax:
    content: public abstract Collections.Generic.IEnumerable<Module> Modules { get; }
    content.vb: Public MustOverride ReadOnly Property Modules As Collections.Generic.IEnumerable(Of  Module)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}
      description: A collection that contains the modules in this assembly.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.Assembly.Equals(System.Object)
  commentId: M:System.Reflection.Assembly.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Assembly.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 102
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Determines whether this assembly and the specified object are equal.
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: 'The object to compare with this instance. '
    return:
      type: System.Boolean
      description: true if <em>o</em> is equal to this instance; otherwise, false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Assembly.GetHashCode
  commentId: M:System.Reflection.Assembly.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Assembly.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 107
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceInfo(String)
  fullName: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceInfo
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 1001
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns information about how the given resource has been persisted.
  syntax:
    content: public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName)
    content.vb: Public Overridable Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo
    parameters:
    - id: resourceName
      type: System.String
      description: 'The case-sensitive name of the resource. '
    return:
      type: System.Reflection.ManifestResourceInfo
      description: An object that is populated with information about the resource's topology, or null if the resource is not found.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>resourceName</em> is null. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>resourceName</em> parameter is an empty string (""). '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetManifestResourceNames
  commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceNames()
  fullName: System.Reflection.Assembly.GetManifestResourceNames()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceNames
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 991
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the names of all the resources in this assembly.
  syntax:
    content: public virtual string[] GetManifestResourceNames()
    content.vb: Public Overridable Function GetManifestResourceNames As String()
    return:
      type: System.String[]
      description: An array that contains the names of all the resources.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceStream(String)
  fullName: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceStream
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 756
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Loads the specified manifest resource from this assembly.
  syntax:
    content: public virtual IO.Stream GetManifestResourceStream(string name)
    content.vb: Public Overridable Function GetManifestResourceStream(name As String) As IO.Stream
    parameters:
    - id: name
      type: System.String
      description: 'The case-sensitive name of the manifest resource being requested. '
    return:
      type: System.IO.Stream
      description: The manifest resource; or null if no resources were specified during compilation or if the resource is not visible to the caller.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>name</em> parameter is null. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>name</em> parameter is an empty string (""). '
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.IO.IOException" data-throw-if-not-resolved="false"></xref>, instead.A file that was found could not be loaded. '
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>name</em> was not found. "
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<em>name</em> is not a valid assembly. "
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Resource length is greater than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetName
  commentId: M:System.Reflection.Assembly.GetName
  id: GetName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetName()
  fullName: System.Reflection.Assembly.GetName()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetName
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 636
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets an <xref href="System.Reflection.AssemblyName" data-throw-if-not-resolved="false"></xref> for this assembly.
  syntax:
    content: public virtual AssemblyName GetName()
    content.vb: Public Overridable Function GetName As AssemblyName
    return:
      type: System.Reflection.AssemblyName
      description: An object that contains the fully parsed display name for this assembly.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetType(System.String)
  commentId: M:System.Reflection.Assembly.GetType(System.String)
  id: GetType(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetType(String)
  fullName: System.Reflection.Assembly.GetType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 674
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object with the specified name in the assembly instance.
  syntax:
    content: public virtual Type GetType(string name)
    content.vb: Public Overridable Function GetType(name As String) As Type
    parameters:
    - id: name
      type: System.String
      description: 'The full name of the type. '
    return:
      type: System.Type
      description: An object that represents the specified class, or null if the class is not found.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is invalid. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. "
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>name</em> requires a dependent assembly that could not be found. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.IO.IOException" data-throw-if-not-resolved="false"></xref>, instead.<em>name</em> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. '
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. -or-<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 684
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.
  syntax:
    content: public virtual Type GetType(string name, bool throwOnError, bool ignoreCase)
    content.vb: Public Overridable Function GetType(name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: name
      type: System.String
      description: 'The full name of the type. '
    - id: throwOnError
      type: System.Boolean
      description: 'true to throw an exception if the type is not found; false to return null. '
    - id: ignoreCase
      type: System.Boolean
      description: 'true to ignore the case of the type name; otherwise, false. '
    return:
      type: System.Type
      description: An object that represents the specified class.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is invalid.-or- The length of <em>name</em> exceeds 1024 characters. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. "
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<em>throwOnError</em> is true, and the type cannot be found."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>name</em> requires a dependent assembly that could not be found. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<em>name</em> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. "
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. -or-<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  id: Load(System.Reflection.AssemblyName)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Load(AssemblyName)
  fullName: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Load
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 315
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Loads an assembly given its <xref href="System.Reflection.AssemblyName" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static Assembly Load(AssemblyName assemblyRef)
    content.vb: Public Shared Function Load(assemblyRef As AssemblyName) As Assembly
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
      description: 'The object that describes the assembly to be loaded. '
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>assemblyRef</em> is null. "
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>assemblyRef</em> is not found. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.IO.IOException" data-throw-if-not-resolved="false"></xref>, instead.A file that was found could not be loaded. '
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<em>assemblyRef</em> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <em>assemblyRef</em> was compiled with a later version."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Assembly.ToString
  commentId: M:System.Reflection.Assembly.ToString
  id: ToString
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Assembly.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Assembly.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Assembly.cs
    startLine: 1006
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the full name of the assembly, also known as the display name.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The full name of the assembly, or the class name if the full name of the assembly cannot be determined.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Type}
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<System.Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Type
    name: System.Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: System.Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Module)
  name.vb: Collections.Generic.IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.Module
    name: Module
    fullName: System.Reflection.Module
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Module
    name: Module
    fullName: System.Reflection.Module
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.FileLoadException
  isExternal: false
  name: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.BadImageFormatException
  isExternal: false
  name: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  fullName: System.TypeLoadException
