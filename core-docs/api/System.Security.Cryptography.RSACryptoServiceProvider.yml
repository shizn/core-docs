items:
- uid: System.Security.Cryptography.RSACryptoServiceProvider
  commentId: T:System.Security.Cryptography.RSACryptoServiceProvider
  id: RSACryptoServiceProvider
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  - System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  - System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes
  - System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  - System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  - System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  langs:
  - csharp
  - vb
  name: RSACryptoServiceProvider
  fullName: System.Security.Cryptography.RSACryptoServiceProvider
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RSACryptoServiceProvider
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 63
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Performs asymmetric encryption and decryption using the implementation of the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.</p>\n"
  remarks: "\n<p>This is the default implementation of <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.</p>\n<p>Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> instance. Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to Windows 8.1, and key sizes of 512 to 16384 bits for Windows 8.1. For more information, see <see href=\"http://msdn.microsoft.com/library/aa379941(v=vs.85).aspx\">CryptGenKey</see> function in the Windows documentation.</p>\n"
  example:
  - <p>The following code example uses the <xref href="System.Security.Cryptography.RSACryptoServiceProvider" data-throw-if-not-resolved="false"></xref> class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.   </p>System.Security.Cryptography.RSACryptoServiceProvider#1<p>The following code example exports the key information created using the <xref href="System.Security.Cryptography.RSACryptoServiceProvider" data-throw-if-not-resolved="false"></xref> into an <xref href="System.Security.Cryptography.RSAParameters" data-throw-if-not-resolved="false"></xref> object.  </p>System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1
  syntax:
    content: 'public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm'
    content.vb: >-
      Public NotInheritable Class RSACryptoServiceProvider
          Inherits RSA
          Implements ICspAsymmetricAlgorithm
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: RSACryptoServiceProvider()
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 65
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class using the default key.</p>\n"
  remarks: "\n<p>If no default key is found, a new key is created.</p>\n<p>This constructor creates an <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <em>AT_KEYEXCHANGE</em> value used in the unmanaged Microsoft Cryptographic API (CAPI).</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.   </p>System.Security.Cryptography.RSACryptoServiceProvider#1"
  syntax:
    content: public RSACryptoServiceProvider()
    content.vb: Public Sub New
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: RSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 66
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key size.</p>\n"
  remarks: "\n<p>If no default key is found, a new key is created.</p>\n<p>This constructor creates an <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <em>AT_KEYEXCHANGE</em> value used in the unmanaged Microsoft Cryptographic API (CAPI).</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, generates a new key, and stores it in a key container.</p>Cryptography.RSACSP.ctor-int32-2#1"
  syntax:
    content: public RSACryptoServiceProvider(int dwKeySize)
    content.vb: Public Sub New(dwKeySize As Integer)
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "\n<p>The size of the key to use in bits. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: RSACryptoServiceProvider(Int32, CspParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(System.Int32, System.Security.Cryptography.CspParameters)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 67
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key size and parameters.</p>\n"
  remarks: "\n<p>This constructor creates or reuses a key container specified using the <xref href=\"System.Security.Cryptography.CspParameters.KeyContainerName\" data-throw-if-not-resolved=\"false\"></xref> field of the <em>parameters</em> parameter. </p>\n<p>By default, this constructor creates an <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <em>AT_KEYEXCHANGE</em> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p>You can create a <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref href=\"System.Security.Cryptography.CspParameters.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> field of the <em>parameters</em> parameter to the <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> value. This type of key corresponds to the <em>AT_SIGNATURE</em> value used in CAPI.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> value specified and then create another <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> value specified, both keys will be placed in a single container if both objects specify the same key container name.</p>\n<p>To create a key that is compatible with stong-name signing using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class, you must create a <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> key pair.    </p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, generates a new key, and stores it in a key container.</p>Cryptography.RSACSP.ctor-int32-csp#1"
  syntax:
    content: public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters)
    content.vb: Public Sub New(dwKeySize As Integer, parameters As CspParameters)
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "\n<p>The size of the key to use in bits. </p>\n"
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "\n<p>The parameters to be passed to the cryptographic service provider (CSP). </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The CSP cannot be acquired.</p>\n<p>-or- </p>\n<p>The key cannot be created. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: RSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(System.Security.Cryptography.CspParameters)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 68
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class with the specified parameters.</p>\n"
  remarks: "\n<p>This constructor creates or reuses a key container specified using the <xref href=\"System.Security.Cryptography.CspParameters.KeyContainerName\" data-throw-if-not-resolved=\"false\"></xref> field of the <em>parameters</em> parameter. </p>\n<p>By default, this constructor creates an <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <em>AT_KEYEXCHANGE</em> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p>You can create a <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref href=\"System.Security.Cryptography.CspParameters.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> field of the <em>parameters</em> parameter to the <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> value. This type of key corresponds to the <em>AT_SIGNATURE</em> value used in CAPI.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> value specified and then create another <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> value specified, both keys will be placed in a single container if both objects specify the same key container name.</p>\n<p>To create a key that is compatible with stong-name signing using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class, you must create a <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> key pair.    </p>\n"
  example:
  - "\n<p>The following code example creates an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object, generates a new key, and stores it in a key container.</p>Cryptography.RSACSP.ctor-csp#1"
  syntax:
    content: public RSACryptoServiceProvider(CspParameters parameters)
    content.vb: Public Sub New(parameters As CspParameters)
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "\n<p>The parameters to be passed to the cryptographic service provider (CSP). </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The CSP cannot be acquired. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: CspKeyContainerInfo
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CspKeyContainerInfo
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 69
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> object that describes additional information about a cryptographic key pair. </p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve additional information about a cryptographic key pair.  The returned <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.    </p>\n<p>In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> property will throw a <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, <see cref=\"Overload:System.Security.Cryptography.RSACryptoServiceProvider.SignData\"></see>, <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\" data-throw-if-not-resolved=\"false\"></xref>, and so on, before you call the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> property.  </p>\n"
  example:
  - "\n<p>The following code example demonstrates how to call the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> property.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public CspKeyContainerInfo CspKeyContainerInfo { get; }
    content.vb: Public ReadOnly Property CspKeyContainerInfo As CspKeyContainerInfo
    parameters: []
    return:
      type: System.Security.Cryptography.CspKeyContainerInfo
      description: "\n<p>A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> object that describes additional information about a cryptographic key pair.</p>\n"
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  id: KeySize
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: KeySize
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySize
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 70
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the size of the current key.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed. </p>\n<p>Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> instance. Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to Windows 8.1, and key sizes of 512 to 16384 bits for Windows 8.1. For more information, see <see href=\"http://msdn.microsoft.com/library/aa379941(v=vs.85).aspx\">CryptGenKey</see> function in the Windows documentation.</p>\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class does not allow you to change key sizes using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\" data-throw-if-not-resolved=\"false\"></xref> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.   </p>\n"
  syntax:
    content: public override int KeySize { get; }
    content.vb: Public Overrides ReadOnly Property KeySize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The size of the key in bits.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  id: PersistKeyInCsp
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: PersistKeyInCsp
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PersistKeyInCsp
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 71
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).</p>\n"
  remarks: "\n<p>Use this property to persist a key in a key container.</p>\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\" data-throw-if-not-resolved=\"false\"></xref> property is automatically set to <strong>true</strong> when you specify a key container name in the <xref href=\"System.Security.Cryptography.CspParameters.KeyContainerName\" data-throw-if-not-resolved=\"false\"></xref> field of a <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> object and use it to initialize an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object by calling one of the constructors with a <em>parameters</em> parameter.  </p>\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\" data-throw-if-not-resolved=\"false\"></xref> property has no effect if the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object is created with a <strong>null</strong> key container name. </p>\n"
  example:
  - "\n<p>The following code example creates an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object and persists the key to a key container.</p>Cryptography.RSACSP.PersistKey#1"
  syntax:
    content: public bool PersistKeyInCsp { get; set; }
    content.vb: Public Property PersistKeyInCsp As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key should be persisted in the CSP; otherwise, <strong>false</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  id: PublicOnly
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: PublicOnly
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PublicOnly
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 72
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object contains only a public key.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class can be initialized either with a public key only or with both a public and private key.  Use the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance contains only a public key or both a public and private key.    </p>\n"
  syntax:
    content: public bool PublicOnly { get; }
    content.vb: Public ReadOnly Property PublicOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object contains only a public key; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  id: UseMachineKeyStore
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: UseMachineKeyStore
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseMachineKeyStore
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 73
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.</p>\n"
  remarks: "\n<p>Setting this property to <strong>true</strong> is equivalent to passing the <xref href=\"System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore\" data-throw-if-not-resolved=\"false\"></xref> flag to a <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\" data-throw-if-not-resolved=\"false\"></xref> property applies to all code in the current application domain, whereas the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded. Setting <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\" data-throw-if-not-resolved=\"false\"></xref> affects the key store location only if <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> is initialized with no parameters.</p>\n"
  example:
  - "\n<p>The following code example creates an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object and sets the static <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\" data-throw-if-not-resolved=\"false\"></xref> property to use the machine key store instead of the user profile key store.</p>Cryptography.RSACSP.UseMachineKey#2"
  syntax:
    content: public static bool UseMachineKeyStore { get; set; }
    content.vb: Public Shared Property UseMachineKeyStore As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key should be persisted in the computer key store; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)
  id: Decrypt(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: Decrypt(Byte[], Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrypt
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 74
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Decrypts data with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  remarks: "\n<p>Use <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to encrypt data for decryption with this method.</p>\n"
  example:
  - "\n<p>The following code example encrypts and decrypts data.</p>\n<p>This example uses the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> class; however, the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class may be preferable in large data operations. The encrypted value can be saved as an <strong>nvarchar</strong> data type in Microsoft SQL Server 2005.</p>Cryptography.RSACSP.Decrypt#1"
  syntax:
    content: public byte[] Decrypt(byte[] rgb, bool fOAEP)
    content.vb: Public Function Decrypt(rgb As Byte(), fOAEP As Boolean) As Byte()
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "\n<p>The data to be decrypted. </p>\n"
    - id: fOAEP
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to perform direct <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <strong>false</strong> to use PKCS#1 v1.5 padding. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The decrypted data, which is the original plain text before encryption.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\n<p>-or- </p>\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and the length of the <em>rgb</em> parameter is greater than <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and OAEP is not supported. </p>\n<p>-or- </p>\n<p>The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say <code>Not enough storage is available to process this command</code>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rgb </em>is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte(), System.Boolean)
  name.vb: Decrypt(Byte(), Boolean)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: Decrypt(Byte[], RSAEncryptionPadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrypt
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 75
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Decrypts data that was previously encrypted with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm by using the specified padding. </p>\n"
  remarks: "\n<p>\n<em>padding</em> must be either <xref href=\"System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding)
    content.vb: Public Overrides Function Decrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The data to decrypt. </p>\n"
    - id: padding
      type: System.Security.Cryptography.RSAEncryptionPadding
      description: "\n<p>The padding. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The decrypted data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>padding</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The padding mode is not supported.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)
  name.vb: Decrypt(Byte(), RSAEncryptionPadding)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 76
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)
  id: Encrypt(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: Encrypt(Byte[], Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Encrypt
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 77
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  remarks: "\n<p>The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of <em>rgb</em> allowed by the different combinations of operating systems and padding.</p>\n<p>Padding </p>\n<p>Operating System Supported </p>\n<p>Maximum Length of rgb Parameter </p>\n<p>Use <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to decrypt the results of this method.</p>\n"
  example:
  - "\n<p>The following code example initializes an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object to the value of a public key (sent by another party), generates a session key using the <xref href=\"System.Security.Cryptography.RijndaelManaged\" data-throw-if-not-resolved=\"false\"></xref> algorithm, and then encrypts the session key using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object.  Using this scheme, the session key could be sent back to the owner of the private RSA key and the two parties could use the session key to exchange encrypted data.       </p>System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1"
  syntax:
    content: public byte[] Encrypt(byte[] rgb, bool fOAEP)
    content.vb: Public Function Encrypt(rgb As Byte(), fOAEP As Boolean) As Byte()
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "\n<p>The data to be encrypted. </p>\n"
    - id: fOAEP
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to perform direct <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, <strong>false</strong> to use PKCS#1 v1.5 padding. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The encrypted data.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\n<p>-or- </p>\n<p>The length of the <em>rgb</em> parameter is greater than the maximum allowed length.</p>\n<p>-or- </p>\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and OAEP padding is not supported. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rgb </em>is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte(), System.Boolean)
  name.vb: Encrypt(Byte(), Boolean)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: Encrypt(Byte[], RSAEncryptionPadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Encrypt
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 78
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm using the specified padding. </p>\n"
  remarks: "\n<p>\n<em>padding</em> must be either <xref href=\"System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding)
    content.vb: Public Overrides Function Encrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The data to encrypt. </p>\n"
    - id: padding
      type: System.Security.Cryptography.RSAEncryptionPadding
      description: "\n<p>The padding. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The encrypted data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>padding</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The padding mode is not supported.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)
  name.vb: Encrypt(Byte(), RSAEncryptionPadding)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  id: ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExportCspBlob
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 79
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Exports a blob containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object.  </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).   </p>\n"
  syntax:
    content: public byte[] ExportCspBlob(bool includePrivateParameters)
    content.vb: Public Function ExportCspBlob(includePrivateParameters As Boolean) As Byte()
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to include the private key; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: ExportParameters(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExportParameters
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 80
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Exports the <xref href=\"System.Security.Cryptography.RSAParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example exports the key information created using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> into an <xref href=\"System.Security.Cryptography.RSAParameters\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1"
  syntax:
    content: public override RSAParameters ExportParameters(bool includePrivateParameters)
    content.vb: Public Overrides Function ExportParameters(includePrivateParameters As Boolean) As RSAParameters
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.Security.Cryptography.RSAParameters
      description: "\n<p>The parameters for <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The key cannot be exported. </p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashData
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 81
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)
    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: HashData(IO.Stream, HashAlgorithmName)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashData
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 82
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm)
    content.vb: Protected Overrides Function HashData(data As IO.Stream, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.IO.Stream
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  id: ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImportCspBlob
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Imports a blob that represents RSA key information.  </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method initializes the key data of an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).</p>\n"
  syntax:
    content: public void ImportCspBlob(byte[] keyBlob)
    content.vb: Public Sub ImportCspBlob(keyBlob As Byte())
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "\n<p>A byte array that represents an RSA key blob.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte())
  name.vb: ImportCspBlob(Byte())
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  id: ImportParameters(System.Security.Cryptography.RSAParameters)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: ImportParameters(RSAParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImportParameters
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 84
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Imports the specified <xref href=\"System.Security.Cryptography.RSAParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example imports key information created from an <xref href=\"System.Security.Cryptography.RSAParameters\" data-throw-if-not-resolved=\"false\"></xref> object into an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1"
  syntax:
    content: public override void ImportParameters(RSAParameters parameters)
    content.vb: Public Overrides Sub ImportParameters(parameters As RSAParameters)
    parameters:
    - id: parameters
      type: System.Security.Cryptography.RSAParameters
      description: "\n<p>The parameters for <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\n<p>-or- </p>\n<p>The <em>parameters</em> parameter has missing fields. </p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes
  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: LegalKeySizes
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizes
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 85
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  syntax:
    content: public override KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: SignData(Byte[], Int32, Int32, Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[], System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignData
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 86
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\n"
  remarks: "\n<p>This method creates a digital signature that is verified using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>halg</em> parameter can accept a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>, or a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. The string value can be one of the following:</p>\n<ul><li>\n<p>The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.</p>\n</li><li>\n<p>The OID value. The OID must be one recognized by the Crypto API.</p>\n</li></ul>\n<p>For example, you could use SignData(new byte[5], \"1.3.14.3.2.26\") or SignData(new byte[5], \"sha1\"), or SignData(new byte[5], \"SHA1\").</p>\n"
  example:
  - "\n<p>The following code example signs and verifies data.</p>Cryptography.RSACSP.SignData1#1"
  syntax:
    content: public byte[] SignData(byte[] buffer, int offset, int count, object halg)
    content.vb: Public Function SignData(buffer As Byte(), offset As Integer, count As Integer, halg As Object) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The input data for which to compute the hash. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset into the array from which to begin using data. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes in the array to use as data. </p>\n"
    - id: halg
      type: System.Object
      description: "\n<p>The hash algorithm to use to create the hash value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> signature for the specified data.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>halg</em> parameter is not a valid type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte(), System.Int32, System.Int32, System.Object)
  name.vb: SignData(Byte(), Int32, Int32, Object)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)
  id: SignData(System.Byte[],System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: SignData(Byte[], Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[], System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignData
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 87
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\n"
  remarks: "\n<p>This method creates a digital signature that is verified using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>halg</em> parameter can accept a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>, or a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example signs and verifies data.</p>Cryptography.RSACSP.SignData2#1"
  syntax:
    content: public byte[] SignData(byte[] buffer, object halg)
    content.vb: Public Function SignData(buffer As Byte(), halg As Object) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The input data for which to compute the hash. </p>\n"
    - id: halg
      type: System.Object
      description: "\n<p>The hash algorithm to use to create the hash value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> signature for the specified data.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>halg</em> parameter is not a valid type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte(), System.Object)
  name.vb: SignData(Byte(), Object)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)
  id: SignData(System.IO.Stream,System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: SignData(IO.Stream, Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignData
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 88
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.</p>\n"
  remarks: "\n<p>The <em>halg</em> parameter can accept a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>, or a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example signs and verifies data.</p>Cryptography.RSACSP.SignData3#1"
  syntax:
    content: public byte[] SignData(IO.Stream inputStream, object halg)
    content.vb: Public Function SignData(inputStream As IO.Stream, halg As Object) As Byte()
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "\n<p>The input data for which to compute the hash. </p>\n"
    - id: halg
      type: System.Object
      description: "\n<p>The hash algorithm to use to create the hash value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> signature for the specified data.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>halg</em> parameter is not a valid type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignHash
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 89
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the signature for the specified hash value by encrypting it with the private key using the specified padding. </p>\n"
  syntax:
    content: public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)
    content.vb: Public Overrides Function SignHash(hash As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()
    parameters:
    - id: hash
      type: System.Byte[]
      description: "\n<p>The hash value of the data to be signed. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm name used to create the hash value of the data. </p>\n"
    - id: padding
      type: System.Security.Cryptography.RSASignaturePadding
      description: "\n<p>The padding. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> signature for the specified hash value. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>hash</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>padding</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>\n<em>padding</em> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)
  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  id: SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: SignHash(Byte[], String)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignHash
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 90
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the signature for the specified hash value by encrypting it with the private key.</p>\n"
  remarks: "\n<p>This method creates a digital signature that is verified using the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The valid hash algorithms are <xref href=\"System.Security.Cryptography.SHA1\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Cryptography.MD5\" data-throw-if-not-resolved=\"false\"></xref>. The algorithm identifier can be derived from the hash name by using the <xref href=\"System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example encrypts some data, creates a hash of the encrypted data, and then signs hash with a digital signature.</p>System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1"
  syntax:
    content: public byte[] SignHash(byte[] rgbHash, string str)
    content.vb: Public Function SignHash(rgbHash As Byte(), str As String) As Byte()
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "\n<p>The hash value of the data to be signed. </p>\n"
    - id: str
      type: System.String
      description: "\n<p>The hash algorithm identifier (OID) used to create the hash value of the data. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> signature for the specified hash value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rgbHash</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\n<p>-or- </p>\n<p>There is no private key. </p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte(), System.String)
  name.vb: SignHash(Byte(), String)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])
  id: VerifyData(System.Byte[],System.Object,System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: VerifyData(Byte[], Object, Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[], System.Object, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyData
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 91
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.</p>\n"
  remarks: "\n<p>This method verifies the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> digital signature produced by the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.</p>\n<p>The <em>halg</em> parameter can accept a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>, or a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to verify a signature. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2"
  syntax:
    content: public bool VerifyData(byte[] buffer, object halg, byte[] signature)
    content.vb: Public Function VerifyData(buffer As Byte(), halg As Object, signature As Byte()) As Boolean
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The data that was signed. </p>\n"
    - id: halg
      type: System.Object
      description: "\n<p>The name of the hash algorithm used to create the hash value of the data. </p>\n"
    - id: signature
      type: System.Byte[]
      description: "\n<p>The signature data to be verified. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>halg</em> parameter is not a valid type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte(), System.Object, System.Byte())
  name.vb: VerifyData(Byte(), Object, Byte())
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyHash
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 92
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value. </p>\n"
  syntax:
    content: public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)
    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean
    parameters:
    - id: hash
      type: System.Byte[]
      description: "\n<p>The hash value of the signed data. </p>\n"
    - id: signature
      type: System.Byte[]
      description: "\n<p>The signature data to be verified. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm name used to create the hash value. </p>\n"
    - id: padding
      type: System.Security.Cryptography.RSASignaturePadding
      description: "\n<p>The padding. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>hash</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>padding</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>\n<em>padding</em> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)
  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  id: VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  - vb
  name: VerifyHash(Byte[], String, Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[], System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyHash
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 93
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.</p>\n"
  remarks: "\n<p>This method verifies the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> digital signature produced by the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.</p>\n<p>The valid hash algorithms are <xref href=\"System.Security.Cryptography.SHA1\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Cryptography.MD5\" data-throw-if-not-resolved=\"false\"></xref>. The algorithm identifier can be derived from the hash name by using the <xref href=\"System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to verify a signature. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2"
  syntax:
    content: public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature)
    content.vb: Public Function VerifyHash(rgbHash As Byte(), str As String, rgbSignature As Byte()) As Boolean
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "\n<p>The hash value of the signed data. </p>\n"
    - id: str
      type: System.String
      description: "\n<p>The hash algorithm identifier (OID) used to create the hash value of the data. </p>\n"
    - id: rgbSignature
      type: System.Byte[]
      description: "\n<p>The signature data to be verified. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rgbHash</em> parameter is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>The <em>rgbSignature</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\n<p>-or- </p>\n<p>The signature cannot be verified. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte(), System.String, System.Byte())
  name.vb: VerifyHash(Byte(), String, Byte())
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: ICspAsymmetricAlgorithm
  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo
  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm
  isExternal: false
  name: CspKeyContainerInfo
  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo
- uid: System.Security.Cryptography.CspKeyContainerInfo
  parent: System.Security.Cryptography
  isExternal: false
  name: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.RSAEncryptionPadding
  parent: System.Security.Cryptography
  isExternal: false
  name: RSAEncryptionPadding
  fullName: System.Security.Cryptography.RSAEncryptionPadding
- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm
  isExternal: true
  name: ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)
    name: ExportCspBlob
    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)
    name: ExportCspBlob
    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.RSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: RSAParameters
  fullName: System.Security.Cryptography.RSAParameters
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm
  isExternal: true
  name: ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])
  fullname.vb: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte())
  name.vb: ImportCspBlob(Byte())
  spec.csharp:
  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])
    name: ImportCspBlob
    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])
    name: ImportCspBlob
    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Security.Cryptography.KeySizes[]
  isExternal: false
  name: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  fullname.vb: System.Security.Cryptography.KeySizes()
  name.vb: KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.RSASignaturePadding
  parent: System.Security.Cryptography
  isExternal: false
  name: RSASignaturePadding
  fullName: System.Security.Cryptography.RSASignaturePadding
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
