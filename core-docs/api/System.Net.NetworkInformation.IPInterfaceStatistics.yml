items:
- uid: System.Net.NetworkInformation.IPInterfaceStatistics
  commentId: T:System.Net.NetworkInformation.IPInterfaceStatistics
  id: IPInterfaceStatistics
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.IPInterfaceStatistics.#ctor
  - System.Net.NetworkInformation.IPInterfaceStatistics.BytesReceived
  - System.Net.NetworkInformation.IPInterfaceStatistics.BytesSent
  - System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsDiscarded
  - System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsWithErrors
  - System.Net.NetworkInformation.IPInterfaceStatistics.IncomingUnknownProtocolPackets
  - System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsReceived
  - System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsSent
  - System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsDiscarded
  - System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsWithErrors
  - System.Net.NetworkInformation.IPInterfaceStatistics.OutputQueueLength
  - System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsReceived
  - System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsSent
  langs:
  - csharp
  - vb
  name: IPInterfaceStatistics
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPInterfaceStatistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 188
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol (IP) statistical data for an network interface on the local computer.</p>\n"
  remarks: "\n<p>This class is used by the <xref href=\"System.Net.NetworkInformation.NetworkInterface.GetIPStatistics\" data-throw-if-not-resolved=\"false\"></xref> method to return network traffic information for an interface.</p>\n"
  syntax:
    content: public abstract class IPInterfaceStatistics
    content.vb: Public MustInherit Class IPInterfaceStatistics
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.#ctor
  commentId: M:System.Net.NetworkInformation.IPInterfaceStatistics.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: IPInterfaceStatistics()
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.IPInterfaceStatistics()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 190
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.IPInterfaceStatistics\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor can be called only by classes that derive from <xref href=\"System.Net.NetworkInformation.IPInterfaceStatistics\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected IPInterfaceStatistics()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.BytesReceived
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.BytesReceived
  id: BytesReceived
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: BytesReceived
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.BytesReceived
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BytesReceived
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 191
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of bytes that were received on the interface.</p>\n"
  syntax:
    content: public abstract long BytesReceived { get; }
    content.vb: Public MustOverride ReadOnly Property BytesReceived As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of bytes that were received on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.BytesSent
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.BytesSent
  id: BytesSent
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: BytesSent
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.BytesSent
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BytesSent
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 192
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of bytes that were sent on the interface.</p>\n"
  syntax:
    content: public abstract long BytesSent { get; }
    content.vb: Public MustOverride ReadOnly Property BytesSent As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of bytes that were sent on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsDiscarded
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsDiscarded
  id: IncomingPacketsDiscarded
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: IncomingPacketsDiscarded
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsDiscarded
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncomingPacketsDiscarded
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 193
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of incoming packets that were discarded.</p>\n"
  remarks: "\n<p>This data does not include packets with errors.</p>\n"
  syntax:
    content: public abstract long IncomingPacketsDiscarded { get; }
    content.vb: Public MustOverride ReadOnly Property IncomingPacketsDiscarded As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of incoming packets that were discarded.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsWithErrors
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsWithErrors
  id: IncomingPacketsWithErrors
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: IncomingPacketsWithErrors
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsWithErrors
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncomingPacketsWithErrors
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 194
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of incoming packets with errors.</p>\n"
  remarks: "\n<p>This data does not include packets without errors that were discarded.</p>\n"
  syntax:
    content: public abstract long IncomingPacketsWithErrors { get; }
    content.vb: Public MustOverride ReadOnly Property IncomingPacketsWithErrors As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of incoming packets with errors.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.IncomingUnknownProtocolPackets
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingUnknownProtocolPackets
  id: IncomingUnknownProtocolPackets
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: IncomingUnknownProtocolPackets
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.IncomingUnknownProtocolPackets
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncomingUnknownProtocolPackets
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 195
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of incoming packets with an unknown protocol that were received on the interface.</p>\n"
  remarks: "\n<p>This data reflects packets that were discarded because the protocol identifier in the packet header was not recognized.</p>\n"
  syntax:
    content: public abstract long IncomingUnknownProtocolPackets { get; }
    content.vb: Public MustOverride ReadOnly Property IncomingUnknownProtocolPackets As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of incoming packets with an unknown protocol that were received on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsReceived
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsReceived
  id: NonUnicastPacketsReceived
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: NonUnicastPacketsReceived
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsReceived
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NonUnicastPacketsReceived
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 196
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of non-unicast packets that were received on the interface.</p>\n"
  remarks: "\n<p>Packets with unicast addresses are delivered to a single interface. Packets with non-unicast addresses can be delivered to multiple interfaces. Anycast, broadcast, and multicast addresses are types of non-unicast addresses.</p>\n"
  syntax:
    content: public abstract long NonUnicastPacketsReceived { get; }
    content.vb: Public MustOverride ReadOnly Property NonUnicastPacketsReceived As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of incoming non-unicast packets received on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsSent
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsSent
  id: NonUnicastPacketsSent
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: NonUnicastPacketsSent
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsSent
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NonUnicastPacketsSent
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 197
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of non-unicast packets that were sent on the interface.</p>\n"
  remarks: "\n<p>Packets with unicast addresses are delivered to a single interface. Packets with non-unicast addresses can be delivered to multiple interfaces. Anycast, broadcast, and multicast addresses are types of non-unicast addresses.</p>\n"
  syntax:
    content: public abstract long NonUnicastPacketsSent { get; }
    content.vb: Public MustOverride ReadOnly Property NonUnicastPacketsSent As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of non-unicast packets that were sent on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsDiscarded
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsDiscarded
  id: OutgoingPacketsDiscarded
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: OutgoingPacketsDiscarded
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsDiscarded
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutgoingPacketsDiscarded
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 198
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of outgoing packets that were discarded.</p>\n"
  remarks: "\n<p>This data does not include outgoing packets with errors.</p>\n"
  syntax:
    content: public abstract long OutgoingPacketsDiscarded { get; }
    content.vb: Public MustOverride ReadOnly Property OutgoingPacketsDiscarded As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of outgoing packets that were discarded.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsWithErrors
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsWithErrors
  id: OutgoingPacketsWithErrors
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: OutgoingPacketsWithErrors
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsWithErrors
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutgoingPacketsWithErrors
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 199
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of outgoing packets with errors.</p>\n"
  remarks: "\n<p>This data does not include packets without errors that were discarded.</p>\n"
  syntax:
    content: public abstract long OutgoingPacketsWithErrors { get; }
    content.vb: Public MustOverride ReadOnly Property OutgoingPacketsWithErrors As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of outgoing packets with errors.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.OutputQueueLength
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.OutputQueueLength
  id: OutputQueueLength
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: OutputQueueLength
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.OutputQueueLength
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutputQueueLength
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 200
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the length of the output queue.</p>\n"
  syntax:
    content: public abstract long OutputQueueLength { get; }
    content.vb: Public MustOverride ReadOnly Property OutputQueueLength As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of packets in the output queue.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsReceived
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsReceived
  id: UnicastPacketsReceived
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: UnicastPacketsReceived
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsReceived
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnicastPacketsReceived
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 201
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of unicast packets that were received on the interface.</p>\n"
  remarks: "\n<p>Packets with unicast addresses are delivered to a single interface. Packets with non-unicast addresses can be delivered to multiple interfaces. Anycast, broadcast, and multicast addresses are types of non-unicast addresses.</p>\n"
  syntax:
    content: public abstract long UnicastPacketsReceived { get; }
    content.vb: Public MustOverride ReadOnly Property UnicastPacketsReceived As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of unicast packets that were received on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsSent
  commentId: P:System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsSent
  id: UnicastPacketsSent
  parent: System.Net.NetworkInformation.IPInterfaceStatistics
  langs:
  - csharp
  - vb
  name: UnicastPacketsSent
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsSent
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnicastPacketsSent
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 202
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of unicast packets that were sent on the interface.</p>\n"
  remarks: "\n<p>Packets with unicast addresses are delivered to a single interface. Packets with non-unicast addresses can be delivered to multiple interfaces. Anycast, broadcast, and multicast addresses are types of non-unicast addresses.</p>\n"
  syntax:
    content: public abstract long UnicastPacketsSent { get; }
    content.vb: Public MustOverride ReadOnly Property UnicastPacketsSent As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The total number of unicast packets that were sent on the interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
