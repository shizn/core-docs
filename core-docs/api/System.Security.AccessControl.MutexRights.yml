items:
- uid: System.Security.AccessControl.MutexRights
  commentId: T:System.Security.AccessControl.MutexRights
  id: MutexRights
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.MutexRights.ChangePermissions
  - System.Security.AccessControl.MutexRights.Delete
  - System.Security.AccessControl.MutexRights.FullControl
  - System.Security.AccessControl.MutexRights.Modify
  - System.Security.AccessControl.MutexRights.ReadPermissions
  - System.Security.AccessControl.MutexRights.Synchronize
  - System.Security.AccessControl.MutexRights.TakeOwnership
  langs:
  - csharp
  - vb
  name: MutexRights
  fullName: System.Security.AccessControl.MutexRights
  type: Enum
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MutexRights
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 36
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the access control rights that can be applied to named system mutex objects.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.AccessControl.MutexRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration to specify access control rights when you create <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> objects. To apply access rights to a named system mutex, use <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> objects with the <xref href=\"System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref> constructor and the <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of <xref href=\"System.Security.AccessControl.MutexRights\" data-throw-if-not-resolved=\"false\"></xref> values when creating and using <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects. The example creates an <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object; see <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Mutex.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method, and <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.MutexSecurity.AddAccessRule#1"
  syntax:
    content: >-
      [Flags]

      [SecurityCritical]

      public enum MutexRights
    content.vb: >-
      <Flags>

      <SecurityCritical>

      Public Enum MutexRights
  seealso:
  - type: System.Security.AccessControl.MutexAccessRule
    commentId: T:System.Security.AccessControl.MutexAccessRule
  - type: System.Security.AccessControl.MutexSecurity
    commentId: T:System.Security.AccessControl.MutexSecurity
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Security.AccessControl.MutexRights.ChangePermissions
  commentId: F:System.Security.AccessControl.MutexRights.ChangePermissions
  id: ChangePermissions
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: ChangePermissions
  fullName: System.Security.AccessControl.MutexRights.ChangePermissions
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangePermissions
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 40
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to change the security and audit rules associated with a named mutex.</p>\n"
  syntax:
    content: ChangePermissions = 262144
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.MutexRights.Delete
  commentId: F:System.Security.AccessControl.MutexRights.Delete
  id: Delete
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: Delete
  fullName: System.Security.AccessControl.MutexRights.Delete
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Delete
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 41
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to delete a named mutex.</p>\n"
  syntax:
    content: Delete = 65536
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.MutexRights.FullControl
  commentId: F:System.Security.AccessControl.MutexRights.FullControl
  id: FullControl
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: FullControl
  fullName: System.Security.AccessControl.MutexRights.FullControl
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullControl
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 42
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to exert full control over a named mutex, and to modify its access rules and audit rules.</p>\n"
  syntax:
    content: FullControl = 2031617
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.MutexRights.Modify
  commentId: F:System.Security.AccessControl.MutexRights.Modify
  id: Modify
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: Modify
  fullName: System.Security.AccessControl.MutexRights.Modify
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modify
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 43
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to release a named mutex.</p>\n"
  syntax:
    content: Modify = 1
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.MutexRights.ReadPermissions
  commentId: F:System.Security.AccessControl.MutexRights.ReadPermissions
  id: ReadPermissions
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: ReadPermissions
  fullName: System.Security.AccessControl.MutexRights.ReadPermissions
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadPermissions
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 44
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to open and copy the access rules and audit rules for a named mutex.</p>\n"
  syntax:
    content: ReadPermissions = 131072
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.MutexRights.Synchronize
  commentId: F:System.Security.AccessControl.MutexRights.Synchronize
  id: Synchronize
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: Synchronize
  fullName: System.Security.AccessControl.MutexRights.Synchronize
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Synchronize
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 45
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to wait on a named mutex.</p>\n"
  syntax:
    content: Synchronize = 1048576
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.MutexRights.TakeOwnership
  commentId: F:System.Security.AccessControl.MutexRights.TakeOwnership
  id: TakeOwnership
  parent: System.Security.AccessControl.MutexRights
  langs:
  - csharp
  - vb
  name: TakeOwnership
  fullName: System.Security.AccessControl.MutexRights.TakeOwnership
  type: Field
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeOwnership
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 46
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The right to change the owner of a named mutex.</p>\n"
  syntax:
    content: TakeOwnership = 524288
    return:
      type: System.Security.AccessControl.MutexRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Security.AccessControl.MutexRights
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexRights
  fullName: System.Security.AccessControl.MutexRights
