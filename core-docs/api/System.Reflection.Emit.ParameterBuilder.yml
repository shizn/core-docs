items:
- uid: System.Reflection.Emit.ParameterBuilder
  commentId: T:System.Reflection.Emit.ParameterBuilder
  id: ParameterBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ParameterBuilder.Attributes
  - System.Reflection.Emit.ParameterBuilder.IsIn
  - System.Reflection.Emit.ParameterBuilder.IsOptional
  - System.Reflection.Emit.ParameterBuilder.IsOut
  - System.Reflection.Emit.ParameterBuilder.Name
  - System.Reflection.Emit.ParameterBuilder.Position
  - System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  - System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: ParameterBuilder
  fullName: System.Reflection.Emit.ParameterBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParameterBuilder
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 21
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates or associates parameter information.</p>\n"
  remarks: "\n<p>Parameter attributes need to consistent with the method signature. If you specify <strong>Out</strong> attributes for a parameter, you should ensure that the type of that method parameter is a <strong>ByRef</strong> type.</p>\n<p>Some <xref href=\"System.Reflection.Emit.ParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> attributes require that you call <xref href=\"System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> with viable parameters in order for the Microsoft intermediate language (MSIL) to work correctly at runtime. For example, if you define a <xref href=\"System.Reflection.Emit.ParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> with ParameterAttributes.Out for parameter 1 of a <strong>MethodBuilder</strong>, then parameter 1 of <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> must be a reference such as Type.GetType(\"System.String&\"), rather than Type.GetType(\"System.String\").</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a dynamic method with a parameter passed by reference using <strong>ParameterBuilder</strong>.</p>System.Reflection.Emit.ParameterBuilder Example#1"
  syntax:
    content: >-
      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_ParameterBuilder))]

      [ComVisible(true)]

      public class ParameterBuilder : _ParameterBuilder
    content.vb: >-
      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_ParameterBuilder))>

      <ComVisible(True)>

      Public Class ParameterBuilder
          Implements _ParameterBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ParameterBuilder.Attributes
  commentId: P:System.Reflection.Emit.ParameterBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.ParameterBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 151
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the attributes for this parameter.</p>\n"
  remarks: "\n<p>The values of the attribute correspond to the values of the <xref href=\"System.Reflection.ParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public virtual int Attributes { get; }
    content.vb: Public Overridable ReadOnly Property Attributes As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Emit.ParameterBuilder.IsIn
  commentId: P:System.Reflection.Emit.ParameterBuilder.IsIn
  id: IsIn
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: IsIn
  fullName: System.Reflection.Emit.ParameterBuilder.IsIn
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsIn
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 155
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves whether this is an input parameter.</p>\n"
  remarks: "\n<p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.</p>\n"
  syntax:
    content: public bool IsIn { get; }
    content.vb: Public ReadOnly Property IsIn As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.ParameterBuilder.IsOptional
  commentId: P:System.Reflection.Emit.ParameterBuilder.IsOptional
  id: IsOptional
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: IsOptional
  fullName: System.Reflection.Emit.ParameterBuilder.IsOptional
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsOptional
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 161
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves whether this parameter is optional.</p>\n"
  syntax:
    content: public bool IsOptional { get; }
    content.vb: Public ReadOnly Property IsOptional As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.ParameterBuilder.IsOut
  commentId: P:System.Reflection.Emit.ParameterBuilder.IsOut
  id: IsOut
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: IsOut
  fullName: System.Reflection.Emit.ParameterBuilder.IsOut
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsOut
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 158
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves whether this parameter is an output parameter.</p>\n"
  syntax:
    content: public bool IsOut { get; }
    content.vb: Public ReadOnly Property IsOut As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.ParameterBuilder.Name
  commentId: P:System.Reflection.Emit.ParameterBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.ParameterBuilder.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 143
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the name of this parameter.</p>\n"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Emit.ParameterBuilder.Position
  commentId: P:System.Reflection.Emit.ParameterBuilder.Position
  id: Position
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.Reflection.Emit.ParameterBuilder.Position
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Position
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 147
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the signature position for this parameter.</p>\n"
  syntax:
    content: public virtual int Position { get; }
    content.vb: Public Overridable ReadOnly Property Position As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  commentId: M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  id: SetConstant(System.Object)
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: SetConstant(Object)
  fullName: System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetConstant
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 46
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the default value of the parameter.</p>\n"
  remarks: "\n<p>\n<em>defaultValue</em> is restricted to the following types: <strong>Boolean</strong>, <strong>SByte</strong>, <strong>Int16</strong>, <strong>Int32</strong>, <strong>Int64</strong>, <strong>Byte</strong>, <strong>UInt16</strong>, <strong>UInt32</strong>, <strong>UInt64</strong>, <strong>Single</strong>, <strong>Double</strong>, <strong>DateTime</strong>, <strong>Char</strong>, <strong>String</strong>, and <strong>Enum</strong>. If the parameter type is a reference type, CLS compliance requires <em>defaultValue</em> to be <strong>null</strong>. However, starting with the .NET Framework 4, <em>defaultValue</em> can be non-null for a reference type as long as the value can be assigned to that reference type. For example, an <strong>Int32</strong> value can be assigned to a parameter of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. This is not CLS-compliant, but it can be useful in interop scenarios.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void SetConstant(object defaultValue)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub SetConstant(defaultValue As Object)
    parameters:
    - id: defaultValue
      type: System.Object
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is not one of the supported types.</p>\n<p>-or-</p>\n<p>The type of <em>defaultValue</em> does not match the type of the parameter.</p>\n<p>-or-</p>\n<p>The parameter is of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> or other reference type, <em>defaultValue</em> is not <strong>null</strong>, and the value cannot be assigned to the reference type.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 58
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute using a specified custom attribute blob.</p>\n"
  remarks: "\n<p>See the metadata specification in the ECMA Partition II documentation for details on how to format <em>binaryAttribute</em>. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(True)>

      Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
    - id: binaryAttribute
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 77
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute using a custom attribute builder.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
