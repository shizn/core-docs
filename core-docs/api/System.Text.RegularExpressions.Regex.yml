items:
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  id: Regex
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.Regex.#ctor
  - System.Text.RegularExpressions.Regex.#ctor(System.String)
  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.CacheSize
  - System.Text.RegularExpressions.Regex.CapNames
  - System.Text.RegularExpressions.Regex.Caps
  - System.Text.RegularExpressions.Regex.capsize
  - System.Text.RegularExpressions.Regex.capslist
  - System.Text.RegularExpressions.Regex.Escape(System.String)
  - System.Text.RegularExpressions.Regex.factory
  - System.Text.RegularExpressions.Regex.GetGroupNames
  - System.Text.RegularExpressions.Regex.GetGroupNumbers
  - System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  - System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  - System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  - System.Text.RegularExpressions.Regex.InitializeReferences
  - System.Text.RegularExpressions.Regex.internalMatchTimeout
  - System.Text.RegularExpressions.Regex.IsMatch(System.String)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Match(System.String)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Matches(System.String)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.MatchTimeout
  - System.Text.RegularExpressions.Regex.Options
  - System.Text.RegularExpressions.Regex.pattern
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.RightToLeft
  - System.Text.RegularExpressions.Regex.roptions
  - System.Text.RegularExpressions.Regex.Split(System.String)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.ToString
  - System.Text.RegularExpressions.Regex.Unescape(System.String)
  - System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Regex
  fullName: System.Text.RegularExpressions.Regex
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Regex
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 69
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Represents an immutable regular expression.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p></p>\n<p>The <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.</p>\n<p>If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref href=\"System.Configuration.RegexStringValidator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p></p>\n<p>To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in Regular Expression Language - Quick Reference. Next, you can optionally instantiate a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object. Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.</p>\n<p>For some common regular expression patterns, see Regular Expression Examples. There are also a number of online libraries of regular expression patterns, such as the one at <see href=\"http://www.regular-expressions.info/examples.html\">Regular-Expressions.info</see>. </p>\n"
  example:
  - >-
    <p>The following example uses a regular expression to check for repeated occurrences of words in a string. The regular expression <code>\b(?<word>\w+)\s+(\k<word>)\b</code> can be interpreted as shown in the following table.</p>

    <p>Pattern</p>

    <p>Description</p>

    <table>

    <tbody>

    <tr>

    <td>

    <p>

    <code>\b</code>

    </p>

    </td>

    <td>

    <p>Start the match at a word boundary.</p>

    </td>

    </tr>

    <tr>

    <td>

    <p>

    <code>(?<word>\w+)</code>

    </p>

    </td>

    <td>

    <p>Match one or more word characters up to a word boundary. Name this captured group <code>word</code>.</p>

    </td>

    </tr>

    <tr>

    <td>

    <p>

    <code>\s+</code>

    </p>

    </td>

    <td>

    <p>Match one or more white-space characters.</p>

    </td>

    </tr>

    <tr>

    <td>

    <p>

    <code>(\k<word>)</code>

    </p>

    </td>

    <td>

    <p>Match the captured group that is named <code>word</code>.</p>

    </td>

    </tr>

    <tr>

    <td>

    <p>

    <code>\b</code>

    </p>

    </td>

    <td>

    <p>Match a word boundary.</p>

    </td>

    </tr>

    </tbody>

    </table>Regex_Words#0<p>The following example illustrates the use of a regular expression to check whether a string either represents a currency value or has the correct format to represent a currency value. In this case, the regular expression is built dynamically from the <xref href="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" data-throw-if-not-resolved="false"></xref>, <xref href="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" data-throw-if-not-resolved="false"></xref>, <xref href="System.Globalization.NumberFormatInfo.CurrencySymbol" data-throw-if-not-resolved="false"></xref>, <xref href="System.Globalization.NumberFormatInfo.NegativeSign" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Globalization.NumberFormatInfo.PositiveSign" data-throw-if-not-resolved="false"></xref> properties for the user's current culture. If the system's current culture is en-US, the resulting regular expression is <code>^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$</code>. This regular expression can be interpreted as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Start at the beginning of the string.</p></td></tr><tr><td><p><code>\s*</code></p></td><td><p>Match zero or more white-space characters.</p></td></tr><tr><td><p><code>[\+-]?</code></p></td><td><p>Match zero or one occurrence of either the positive sign or the negative sign.</p></td></tr><tr><td><p><code>\s?</code></p></td><td><p>Match zero or one white-space character.</p></td></tr><tr><td><p><code>\$?</code></p></td><td><p>Match zero or one occurrence of the dollar sign.</p></td></tr><tr><td><p><code>\s?</code></p></td><td><p>Match zero or one white-space character.</p></td></tr><tr><td><p><code>\d*</code></p></td><td><p>Match zero or more decimal digits.</p></td></tr><tr><td><p><code>\.?</code></p></td><td><p>Match zero or one decimal point symbol.</p></td></tr><tr><td><p><code>\d{2}?</code></p></td><td><p>Match two decimal digits zero or one time.</p></td></tr><tr><td><p><code>(\d*\.?\d{2}?){1}</code></p></td><td><p>Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>Match the end of the string.</p></td></tr></tbody></table><p>In this case, the regular expression assumes that a valid currency string does not contain group separator symbols, and that it has either no fractional digits or the number of fractional digits defined by the current culture's <xref href="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" data-throw-if-not-resolved="false"></xref> property.</p>System.Text.RegularExpressions.Regex.Class#1<p>Because the regular expression in this example is built dynamically, we do not know at design time whether the current culture's currency symbol, decimal sign, or positive and negative signs might be misinterpreted by the regular expression engine as regular expression language operators. To prevent any misinterpretation, the example passes each dynamically generated string to the <xref href="System.Text.RegularExpressions.Regex.Escape(System.String)" data-throw-if-not-resolved="false"></xref> method.</p>
  syntax:
    content: public class Regex
    content.vb: Public Class Regex
  seealso:
  - type: System.Configuration.RegexStringValidator
    commentId: T:System.Configuration.RegexStringValidator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  commentId: F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  id: InfiniteMatchTimeout
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: InfiniteMatchTimeout
  fullName: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InfiniteMatchTimeout
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 71
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies that a pattern-matching operation should not time out.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> class constructor and a number of static matching methods use the <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> constant to indicate that the attempt to find a pattern match should not time out.</p>\n<p>Setting the regular expression engine's time-out value to <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern. If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.</p>\n<p>For more information about handling backtracking, see Backtracking in Regular Expressions.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> constant can be supplied as the value of the <em>matchTimeout</em> argument of the following members:</p>\n<ul><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  syntax:
    content: public static readonly TimeSpan InfiniteMatchTimeout
    content.vb: Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan
    return:
      type: System.TimeSpan
  seealso:
  - type: System.Text.RegularExpressions.Regex.MatchTimeout
    commentId: P:System.Text.RegularExpressions.Regex.MatchTimeout
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.RegularExpressions.Regex.pattern
  commentId: F:System.Text.RegularExpressions.Regex.pattern
  id: pattern
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: pattern
  fullName: System.Text.RegularExpressions.Regex.pattern
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: pattern
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 72
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Used by a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <see cref=\"Overload:System.Text.RegularExpressions.Regex.CompileToAssembly\"></see> method. </p>\n"
  syntax:
    content: protected string pattern
    content.vb: Protected pattern As String
    return:
      type: System.String
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.factory
  commentId: F:System.Text.RegularExpressions.Regex.factory
  id: factory
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: factory
  fullName: System.Text.RegularExpressions.Regex.factory
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: factory
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 73
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Used by a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <see cref=\"Overload:System.Text.RegularExpressions.Regex.CompileToAssembly\"></see> method. </p>\n"
  syntax:
    content: protected RegexRunnerFactory factory
    content.vb: Protected factory As RegexRunnerFactory
    return:
      type: System.Text.RegularExpressions.RegexRunnerFactory
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.roptions
  commentId: F:System.Text.RegularExpressions.Regex.roptions
  id: roptions
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: roptions
  fullName: System.Text.RegularExpressions.Regex.roptions
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: roptions
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 74
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Used by a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <see cref=\"Overload:System.Text.RegularExpressions.Regex.CompileToAssembly\"></see> method. </p>\n"
  syntax:
    content: protected RegexOptions roptions
    content.vb: Protected roptions As RegexOptions
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.internalMatchTimeout
  commentId: F:System.Text.RegularExpressions.Regex.internalMatchTimeout
  id: internalMatchTimeout
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: internalMatchTimeout
  fullName: System.Text.RegularExpressions.Regex.internalMatchTimeout
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: internalMatchTimeout
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 75
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</p>\n"
  syntax:
    content: protected TimeSpan internalMatchTimeout
    content.vb: Protected internalMatchTimeout As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.capsize
  commentId: F:System.Text.RegularExpressions.Regex.capsize
  id: capsize
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: capsize
  fullName: System.Text.RegularExpressions.Regex.capsize
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: capsize
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 76
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Used by a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <see cref=\"Overload:System.Text.RegularExpressions.Regex.CompileToAssembly\"></see> method. </p>\n"
  syntax:
    content: protected int capsize
    content.vb: Protected capsize As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.capslist
  commentId: F:System.Text.RegularExpressions.Regex.capslist
  id: capslist
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: capslist
  fullName: System.Text.RegularExpressions.Regex.capslist
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: capslist
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 77
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Used by a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <see cref=\"Overload:System.Text.RegularExpressions.Regex.CompileToAssembly\"></see> method. </p>\n"
  syntax:
    content: protected string[] capslist
    content.vb: Protected capslist As String()
    return:
      type: System.String[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.Caps
  commentId: P:System.Text.RegularExpressions.Regex.Caps
  id: Caps
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Caps
  fullName: System.Text.RegularExpressions.Regex.Caps
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Caps
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 78
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: protected IDictionary Caps { get; set; }
    content.vb: Protected Property Caps As IDictionary
    parameters: []
    return:
      type: System.Collections.IDictionary
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.CapNames
  commentId: P:System.Text.RegularExpressions.Regex.CapNames
  id: CapNames
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: CapNames
  fullName: System.Text.RegularExpressions.Regex.CapNames
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CapNames
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 79
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: protected IDictionary CapNames { get; set; }
    content.vb: Protected Property CapNames As IDictionary
    parameters: []
    return:
      type: System.Collections.IDictionary
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.#ctor
  commentId: M:System.Text.RegularExpressions.Regex.#ctor
  id: '#ctor'
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Regex()
  fullName: System.Text.RegularExpressions.Regex.Regex()
  type: Constructor
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 80
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Note that this constructor is protected; it can only be called by classes derived from the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected Regex()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.#ctor(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Regex(String)
  fullName: System.Text.RegularExpressions.Regex.Regex(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 81
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class for the specified regular expression.</p>\n"
  remarks: "\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the .NET Framework Regular Expressions and Regular Expression Language - Quick Reference topics.</p>\n<p>Calling the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a value of <xref href=\"System.Text.RegularExpressions.RegexOptions.None\" data-throw-if-not-resolved=\"false\"></xref> for the <em>options</em> argument.</p>\n<p>A <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is immutable, which means that it can be used only for the match pattern you define when you create it. However, it can be used any number of times without being recompiled.</p>\n<p>This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in <em>pattern</em>. For a case-insensitive match, use the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters \"a\" or \"t\".</p>System.Text.RegularExpressions.Regex.Constructors#1<p>Note that the regular expression pattern cannot match the word \"The\" at the beginning of the text, because comparisons are case-sensitive by default. For an example of case-insensitive comparison, see the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>"
  syntax:
    content: public Regex(string pattern)
    content.vb: Public Sub New(pattern As String)
    parameters:
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>pattern</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)
  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions)'
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Regex(String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Regex(System.String, System.Text.RegularExpressions.RegexOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 82
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class for the specified regular expression, with options that modify the pattern.</p>\n"
  remarks: "\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the .NET Framework Regular Expressions and Regular Expression Language - Quick Reference topics.</p>\n<p>A <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is immutable, which means that it can be used only for the match parameters you define when you create it. However, it can be used any number of times without being recompiled.</p>\n"
  example:
  - "\n<p>The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters \"a\" or \"t\".</p>System.Text.RegularExpressions.Regex.Constructors#2<p>Note that the match collection includes the word \"The\" that begins the text because the <em>options</em> parameter has defined case-insensitive comparisons. </p>"
  syntax:
    content: public Regex(string pattern, RegexOptions options)
    content.vb: Public Sub New(pattern As String, options As RegexOptions)
    parameters:
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that modify the regular expression. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> contains an invalid flag.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)'
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Regex(String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Regex(System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 83
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</p>\n"
  remarks: "\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the .NET Framework Regular Expressions and Regular Expression Language - Quick Reference topics.</p>\n<p>A <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is immutable, which means that it can be used only for the match pattern that you define when you create it. However, it can be used any number of times without being recompiled.</p>\n<p>The <em>matchTimeout</em> parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. <em>matchTimeout</em> overrides any default time-out value defined for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. The instance pattern-matching methods that observe the <em>matchTimeout</em>time-out interval include the following:</p>\n<ul><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see Best Practices for Regular Expressions in the .NET Framework and Backtracking in Regular Expressions. To set a reasonable time-out interval, consider the following factors:</p>\n<ul><li>\n<p>The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.</p>\n</li><li>\n<p>The expected machine load. Processing takes more time on systems that have high CPU and memory utilization.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with a time-out value of one second. The regular expression pattern <code>(a+)+$</code>, which matches one or more sequences of one or more \"a\" characters at the end of a line, is subject to excessive backtracking. If a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> is thrown, the example increases the time-out value up to the maximum value of three seconds. Otherwise, it abandons the attempt to match the pattern.</p>System.Text.RegularExpressions.Regex.ctor#1"
  syntax:
    content: public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Sub New(pattern As String, options As RegexOptions, matchTimeout As TimeSpan)
    parameters:
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that modify the regular expression.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.CacheSize
  commentId: P:System.Text.RegularExpressions.Regex.CacheSize
  id: CacheSize
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: CacheSize
  fullName: System.Text.RegularExpressions.Regex.CacheSize
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CacheSize
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 84
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value. </p>\n<p>By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the <xref href=\"System.Text.RegularExpressions.Regex.CacheSize\" data-throw-if-not-resolved=\"false\"></xref> property only when you want to turn off caching or when you have an unusually large cache.</p>\n"
  example:
  - 
  syntax:
    content: public static int CacheSize { get; set; }
    content.vb: Public Shared Property CacheSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The maximum number of entries in the static cache.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value in a set operation is less than zero.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.MatchTimeout
  commentId: P:System.Text.RegularExpressions.Regex.MatchTimeout
  id: MatchTimeout
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: MatchTimeout
  fullName: System.Text.RegularExpressions.Regex.MatchTimeout
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MatchTimeout
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 85
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the time-out interval of the current instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.MatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> property defines the approximate maximum time interval for a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception during its next timing check after the time-out interval has elapsed. This prevents the regular expression engine from processing input strings that require excessive backtracking. For more information, see Backtracking in Regular Expressions and Best Practices for Regular Expressions in the .NET Framework.</p>\n<p>This property is read-only. You can set its value explicitly for an individual <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object by calling the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor; and you can set its value for all <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> matching operations in an application domain by calling the <xref href=\"System.AppDomain.SetData(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method and providing a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property, as the following example illustrates. </p>System.Text.RegularExpressions.Regex.MatchTimeout#1<p>If you do not explicitly set a time-out interval, the default value <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> is used, and matching operations do not time out.</p>"
  syntax:
    content: public TimeSpan MatchTimeout { get; }
    content.vb: Public ReadOnly Property MatchTimeout As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>The maximum time interval that can elapse in a pattern-matching operation before a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> is thrown, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> if time-outs are disabled.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Regex.Options
  commentId: P:System.Text.RegularExpressions.Regex.Options
  id: Options
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Options
  fullName: System.Text.RegularExpressions.Regex.Options
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Options
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 86
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the options that were passed into the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.Text.RegularExpressions.Regex.Options\" data-throw-if-not-resolved=\"false\"></xref> property consists of one or more members of the <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration. If no options were defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class constructor, its value is <xref href=\"System.Text.RegularExpressions.RegexOptions.None\" data-throw-if-not-resolved=\"false\"></xref>. The available options are discussed in detail in the Regular Expression Options topic.</p>\n<p>Note that the <xref href=\"System.Text.RegularExpressions.Regex.Options\" data-throw-if-not-resolved=\"false\"></xref> property does not reflect inline options defined in the regular expression pattern itself. </p>\n"
  syntax:
    content: public RegexOptions Options { get; }
    content.vb: Public ReadOnly Property Options As RegexOptions
    parameters: []
    return:
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>One or more members of the <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration that represent options that were passed to the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor </p>\n"
  seealso:
  - type: System.Text.RegularExpressions.RegexOptions
    commentId: T:System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Regex.RightToLeft
  commentId: P:System.Text.RegularExpressions.Regex.RightToLeft
  id: RightToLeft
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: RightToLeft
  fullName: System.Text.RegularExpressions.Regex.RightToLeft
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightToLeft
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 87
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets a value that indicates whether the regular expression searches from right to left.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> if the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> instance was created with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> option.</p>\n"
  syntax:
    content: public bool RightToLeft { get; }
    content.vb: Public ReadOnly Property RightToLeft As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the regular expression searches from right to left; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Regex.InitializeReferences
  commentId: M:System.Text.RegularExpressions.Regex.InitializeReferences
  id: InitializeReferences
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: InitializeReferences()
  fullName: System.Text.RegularExpressions.Regex.InitializeReferences()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InitializeReferences
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 88
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Used by a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <see cref=\"Overload:System.Text.RegularExpressions.Regex.CompileToAssembly\"></see> method. </p>\n"
  syntax:
    content: protected void InitializeReferences()
    content.vb: Protected Sub InitializeReferences
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>References have already been initialized. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)
  id: ValidateMatchTimeout(System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: ValidateMatchTimeout(TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValidateMatchTimeout
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 89
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Checks whether a time-out interval is within an acceptable range.</p>\n"
  syntax:
    content: protected static void ValidateMatchTimeout(TimeSpan matchTimeout)
    content.vb: Protected Shared Sub ValidateMatchTimeout(matchTimeout As TimeSpan)
    parameters:
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>The time-out interval to check.</p>\n"
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: System.Text.RegularExpressions.Regex.Escape(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Escape(System.String)
  id: Escape(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Escape(String)
  fullName: System.Text.RegularExpressions.Regex.Escape(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Escape
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 90
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Escapes a minimal set of characters (\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text. In the following example, the regular expression \"[(.*?)]\" is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.</p>System.Text.RegularExpressions.Regex.Escape#1<p>However, if the opening bracket is escaped by passing it to the <xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.</p>System.Text.RegularExpressions.Regex.Escape#2<p>In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\) as well as by calling the <xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters. </p><p>If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace\" data-throw-if-not-resolved=\"false\"></xref> option enabled.</p><p>While the <xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\) character. For an illustration, see the Example section.</p>"
  example:
  - "\n<p>The following example extracts comments from text. It assumes that the comments are delimited by a begin comment symbol and an end comment symbol that is selected by the user. Because the comment symbols are to be interpreted literally, they are passed to the <xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that they cannot be misinterpreted as metacharacters. In addition, the example explicitly checks whether the end comment symbol entered by the user is a closing bracket (]) or brace (}). If it is, a backslash character (\\) is prepended to the bracket or brace so that it is interpreted literally. Note that the example also uses the <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> collection to display the comment only, rather than the comment together with its opening and closing comment symbols.</p>System.Text.RegularExpressions.Regex.Escape#3"
  syntax:
    content: public static string Escape(string str)
    content.vb: Public Shared Function Escape(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The input string that contains the text to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string of characters with metacharacters converted to their escaped form.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Regex.Unescape(System.String)
    commentId: M:System.Text.RegularExpressions.Regex.Unescape(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.GetGroupNames
  commentId: M:System.Text.RegularExpressions.Regex.GetGroupNames
  id: GetGroupNames
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: GetGroupNames()
  fullName: System.Text.RegularExpressions.Regex.GetGroupNames()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGroupNames
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 91
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Returns an array of capturing group names for the regular expression.</p>\n"
  remarks: "\n<p>The collection of group names contains the set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are automatically assigned numerical names (\"0\", \"1\", \"2\", \"3\", and so on). The \"0\" named group represents all text matched by the regular expression pattern. Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern. </p>\n<p>You can use the <xref href=\"System.Array.Length\" data-throw-if-not-resolved=\"false\"></xref> property on the array returned by this method to determine the number of groups in a regular expression. </p>\n"
  example:
  - "\n<p>The following example defines a general-purpose <code>ShowMatches</code> method that displays the names of regular expression groups and their matched text. </p>System.Text.RegularExpressions.Regex.GetGroupNames#1<p>In this case, the regular expression pattern <code>\\b(?<FirstWord>\\w+)\\s?((\\w+)\\s)*(?<LastWord>\\w+)?(?<Punctuation>\\p{Po})</code> is intended to parse a simple sentence, and to identify its first word, last word, and ending punctuation mark. The following table shows how the regular expression pattern is interpreted: </p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><strong>\\b</strong></p></td><td><p>Begin the match at a word boundary. </p></td></tr><tr><td><p><strong>(?<FirstWord>\\w+)</strong></p></td><td><p>Match one or more word characters. This is the <code>FirstWord</code> named group. </p></td></tr><tr><td><p>\\s?</p></td><td><p>Match zero or one white-space characters. </p></td></tr><tr><td><p>(\\w+)</p></td><td><p>Match one or more word characters. This is the second capturing group. </p></td></tr><tr><td><p>\\s</p></td><td><p>Match a white-space character. </p></td></tr><tr><td><p>((\\w+)\\s)*</p></td><td><p>Match zero or more occurrences of one or more word characters followed by a white space. This is the first capturing group. </p></td></tr><tr><td><p>(?<LastWord>\\w+)?</p></td><td><p>Match zero or one occurrence of one or more word characters. This is the <code>LastWord</code> named group. </p></td></tr><tr><td><p>(?<Punctuation>\\p{Po})</p></td><td><p>Match a character whose Unicode category is Punctuation, Other. This is the <code>Punctuation</code> named group. </p></td></tr></tbody></table>"
  syntax:
    content: public string[] GetGroupNames()
    content.vb: Public Function GetGroupNames As String()
    return:
      type: System.String[]
      description: "\n<p>A string array of group names.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.GroupCollection
    commentId: T:System.Text.RegularExpressions.GroupCollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.GetGroupNumbers
  commentId: M:System.Text.RegularExpressions.Regex.GetGroupNumbers
  id: GetGroupNumbers
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: GetGroupNumbers()
  fullName: System.Text.RegularExpressions.Regex.GetGroupNumbers()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGroupNumbers
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 92
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Returns an array of capturing group numbers that correspond to group names in an array.</p>\n"
  remarks: "\n<p>Both unnamed and named capturing groups can be accessed by number. Unnamed groups are numbered from left to right starting with 1. (The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.</p>\n<p>Referencing a group by its number instead of by string name can provide faster access.</p>\n"
  example:
  - "\n<p>The following example defines a regular expression, <code>\\b((?<word>\\w+)\\s*)+(?<end>[.?!])</code>, that matches a sentence. The regular expression includes three capturing groups: an unnamed group that captures an individual word along with a space character that may follow it; a group named <code>word</code> that captures the individual words in the sentence; and a group named <code>end</code> that captures the punctuation that ends the sentence. The example calls the <xref href=\"System.Text.RegularExpressions.Regex.GetGroupNumbers\" data-throw-if-not-resolved=\"false\"></xref> method to get the numbers of all capturing groups, and then displays their captured string. In addition, the <xref href=\"System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to indicate whether a particular numbered group corresponds to a named group.</p>System.Text.RegularExpressions.Regex.GetGroupNumbers#1<p>The regular expression pattern is interpreted as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>(?<word>\\w+)</code></p></td><td><p>Match one or more word characters and assign the matched strings to a group named <code>word</code>.</p></td></tr><tr><td><p><code>\\s*</code></p></td><td><p>Match zero or more white-space characters.</p></td></tr><tr><td><p><code>((?<word>\\w+)\\s*)</code></p></td><td><p>Assign the <code>word</code> captured group followed by any captured white-space characters to the first captured group.</p></td></tr><tr><td><p><code>((?<word>\\w+)\\s*)+</code></p></td><td><p>Match the pattern of one or more word characters followed by any white-space characters one or more times.</p></td></tr><tr><td><p><code>(?<end>[.?!])</code></p></td><td><p>Match a period, question mark, or exclamation point. Assign the matched character to the <code>end</code> capturing group. </p></td></tr></tbody></table>"
  syntax:
    content: public int[] GetGroupNumbers()
    content.vb: Public Function GetGroupNumbers As Integer()
    return:
      type: System.Int32[]
      description: "\n<p>An integer array of group numbers.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.GroupCollection
    commentId: T:System.Text.RegularExpressions.GroupCollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  id: GroupNameFromNumber(System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: GroupNameFromNumber(Int32)
  fullName: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupNameFromNumber
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 93
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the group name that corresponds to the specified group number.</p>\n"
  remarks: "\n<p>A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (subexpression) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?<strong><</strong>name<strong>></strong>subexpression) or (?'name'subexpression), where name is the name by which the subexpression will be identified. (For more information, see Grouping Constructs in Regular Expressions.) The <xref href=\"System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern. </p>\n<p>If <em>i</em> is the number of a named group, the method returns the name of the group. If <em>i</em> is the number of an unnamed group, the method returns the string representation of the number. For example, if <em>i</em> is 1, the method returns \"1\". If <em>i</em> is not the number of a capturing group, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a pattern match is found, the value returned by this method can then be used to retrieve the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object that represents the captured group from the <xref href=\"System.Text.RegularExpressions.GroupCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Text.RegularExpressions.GroupCollection\" data-throw-if-not-resolved=\"false\"></xref> object is returned by the <xref href=\"System.Text.RegularExpressions.Match.Groups\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example defines a regular expression pattern that matches an address line containing a U.S. city name, state name, and zip code. The example uses the <xref href=\"System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the names of capturing groups. It then uses these names to retrieve the corresponding captured groups for matches.</p>System.Text.RegularExpressions.Regex.GroupNameFromNumber#1<p>The regular expression pattern is defined by the following expression: </p><p><code>(?<city>[A-Za-z\\s]+), (?<state>[A-Za-z]{2}) (?<zip>\\d{5}(-\\d{4})?)</code></p><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>(?<city>[A-Za-z\\s]+)</code></p></td><td><p>Match one or more alphabetic or white-space character. Assign this captured group the name <code>city</code>.</p></td></tr><tr><td><p><code>, </code></p></td><td><p>Match a comma (,) followed by a white-space character.</p></td></tr><tr><td><p><code>(?<state>[A-Za-z]{2})</code></p></td><td><p>Match two alphabetic characters. Assign this captured group the name <code>state</code>. This group should be followed by a white-space character.</p></td></tr><tr><td><p><code>(?<zip>\\d{5}(-\\d{4})?)</code></p></td><td><p>Match five numeric digits followed by either zero or one occurrence of a hyphen followed by four digits. Assign this captured group the name <code>zip</code>.</p></td></tr></tbody></table>"
  syntax:
    content: public string GroupNameFromNumber(int i)
    content.vb: Public Function GroupNameFromNumber(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The group number to convert to the corresponding group name. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <em>i</em>, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.GroupCollection
    commentId: T:System.Text.RegularExpressions.GroupCollection
  - type: System.Text.RegularExpressions.Regex.GetGroupNumbers
    commentId: M:System.Text.RegularExpressions.Regex.GetGroupNumbers
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  id: GroupNumberFromName(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: GroupNumberFromName(String)
  fullName: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupNumberFromName
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 94
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Returns the group number that corresponds to the specified group name.</p>\n"
  remarks: "\n<p>A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (subexpression) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?<strong><</strong>name<strong>></strong>subexpression) or (?'name'subexpression), where name is the name by which the subexpression will be identified. (For more information, see Grouping Constructs in Regular Expressions.) The <xref href=\"System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern. </p>\n<p>If <em>name</em> is the string representation of a group number that is present in the regular expression pattern, the method returns that number. If <em>name</em> corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number. The comparison of <em>name</em> with the group name is case-sensitive. If <em>name</em> does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.</p>\n"
  syntax:
    content: public int GroupNumberFromName(string name)
    content.vb: Public Function GroupNumberFromName(name As String) As Integer
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The group name to convert to the corresponding group number. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The group number that corresponds to the specified group name, or -1 if <em>name</em> is not a valid group name.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.GroupCollection
    commentId: T:System.Text.RegularExpressions.GroupCollection
  - type: System.Text.RegularExpressions.Regex.GetGroupNames
    commentId: M:System.Text.RegularExpressions.Regex.GetGroupNames
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String)
  id: IsMatch(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: IsMatch(String)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMatch
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 95
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor finds a match in a specified input string.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.RegularExpressions.Regex.IsMatch\"></see> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <see cref=\"Overload:System.Text.RegularExpressions.Regex.Match\"></see> or <see cref=\"Overload:System.Text.RegularExpressions.Regex.Matches\"></see> method.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character. </p>System.Text.RegularExpressions.Regex.IsMatch#2<p>The regular expression pattern is:</p><pre><code>^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$</code></pre><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Begin the match at the beginning of the line.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character. </p></td></tr><tr><td><p><code>\\d{2}</code></p></td><td><p>Match two numeric characters.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>-</code></p></td><td><p>Match a hyphen.</p></td></tr><tr><td><p><code>\\d{3}</code></p></td><td><p>Match exactly three numeric characters.</p></td></tr><tr><td><p><code>(-\\d{3}){2}</code></p></td><td><p>Find a hyphen followed by three numeric characters, and match two occurrences of this pattern. </p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>End the match at the end of the line.</p></td></tr></tbody></table>"
  syntax:
    content: public bool IsMatch(string input)
    content.vb: Public Function IsMatch(input As String) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)
  id: IsMatch(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: IsMatch(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMatch
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 96
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.RegularExpressions.Regex.IsMatch\"></see> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <see cref=\"Overload:System.Text.RegularExpressions.Regex.Match\"></see> or <see cref=\"Overload:System.Text.RegularExpressions.Regex.Matches\"></see> method.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a string is a valid part number. It searches for a part number that follows a colon (:) character in a string. The <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method is used to determine the position of the colon character, which is then passed to the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character. </p>System.Text.RegularExpressions.Regex.IsMatch#3<p>The regular expression pattern is:</p><pre><code>[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$</code></pre><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>\\d{2}</code></p></td><td><p>Match two numeric characters.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>-</code></p></td><td><p>Match a hyphen.</p></td></tr><tr><td><p><code>\\d{3}</code></p></td><td><p>Match exactly three numeric characters.</p></td></tr><tr><td><p><code>(-\\d{3}){2}</code></p></td><td><p>Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>End the match at the end of the line.</p></td></tr></tbody></table>"
  syntax:
    content: public bool IsMatch(string input, int startat)
    content.vb: Public Function IsMatch(input As String, startat As Integer) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: startat
      type: System.Int32
      description: "\n<p>The character position at which to start the search. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)
  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)
  id: IsMatch(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: IsMatch(String, String)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMatch
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 97
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Indicates whether the specified regular expression finds a match in the specified input string.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.RegularExpressions.Regex.IsMatch\"></see> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <see cref=\"Overload:System.Text.RegularExpressions.Regex.Match\"></see> or <see cref=\"Overload:System.Text.RegularExpressions.Regex.Matches\"></see> method.</p>\n<p>The static <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the regular expression pattern specified by <em>pattern</em> and calling the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String)\" data-throw-if-not-resolved=\"false\"></xref> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character. </p>System.Text.RegularExpressions.Regex.IsMatch#1<p>The regular expression pattern is:</p><pre><code>^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$</code></pre><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Begin the match at the beginning of the line.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>\\d{2}</code></p></td><td><p>Match two numeric characters.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>-</code></p></td><td><p>Match a hyphen.</p></td></tr><tr><td><p><code>\\d{3}</code></p></td><td><p>Match exactly three numeric characters.</p></td></tr><tr><td><p><code>(-\\d{3}){2}</code></p></td><td><p>Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</p></td></tr><tr><td><p><code>[a-zA-Z0-9]</code></p></td><td><p>Match a single alphabetic character (<code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>) or numeric character.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>End the match at the end of the line.</p></td></tr></tbody></table>"
  syntax:
    content: public static bool IsMatch(string input, string pattern)
    content.vb: Public Shared Function IsMatch(input As String, pattern As String) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: IsMatch(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMatch
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 98
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.RegularExpressions.Regex.IsMatch\"></see> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <see cref=\"Overload:System.Text.RegularExpressions.Regex.Match\"></see> or <see cref=\"Overload:System.Text.RegularExpressions.Regex.Matches\"></see> method.</p>\n<p>The static <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the regular expression pattern specified by <em>pattern</em> and the regular expression options specified by <em>options</em> and calling the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String)\" data-throw-if-not-resolved=\"false\"></xref> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character. </p>System.Text.RegularExpressions.Regex.IsMatch#4<p>The regular expression pattern is:</p><pre><code>^[A-Z0-9]\\d{2}[A-Z0-9](-\\d{3}){2}[A-Z0-9]$</code></pre><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Begin the match at the beginning of the string.</p></td></tr><tr><td><p><code>[A-Z0-9]</code></p></td><td><p>Match any single alphabetic character from <code>A</code> through <code>Z</code>, or any numeric character.</p></td></tr><tr><td><p><code>\\d{2}</code></p></td><td><p>Match two numeric characters.</p></td></tr><tr><td><p><code>[A-Z0-9]</code></p></td><td><p>Match any single alphabetic character from <code>A</code> through <code>Z</code>, or any numeric character.</p></td></tr><tr><td><p><code>-</code></p></td><td><p>Match a hyphen.</p></td></tr><tr><td><p><code>\\d{3}</code></p></td><td><p>Match exactly three numeric characters.</p></td></tr><tr><td><p><code>(-\\d{3}){2}</code></p></td><td><p>Find a hyphen followed by three numeric characters, and match two occurrences of this pattern..</p></td></tr><tr><td><p><code>[A-Z0-9]</code></p></td><td><p>Match any single alphabetic character from <code>A</code> through <code>Z</code>, or any numeric character.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>End the match at the end of the string.</p></td></tr></tbody></table><p>Calling the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>options</em> parameter set to <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> is equivalent to defining the following regular expression:</p><pre><code>[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]</code></pre><p>For comparison, see the example for the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>"
  syntax:
    content: public static bool IsMatch(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function IsMatch(input As String, pattern As String, options As RegexOptions) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref>  value.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: IsMatch(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMatch
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 99
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.RegularExpressions.Regex.IsMatch\"></see> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <see cref=\"Overload:System.Text.RegularExpressions.Regex.Match\"></see> or <see cref=\"Overload:System.Text.RegularExpressions.Regex.Matches\"></see> method.</p>\n<p>The static <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the regular expression pattern specified by <em>pattern</em> and the regular expression options specified by <em>options</em> and calling the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String)\" data-throw-if-not-resolved=\"false\"></xref> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>The <em>matchTimeout</em> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see Best Practices for Regular Expressions in the .NET Framework and Backtracking in Regular Expressions. If no match is found in that time interval, the method throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. <em>matchTimeout</em> overrides any default time-out value defined for the application domain in which the method executes. </p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character. Matching the regular expression pattern should involve minimal searching through the input string, so the method sets a time-out interval of 500 milliseconds. </p>System.Text.RegularExpressions.Regex.IsMatch#5<p>The regular expression pattern is:</p><pre><code>^[A-Z0-9]\\d{2}[A-Z0-9](-\\d{3}){2}[A-Z0-9]$</code></pre><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Begin the match at the beginning of the string.</p></td></tr><tr><td><p><code>[A-Z0-9]</code></p></td><td><p>Match any single alphabetic character from <code>A</code> through <code>Z</code>, or any numeric character.</p></td></tr><tr><td><p><code>\\d{2}</code></p></td><td><p>Match two numeric characters.</p></td></tr><tr><td><p><code>[A-Z0-9]</code></p></td><td><p>Match any single alphabetic character from <code>A</code> through <code>Z</code>, or any numeric character.</p></td></tr><tr><td><p><code>-</code></p></td><td><p>Match a hyphen.</p></td></tr><tr><td><p><code>\\d{3}</code></p></td><td><p>Match exactly three numeric characters.</p></td></tr><tr><td><p><code>(-\\d{3}){2}</code></p></td><td><p>Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</p></td></tr><tr><td><p><code>[A-Z0-9]</code></p></td><td><p>Match any single alphabetic character from <code>A</code> through <code>Z</code>, or any numeric character.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>End the match at the end of the string.</p></td></tr></tbody></table><p>Calling the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>options</em> parameter set to <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> is equivalent to defining the following regular expression:</p><pre><code>[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]</code></pre><p>For comparison, see the example for the <xref href=\"System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>"
  syntax:
    content: public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function IsMatch(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match.</p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Match(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String)
  id: Match(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Match(String)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 100
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for the first occurrence of the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property. If a match is found, the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the substring from <em>input</em> that matches the regular expression pattern. If no match is found, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns the first substring in <em>input</em> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method. You can also retrieve all matches in a single method call by calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>\n"
  example:
  - "\n<p>The following example finds regular expression pattern matches in a string, then lists the matched groups, captures, and capture positions.</p>Regex Match, NextMatch, Groups, Captures#8<p>The regular expression pattern <code>(\\w+)\\s+(car)</code> matches occurrences of the word \"car\" along with the word that precedes it. It is interpreted as shown in the following table. </p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>(\\w+)</code></p></td><td><p>Match one or more word characters. This is the first capturing group. </p></td></tr><tr><td><p><code>\\s+</code></p></td><td><p>Match one or more white-space characters. </p></td></tr><tr><td><p>(car)</p></td><td><p>Match the literal string \"car\". This is the second capturing group. </p></td></tr></tbody></table>"
  syntax:
    content: public Match Match(string input)
    content.vb: Public Function Match(input As String) As Match
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An object that contains information about the match.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Match.NextMatch
    commentId: M:System.Text.RegularExpressions.Match.NextMatch
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)
  id: Match(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Match(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 101
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns the first substring that matches a regular expression pattern, starting at or after the <em>startat</em> character position, in an input string. For information about the language elements used to build a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>The regular expression pattern for which the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method searches is defined by the call to one of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class constructors. For more information about the elements that can form a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>You can optionally specify a starting position in the string by using the <em>startat</em> parameter. When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in <em>startat</em>. When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> option), the match and scan move in the opposite direction and begin with the character at <em>startat</em> -1. If you do not specify a starting position, the search begins at the default <em>startat</em> position. If the regular expression searches from left to right, the default <em>startat</em> position is at the left end of <em>input</em>; if it searches from right to left, the default <em>startat</em> position is at the right end of <em>input</em>.</p>\n<p>If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a <code>\\G</code> (at the left for a left-to-right pattern, or at the right for a right-to-left pattern). This restricts the match so it must start exactly at <em>startat</em>.</p>\n<p>You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property. If a match is found, the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the substring from <em>input</em> that matches the regular expression pattern. If no match is found, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns the first substring found at or after the <em>startat</em> character position in <em>input</em> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method. You can also retrieve all matches in a single method call by calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>\n"
  syntax:
    content: public Match Match(string input, int startat)
    content.vb: Public Function Match(input As String, startat As Integer) As Match
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: startat
      type: System.Int32
      description: "\n<p>The zero-based character position at which to start the search. </p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An object that contains information about the match.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Match.NextMatch
    commentId: M:System.Text.RegularExpressions.Match.NextMatch
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)
  id: Match(System.String,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Match(String, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 102
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns the first substring that matches a regular expression pattern in a portion of an input string. For information about the language elements used to build a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>The regular expression pattern for which the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method searches is defined by the call to one of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class constructors. For more information about the elements that can form a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method searches the portion of <em>input</em> defined by the <em>beginning</em> and <em>length</em> parameters for the regular expression pattern. <em>beginning</em> always defines the index of the leftmost character to include in the search, and <em>length</em> defines the maximum number of characters to search. Together, they define the range of the search. If the search proceeds from left to right (the default), the regular expression engine searches from the character at index <em>beginning</em> to the character at index <em>beginning</em><strong>+</strong><em>length</em><strong>– 1</strong>. If the regular expression engine was instantiated by using the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> option so that the search proceeds from right to left, the regular expression engine searches from the character at index <em>beginning</em><strong>+</strong><em>length</em><strong>– 1</strong> to the character at index <em>beginning</em>. This method returns the first match that it finds within this range. You can retrieve subsequent matches by repeatedly calling the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property. If a match is found, the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the substring from <em>input</em> that matches the regular expression pattern. If no match is found, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>\n"
  syntax:
    content: public Match Match(string input, int beginning, int length)
    content.vb: Public Function Match(input As String, beginning As Integer, length As Integer) As Match
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: beginning
      type: System.Int32
      description: "\n<p>The zero-based character position in the input string that defines the leftmost position to be searched. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters in the substring to include in the search. </p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An object that contains information about the match.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>beginning</em> is less than zero or greater than the length of <em>input</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero or greater than the length of <em>input</em>.</p>\n<p>-or-</p>\n<p>\n<em>beginning</em>\n<strong>+</strong>\n<em>length</em>\n<strong>–1</strong> identifies a position that is outside the range of <em>input</em>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Match.NextMatch
    commentId: M:System.Text.RegularExpressions.Match.NextMatch
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)
  id: Match(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Match(String, String)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 103
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for the first occurrence of the specified regular expression.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>The static <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. In this case, the regular expression engine caches the regular expression pattern.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property. If a match is found, the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the substring from <em>input</em> that matches the regular expression pattern. If no match is found, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns the first substring in <em>input</em> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method. You can also retrieve all matches in a single method call by calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to find the first word that contains at least one <code>z</code> character, and then calls the <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method to find any additional matches.</p>System.Text.RegularExpressions.Regex.Match#1<p>The regular expression pattern <code>\\b\\w*z+\\w*\\b</code> is interpreted as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>\\w*</code></p></td><td><p>Match zero, one, or more word characters.</p></td></tr><tr><td><p><code>z+</code></p></td><td><p>Match one or more occurrences of the <code>z</code> character.</p></td></tr><tr><td><p><code>\\w*</code></p></td><td><p>Match zero, one, or more word characters.</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary.</p></td></tr></tbody></table>"
  syntax:
    content: public static Match Match(string input, string pattern)
    content.vb: Public Shared Function Match(input As String, pattern As String) As Match
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An object that contains information about the match.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Match.NextMatch
    commentId: M:System.Text.RegularExpressions.Match.NextMatch
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Match(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 104
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>The static <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> constructor and calling the instance <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property. If a match is found, the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the substring from <em>input</em> that matches the regular expression pattern. If no match is found, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns the first substring found in <em>input</em> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method. You can also retrieve all matches in a single method call by calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example defines a regular expression that matches words beginning with the letter \"a\". It uses the <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> option to ensure that the regular expression locates words beginning with both an uppercase \"a\" and a lowercase \"a\".</p>System.Text.RegularExpressions.Regex.Match#2<p>The regular expression pattern <code>\\ba\\w*\\b</code> is interpreted as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>a</code></p></td><td><p>Match the character \"a\". </p></td></tr><tr><td><p><code>\\w*</code></p></td><td><p>Match zero, one, or more word characters.</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary. </p></td></tr></tbody></table>"
  syntax:
    content: public static Match Match(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function Match(input As String, pattern As String, options As RegexOptions) As Match
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An object that contains information about the match.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Match.NextMatch
    commentId: M:System.Text.RegularExpressions.Match.NextMatch
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Match(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Match
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 105
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see Regular Expression Language - Quick Reference.</p>\n<p>The static <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor and calling the instance <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Group.Success\" data-throw-if-not-resolved=\"false\"></xref> property. If a match is found, the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the substring from <em>input</em> that matches the regular expression pattern. If no match is found, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns the first substring found in <em>input</em> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method. You can also retrieve all matches in a single method call by calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>matchTimeout</em> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see Best Practices for Regular Expressions in the .NET Framework and Backtracking in Regular Expressions. If no match is found in that time interval, the method throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. <em>matchTimeout</em> overrides any default time-out value defined for the application domain in which the method executes. </p>\n"
  syntax:
    content: public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Match(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match.</p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>An object that contains information about the match.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Matches(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String)
  id: Matches(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Matches(String)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Matches
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 106
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for all occurrences of a regular expression.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is similar to the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code: </p>System.Text.RegularExpressions.Regex.Matches#5<p>The collection includes only matches and terminates at the first non-match.</p><p>The regular expression pattern for which the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method searches is defined by the call to one of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class constructors. For more information about the elements that can form a regular expression pattern, see Regular Expression Language - Quick Reference.</p><p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method uses lazy evaluation to populate the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. Accessing members of this collection such as <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <strong>foreach</strong> in C# and <strong>For</strong><strong>Each</strong>…<strong>Next</strong> in Visual Basic.</p><p>Because of its lazy evaluation, calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. However, the exception is thrown when an operation is performed on the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method, if the <xref href=\"System.Text.RegularExpressions.Regex.MatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> property is not <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> and a matching operation exceeds the time-out interval.</p>"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to identify any words in a sentence that end in \"es\".</p>System.Text.RegularExpressions.Regex.Matches#1<p>The regular expression pattern <code>\\b\\w+es\\b</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>\\w+</code></p></td><td><p>Match one or more word characters.</p></td></tr><tr><td><p><code>es</code></p></td><td><p>Match the literal string \"es\".</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary.</p></td></tr></tbody></table>"
  syntax:
    content: public MatchCollection Matches(string input)
    content.vb: Public Function Matches(input As String) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match.</p>\n"
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: "\n<p>A collection of the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)
  id: Matches(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Matches(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Matches
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 107
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</p>\n"
  remarks: "\n<p>The  <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is similar to the  <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:</p>System.Text.RegularExpressions.Regex.Matches#6<p>The regular expression pattern for which the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method searches is defined by the call to one of the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> class constructors. For more information about the elements that can form a regular expression pattern, see Regular Expression Language - Quick Reference.</p><p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method uses lazy evaluation to populate the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. Accessing members of this collection such as <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <strong>foreach</strong> in C# and <strong>For</strong><strong>Each</strong>…<strong>Next</strong> in Visual Basic.</p><p>Because of its lazy evaluation, calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. However, the exception is thrown when an operation is performed on the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method, if the <xref href=\"System.Text.RegularExpressions.Regex.MatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> property is not <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> and a matching operation exceeds the time-out interval..</p>"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to find the first word in a sentence that ends in \"es\", and then calls the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to identify any additional words that end in \"es\".</p>System.Text.RegularExpressions.Regex.Matches#3<p>The regular expression pattern <code>\\b\\w+es\\b</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>\\w+</code></p></td><td><p>Match one or more word characters.</p></td></tr><tr><td><p><code>es</code></p></td><td><p>Match the literal string \"es\".</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary.</p></td></tr></tbody></table>"
  syntax:
    content: public MatchCollection Matches(string input, int startat)
    content.vb: Public Function Matches(input As String, startat As Integer) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: startat
      type: System.Int32
      description: "\n<p>The character position in the input string at which to start the search. </p>\n"
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: "\n<p>A collection of the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)
  id: Matches(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Matches(String, String)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Matches
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 108
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for all occurrences of a specified regular expression.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is similar to the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code: </p>System.Text.RegularExpressions.Regex.Matches#7<p>The static <strong>Matches</strong> methods are equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance method <strong>Matches</strong>. </p><p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p><p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method uses lazy evaluation to populate the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. Accessing members of this collection such as <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <strong>foreach</strong> in C# and <strong>For</strong><strong>Each</strong>…<strong>Next</strong> in Visual Basic.</p><p>Because of its lazy evaluation, calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. However, the exception is thrown when an operation is performed on the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.</p>"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to identify any word in a sentence that ends in \"es\".</p>System.Text.RegularExpressions.Regex.Matches#2<p>The regular expression pattern <code>\\b\\w+es\\b</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>\\w+</code></p></td><td><p>Match one or more word characters.</p></td></tr><tr><td><p><code>es</code></p></td><td><p>Match the literal string \"es\".</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary.</p></td></tr></tbody></table>"
  syntax:
    content: public static MatchCollection Matches(string input, string pattern)
    content.vb: Public Shared Function Matches(input As String, pattern As String) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: "\n<p>A collection of the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Matches(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Matches
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 109
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method is similar to the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:</p>System.Text.RegularExpressions.Regex.Matches#8<p>The static <strong>Matches</strong> methods are equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance method <strong>Matches</strong>. </p><p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p><p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method uses lazy evaluation to populate the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. Accessing members of this collection such as <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <strong>foreach</strong> in C# and <strong>For</strong><strong>Each</strong>…<strong>Next</strong> in Visual Basic.</p><p>Because of its lazy evaluation, calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. However, the exception is thrown when an operation is performed on the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.</p>"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to identify any word in a sentence that ends in \"es\", and then calls the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method to perform a case-insensitive comparison of the pattern with the input string. As the output shows, the two methods return different results.</p>System.Text.RegularExpressions.Regex.Matches#4<p>The regular expression pattern <code>\\b\\w+es\\b</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>\\w+</code></p></td><td><p>Match one or more word characters.</p></td></tr><tr><td><p><code>es</code></p></td><td><p>Match the literal string \"es\".</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary.</p></td></tr></tbody></table>"
  syntax:
    content: public static MatchCollection Matches(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function Matches(input As String, pattern As String, options As RegexOptions) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that specify options for matching. </p>\n"
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: "\n<p>A collection of the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Matches(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Matches
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 110
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method is similar to the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>  method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:</p>System.Text.RegularExpressions.Regex.Matches#10<p>The static <strong>Matches</strong> methods are equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance method <strong>Matches</strong>. </p><p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p><p>The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method uses lazy evaluation to populate the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. Accessing members of this collection such as <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <strong>foreach</strong> in C# and <strong>For</strong><strong>Each</strong>…<strong>Next</strong> in Visual Basic.</p><p>Because of its lazy evaluation, calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. However, an exception is thrown when an operation is performed on the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method, if a matching operation exceeds this time-out interval specified by the<em>matchTimeout</em> parameter.</p>"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method to perform a case-sensitive comparison that matches any word in a sentence that ends in \"es\". It then calls the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method to perform a case-insensitive comparison of the pattern with the input string. In both cases, the time-out interval is set to one second. As the output shows, the two methods return different results.</p>System.Text.RegularExpressions.Regex.Matches#11<p>The regular expression pattern <code>\\b\\w+es\\b</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\b</code></p></td><td><p>Begin the match at a word boundary.</p></td></tr><tr><td><p><code>\\w+</code></p></td><td><p>Match one or more word characters.</p></td></tr><tr><td><p><code>es</code></p></td><td><p>Match the literal string \"es\".</p></td></tr><tr><td><p><code>\\b</code></p></td><td><p>End the match at a word boundary.</p></td></tr></tbody></table>"
  syntax:
    content: public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Matches(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match.</p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that specify options for matching.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: "\n<p>A collection of the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 111
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string. </p>\n"
  remarks: "\n<p>The search for matches starts at the beginning of the <em>input</em> string. The regular expression is the pattern defined by the constructor for the current <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <em>replacement</em> parameter specifies the string that is to replace each match in <em>input</em>. <em>replacement</em> can consist of any combination of literal text and substitutions. For example, the replacement pattern <code>a*${test}b</code> inserts the string \"a*\" followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.</p>\n<p>Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including character escapes, are allowed in regular expression patterns only and are not recognized in replacement patterns.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p>\n<p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>\n"
  example:
  - "\n<p>The following example defines a regular expression, <code>\\s+</code>, that matches one or more white-space characters. The replacement string, \" \", replaces them with a single space character. </p>System.Text.RegularExpressions.Regex.Replace#5<p>The following example defines a regular expression, <code>(\\p{Sc}\\s?)?(\\d+\\.?((?<=\\.)\\d+)?)(?(1)|\\s?\\p{Sc})?</code>, and a replacement pattern, <code>$2</code>, that removes either a leading or a trailing currency symbol from a numeric value. </p>System.Text.RegularExpressions.Regex.Replace#7<p>The regular expression is interpreted as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\p{Sc}</code></p></td><td><p>Match a currency symbol. <strong>{Sc}</strong> denotes any character that is a member of the Unicode Symbol, Currency category. </p></td></tr><tr><td><p><code>\\s?</code></p></td><td><p>Match zero or one white-space character.</p></td></tr><tr><td><p><code>(\\p{Sc}\\s?)?</code></p></td><td><p>Match zero or one occurrence of the combination of a currency symbol followed by zero or one white-space character. This is the first capturing group. </p></td></tr><tr><td><p><code>\\d+</code></p></td><td><p>Match one or more decimal digits.</p></td></tr><tr><td><p><code>\\.?</code></p></td><td><p>Match zero or one occurrence of a period (used as a decimal separator character).</p></td></tr><tr><td><p><code>((?<=\\.)\\d+)?</code></p></td><td><p>If a period is the previous character, match one or more decimal digits. This pattern can be matched either zero or one time.</p></td></tr><tr><td><p><code>(\\d+\\.?((?<=\\.)\\d+)?)</code></p></td><td><p>Match the pattern of one or more decimal digits followed by an optional period and additional decimal digits. This is the second capturing group. The call to the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method replaces the entire match with the value of this captured group. </p></td></tr><tr><td><p><code>(?(1)|\\s?\\p{Sc})?</code></p></td><td><p>If the first captured group exists, match an empty string. Otherwise, match zero or one white-space character followed by a currency symbol.</p></td></tr></tbody></table>"
  syntax:
    content: public string Replace(string input, string replacement)
    content.vb: Public Function Replace(input As String, replacement As String) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: replacement
      type: System.String
      description: "\n<p>The replacement string. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)
  id: Replace(System.String,System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 112
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string. </p>\n"
  remarks: "\n<p>The search for matches starts at the beginning of the <em>input</em> string. The regular expression is the pattern that is defined by the constructor for the current <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object. If <em>count</em> is negative, replacements continue to the end of the string. If <em>count</em> exceeds the number of matches, all matches are replaced.</p>\n<p>The <em>replacement</em> parameter specifies the string that is to replace the first <em>count</em> matches in <em>input</em>. <em>replacement</em> can consist of any combination of literal text and substitutions. For example, the replacement pattern <code>a*${test}b</code> inserts the string \"a*\" followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.</p>\n<p>Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including character escapes, are allowed in regular expression patterns only and are not recognized in replacement patterns.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p>\n<p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>\n"
  example:
  - "\n<p>The following example replaces the first five occurrences of duplicated characters with a single character. The regular expression pattern <code>(\\w)\\1</code> matches consecutive occurrences of a single character and assigns the first occurrence to the first capturing group. The replacement pattern <code>$1</code> replaces the entire match with the first captured group.</p>System.Text.RegularExpressions.Regex.Replace#8"
  syntax:
    content: public string Replace(string input, string replacement, int count)
    content.vb: Public Function Replace(input As String, replacement As String, count As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: replacement
      type: System.String
      description: "\n<p>The replacement string. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of times the replacement can occur. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)
  id: Replace(System.String,System.String,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 113
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string. </p>\n"
  remarks: "\n<p>The search for matches starts in the <em>input</em> string at the position specified by the <em>startat</em> parameter. The regular expression is the pattern defined by the constructor for the current <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object. If <em>count</em> is negative, replacements continue to the end of the string. If <em>count</em> exceeds the number of matches, all matches are replaced.</p>\n<p>The <em>replacement</em> parameter specifies the string that is to replace each match in <em>input</em>. <em>replacement</em> can consist of any combination of literal text and substitutions. For example, the replacement pattern <code>a*${test}b</code> inserts the string \"a*\" followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.</p>\n<p>Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including character escapes, are allowed in regular expression patterns only and are not recognized in replacement patterns.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p>\n<p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>\n"
  example:
  - "\n<p>The following example double-spaces all but the first line of a string. It defines a regular expression pattern, <code>^.*$</code>, that matches a line of text, calls the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to match the first line of the string, and uses the <strong>Match.Index</strong> and <strong>Match.Count</strong> properties to determine the starting position of the second line. </p>System.Text.RegularExpressions.Regex.Replace#9<p>The regular expression pattern <code>^.*$</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Match the start of a line. (Note that the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object was instantiated by using the <xref href=\"System.Text.RegularExpressions.RegexOptions.Multiline\" data-throw-if-not-resolved=\"false\"></xref> option; otherwise, this character class would only match the beginning of the input string.)</p></td></tr><tr><td><p><code>.*</code></p></td><td><p>Match any character zero or more times.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>Match the end of a line. (Note that the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object was instantiated by using the <xref href=\"System.Text.RegularExpressions.RegexOptions.Multiline\" data-throw-if-not-resolved=\"false\"></xref> option; otherwise, this character class would only match the beginning of the input string.)</p></td></tr></tbody></table><p>The replacement string (<code>vbCrLf + \"$&\"</code> in Visual Basic, <code>\"\\n$&\"</code> in C#) adds a new line before the matched string. Note that <strong>\\n</strong> in the C# example is interpreted as the newline character by the C# compiler; it does not represent a regular expression character escape.</p>"
  syntax:
    content: public string Replace(string input, string replacement, int count, int startat)
    content.vb: Public Function Replace(input As String, replacement As String, count As Integer, startat As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: replacement
      type: System.String
      description: "\n<p>The replacement string. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>Maximum number of times the replacement can occur. </p>\n"
    - id: startat
      type: System.Int32
      description: "\n<p>The character position in the input string where the search begins. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)
  id: Replace(System.String,System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, String)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 114
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. </p>\n"
  remarks: "\n<p>The static <strong>Replace</strong> methods are equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance method <strong>Replace</strong>. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference. The search for matches starts at the beginning of the <em>input</em> string.</p>\n<p>The <em>replacement</em> parameter specifies the string that is to replace each match in <em>input</em>. <em>replacement</em> can consist of any combination of literal text and substitutions. For example, the replacement pattern <code>a*${test}b</code> inserts the string \"a*\" followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.</p>\n<p>Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including character escapes, are allowed in regular expression patterns only and are not recognized in replacement patterns.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n<p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>\n"
  example:
  - "\n<p>The following example defines a regular expression, <code>\\s+</code>, that matches one or more white-space characters. The replacement string, \" \", replaces them with a single space character. </p>System.Text.RegularExpressions.Regex.Replace#6<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to replace the local machine and drive names in a UNC path with a local file path. The regular expression uses the <xref href=\"System.Environment.MachineName\" data-throw-if-not-resolved=\"false\"></xref> property to include the name of the local computer, and the <xref href=\"System.Environment.GetLogicalDrives\" data-throw-if-not-resolved=\"false\"></xref> method to include the names of the logical drives. To run the example successfully, you should replace the literal string \"MyMachine\" with your local machine name.</p>System.Text.RegularExpressions.Regex.Replace#3<p>The regular expression pattern is defined by the following expression:</p><p><code>\"\\\\\\\\(?i:\" + Environment.MachineName + \")(?:\\.\\w+)*\\\\((?i:[\" + driveNames + \"]))\\$\"</code></p><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\\\\\\\</code></p></td><td><p>Match two consecutive backslash (<code>\\</code>) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</p></td></tr><tr><td><p><code>(?i:\" + Environment.MachineName + \")</code></p></td><td><p>Perform a case-insensitive match of the string that is returned by the <xref href=\"System.Environment.MachineName\" data-throw-if-not-resolved=\"false\"></xref> property.</p></td></tr><tr><td><p><code>(?:\\.\\w+)*</code></p></td><td><p>Match the period (<code>.</code>) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.</p></td></tr><tr><td><p><code>\\\\</code></p></td><td><p>Match a backslash (<code>\\</code>) character.</p></td></tr><tr><td><p><code>((?i:[\" + driveNames + \"]))</code></p></td><td><p>Perform a case-insensitive match of the character class that consists of the individual drive lettters. This match is the first captured subexpression.</p></td></tr><tr><td><p><code>\\$</code></p></td><td><p>Match the literal dollar sign (<code>$</code>) character.</p></td></tr></tbody></table><p>The replacement pattern <strong>$1</strong> replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.</p>"
  syntax:
    content: public static string Replace(string input, string pattern, string replacement)
    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: replacement
      type: System.String
      description: "\n<p>The replacement string. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 115
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation. </p>\n"
  remarks: "\n<p>The static <strong>Replace</strong> methods are equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance method <strong>Replace</strong>. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference. If you specify <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> for the <em>options</em> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right. </p>\n<p>The <em>replacement</em> parameter specifies the string that is to replace each match in <em>input</em>. <em>replacement</em> can consist of any combination of literal text and substitutions. For example, the replacement pattern <code>a*${test}b</code> inserts the string \"a*\" followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.</p>\n<p>Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including character escapes, are allowed in regular expression patterns only and are not recognized in replacement patterns.</p>\n<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n<p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method to replace the local machine and drive names in a UNC path with a local file path. The regular expression uses the <xref href=\"System.Environment.MachineName\" data-throw-if-not-resolved=\"false\"></xref> property to include the name of the local computer, and the <xref href=\"System.Environment.GetLogicalDrives\" data-throw-if-not-resolved=\"false\"></xref> method to include the names of the logical drives. All regular expression string comparisons are case-insensitive. To run the example successfully, you should replace the literal string \"MyMachine\" with your local machine name.</p>System.Text.RegularExpressions.Regex.Replace#4<p>The regular expression pattern is defined by the following expression:</p><p><code>\"\\\\\\\\\" + Environment.MachineName + \"(?:\\.\\w+)*\\\\([\" + driveNames + \"])\\$\"</code></p><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\\\\\\\</code></p></td><td><p>Match two consecutive backslash (<code>\\</code>) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</p></td></tr><tr><td><p><code>+ Environment.MachineName + </code></p></td><td><p>Match the string that is returned by the <xref href=\"System.Environment.MachineName\" data-throw-if-not-resolved=\"false\"></xref> property.</p></td></tr><tr><td><p><code>(?:\\.\\w+)*</code></p></td><td><p>Match the period (<code>.</code>) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.</p></td></tr><tr><td><p><code>\\\\</code></p></td><td><p>Match a backslash (<code>\\</code>) character.</p></td></tr><tr><td><p><code>([\" + driveNames + \"])</code></p></td><td><p>Match the character class that consists of the individual drive letters. This match is the first captured subexpression.</p></td></tr><tr><td><p><code>\\$</code></p></td><td><p>Match the literal dollar sign (<code>$</code>) character.</p></td></tr></tbody></table><p>The replacement pattern <strong>$1</strong> replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.</p>"
  syntax:
    content: public static string Replace(string input, string pattern, string replacement, RegexOptions options)
    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String, options As RegexOptions) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: replacement
      type: System.String
      description: "\n<p>The replacement string. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.RegexOptions
    commentId: T:System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 116
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\n"
  remarks: "\n<p>The static <strong>Replace</strong> methods are equivalent to constructing a <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object with the specified regular expression pattern and calling the instance method <strong>Replace</strong>. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference. If you specify <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> for the <em>options</em> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right. </p>\n<p>The <em>replacement</em> parameter specifies the string that is to replace each match in <em>input</em>. <em>replacement</em> can consist of any combination of literal text and substitutions. For example, the replacement pattern <code>a*${test}b</code> inserts the string \"a*\" followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.</p>\n<p>Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including character escapes, are allowed in regular expression patterns only and are not recognized in replacement patterns.</p>\n<p>The <em>matchTimeout</em> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see Best Practices for Regular Expressions in the .NET Framework and Backtracking in Regular Expressions. If no match is found in that time interval, the method throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. <em>matchTimeout</em> overrides any default time-out value defined for the application domain in which the method executes. </p>\n<p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method to replace the local machine and drive names in a UNC path with a local file path. The regular expression uses the <xref href=\"System.Environment.MachineName\" data-throw-if-not-resolved=\"false\"></xref> property to include the name of the local computer and the <xref href=\"System.Environment.GetLogicalDrives\" data-throw-if-not-resolved=\"false\"></xref> method to include the names of the logical drives. All regular expression string comparisons are case-insensitive, and any single replacement operation times out if a match cannot be found in 0.5 second. To run the example successfully, you should replace the literal string \"MyMachine\" with your local machine name.</p>System.Text.RegularExpressions.Regex.Replace#12<p>The regular expression pattern is defined by the following expression:</p><p><code>\"\\\\\\\\\" + Environment.MachineName + \"(?:\\.\\w+)*\\\\([\" + driveNames + \"])\\$\"</code></p><p>The following table shows how the regular expression pattern is interpreted.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\\\\\\\</code></p></td><td><p>Match two consecutive backslash (<code>\\</code>) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</p></td></tr><tr><td><p><code>+ Environment.MachineName + </code></p></td><td><p>Match the string that is returned by the <xref href=\"System.Environment.MachineName\" data-throw-if-not-resolved=\"false\"></xref> property.</p></td></tr><tr><td><p><code>(?:\\.\\w+)*</code></p></td><td><p>Match the period (<code>.</code>) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.</p></td></tr><tr><td><p><code>\\\\</code></p></td><td><p>Match a backslash (<code>\\</code>) character.</p></td></tr><tr><td><p><code>([\" + driveNames + \"])</code></p></td><td><p>Match the character class that consists of the individual drive letters. This match is the first captured subexpression.</p></td></tr><tr><td><p><code>\\$</code></p></td><td><p>Match the literal dollar sign (<code>$</code>) character.</p></td></tr></tbody></table><p>The replacement pattern <strong>$1</strong> replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.</p>"
  syntax:
    content: public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match.</p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: replacement
      type: System.String
      description: "\n<p>The replacement string.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.RegexOptions
    commentId: T:System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, MatchEvaluator)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 117
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\" data-throw-if-not-resolved=\"false\"></xref> method is useful for replacing a regular expression match if any of the following conditions is true:</p>\n<ul><li>\n<p>The replacement string cannot readily be specified by a regular expression replacement pattern.</p>\n</li><li>\n<p>The replacement string results from some processing done on the matched string.</p>\n</li><li>\n<p>The replacement string results from conditional processing.</p>\n</li></ul>\n<p>The method is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and passing each <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to the <em>evaluator</em> delegate.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>The <em>evaluator</em> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>System.Text.RegularExpressions.Regex.Replace#1<p>Your custom method returns a string that replaces the matched input. </p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p><p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>"
  example:
  - "\n<p>The following example uses a regular expression to extract the individual words from a string, and then uses a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate to call a method named <code>WordScramble</code> that scrambles the individual letters in the word. To do this, the <code>WordScramble</code> method creates an array that contains the characters in the match. It also creates a parallel array that it populates with random floating-point numbers. The arrays are sorted by calling the <xref href=\"System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, and the sorted array is provided as an argument to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class constructor. This newly created string is then returned by the <code>WordScramble</code> method. The regular expression pattern <code>\\w+</code> matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character. </p>System.Text.RegularExpressions.Regex.Replace#2"
  syntax:
    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator)
    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: "\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.MatchEvaluator
    commentId: T:System.Text.RegularExpressions.MatchEvaluator
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, MatchEvaluator, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 118
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. Specified options modify the matching operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method is useful for replacing a regular expression match in if any of the following conditions is true:</p>\n<ul><li>\n<p>The replacement string cannot readily be specified by a regular expression replacement pattern.</p>\n</li><li>\n<p>The replacement string results from some processing done on the matched string.</p>\n</li><li>\n<p>The replacement string results from conditional processing.</p>\n</li></ul>\n<p>The method is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method and passing each <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to the <em>evaluator</em> delegate.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>The <em>evaluator</em> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>System.Text.RegularExpressions.Regex.Replace#1<p>Your custom method returns a string that replaces the matched input. </p><p>If you specify <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> for the <em>options</em> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right. </p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p><p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>"
  example:
  - "\n<p>The following example uses a regular expression to extract the individual words from a string, and then uses a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate to call a method named <code>WordScramble</code> that scrambles the individual letters in the word. To do this, the <code>WordScramble</code> method creates an array that contains the characters in the match. It also creates a parallel array that it populates with random floating-point numbers. The arrays are sorted by calling the <xref href=\"System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, and the sorted array is provided as an argument to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class constructor. This newly created string is then returned by the <code>WordScramble</code> method. The regular expression pattern <code>\\w+</code> matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character. The call to the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method includes the <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace\" data-throw-if-not-resolved=\"false\"></xref> option so that the comment in the regular expression pattern <code>\\w+  # Matches all the characters in a word.</code> is ignored by the regular expression engine.</p>System.Text.RegularExpressions.Regex.Replace#10"
  syntax:
    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options)
    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: "\n<p>A custom method that examines each match and returns either the original matched string or a replacement string. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.MatchEvaluator
    commentId: T:System.Text.RegularExpressions.MatchEvaluator
  - type: System.Text.RegularExpressions.RegexOptions
    commentId: T:System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 119
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method is useful for replacing a regular expression match if any of the following conditions is true:</p>\n<ul><li>\n<p>If the replacement string cannot readily be specified by a regular expression replacement pattern.</p>\n</li><li>\n<p>If the replacement string results from some processing performed on the matched string.</p>\n</li><li>\n<p>If the replacement string results from conditional processing.</p>\n</li></ul>\n<p>The method is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method and passing each <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to the <em>evaluator</em> delegate.</p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>The <em>evaluator</em> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>System.Text.RegularExpressions.Regex.Replace#1<p>Your custom method returns a string that replaces the matched input. </p><p>If you specify <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> for the <em>options</em> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right. </p><p>The <em>matchTimeout</em> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to \"stop responding when they process input that contains near matches. For more information, see Best Practices for Regular Expressions in the .NET Framework and Backtracking in Regular Expressions. If no match is found in that time interval, the method throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. <em>matchTimeout</em> overrides any default time-out value defined for the application domain in which the method executes.</p><p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>"
  example:
  - "\n<p>The following example uses a regular expression to extract the individual words from a string, and then uses a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate to call a method named <code>WordScramble</code> that scrambles the individual letters in the word. To do this, the <code>WordScramble</code> method creates an array that contains the characters in the match. It also creates a parallel array that it populates with random floating-point numbers. The arrays are sorted by calling the <xref href=\"System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, and the sorted array is provided as an argument to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class constructor. This newly created string is then returned by the <code>WordScramble</code> method. The regular expression pattern <code>\\w+</code> matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character. The call to the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method includes the <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace\" data-throw-if-not-resolved=\"false\"></xref> option so that the comment in the regular expression pattern <code>\\w+  # Matches all the characters in a word.</code> is ignored by the regular expression engine.</p>System.Text.RegularExpressions.Regex.Replace#13"
  syntax:
    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match.</p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: "\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of enumeration values that provide options for matching.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.RegexOptions
    commentId: T:System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, MatchEvaluator)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 120
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\" data-throw-if-not-resolved=\"false\"></xref> method is useful for replacing a regular expression match if any of the following conditions is true:</p>\n<ul><li>\n<p>The replacement string cannot readily be specified by a regular expression replacement pattern.</p>\n</li><li>\n<p>The replacement string results from some processing done on the matched string.</p>\n</li><li>\n<p>The replacement string results from conditional processing.</p>\n</li></ul>\n<p>The method is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and passing each <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to the <em>evaluator</em> delegate.</p>\n<p>The regular expression is the pattern defined by the constructor for the current <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>evaluator</em> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>System.Text.RegularExpressions.Regex.Replace#1<p>Your custom method returns a string that replaces the matched input. </p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p><p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>"
  example:
  - "\n<p>The following code example displays an original string, matches each word in the original string, converts the first character of each match to uppercase, then displays the converted string.</p>Regex.Replace-Instance#1"
  syntax:
    content: public string Replace(string input, MatchEvaluator evaluator)
    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: "\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.MatchEvaluator
    commentId: T:System.Text.RegularExpressions.MatchEvaluator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, MatchEvaluator, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 121
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is useful for replacing a regular expression match if any of the following conditions is true:</p>\n<ul><li>\n<p>The replacement string cannot readily be specified by a regular expression replacement pattern.</p>\n</li><li>\n<p>The replacement string results from some processing done on the matched string.</p>\n</li><li>\n<p>The replacement string results from conditional processing.</p>\n</li></ul>\n<p>The method is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and passing the first <em>count</em><xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to the <em>evaluator</em> delegate.</p>\n<p>The regular expression is the pattern defined by the constructor for the current <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>evaluator</em> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>System.Text.RegularExpressions.Regex.Replace#1<p>Your custom method returns a string that replaces the matched input. </p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p><p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>"
  example:
  - "\n<p>The following example uses a regular expression to deliberately misspell half of the words in a list. It uses the regular expression <code>\\w*(ie|ei)\\w*</code> to match words that include the characters \"ie\" or \"ei\". It passes the first half of the matching words to the <code>ReverseLetter</code> method, which, in turn, uses the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\" data-throw-if-not-resolved=\"false\"></xref> method to reverse \"i\" and \"e\" in the matched string. The remaining words remain unchanged.</p>System.Text.RegularExpressions.Regex.Replace#11<p>The regular expression <code>\\w*(ie|ei)\\w*</code> is defined as shown in the following table.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>\\w*</code></p></td><td><p>Match zero or more word characters.</p></td></tr><tr><td><p><code>(ie|ei)</code></p></td><td><p>Match either \"ie\" or \"ei\".</p></td></tr><tr><td><p><code>\\w*</code></p></td><td><p>Match zero or more word characters.</p></td></tr></tbody></table><p>The regular expression pattern <code>([ie])([ie])</code> in the <code>ReverseLetter</code> method matches the first \"i\" or \"e\" in the diphthong \"ie\" or \"ei\" and assigns the letter to the first capturing group. It matches the second \"i\" or \"e\" and assigns the letter to the second capturing group. The two characters are then reversed by calling the <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the replacement pattern <code>$2$1</code>.</p>"
  syntax:
    content: public string Replace(string input, MatchEvaluator evaluator, int count)
    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator, count As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: "\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of times the replacement will occur. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.MatchEvaluator
    commentId: T:System.Text.RegularExpressions.MatchEvaluator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Replace(String, MatchEvaluator, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 122
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is useful for replacing a regular expression match if any of the following conditions is true:</p>\n<ul><li>\n<p>The replacement string cannot readily be specified by a regular expression replacement pattern.</p>\n</li><li>\n<p>The replacement string results from some processing done on the matched string.</p>\n</li><li>\n<p>The replacement string results from conditional processing.</p>\n</li></ul>\n<p>The method is equivalent to calling the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method and passing the first <em>count</em><xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects in the returned <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to the <em>evaluator</em> delegate.</p>\n<p>The regular expression is the pattern defined by the constructor for the current <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>evaluator</em> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref href=\"System.Text.RegularExpressions.MatchEvaluator\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>System.Text.RegularExpressions.Regex.Replace#1<p>Your custom method returns a string that replaces the matched input. </p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p><p>Because the method returns <em>input</em> unchanged if there is no match, you can use the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the method has made any replacements to the input string.  </p>"
  syntax:
    content: public string Replace(string input, MatchEvaluator evaluator, int count, int startat)
    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to search for a match. </p>\n"
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: "\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of times the replacement will occur. </p>\n"
    - id: startat
      type: System.Int32
      description: "\n<p>The character position in the input string where the search begins. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.MatchEvaluator
    commentId: T:System.Text.RegularExpressions.MatchEvaluator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Split(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String)
  id: Split(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Split(String)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 123
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are similar to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method, except that <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original input string. </p>\n<p>If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</p>System.Text.RegularExpressions.Regex.Split#1<p>If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>\\d+</code> to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.RegularExpressions.Regex.Split#21<p>If capturing parentheses are used in a <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</p>System.Text.RegularExpressions.Regex.Split#2<p>However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</p>System.Text.RegularExpressions.Regex.Split#3<p>If the regular expression can match the empty string, <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:</p>System.Text.RegularExpressions.Regex.Split#11<p>Note that the returned array also includes an empty string at the beginning and end of the array.</p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p>"
  syntax:
    content: public string[] Split(string input)
    content.vb: Public Function Split(input As String) As String()
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to split. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array of strings.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)
  id: Split(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Split(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 124
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are similar to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method, except that <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> splits the string at a delimiter determined by a regular expression instead of a set of characters. The <em>count</em> parameter specifies the maximum number of substrings into which the <em>input</em> string can be split; the last string contains the unsplit remainder of the string. A <em>count</em> value of zero provides the default behavior of splitting as many times as possible. </p>\n<p>If multiple matches are adjacent to one another or if a match is found at the beginning or end of <em>input</em>, and the number of matches found is at least two less than <em>count</em>, an empty string is inserted into the array. That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals <em>count</em>. In the following example, the regular expression <code>/d+</code> is used to split an input string that includes one or more decimal digits into a maximum of three substrings. Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match. </p>System.Text.RegularExpressions.Regex.Split#25<p>If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached <em>count</em>. For example, splitting the string \"apple-apricot-plum-pear-banana\" into a maximum of four substrings results in a seven-element array, as the following code shows. </p>System.Text.RegularExpressions.Regex.Split#4<p>However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array. Starting with the .NET Framework 2.0, all captured text is added to the returned array. However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals <em>count</em>. For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. The call to the <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then specifies a maximum of two elements in the returned array. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array. If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.</p>System.Text.RegularExpressions.Regex.Split#5<p>If the regular expression can match the empty string, <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as there are in the input string. Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array. This causes the tenth element to consist of the two characters at the end of the input string.</p>System.Text.RegularExpressions.Regex.Split#12<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p>"
  syntax:
    content: public string[] Split(string input, int count)
    content.vb: Public Function Split(input As String, count As Integer) As String()
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to be split. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of times the split can occur. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array of strings.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)
  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)
  id: Split(System.String,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Split(String, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 125
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor. The search for the regular expression pattern starts at a specified character position in the input string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are similar to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method, except that <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref>  splits the string at a delimiter determined by a regular expression instead of a set of characters. The <em>count</em> parameter specifies the maximum number of substrings into which the <em>input</em> string is split; the last string contains the unsplit remainder of the string. A <em>count</em> value of zero provides the default behavior of splitting as many times as possible. The <em>startat</em> parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).</p>\n<p>If no matches are found from the <em>count</em>+1 position in the string, the method returns a one-element array that contains the <em>input</em> string. If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.</p>\n<p>If multiple matches are adjacent to one another and the number of matches found is at least two less than <em>count</em>, an empty string is inserted into the array. Similarly, if a match is found at <em>startat</em>, which is the first character in the string, the first element of the returned array is an empty string. That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals <em>count</em>. In the following example, the regular expression <code>\\d+</code> is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position. Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string, </p>System.Text.RegularExpressions.Regex.Split#26<p>If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached <em>count</em>. For example, splitting the string '\"apple-apricot-plum-pear-pomegranate-pineapple-peach\" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows. </p>System.Text.RegularExpressions.Regex.Split#6<p>However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the individual words in a string. The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</p>System.Text.RegularExpressions.Regex.Split#7<p>If the regular expression can match the empty string, <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as the input string contains, starting with the character \"a\". Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.</p>System.Text.RegularExpressions.Regex.Split#14<p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref href=\"System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> object is created. If no time-out is defined in the <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref> constructor call or in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown </p>"
  syntax:
    content: public string[] Split(string input, int count, int startat)
    content.vb: Public Function Split(input As String, count As Integer, startat As Integer) As String()
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to be split. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of times the split can occur. </p>\n"
    - id: startat
      type: System.Int32
      description: "\n<p>The character position in the input string where the search will begin. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array of strings.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)
  id: Split(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Split(String, String)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 126
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are similar to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method, except that <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> splits the string at a delimiter determined by a regular expression instead of a set of characters. The <em>input</em> string is split as many times as possible. If <em>pattern</em> is not found in the <em>input</em> string, the return value contains one element whose value is the original <em>input</em> string. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>Compiled regular expressions used in calls to static <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</p>System.Text.RegularExpressions.Regex.Split#8<p>If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>\\d+</code> to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.RegularExpressions.Regex.Split#22<p>If capturing parentheses are used in a <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</p>System.Text.RegularExpressions.Regex.Split#9<p>However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</p>System.Text.RegularExpressions.Regex.Split#10<p>If the regular expression can match the empty string, <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:</p>System.Text.RegularExpressions.Regex.Split#13<p>Note that the returned array also includes an empty string at the beginning and end of the array.</p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>"
  syntax:
    content: public static string[] Split(string input, string pattern)
    content.vb: Public Shared Function Split(input As String, pattern As String) As String()
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to split. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array of strings.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Split(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 127
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are similar to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method, except that <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original <em>input</em> string. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>Compiled regular expressions used in calls to static <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</p>\n<p>If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>[a-z]+</code> to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.RegularExpressions.Regex.Split#24<p>If capturing parentheses are used in a <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</p>System.Text.RegularExpressions.Regex.Split#9<p>However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</p>System.Text.RegularExpressions.Regex.Split#10<p>If the regular expression can match the empty string, <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</p><p>The <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown. </p>"
  syntax:
    content: public static string[] Split(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function Split(input As String, pattern As String, options As RegexOptions) As String()
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to split. </p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match. </p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array of strings.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Split(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 128
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are similar to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method, except that <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original <em>input</em> string. </p>\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n<p>Compiled regular expressions used in calls to static <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</p>\n<p>If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>[a-z]+</code> to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.RegularExpressions.Regex.Split#23<p>If capturing parentheses are used in a <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</p>System.Text.RegularExpressions.Regex.Split#9<p>However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</p>System.Text.RegularExpressions.Regex.Split#10<p>If the regular expression can match the empty string, <xref href=\"System.Text.RegularExpressions.Regex.Split(System.String)\" data-throw-if-not-resolved=\"false\"></xref> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</p><p>The <em>matchTimeout</em> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see Best Practices for Regular Expressions in the .NET Framework and Backtracking in Regular Expressions. If no match is found in that time interval, the method throws a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. <em>matchTimeout</em> overrides any default time-out value defined for the application domain in which the method executes.</p>"
  syntax:
    content: public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Split(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to split.</p>\n"
    - id: pattern
      type: System.String
      description: "\n<p>The regular expression pattern to match.</p>\n"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n"
    - id: matchTimeout
      type: System.TimeSpan
      description: "\n<p>A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\" data-throw-if-not-resolved=\"false\"></xref> to indicate that the method should not time out.</p>\n"
    return:
      type: System.String[]
      description: "\n<p>A string array.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A regular expression parsing error occurred.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>options</em> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n<p>-or-</p>\n<p>\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.RegularExpressions.Regex.ToString
  commentId: M:System.Text.RegularExpressions.Regex.ToString
  id: ToString
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Text.RegularExpressions.Regex.ToString()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 129
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Returns the regular expression pattern that was passed into the <strong>Regex</strong> constructor.</p>\n"
  remarks: "\n<p>The <em>pattern</em> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see .NET Framework Regular Expressions and Regular Expression Language - Quick Reference.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The <em>pattern</em> parameter that was passed into the <strong>Regex</strong> constructor.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.RegularExpressions.Regex.Unescape(System.String)
  commentId: M:System.Text.RegularExpressions.Regex.Unescape(System.String)
  id: Unescape(System.String)
  parent: System.Text.RegularExpressions.Regex
  langs:
  - csharp
  - vb
  name: Unescape(String)
  fullName: System.Text.RegularExpressions.Regex.Unescape(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unescape
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 130
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Converts any escaped characters in the input string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.RegularExpressions.Regex.Unescape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method performs one of the following two transformations: </p>\n<ul><li>\n<p>It reverses the transformation performed by the <xref href=\"System.Text.RegularExpressions.Regex.Escape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method by removing the escape character (\"\\\") from each character escaped by the method. These include the \\, *, +, ?, |, {, [, (,), ^, $,., #, and white space characters. In addition, the <xref href=\"System.Text.RegularExpressions.Regex.Unescape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method unescapes the closing bracket (]) and closing brace (}) characters.</p>\n</li></ul>\n<p>\n<xref href=\"System.Text.RegularExpressions.Regex.Unescape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,</p>\n<ul><li>\n<p>It replaces the representation of unprintable characters with the characters themselves. For example, it replaces \\a with \\x07. The character representations it replaces are \\a, \\b, \\e, \\n, \\r, \\f, \\t, and \\v.</p>\n</li></ul>\n<p>If the <xref href=\"System.Text.RegularExpressions.Regex.Unescape(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method encounters other escape sequences that it cannot convert, such as \\w or \\s, it throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static string Unescape(string str)
    content.vb: Public Shared Function Unescape(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The input string containing the text to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string of characters with any escaped characters converted to their unescaped form.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>str</em> includes an unrecognized escape sequence.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.Regex.Escape(System.String)
    commentId: M:System.Text.RegularExpressions.Regex.Escape(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Text.RegularExpressions.RegexRunnerFactory
  parent: System.Text.RegularExpressions
  isExternal: false
  name: RegexRunnerFactory
  fullName: System.Text.RegularExpressions.RegexRunnerFactory
- uid: System.Text.RegularExpressions.RegexOptions
  parent: System.Text.RegularExpressions
  isExternal: false
  name: RegexOptions
  fullName: System.Text.RegularExpressions.RegexOptions
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Text.RegularExpressions.Match
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Match
  fullName: System.Text.RegularExpressions.Match
- uid: System.Text.RegularExpressions.MatchCollection
  parent: System.Text.RegularExpressions
  isExternal: false
  name: MatchCollection
  fullName: System.Text.RegularExpressions.MatchCollection
- uid: System.Text.RegularExpressions.MatchEvaluator
  parent: System.Text.RegularExpressions
  isExternal: false
  name: MatchEvaluator
  fullName: System.Text.RegularExpressions.MatchEvaluator
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Text.RegularExpressions.RegexMatchTimeoutException
  isExternal: false
  name: RegexMatchTimeoutException
  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException
