items:
- uid: System.Diagnostics.Debugger
  commentId: T:System.Diagnostics.Debugger
  id: Debugger
  parent: System.Diagnostics
  children:
  - System.Diagnostics.Debugger.Break
  - System.Diagnostics.Debugger.IsAttached
  - System.Diagnostics.Debugger.Launch
  langs:
  - csharp
  - vb
  name: Debugger
  fullName: System.Diagnostics.Debugger
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Debugger
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 59
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Enables communication with a debugger. This class cannot be inherited.</p>\n"
  syntax:
    content: 'public class Debugger : object'
    content.vb: >-
      Public Class Debugger
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Debugger.IsAttached
  commentId: P:System.Diagnostics.Debugger.IsAttached
  id: IsAttached
  parent: System.Diagnostics.Debugger
  langs:
  - csharp
  - vb
  name: IsAttached
  fullName: System.Diagnostics.Debugger.IsAttached
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAttached
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 61
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that indicates whether a debugger is attached to the process.</p>\n"
  syntax:
    content: public static bool IsAttached { get; }
    content.vb: Public Shared ReadOnly Property IsAttached As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a debugger is attached; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Diagnostics.Debugger.Break
  commentId: M:System.Diagnostics.Debugger.Break
  id: Break
  parent: System.Diagnostics.Debugger
  langs:
  - csharp
  - vb
  name: Break()
  fullName: System.Diagnostics.Debugger.Break()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 62
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Signals a breakpoint to an attached debugger.</p>\n"
  remarks: "\n<p>If no debugger is attached, users are asked if they want to attach a debugger. If users say yes, the debugger is started. If a debugger is attached, the debugger is signaled with a user breakpoint event, and the debugger suspends execution of the process just as if a debugger breakpoint had been hit.</p>\n<p>Starting with .NET FrameworkÂ 4, the runtime no longer exercises tight control of launching the debugger for the <xref href=\"System.Diagnostics.Debugger.Break\" data-throw-if-not-resolved=\"false\"></xref> method, but instead reports an error to the Windows Error Reporting (WER) subsystem. WER provides many settings to customize the problem reporting experience, so a lot of factors will influence  the way WER responds to an error such as operating system version, process, session, user, machine and domain. If you're having unexpected results when calling  the <xref href=\"System.Diagnostics.Debugger.Break\" data-throw-if-not-resolved=\"false\"></xref> method,  check the  WER settings on your machine. For more information on how to customize WER, see <see href=\"https://msdn.microsoft.com/library/windows/desktop/bb513638.aspx\">WER Settings</see>. If you want to ensure the debugger is launched regardless of the WER settings, be sure to call the <xref href=\"System.Diagnostics.Debugger.Launch\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to stop the debugger at the call to <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"vb\">Debugger.Break()\nConsole.WriteLine(\"Hello, world.\")</code></pre>\n<pre><code class=\"c#\">Debugger.Break();\nConsole.WriteLine(\"Hello, world.\");</code></pre>\n"
  syntax:
    content: public static void Break()
    content.vb: Public Shared Sub Break
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Security.Permissions.UIPermission\" data-throw-if-not-resolved=\"false\"></xref> is not set to break into the debugger. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Debugger.Launch
  commentId: M:System.Diagnostics.Debugger.Launch
  id: Launch
  parent: System.Diagnostics.Debugger
  langs:
  - csharp
  - vb
  name: Launch()
  fullName: System.Diagnostics.Debugger.Launch()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Launch
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 63
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Launches and attaches a debugger to the process.</p>\n"
  remarks: "\n<p>If a debugger is already attached, nothing happens.</p>\n"
  syntax:
    content: public static bool Launch()
    content.vb: Public Shared Function Launch As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the startup is successful or if the debugger is already attached; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Security.Permissions.UIPermission\" data-throw-if-not-resolved=\"false\"></xref> is not set to start the debugger. </p>\n"
  seealso:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
