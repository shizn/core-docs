items:
- uid: System.Decimal
  commentId: T:System.Decimal
  id: Decimal
  parent: System
  children:
  - System.Decimal.#ctor(System.Double)
  - System.Decimal.#ctor(System.Int32)
  - System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)
  - System.Decimal.#ctor(System.Int32[])
  - System.Decimal.#ctor(System.Int64)
  - System.Decimal.#ctor(System.Single)
  - System.Decimal.#ctor(System.UInt32)
  - System.Decimal.#ctor(System.UInt64)
  - System.Decimal.Add(System.Decimal,System.Decimal)
  - System.Decimal.Ceiling(System.Decimal)
  - System.Decimal.Compare(System.Decimal,System.Decimal)
  - System.Decimal.CompareTo(System.Decimal)
  - System.Decimal.Divide(System.Decimal,System.Decimal)
  - System.Decimal.Equals(System.Decimal)
  - System.Decimal.Equals(System.Decimal,System.Decimal)
  - System.Decimal.Equals(System.Object)
  - System.Decimal.Floor(System.Decimal)
  - System.Decimal.GetBits(System.Decimal)
  - System.Decimal.GetHashCode
  - System.Decimal.MaxValue
  - System.Decimal.MinusOne
  - System.Decimal.MinValue
  - System.Decimal.Multiply(System.Decimal,System.Decimal)
  - System.Decimal.Negate(System.Decimal)
  - System.Decimal.One
  - System.Decimal.op_Addition(System.Decimal,System.Decimal)
  - System.Decimal.op_Decrement(System.Decimal)
  - System.Decimal.op_Division(System.Decimal,System.Decimal)
  - System.Decimal.op_Equality(System.Decimal,System.Decimal)
  - System.Decimal.op_Explicit(System.Decimal)~System.Byte
  - System.Decimal.op_Explicit(System.Decimal)~System.Char
  - System.Decimal.op_Explicit(System.Decimal)~System.Double
  - System.Decimal.op_Explicit(System.Decimal)~System.Int16
  - System.Decimal.op_Explicit(System.Decimal)~System.Int32
  - System.Decimal.op_Explicit(System.Decimal)~System.Int64
  - System.Decimal.op_Explicit(System.Decimal)~System.SByte
  - System.Decimal.op_Explicit(System.Decimal)~System.Single
  - System.Decimal.op_Explicit(System.Decimal)~System.UInt16
  - System.Decimal.op_Explicit(System.Decimal)~System.UInt32
  - System.Decimal.op_Explicit(System.Decimal)~System.UInt64
  - System.Decimal.op_Explicit(System.Double)~System.Decimal
  - System.Decimal.op_Explicit(System.Single)~System.Decimal
  - System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)
  - System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)
  - System.Decimal.op_Implicit(System.Byte)~System.Decimal
  - System.Decimal.op_Implicit(System.Char)~System.Decimal
  - System.Decimal.op_Implicit(System.Int16)~System.Decimal
  - System.Decimal.op_Implicit(System.Int32)~System.Decimal
  - System.Decimal.op_Implicit(System.Int64)~System.Decimal
  - System.Decimal.op_Implicit(System.SByte)~System.Decimal
  - System.Decimal.op_Implicit(System.UInt16)~System.Decimal
  - System.Decimal.op_Implicit(System.UInt32)~System.Decimal
  - System.Decimal.op_Implicit(System.UInt64)~System.Decimal
  - System.Decimal.op_Increment(System.Decimal)
  - System.Decimal.op_Inequality(System.Decimal,System.Decimal)
  - System.Decimal.op_LessThan(System.Decimal,System.Decimal)
  - System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)
  - System.Decimal.op_Modulus(System.Decimal,System.Decimal)
  - System.Decimal.op_Multiply(System.Decimal,System.Decimal)
  - System.Decimal.op_Subtraction(System.Decimal,System.Decimal)
  - System.Decimal.op_UnaryNegation(System.Decimal)
  - System.Decimal.op_UnaryPlus(System.Decimal)
  - System.Decimal.Parse(System.String)
  - System.Decimal.Parse(System.String,System.Globalization.NumberStyles)
  - System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Decimal.Parse(System.String,System.IFormatProvider)
  - System.Decimal.Remainder(System.Decimal,System.Decimal)
  - System.Decimal.Subtract(System.Decimal,System.Decimal)
  - System.Decimal.System#IComparable#CompareTo(System.Object)
  - System.Decimal.System#IConvertible#GetTypeCode
  - System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Decimal.ToByte(System.Decimal)
  - System.Decimal.ToDouble(System.Decimal)
  - System.Decimal.ToInt16(System.Decimal)
  - System.Decimal.ToInt32(System.Decimal)
  - System.Decimal.ToInt64(System.Decimal)
  - System.Decimal.ToSByte(System.Decimal)
  - System.Decimal.ToSingle(System.Decimal)
  - System.Decimal.ToString
  - System.Decimal.ToString(System.IFormatProvider)
  - System.Decimal.ToString(System.String)
  - System.Decimal.ToString(System.String,System.IFormatProvider)
  - System.Decimal.ToUInt16(System.Decimal)
  - System.Decimal.ToUInt32(System.Decimal)
  - System.Decimal.ToUInt64(System.Decimal)
  - System.Decimal.Truncate(System.Decimal)
  - System.Decimal.TryParse(System.String,System.Decimal@)
  - System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)
  - System.Decimal.Zero
  langs:
  - csharp
  - vb
  name: Decimal
  fullName: System.Decimal
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Decimal
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 57
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a decimal number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value type represents decimal numbers ranging from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335. The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value type is appropriate for financial calculations that require large numbers of significant integral and fractional digits and no round-off errors. The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> type does not eliminate the need for rounding. Rather, it minimizes errors due to rounding. For example, the following code produces a result of 0.9999999999999999999999999999 instead of 1.</p>System.Decimal.Class#1<p>When the result of the division and multiplication is passed to the <xref href=\"System.Math.Round(System.Decimal,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, the result suffers no loss of precision, as the following code shows.</p>System.Decimal.Class#2<p>A decimal number is a floating-point value that consists of a sign, a numeric value where each digit in the value ranges from 0 to 9, and a scaling factor that indicates the position of a floating decimal point that separates the integral and fractional parts of the numeric value. </p><p>The binary representation of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the 96-bit integer and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28. Therefore, the binary representation of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value  the form, ((-296 to 296) / 10(0 to 28)), where -(296-1) is equal to <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, and 296-1 is equal to <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. For more information about the binary representation of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values and an example, see the <xref href=\"System.Decimal.#ctor(System.Int32[])\" data-throw-if-not-resolved=\"false\"></xref> constructor and the <xref href=\"System.Decimal.GetBits(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method. </p><p>The scaling factor  also preserves any trailing zeros in a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number. Trailing zeros do not affect the value of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number in arithmetic or comparison operations. However, trailing zeros might be revealed by the <see cref=\"Overload:System.Decimal.ToString\"></see> method if an appropriate format string is applied.</p>"
  example:
  - <p>The following code example demonstrates the use of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>. </p>Decimal Example#1
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      [Serializable]

      [ComVisible(true)]

      [NonVersionable]

      public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<decimal>, IEquatable<decimal>
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      <Serializable>

      <ComVisible(True)>

      <NonVersionable>

      Public Structure Decimal
          Implements IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable(Of Decimal), IEquatable(Of Decimal)
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  - type: System.Int16
    commentId: T:System.Int16
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Int64
    commentId: T:System.Int64
  - type: System.Byte
    commentId: T:System.Byte
  - type: System.UInt16
    commentId: T:System.UInt16
  - type: System.UInt32
    commentId: T:System.UInt32
  - type: System.UInt64
    commentId: T:System.UInt64
  - type: System.Single
    commentId: T:System.Single
  - type: System.Double
    commentId: T:System.Double
  - type: System.Char
    commentId: T:System.Char
  implements:
  - System.IComparable
  - System.IComparable{System.Decimal}
  - System.IConvertible
  - System.IEquatable{System.Decimal}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Decimal.MaxValue
  commentId: F:System.Decimal.MaxValue
  id: MaxValue
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: MaxValue
  fullName: System.Decimal.MaxValue
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MaxValue
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 110
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the largest possible value of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>. This field is constant and read-only.</p>\n"
  remarks: "\n<p>The value of this constant is positive 79,228,162,514,264,337,593,543,950,335.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>MaxValue</strong> : </p>Decimal Example#2"
  syntax:
    content: public const decimal MaxValue = 79228162514264337593543950335M
    content.vb: Public Const MaxValue As Decimal = 79228162514264337593543950335D
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Zero
    commentId: F:System.Decimal.Zero
  - type: System.Decimal.One
    commentId: F:System.Decimal.One
  - type: System.Decimal.MinusOne
    commentId: F:System.Decimal.MinusOne
  - type: System.Decimal.MinValue
    commentId: F:System.Decimal.MinValue
  attributes:
  - type: System.Runtime.CompilerServices.DecimalConstantAttribute
    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)
    arguments:
    - type: System.Byte
      value: 0
    - type: System.Byte
      value: 0
    - type: System.UInt32
      value: "4294967295"
    - type: System.UInt32
      value: "4294967295"
    - type: System.UInt32
      value: "4294967295"
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Decimal.MinusOne
  commentId: F:System.Decimal.MinusOne
  id: MinusOne
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: MinusOne
  fullName: System.Decimal.MinusOne
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MinusOne
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 106
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the number negative one (-1).</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of the <strong>MinusOne</strong> field.</p>System.Decimal.Fields#1"
  syntax:
    content: public const decimal MinusOne = -1M
    content.vb: Public Const MinusOne As Decimal = -1D
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Zero
    commentId: F:System.Decimal.Zero
  - type: System.Decimal.One
    commentId: F:System.Decimal.One
  - type: System.Decimal.MaxValue
    commentId: F:System.Decimal.MaxValue
  - type: System.Decimal.MinValue
    commentId: F:System.Decimal.MinValue
  attributes:
  - type: System.Runtime.CompilerServices.DecimalConstantAttribute
    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)
    arguments:
    - type: System.Byte
      value: 0
    - type: System.Byte
      value: 128
    - type: System.UInt32
      value: "0"
    - type: System.UInt32
      value: "0"
    - type: System.UInt32
      value: "1"
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Decimal.MinValue
  commentId: F:System.Decimal.MinValue
  id: MinValue
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: MinValue
  fullName: System.Decimal.MinValue
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MinValue
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 114
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the smallest possible value of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>. This field is constant and read-only.</p>\n"
  remarks: "\n<p>The value of this constant is negative 79,228,162,514,264,337,593,543,950,335.</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of the <strong>MinValue</strong> field.</p>System.Decimal.Fields#1"
  syntax:
    content: public const decimal MinValue = -79228162514264337593543950335M
    content.vb: Public Const MinValue As Decimal = -79228162514264337593543950335D
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Zero
    commentId: F:System.Decimal.Zero
  - type: System.Decimal.One
    commentId: F:System.Decimal.One
  - type: System.Decimal.MinusOne
    commentId: F:System.Decimal.MinusOne
  - type: System.Decimal.MaxValue
    commentId: F:System.Decimal.MaxValue
  attributes:
  - type: System.Runtime.CompilerServices.DecimalConstantAttribute
    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)
    arguments:
    - type: System.Byte
      value: 0
    - type: System.Byte
      value: 128
    - type: System.UInt32
      value: "4294967295"
    - type: System.UInt32
      value: "4294967295"
    - type: System.UInt32
      value: "4294967295"
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Decimal.One
  commentId: F:System.Decimal.One
  id: One
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: One
  fullName: System.Decimal.One
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: One
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 103
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the number one (1).</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of the <strong>One</strong> field.</p>System.Decimal.Fields#1"
  syntax:
    content: public const decimal One = 1M
    content.vb: Public Const One As Decimal = 1D
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Zero
    commentId: F:System.Decimal.Zero
  - type: System.Decimal.MinusOne
    commentId: F:System.Decimal.MinusOne
  - type: System.Decimal.MaxValue
    commentId: F:System.Decimal.MaxValue
  - type: System.Decimal.MinValue
    commentId: F:System.Decimal.MinValue
  attributes:
  - type: System.Runtime.CompilerServices.DecimalConstantAttribute
    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)
    arguments:
    - type: System.Byte
      value: 0
    - type: System.Byte
      value: 0
    - type: System.UInt32
      value: "0"
    - type: System.UInt32
      value: "0"
    - type: System.UInt32
      value: "1"
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Decimal.Zero
  commentId: F:System.Decimal.Zero
  id: Zero
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.Decimal.Zero
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Zero
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 100
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the number zero (0).</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of the <strong>Zero</strong> field.</p>System.Decimal.Fields#1"
  syntax:
    content: public const decimal Zero = 0M
    content.vb: Public Const Zero As Decimal = 0D
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.One
    commentId: F:System.Decimal.One
  - type: System.Decimal.MinusOne
    commentId: F:System.Decimal.MinusOne
  - type: System.Decimal.MaxValue
    commentId: F:System.Decimal.MaxValue
  - type: System.Decimal.MinValue
    commentId: F:System.Decimal.MinValue
  attributes:
  - type: System.Runtime.CompilerServices.DecimalConstantAttribute
    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)
    arguments:
    - type: System.Byte
      value: 0
    - type: System.Byte
      value: 0
    - type: System.UInt32
      value: "0"
    - type: System.UInt32
      value: "0"
    - type: System.UInt32
      value: "0"
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Decimal.#ctor(System.Double)
  commentId: M:System.Decimal.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(Double)
  fullName: System.Decimal.Decimal(System.Double)
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the value of the specified double-precision floating-point number.</p>\n"
  remarks: "\n<p>This constructor rounds <em>value</em> to 15 significant digits using rounding to nearest. This is done even if the number has more than 15 digits and the less significant digits are zero.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Decimal.Ctor.Reals#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public Decimal(double value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(value As Double)
    parameters:
    - id: value
      type: System.Double
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.#ctor(System.Int32)
  commentId: M:System.Decimal.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(Int32)
  fullName: System.Decimal.Decimal(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 152
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the value of the specified 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Decimal.Ctor.Ints#1"
  syntax:
    content: public Decimal(int value)
    content.vb: Public Sub New(value As Integer)
    parameters:
    - id: value
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)
  commentId: M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(Int32, Int32, Int32, Boolean, Byte)
  fullName: System.Decimal.Decimal(System.Int32, System.Int32, System.Int32, System.Boolean, System.Byte)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 283
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> from parameters specifying the instance's constituent parts.</p>\n"
  remarks: "\n<p>The binary representation of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10 raised to an exponent ranging from 0 to 28.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with three <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value words, a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> sign, and a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> scale factor.</p>System.Decimal.Ctor.Arrays#2"
  - "\n<p>The following example uses the <xref href=\"System.Decimal.GetBits(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the component parts of an array. It then uses this array in the call to the <xref href=\"System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a new <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Decimal.Ctor#1"
  syntax:
    content: public Decimal(int lo, int mid, int hi, bool isNegative, byte scale)
    content.vb: Public Sub New(lo As Integer, mid As Integer, hi As Integer, isNegative As Boolean, scale As Byte)
    parameters:
    - id: lo
      type: System.Int32
    - id: mid
      type: System.Int32
    - id: hi
      type: System.Int32
    - id: isNegative
      type: System.Boolean
    - id: scale
      type: System.Byte
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>scale</em> is greater than 28. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.#ctor(System.Int32[])
  commentId: M:System.Decimal.#ctor(System.Int32[])
  id: '#ctor(System.Int32[])'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(Int32[])
  fullName: System.Decimal.Decimal(System.Int32[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 256
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a decimal value represented in binary and contained in a specified array.</p>\n"
  remarks: "\n<p>The binary representation of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</p>\n<p>\n<em>bits</em> is a four-element long array of 32-bit signed integers.</p>\n<p>\n<em>bits</em> [0], <em>bits</em> [1], and <em>bits</em> [2] contain the low, middle, and high 32 bits of the 96-bit integer number.</p>\n<p>\n<em>bits</em> [3] contains the scale factor and sign, and consists of following parts: </p>\n<p>Bits 0 to 15, the lower word, are unused and must be zero.</p>\n<p>Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.</p>\n<p>Bits 24 to 30 are unused and must be zero.</p>\n<p>Bit 31 contains the sign; 0 meaning positive, and 1 meaning negative.</p>\n<p>A numeric value might have several possible binary representations; all are equally valid and numerically equivalent. Note that the bit representation differentiates between negative and positive zero. These values are treated as being equal in all operations.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with an array of four <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.Ctor.Arrays#1"
  syntax:
    content: public Decimal(int[] bits)
    content.vb: Public Sub New(bits As Integer())
    parameters:
    - id: bits
      type: System.Int32[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bits</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of the <em>bits</em> is not 4.</p>\n<p>-or- </p>\n<p>The representation of the decimal value in <em>bits</em> is not valid. </p>\n"
  seealso:
  - type: System.Decimal.GetBits(System.Decimal)
    commentId: M:System.Decimal.GetBits(System.Decimal)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Decimal.Decimal(System.Int32())
  name.vb: Decimal(Int32())
- uid: System.Decimal.#ctor(System.Int64)
  commentId: M:System.Decimal.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(Int64)
  fullName: System.Decimal.Decimal(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 180
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the value of the specified 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Decimal.Ctor.Ints#3"
  syntax:
    content: public Decimal(long value)
    content.vb: Public Sub New(value As Long)
    parameters:
    - id: value
      type: System.Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.#ctor(System.Single)
  commentId: M:System.Decimal.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(Single)
  fullName: System.Decimal.Decimal(System.Single)
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the value of the specified single-precision floating-point number.</p>\n"
  remarks: "\n<p>This constructor rounds <em>value</em> to 7 significant digits using rounding to nearest. This is done even if the number has more than 7 digits and the less significant digits are zero.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Decimal.Ctor.Reals#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public Decimal(float value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(value As Single)
    parameters:
    - id: value
      type: System.Single
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.#ctor(System.UInt32)
  commentId: M:System.Decimal.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(UInt32)
  fullName: System.Decimal.Decimal(System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 170
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the value of the specified 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Decimal.Ctor.Ints#2"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public Decimal(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.#ctor(System.UInt64)
  commentId: M:System.Decimal.#ctor(System.UInt64)
  id: '#ctor(System.UInt64)'
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decimal(UInt64)
  fullName: System.Decimal.Decimal(System.UInt64)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 198
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the value of the specified 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following code example creates several <strong>Decimal</strong> numbers using the constructor overload that initializes a <strong>Decimal</strong> structure with a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Decimal.Ctor.Ints#4"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public Decimal(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.Add(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)
  id: Add(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Add(Decimal, Decimal)
  fullName: System.Decimal.Add(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 339
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The following code sample illustrates the use of <strong>Add</strong> : </p>Decimal Example#5"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal Add(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Add(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of <em>d1</em> and <em>d2</em> is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)
  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)
  - type: System.Decimal.Divide(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Ceiling(System.Decimal)
  commentId: M:System.Decimal.Ceiling(System.Decimal)
  id: Ceiling(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Ceiling(Decimal)
  fullName: System.Decimal.Ceiling(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ceiling
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 360
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the smallest integral value that is greater than or equal to the specified decimal number.</p>\n"
  remarks: "\n<p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <em>d</em> is positive, the presence of any fractional component causes <em>d</em> to be rounded to the next highest integer. If <em>d</em> is negative, the rounding operation causes any fractional component of <em>d</em> to be discarded. The operation of this method differs from the <xref href=\"System.Decimal.Floor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method, which supports rounding toward negative infinity. </p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Decimal.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method and contrasts it with the <xref href=\"System.Decimal.Floor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Decimal.Ceiling#1"
  syntax:
    content: public static decimal Ceiling(decimal d)
    content.vb: Public Shared Function Ceiling(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Math.Ceiling(System.Decimal)
    commentId: M:System.Math.Ceiling(System.Decimal)
  - type: System.Decimal.Floor(System.Decimal)
    commentId: M:System.Decimal.Floor(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Compare(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  id: Compare(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Compare(Decimal, Decimal)
  fullName: System.Decimal.Compare(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 367
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - "\n<p>The following example compares several <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. Note that the first comparison indicates that the two values are equal despite the subtraction operation performed on the <code>value2</code> variable. This is because the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> type has 29 digits of precision, whereas a difference between these two values can be detected only with 30 digits of precision.</p>System.Decimal.Compare#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int Compare(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Compare(d1 As Decimal, d2 As Decimal) As Integer
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Int32
  seealso:
  - type: System.Decimal.CompareTo(System.Object)
    commentId: M:System.Decimal.CompareTo(System.Object)
  - type: System.Decimal.Equals(System.Object)
    commentId: M:System.Decimal.Equals(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.CompareTo(System.Decimal)
  commentId: M:System.Decimal.CompareTo(System.Decimal)
  id: CompareTo(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: CompareTo(Decimal)
  fullName: System.Decimal.CompareTo(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 396
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance to a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object and returns a comparison of their relative values.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and performs slightly better than the <xref href=\"System.Decimal.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to convert the <em>value</em> parameter to an object.</p>\n<p>Depending on your programming language, it might be possible to code a <see cref=\"Overload:System.Decimal.CompareTo\"></see> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</p>\n<p>For example, suppose the instance type is <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and the parameter type is <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. The Microsoft C# compiler generates instructions to represent the parameter as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> object, then generates a <xref href=\"System.Int32.CompareTo(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to compare the values of the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> instance and the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> parameter representation.</p>\n<p>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n"
  example:
  - "\n<p>The following code example demonstrates generic and nongeneric versions of the <see cref=\"Overload:System.Decimal.CompareTo\"></see> method for several value and reference types.</p>T.CompareTo#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int CompareTo(decimal value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function CompareTo(value As Decimal) As Integer
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Int32
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  - type: System.Decimal.Equals(System.Object)
    commentId: M:System.Decimal.Equals(System.Object)
  implements:
  - System.IComparable{System.Decimal}.CompareTo(System.Decimal)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.Divide(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)
  id: Divide(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Divide(Decimal, Decimal)
  fullName: System.Decimal.Divide(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Divide
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 404
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Divides two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Decimal.Divide(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to divide a range of values by 22.1. </p>System.Decimal.Divide#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal Divide(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Divide(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>d2</em> is zero. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value (that is, the quotient) is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Add(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)
  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)
  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Equals(System.Decimal)
  commentId: M:System.Decimal.Equals(System.Decimal)
  id: Equals(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Equals(Decimal)
  fullName: System.Decimal.Equals(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 436
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance and a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object represent the same value.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, and performs slightly better than <xref href=\"System.Decimal.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> because it does not have to convert the <em>value</em> parameter to an object.</p>\n<p>If <em>value</em> has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</p>\n<p>For example, suppose the instance type is <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and the parameter type is <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> object, then generates a <xref href=\"System.Int32.CompareTo(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to compare the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> instance and parameter representation.</p>\n<p>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public bool Equals(decimal value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Equals(value As Decimal) As Boolean
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Equals(System.Object)
    commentId: M:System.Decimal.Equals(System.Object)
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  implements:
  - System.IEquatable{System.Decimal}.Equals(System.Decimal)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.Equals(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Equals(System.Decimal,System.Decimal)
  id: Equals(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Equals(Decimal, Decimal)
  fullName: System.Decimal.Equals(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 451
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether two specified instances of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> represent the same value.</p>\n"
  example:
  - "\n<p>The following code example compares several <strong>Decimal</strong> values to a reference <strong>Decimal</strong> value using the static <strong>Equals</strong> method.</p>System.Decimal.Compare_Equals#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool Equals(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Equals(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  - type: System.Decimal.CompareTo(System.Object)
    commentId: M:System.Decimal.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Equals(System.Object)
  commentId: M:System.Decimal.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Decimal.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 427
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance and a specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> represent the same type and value.</p>\n"
  example:
  - "\n<p>The following code example compares several <strong>Decimal</strong> and other objects to a reference <strong>Decimal</strong> value using the <strong>Equals</strong> method.</p>System.Decimal.Compare_Equals#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override bool Equals(object value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  - type: System.Decimal.CompareTo(System.Object)
    commentId: M:System.Decimal.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Decimal.Floor(System.Decimal)
  commentId: M:System.Decimal.Floor(System.Decimal)
  id: Floor(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Floor(Decimal)
  fullName: System.Decimal.Floor(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Floor
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 459
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Rounds a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number to the closest integer toward negative infinity.</p>\n"
  remarks: "\n<p>The behavior of this method follows IEEE Standard 754, Section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <em>d</em> is positive, any fractional component is truncated. If <em>d</em> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref href=\"System.Decimal.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method, which supports rounding toward positive infinity. </p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Decimal.Floor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method and contrasts it with the <xref href=\"System.Decimal.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Decimal.Ceiling#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal Floor(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Floor(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Round(System.Decimal,System.Int32)
    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)
  - type: System.Decimal.Truncate(System.Decimal)
    commentId: M:System.Decimal.Truncate(System.Decimal)
  - type: System.Decimal.Ceiling(System.Decimal)
    commentId: M:System.Decimal.Ceiling(System.Decimal)
  - type: System.Math.Floor(System.Decimal)
    commentId: M:System.Math.Floor(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.GetBits(System.Decimal)
  commentId: M:System.Decimal.GetBits(System.Decimal)
  id: GetBits(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: GetBits(Decimal)
  fullName: System.Decimal.GetBits(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBits
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 544
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a specified instance of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to its equivalent binary representation.</p>\n"
  remarks: "\n<p>The binary representation of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</p>\n<p>The return value is a four-element array of 32-bit signed integers.</p>\n<p>The first, second, and third elements of the returned array contain the low, middle, and high 32 bits of the 96-bit integer number.</p>\n<p>The fourth element of the returned array contains the scale factor and sign. It consists of the following parts: </p>\n<p>Bits 0 to 15, the lower word, are unused and must be zero.</p>\n<p>Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.</p>\n<p>Bits 24 to 30 are unused and must be zero.</p>\n<p>Bit 31 contains the sign: 0 mean positive, and 1 means negative.</p>\n<p>Note that the bit representation differentiates between negative and positive zero. These values are treated as being equal in all operations.</p>\n"
  example:
  - "\n<p>The following example uses the <strong>GetBits</strong> method to convert several <strong>Decimal</strong> values to their equivalent binary representations. It then displays the decimal values and the hexadecimal value of the elements in the array returned by the <xref href=\"System.Decimal.GetBits(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Decimal.Get_Bits_Hash_Type#2"
  - "\n<p>The following example uses the <xref href=\"System.Decimal.GetBits(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the component parts of an array. It then uses this array in the call to the <xref href=\"System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a new <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Decimal.Ctor#1"
  syntax:
    content: public static int[] GetBits(decimal d)
    content.vb: Public Shared Function GetBits(d As Decimal) As Integer()
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Int32[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.GetHashCode
  commentId: M:System.Decimal.GetHashCode
  id: GetHashCode
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Decimal.GetHashCode()
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Decimal.Multiply(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)
  id: Multiply(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Multiply(Decimal, Decimal)
  fullName: System.Decimal.Multiply(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Multiply
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 713
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Multiplies two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - "\n<p>The following code example creates several pairs of <strong>Decimal</strong> values and calculates their products with the <strong>Multiply</strong> method.</p>System.Decimal.Mul_Div_Rem#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal Multiply(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Multiply(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Add(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)
  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)
  - type: System.Decimal.Divide(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Negate(System.Decimal)
  commentId: M:System.Decimal.Negate(System.Decimal)
  id: Negate(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Negate(Decimal)
  fullName: System.Decimal.Negate(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Negate
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 734
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the result of multiplying the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value by negative one.</p>\n"
  example:
  - "\n<p>The following code example uses the <strong>Negate</strong> method to change the sign of several <strong>Decimal</strong> values.</p>System.Decimal.Flr_Neg_Rnd_Trnc#1"
  syntax:
    content: public static decimal Negate(decimal d)
    content.vb: Public Shared Function Negate(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Addition(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Addition(System.Decimal,System.Decimal)
  id: op_Addition(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Addition(Decimal, Decimal)
  fullName: System.Decimal.Addition(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Addition
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1103
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Addition(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the addition operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Decimal.Operators#3<p>If the language you're using doesn't support custom operators, call the <xref href=\"System.Decimal.Add(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal operator +(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator +(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Add(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Decrement(System.Decimal)
  commentId: M:System.Decimal.op_Decrement(System.Decimal)
  id: op_Decrement(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Decrement(Decimal)
  fullName: System.Decimal.Decrement(System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Decrement
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1099
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Decrements the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> operand by one.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Decrement(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the decrement operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Decimal.Operators#4<p>Some languages (such as Visual Basic) that lack an increment operator can call the <xref href=\"System.Decimal.op_Decrement(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows. </p>System.Decimal.Operators#5<p>If your language does not support custom operators, call the <xref href=\"System.Decimal.Subtract(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead, as the following example shows.</p>System.Decimal.Operators#6"
  syntax:
    content: public static decimal operator --(decimal d)
    content.vb: VB cannot support this operator.
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Division(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Division(System.Decimal,System.Decimal)
  id: op_Division(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Division(Decimal, Decimal)
  fullName: System.Decimal.Division(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Division
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1121
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Divides two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Division(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the division operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#7<p>If the language you're using doesn't support custom operators, call the <xref href=\"System.Decimal.Divide(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal operator /(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator /(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>d2</em> is zero. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Divide(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Equality(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Equality(System.Decimal,System.Decimal)
  id: op_Equality(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Equality(Decimal, Decimal)
  fullName: System.Decimal.Equality(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1131
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Equality(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#1<p>If the language you're using doesn't support custom operators, call the <xref href=\"System.Decimal.Equals(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool operator ==(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator =(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Equals(System.Object)
    commentId: M:System.Decimal.Equals(System.Object)
  - type: System.Decimal.op_Inequality(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Byte
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Byte
  id: op_Explicit(System.Decimal)~System.Byte
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Byte)
  fullName: System.Decimal.Explicit(System.Decimal to System.Byte)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1032
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to an 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value by using C#, Visual Basic, and C++. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#4"
  syntax:
    content: public static explicit operator byte (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Byte
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Byte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Byte)
  name.vb: Narrowing(Decimal to Byte)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Char
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Char
  id: op_Explicit(System.Decimal)~System.Char
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Char)
  fullName: System.Decimal.Explicit(System.Decimal to System.Char)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1041
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a Unicode character.</p>\n"
  remarks: "\n<p></p>\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers might provide different implementations and return different results, or might not support the conversion at all. For example, the Visual Basic and C++ compilers do not support an explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> conversion. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values (Unicode characters) by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#6"
  syntax:
    content: public static explicit operator char (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Char
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Char
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Char)
  name.vb: Narrowing(Decimal to Char)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Double
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Double
  id: op_Explicit(System.Decimal)~System.Double
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Double)
  fullName: System.Decimal.Explicit(System.Decimal to System.Double)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1083
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a double-precision floating-point number.</p>\n"
  remarks: "\n<p>This operation can result in a loss of precision, because a double-precision floating-point number has fewer significant digits than a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value by using C#, C++, and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToDouble(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToDouble(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#5"
  syntax:
    content: public static explicit operator double (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Double
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Double
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Double)
  name.vb: Narrowing(Decimal to Double)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Int16
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Int16
  id: op_Explicit(System.Decimal)~System.Int16
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Int16)
  fullName: System.Decimal.Explicit(System.Decimal to System.Int16)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1052
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a 16-bit signed integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#3"
  syntax:
    content: public static explicit operator short (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Short
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Int16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Int16)
  name.vb: Narrowing(Decimal to Int16)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Int32
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Int32
  id: op_Explicit(System.Decimal)~System.Int32
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Int32)
  fullName: System.Decimal.Explicit(System.Decimal to System.Int32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1061
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a 32-bit signed integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#2"
  syntax:
    content: public static explicit operator int (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Integer
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Int32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Int32)
  name.vb: Narrowing(Decimal to Int32)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Int64
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Int64
  id: op_Explicit(System.Decimal)~System.Int64
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Int64)
  fullName: System.Decimal.Explicit(System.Decimal to System.Int64)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1070
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a 64-bit signed integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#1"
  syntax:
    content: public static explicit operator long (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Long
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Int64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Int64)
  name.vb: Narrowing(Decimal to Int64)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.SByte
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.SByte
  id: op_Explicit(System.Decimal)~System.SByte
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to SByte)
  fullName: System.Decimal.Explicit(System.Decimal to System.SByte)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1036
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to an 8-bit signed integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToSByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToSByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.Operators.Explicit#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator sbyte (decimal value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As Decimal) As SByte
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.SByte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.SByte)
  name.vb: Narrowing(Decimal to SByte)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.Single
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Single
  id: op_Explicit(System.Decimal)~System.Single
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Single)
  fullName: System.Decimal.Explicit(System.Decimal to System.Single)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1079
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a single-precision floating-point number.</p>\n"
  remarks: "\n<p>This operation can result in a loss of precision, because a single-precision floating-point number has fewer significant digits than a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToSingle(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToSingle(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.Operators.Explicit#2"
  syntax:
    content: public static explicit operator float (decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Single
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Single
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Single)
  name.vb: Narrowing(Decimal to Single)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.UInt16
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16
  id: op_Explicit(System.Decimal)~System.UInt16
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to UInt16)
  fullName: System.Decimal.Explicit(System.Decimal to System.UInt16)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1056
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a 16-bit unsigned integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToUInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToUInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#3"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator ushort (decimal value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As Decimal) As UShort
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.UInt16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.UInt16)
  name.vb: Narrowing(Decimal to UInt16)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.UInt32
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32
  id: op_Explicit(System.Decimal)~System.UInt32
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to UInt32)
  fullName: System.Decimal.Explicit(System.Decimal to System.UInt32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1065
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToUInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToUInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#2"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator uint (decimal value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As Decimal) As UInteger
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.UInt32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is negative or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.UInt32)
  name.vb: Narrowing(Decimal to UInt32)
- uid: System.Decimal.op_Explicit(System.Decimal)~System.UInt64
  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64
  id: op_Explicit(System.Decimal)~System.UInt64
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to UInt64)
  fullName: System.Decimal.Explicit(System.Decimal to System.UInt64)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1074
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent, and individual language compilers can provide different implementations and return different results. The example illustrates the different return values when you explicitly convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value by using C# and Visual Basic. To perform a conversion that is independent of language, you can call the <xref href=\"System.Decimal.ToUInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Convert.ToUInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values by using the explicit <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> conversion.</p>System.Decimal.ConvTo#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator ulong (decimal value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As Decimal) As ULong
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.UInt64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is negative or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.UInt64)
  name.vb: Narrowing(Decimal to UInt64)
- uid: System.Decimal.op_Explicit(System.Double)~System.Decimal
  commentId: M:System.Decimal.op_Explicit(System.Double)~System.Decimal
  id: op_Explicit(System.Double)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Double to Decimal)
  fullName: System.Decimal.Explicit(System.Double to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1028
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a double-precision floating-point number to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers by using the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> conversion. This conversion requires the <strong>op_Explicit</strong> operator in Visual Basic.</p>System.Decimal.ConvFrom.Others#2"
  syntax:
    content: public static explicit operator decimal (double value)
    content.vb: Public Shared Narrowing Operator CType(value As Double) As Decimal
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Double to System.Decimal)
  name.vb: Narrowing(Double to Decimal)
- uid: System.Decimal.op_Explicit(System.Single)~System.Decimal
  commentId: M:System.Decimal.op_Explicit(System.Single)~System.Decimal
  id: op_Explicit(System.Single)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Explicit(Single to Decimal)
  fullName: System.Decimal.Explicit(System.Single to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1024
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a single-precision floating-point number to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers by using the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>  conversion. This conversion requires the <strong>op_Explicit</strong> operator in Visual Basic.</p>System.Decimal.ConvFrom.Others#3"
  syntax:
    content: public static explicit operator decimal (float value)
    content.vb: Public Shared Narrowing Operator CType(value As Single) As Decimal
    parameters:
    - id: value
      type: System.Single
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Narrowing(System.Single to System.Decimal)
  name.vb: Narrowing(Single to Decimal)
- uid: System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)
  id: op_GreaterThan(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: GreaterThan(Decimal, Decimal)
  fullName: System.Decimal.GreaterThan(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThan
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1151
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> is greater than another specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#8<p>Languages that do not support custom operators can call the <xref href=\"System.Decimal.Compare(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They may also be able to call the <xref href=\"System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows. </p>System.Decimal.Operators#9"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool operator>(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator>(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)
  id: op_GreaterThanOrEqual(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Decimal, Decimal)
  fullName: System.Decimal.GreaterThanOrEqual(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThanOrEqual
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1156
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to another specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than or equal operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#10<p>Languages that do not support custom operators can call the <xref href=\"System.Decimal.Compare(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They may also be able to call the <xref href=\"System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows. </p>System.Decimal.Operators#11"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool operator >=(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator >=(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Implicit(System.Byte)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.Byte)~System.Decimal
  id: op_Implicit(System.Byte)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(Byte to Decimal)
  fullName: System.Decimal.Implicit(System.Byte to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 983
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of an 8-bit unsigned integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.UInts#4"
  syntax:
    content: public static implicit operator decimal (byte value)
    content.vb: Public Shared Widening Operator CType(value As Byte) As Decimal
    parameters:
    - id: value
      type: System.Byte
    return:
      type: System.Decimal
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.Byte to System.Decimal)
  name.vb: Widening(Byte to Decimal)
- uid: System.Decimal.op_Implicit(System.Char)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.Char)~System.Decimal
  id: op_Implicit(System.Char)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(Char to Decimal)
  fullName: System.Decimal.Implicit(System.Char to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1001
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a Unicode character to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values (Unicode characters) to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. This conversion requires the <strong>op_Implicit</strong> operator in Visual Basic, but not in C# and C++. </p>System.Decimal.ConvFrom.Others#1"
  syntax:
    content: public static implicit operator decimal (char value)
    content.vb: Public Shared Widening Operator CType(value As Char) As Decimal
    parameters:
    - id: value
      type: System.Char
    return:
      type: System.Decimal
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.Char to System.Decimal)
  name.vb: Widening(Char to Decimal)
- uid: System.Decimal.op_Implicit(System.Int16)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.Int16)~System.Decimal
  id: op_Implicit(System.Int16)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to Decimal)
  fullName: System.Decimal.Implicit(System.Int16 to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 992
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a 16-bit signed integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.SInts#3"
  syntax:
    content: public static implicit operator decimal (short value)
    content.vb: Public Shared Widening Operator CType(value As Short) As Decimal
    parameters:
    - id: value
      type: System.Int16
    return:
      type: System.Decimal
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.Int16 to System.Decimal)
  name.vb: Widening(Int16 to Decimal)
- uid: System.Decimal.op_Implicit(System.Int32)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.Int32)~System.Decimal
  id: op_Implicit(System.Int32)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to Decimal)
  fullName: System.Decimal.Implicit(System.Int32 to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1005
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a 32-bit signed integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.SInts#2"
  syntax:
    content: public static implicit operator decimal (int value)
    content.vb: Public Shared Widening Operator CType(value As Integer) As Decimal
    parameters:
    - id: value
      type: System.Int32
    return:
      type: System.Decimal
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.Int32 to System.Decimal)
  name.vb: Widening(Int32 to Decimal)
- uid: System.Decimal.op_Implicit(System.Int64)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.Int64)~System.Decimal
  id: op_Implicit(System.Int64)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to Decimal)
  fullName: System.Decimal.Implicit(System.Int64 to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1014
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a 64-bit signed integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.SInts#1"
  syntax:
    content: public static implicit operator decimal (long value)
    content.vb: Public Shared Widening Operator CType(value As Long) As Decimal
    parameters:
    - id: value
      type: System.Int64
    return:
      type: System.Decimal
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.Int64 to System.Decimal)
  name.vb: Widening(Int64 to Decimal)
- uid: System.Decimal.op_Implicit(System.SByte)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.SByte)~System.Decimal
  id: op_Implicit(System.SByte)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(SByte to Decimal)
  fullName: System.Decimal.Implicit(System.SByte to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 987
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of an 8-bit signed integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following code example converts <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.SInts#4"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator decimal (sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As SByte) As Decimal
    parameters:
    - id: value
      type: System.SByte
    return:
      type: System.Decimal
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.SByte to System.Decimal)
  name.vb: Widening(SByte to Decimal)
- uid: System.Decimal.op_Implicit(System.UInt16)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal
  id: op_Implicit(System.UInt16)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt16 to Decimal)
  fullName: System.Decimal.Implicit(System.UInt16 to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 996
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a 16-bit unsigned integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.UInts#3"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator decimal (ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As UShort) As Decimal
    parameters:
    - id: value
      type: System.UInt16
    return:
      type: System.Decimal
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.UInt16 to System.Decimal)
  name.vb: Widening(UInt16 to Decimal)
- uid: System.Decimal.op_Implicit(System.UInt32)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal
  id: op_Implicit(System.UInt32)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt32 to Decimal)
  fullName: System.Decimal.Implicit(System.UInt32 to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1009
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a 32-bit unsigned integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers. </p>System.Decimal.ConvFrom.UInts#2"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator decimal (uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As UInteger) As Decimal
    parameters:
    - id: value
      type: System.UInt32
    return:
      type: System.Decimal
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.UInt32 to System.Decimal)
  name.vb: Widening(UInt32 to Decimal)
- uid: System.Decimal.op_Implicit(System.UInt64)~System.Decimal
  commentId: M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal
  id: op_Implicit(System.UInt64)~System.Decimal
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to Decimal)
  fullName: System.Decimal.Implicit(System.UInt64 to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1018
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an implicit conversion of a 64-bit unsigned integer to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Decimal.op_Implicit\"></see> method define the types from which the compiler can automatically convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example converts <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> numbers by using the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> conversion. </p>System.Decimal.ConvFrom.UInts#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator decimal (ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As ULong) As Decimal
    parameters:
    - id: value
      type: System.UInt64
    return:
      type: System.Decimal
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.Widening(System.UInt64 to System.Decimal)
  name.vb: Widening(UInt64 to Decimal)
- uid: System.Decimal.op_Increment(System.Decimal)
  commentId: M:System.Decimal.op_Increment(System.Decimal)
  id: op_Increment(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Increment(Decimal)
  fullName: System.Decimal.Increment(System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Increment
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1095
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Increments the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> operand by 1.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Increment(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the increment operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Decimal.Operators#12<p>Some languages (such as Visual Basic) that lack an increment operator can call the <xref href=\"System.Decimal.op_Increment(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows. </p>System.Decimal.Operators#13<p>If your language does not support custom operators, call the <xref href=\"System.Decimal.Add(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead, as the following example shows.</p>System.Decimal.Operators#14"
  syntax:
    content: public static decimal operator ++(decimal d)
    content.vb: VB cannot support this operator.
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Add(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Inequality(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)
  id: op_Inequality(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Inequality(Decimal, Decimal)
  fullName: System.Decimal.Inequality(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1136
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> objects have different values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Inequality(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#2<p>If the language you're using doesn't support custom operators, you can test for inequality by using one of the following techniques:</p><ul><li><p>Calling the <xref href=\"System.Decimal.Compare(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates the relationship between two <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. </p></li><li><p>Calling the <xref href=\"System.Decimal.Equals(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value. </p></li></ul>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool operator !=(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator <>(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Equals(System.Object)
    commentId: M:System.Decimal.Equals(System.Object)
  - type: System.Decimal.op_Equality(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.op_Equality(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_LessThan(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)
  id: op_LessThan(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: LessThan(Decimal, Decimal)
  fullName: System.Decimal.LessThan(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThan
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1141
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> is less than another specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_LessThan(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#15<p>Languages that do not support custom operators can call the <xref href=\"System.Decimal.Compare(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They may also be able to call the <xref href=\"System.Decimal.op_LessThan(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows. </p>System.Decimal.Operators#16"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool operator <(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator <(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)
  id: op_LessThanOrEqual(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Decimal, Decimal)
  fullName: System.Decimal.LessThanOrEqual(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThanOrEqual
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1146
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether a specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> is less than or equal to another specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than or equal operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#17<p>Languages that do not support custom operators can call the <xref href=\"System.Decimal.Compare(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They may also be able to call the <xref href=\"System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows. </p>System.Decimal.Operators#18"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool operator <=(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator <=(d1 As Decimal, d2 As Decimal) As Boolean
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.Compare(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Modulus(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)
  id: op_Modulus(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Modulus(Decimal, Decimal)
  fullName: System.Decimal.Modulus(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Modulus
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1127
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the remainder resulting from dividing two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Modulus(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the modulus operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#19<p>If the language you're using doesn't support custom operators, call the <xref href=\"System.Decimal.Remainder(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref>  method instead. </p><p>The sign of the value return by the modulus operation depends on the sign of dividend. If dividend is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. </p>"
  syntax:
    content: public static decimal operator %(decimal d1, decimal d2)
    content.vb: Public Shared Operator Mod(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>d2</em> is <strong>zero</strong>. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Remainder(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Remainder(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Multiply(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)
  id: op_Multiply(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Multiply(Decimal, Decimal)
  fullName: System.Decimal.Multiply(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Multiply
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1115
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Multiplies two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Multiply(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the multiplication operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following: </p>System.Decimal.Operators#20<p>If the language you're using doesn't support custom operators, call the <xref href=\"System.Decimal.Multiply(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal operator *(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator *(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_Subtraction(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)
  id: op_Subtraction(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Subtraction(Decimal, Decimal)
  fullName: System.Decimal.Subtraction(System.Decimal, System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Subtraction
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1109
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Subtracts two specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_Subtraction(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the subtraction operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Decimal.Operators#21<p>If the language you're using doesn't support custom operators, call the <xref href=\"System.Decimal.Subtract(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal operator -(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Operator -(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_UnaryNegation(System.Decimal)
  commentId: M:System.Decimal.op_UnaryNegation(System.Decimal)
  id: op_UnaryNegation(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: UnaryNegation(Decimal)
  fullName: System.Decimal.UnaryNegation(System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_UnaryNegation
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1091
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Negates the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> operand.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_UnaryPlus(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref href=\"System.Decimal.Negate(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>\n"
  syntax:
    content: public static decimal operator -(decimal d)
    content.vb: Public Shared Operator -(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Negate(System.Decimal)
    commentId: M:System.Decimal.Negate(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.op_UnaryPlus(System.Decimal)
  commentId: M:System.Decimal.op_UnaryPlus(System.Decimal)
  id: op_UnaryPlus(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: UnaryPlus(Decimal)
  fullName: System.Decimal.UnaryPlus(System.Decimal)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_UnaryPlus
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1087
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the value of the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> operand (the sign of the operand is unchanged).</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.op_UnaryPlus(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the unary positive operator for <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  syntax:
    content: public static decimal operator +(decimal d)
    content.vb: Public Shared Operator +(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Parse(System.String)
  commentId: M:System.Decimal.Parse(System.String)
  id: Parse(System.String)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Decimal.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 507
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent.</p>\n"
  remarks: "\n<p>Parameter <em>s</em> contains a number of the form: </p>\n<p>[ws][sign][digits,]digits[.fractional-digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. </p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr></tbody></table>\n<p>Parameter <em>s</em> is interpreted using the <xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <em>s</em>, use either the <xref href=\"System.Decimal.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Parameter <em>s</em> is parsed using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> initialized for the current system culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>. To parse a string using the formatting information of some other culture, use the <xref href=\"System.Decimal.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If necessary, the value of <em>s</em> is rounded using rounding to nearest.</p>\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> has 29 digits of precision. If <em>s</em> represents a number that has more than 29 digits, but has a fractional part and is within the range of <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</p>\n<p>If during a parse operation a separator is encountered in the <em>s</em> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Decimal.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to parse string representations of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.Parse#1"
  syntax:
    content: public static decimal Parse(string s)
    content.vb: Public Shared Function Parse(s As String) As Decimal
    parameters:
    - id: s
      type: System.String
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> is not in the correct format. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.ToString
    commentId: M:System.Decimal.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Parse(System.String,System.Globalization.NumberStyles)
  commentId: M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles)
  fullName: System.Decimal.Parse(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 511
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified style to its <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent.</p>\n"
  remarks: "\n<p>The <em>style</em> parameter defines the style elements (such as thousands separators, white space, and currency symbols) that are allowed in the <em>s</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The following <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members are not supported:</p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>Depending on the value of <em>style</em>, the <em>s</em> parameter may include the following elements:</p>\n<p>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref>  and <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture. The current culture's currency symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. The sign can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>s</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol. The current culture's thousands separator can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. Fractional digits can appear in <em>s</em> only if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>e</p>\n</td><td>\n<p>The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The <em>s</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr></tbody></table>\n<p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. The remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members affect the elements that may be present in <em>s</em>.</p>\n<p>NumberStyles value</p>\n<p>Elements permitted in s in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The digits element only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The . and fractional-digits elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>s</em> parameter can also use exponential notation. This flag supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning of <em>s</em>.  </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the beginning of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The , element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p> The $ element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All. The <em>s</em> parameter cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning or end of <em>s</em>, sign at the beginning of <em>s</em>, and the . symbol. The <em>s</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>ws</em>, <em>sign</em>, ,, and . elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All styles, except <em>s</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>The <em>s</em> parameter is parsed using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object initialized for the current system culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> has 29 digits of precision. If <em>s</em> represents a number that has more than 29 digits, but has a fractional part and is within the range of <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, <em>styles</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> values, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Decimal.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> method to parse the string representations of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values using the en-US culture.</p>System.Decimal.Parse#2"
  syntax:
    content: public static decimal Parse(string s, NumberStyles style)
    content.vb: Public Shared Function Parse(s As String, style As NumberStyles) As Decimal
    parameters:
    - id: s
      type: System.String
    - id: style
      type: System.Globalization.NumberStyles
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n<p>-or-</p>\n<p>\n<em>style</em> is the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> is not in the correct format. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  seealso:
  - type: System.Decimal.ToString
    commentId: M:System.Decimal.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles, IFormatProvider)
  fullName: System.Decimal.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 520
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent using the specified style and culture-specific format.</p>\n"
  remarks: "\n<p>The <em>style</em> parameter defines the allowable format of the <em>s</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The following <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members are not supported:</p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>Depending on the value of <em>style</em>, the <em>s</em> parameter may include the following elements:</p>\n<p> [ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref>  and <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method of the <em>provider</em> parameter. The currency symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. The sign can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>s</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol. The thousands separator of the culture defined by <em>provider</em> can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. The decimal point symbol of the culture defined by <em>provider</em> can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. Fractional digits can appear in <em>s</em> only if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>e</p>\n</td><td>\n<p>The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The <em>s</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr></tbody></table>\n<p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. The remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members affect the elements that may be present in <em>s</em>.</p>\n<p>NumberStyles value</p>\n<p>Elements permitted in s in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The digits element only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The . and fractional-digits elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>s</em> parameter can also use exponential notation.  This flag supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning of <em>s</em>.  </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the beginning of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The , element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p> The $ element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All. The <em>s</em> parameter cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning or end of <em>s</em>, sign at the beginning of <em>s</em>, and the .<strong></strong>symbol. The <em>s</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>ws</em>, <em>sign</em>, ,, and . elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All styles, except <em>s</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation, such as a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in parsing. If <em>provider</em> is <strong>null</strong>, the thread current culture is used.</p>\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object has 29 digits of precision. If <em>s</em> represents a number that has more than 29 digits, but has a fractional part and is within the range of <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses a variety of <em>style</em> and <em>provider</em> parameters to parse the string representations of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.Parse#3"
  syntax:
    content: public static decimal Parse(string s, NumberStyles style, IFormatProvider provider)
    content.vb: Public Shared Function Parse(s As String, style As NumberStyles, provider As IFormatProvider) As Decimal
    parameters:
    - id: s
      type: System.String
    - id: style
      type: System.Globalization.NumberStyles
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Decimal
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> is not in the correct format. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n<p>-or-</p>\n<p>\n<em>style</em> is the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Decimal.ToString
    commentId: M:System.Decimal.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Parse(System.String,System.IFormatProvider)
  commentId: M:System.Decimal.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Parse(String, IFormatProvider)
  fullName: System.Decimal.Parse(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 516
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent using the specified culture-specific format information.</p>\n"
  remarks: "\n<p>This overload of the <xref href=\"System.Decimal.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method is commonly used to convert text that can be formatted in a variety of ways to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</p>\n<p>The <em>s</em> parameter contains a number of the form: </p>\n<p>[ws][sign][digits,]digits[.fractional-digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. </p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr></tbody></table>\n<p>The <em>s</em> parameter is interpreted using the <xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <em>s</em>, use the <xref href=\"System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation, such as a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in parsing. If <em>provider</em> is <strong>null</strong>, the thread current culture is used.</p>\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object has 29 digits of precision. If <em>s</em> represents a number that has more than 29 digits, but has a fractional part and is within the range of <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example is the button click event handler of a Web form. It uses the array returned by the <xref href=\"System.Web.HttpRequest.UserLanguages\" data-throw-if-not-resolved=\"false\"></xref> property to determine the user's locale. It then instantiates a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that corresponds to that locale. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that belongs to that <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object is then passed to the <xref href=\"System.Decimal.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the user's input to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value. </p>ParseMethod#3"
  syntax:
    content: public static decimal Parse(string s, IFormatProvider provider)
    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider) As Decimal
    parameters:
    - id: s
      type: System.String
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> is not of the correct format </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  seealso:
  - type: System.Decimal.ToString
    commentId: M:System.Decimal.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Remainder(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Remainder(System.Decimal,System.Decimal)
  id: Remainder(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Remainder(Decimal, Decimal)
  fullName: System.Decimal.Remainder(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remainder
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 668
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Computes the remainder after dividing two <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.Remainder(System.Decimal,System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate the remainder in a series of division operations.</p>System.Decimal.Remainder#1"
  syntax:
    content: public static decimal Remainder(decimal d1, decimal d2)
    content.vb: Public Shared Function Remainder(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>d2</em> is zero. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Subtract(System.Decimal,System.Decimal)
  commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)
  id: Subtract(System.Decimal,System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Subtract(Decimal, Decimal)
  fullName: System.Decimal.Subtract(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Subtract
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 785
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Subtracts one specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value from another.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>Subtract</strong>. </p>Decimal Example#4"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal Subtract(decimal d1, decimal d2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Subtract(d1 As Decimal, d2 As Decimal) As Decimal
    parameters:
    - id: d1
      type: System.Decimal
    - id: d2
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The return value is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal.Add(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)
  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)
  - type: System.Decimal.Divide(System.Decimal,System.Decimal)
    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Decimal.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Decimal.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 683
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object value)
    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Decimal.System#IConvertible#GetTypeCode
  commentId: M:System.Decimal.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.GetTypeCode()
  fullName: System.Decimal.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 684
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
- uid: System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToBoolean
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1170
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToBoolean(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Boolean
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToByte(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToByte
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1186
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Byte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToChar(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToChar
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1176
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Char
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDateTime
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1236
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.DateTime
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases.</p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDecimal
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1231
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Decimal
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToDouble(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDouble
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1226
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToDouble(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToDouble(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Because a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> has fewer significant digits than a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>, this operation may produce round-off errors.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Double
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt16(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt16
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1191
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is rounded toward zero to the nearest integer value.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Int16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt32(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt32
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1201
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is rounded toward zero to the nearest integer value.</p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Int32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt64(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt64
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1211
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Int64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToSByte(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSByte
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1181
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToSByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToSByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.SByte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToSingle(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSingle
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1221
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToSingle(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToSingle(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Single
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToType(Type, IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToType
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1241
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <strong>static</strong> (<strong>Shared</strong> in Visual Basic) <xref href=\"System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The requested type conversion is not supported. </p>\n"
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt16
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1196
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToUInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToUInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.UInt16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt32
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1206
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToUInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToUInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is rounded toward zero to the nearest integer value.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.UInt32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Decimal.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt64
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 1216
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call either the <xref href=\"System.Decimal.ToUInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Convert.ToUInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is rounded toward zero to the nearest integer value.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.UInt64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The resulting integer value is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.Decimal.ToByte(System.Decimal)
  commentId: M:System.Decimal.ToByte(System.Decimal)
  id: ToByte(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToByte(Decimal)
  fullName: System.Decimal.ToByte(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToByte
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 796
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>Parameter <em>value</em> is rounded to the nearest integer value toward zero, and that result is returned.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an 8-bit unsigned integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.Byte\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToByte#1"
  syntax:
    content: public static byte ToByte(decimal value)
    content.vb: Public Shared Function ToByte(value As Decimal) As Byte
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Byte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToDouble(System.Decimal)
  commentId: M:System.Decimal.ToDouble(System.Decimal)
  id: ToDouble(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToDouble(Decimal)
  fullName: System.Decimal.ToDouble(System.Decimal)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent double-precision floating-point number.</p>\n"
  remarks: "\n<p>This operation can produce round-off errors because a double-precision floating-point number has fewer significant digits than a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.Double\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the conversion can entail a loss of precision, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following code example converts <strong>Decimal</strong> numbers to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values using <strong>ToDouble</strong> method.</p>System.Decimal.ToXXX#5"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double ToDouble(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function ToDouble(d As Decimal) As Double
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Double
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToInt16(System.Decimal)
  commentId: M:System.Decimal.ToInt16(System.Decimal)
  id: ToInt16(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToInt16(Decimal)
  fullName: System.Decimal.ToInt16(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt16
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 830
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 16-bit signed integer.</p>\n"
  remarks: "\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a 16-bit integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.Int16\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToInt16#1"
  syntax:
    content: public static short ToInt16(decimal value)
    content.vb: Public Shared Function ToInt16(value As Decimal) As Short
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Int16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToInt32(System.Decimal)
  commentId: M:System.Decimal.ToInt32(System.Decimal)
  id: ToInt32(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToInt32(Decimal)
  fullName: System.Decimal.ToInt32(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt32
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 874
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 32-bit signed integer.</p>\n"
  remarks: "\n<p>The return value is the integral part of the decimal value; fractional digits are truncated.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a 32-bit integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.Int32\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToInt32#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static int ToInt32(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToInt32(d As Decimal) As Integer
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Int32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>d</em> is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToInt64(System.Decimal)
  commentId: M:System.Decimal.ToInt64(System.Decimal)
  id: ToInt64(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToInt64(Decimal)
  fullName: System.Decimal.ToInt64(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt64
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 894
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 64-bit signed integer.</p>\n"
  remarks: "\n<p>The return value is the integral part of the decimal value; fractional digits are truncated.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a 64-bit integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.Int64\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToInt64#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static long ToInt64(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToInt64(d As Decimal) As Long
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Int64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>d</em> is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToSByte(System.Decimal)
  commentId: M:System.Decimal.ToSByte(System.Decimal)
  id: ToSByte(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToSByte(Decimal)
  fullName: System.Decimal.ToSByte(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToSByte
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 813
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 8-bit signed integer.</p>\n"
  remarks: "\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an 8-bit signed integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.SByte\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToSByte(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToSByte#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static sbyte ToSByte(decimal value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ToSByte(value As Decimal) As SByte
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.SByte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToSingle(System.Decimal)
  commentId: M:System.Decimal.ToSingle(System.Decimal)
  id: ToSingle(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToSingle(Decimal)
  fullName: System.Decimal.ToSingle(System.Decimal)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent single-precision floating-point number.</p>\n"
  remarks: "\n<p>This operation can produce round-off errors because a single-precision floating-point number has fewer significant digits than a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.Single\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the conversion can entail a loss of precision, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following code example converts <strong>Decimal</strong> numbers to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values using the <strong>ToSingle</strong> method.</p>System.Decimal.ToXXX#5"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static float ToSingle(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function ToSingle(d As Decimal) As Single
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Single
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToString
  commentId: M:System.Decimal.ToString
  id: ToString
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Decimal.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 475
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.ToString\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value in the default (\"G\", or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref href=\"System.Decimal.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows: </p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example displays a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value using the default <xref href=\"System.Decimal.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. It also displays the string representations of the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value that result from using a number of standard format specifiers.  </p>System.Decimal.ToString#2<p>The following example displays the amount of money in an account.</p>Decimal Example#5"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override string ToString()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  seealso:
  - type: System.Decimal.Parse(System.String)
    commentId: M:System.Decimal.Parse(System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Decimal.ToString(System.IFormatProvider)
  commentId: M:System.Decimal.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.Decimal.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 487
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value in the default (\"G\", or general) format of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref href=\"System.Decimal.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. Typically, <em>provider</em> is a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object or a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in formatting. If <em>provider</em> is <strong>null</strong>, the thread current culture is used.</p>\n<p>To convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to its string representation using a specified culture and a specific format string, call the <xref href=\"System.Decimal.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example displays the string representation of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value using <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent several different cultures. </p>System.Decimal.ToString#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string ToString(IFormatProvider provider)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  seealso:
  - type: System.Decimal.Parse(System.String)
    commentId: M:System.Decimal.Parse(System.String)
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.ToString(System.String)
  commentId: M:System.Decimal.ToString(System.String)
  id: ToString(System.String)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Decimal.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 481
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value in a specified format by using the conventions of the current culture. If you want to use the default (\"G\", or general) format or specify a different culture, use the other overloads of the <xref href=\"System.Decimal.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The <xref href=\"System.Decimal.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method uses the standard or custom numeric format string specified by the <em>format</em> parameter to convert the value of the current instance into its string representation. The <em>format</em> parameter can be any valid standard numeric format specifier except for D, R, and X, as well as any combination of custom numeric format specifiers. If <em>format</em> is <strong>null</strong> or an empty string, the return value of this instance is formatted with the general numeric format specifier (G).</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The return value is formatted by using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture. To apply the formatting conventions of a specified culture, call the <xref href=\"System.Decimal.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example displays a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value using each of the supported standard numeric format specifiers, together with two custom numeric format strings. In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.</p>System.Decimal.ToString#4"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string ToString(string format)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Decimal.Parse(System.String)
    commentId: M:System.Decimal.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Decimal.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  fullName: System.Decimal.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 493
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Double.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value in a specified format of a specified culture. If you want to use default format or culture settings, use the other overloads of the <xref href=\"System.Double.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p>The <em>format</em> parameter can be any valid standard numeric format specifier except for D, R, and X, as well as any combination of custom numeric format specifiers. If <em>format</em> is <strong>null</strong> or an empty string, the return value for this instance is formatted with the general numeric format specifier (\"G\").</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. Typically, <em>provider</em> is a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in formatting. If <em>provider</em> is <strong>null</strong>, the thread current culture is used.</p>\n"
  example:
  - "\n<p>The following example displays a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value using each of the supported standard numeric format specifiers for several different cultures. </p>System.Decimal.ToString#5"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string ToString(string format, IFormatProvider provider)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToString(format As String, provider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Decimal.Parse(System.String)
    commentId: M:System.Decimal.Parse(System.String)
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Decimal.ToUInt16(System.Decimal)
  commentId: M:System.Decimal.ToUInt16(System.Decimal)
  id: ToUInt16(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToUInt16(Decimal)
  fullName: System.Decimal.ToUInt16(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt16
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 914
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 16-bit unsigned integer.</p>\n"
  remarks: "\n<p>The return value is the integral part of the decimal value; fractional digits are truncated.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a 16-bit unsigned integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToUInt16(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToUInt16#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static ushort ToUInt16(decimal value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ToUInt16(value As Decimal) As UShort
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.UInt16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToUInt32(System.Decimal)
  commentId: M:System.Decimal.ToUInt32(System.Decimal)
  id: ToUInt32(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToUInt32(Decimal)
  fullName: System.Decimal.ToUInt32(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt32
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 931
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>The return value is the integral part of the decimal value; fractional digits are truncated.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an 32-bit unsigned integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToUInt32(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToUInt32#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [CLSCompliant(false)]

      public static uint ToUInt32(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      <CLSCompliant(False)>

      Public Shared Function ToUInt32(d As Decimal) As UInteger
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.UInt32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>d</em> is negative or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.ToUInt64(System.Decimal)
  commentId: M:System.Decimal.ToUInt64(System.Decimal)
  id: ToUInt64(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: ToUInt64(Decimal)
  fullName: System.Decimal.ToUInt64(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt64
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 947
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to the equivalent 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>The return value is the integral part of the decimal value; fractional digits are truncated.</p>\n<p>You can also convert a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to an 64-bit unsigned integer by using the <xref href=\"System.Decimal.op_Explicit(System.Decimal)~System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.ToUInt64(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to convert decimal numbers to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Decimal.ToUInt64#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [CLSCompliant(false)]

      public static ulong ToUInt64(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      <CLSCompliant(False)>

      Public Shared Function ToUInt64(d As Decimal) As ULong
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.UInt64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>d</em> is negative or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.Truncate(System.Decimal)
  commentId: M:System.Decimal.Truncate(System.Decimal)
  id: Truncate(System.Decimal)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: Truncate(Decimal)
  fullName: System.Decimal.Truncate(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Truncate
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 970
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the integral digits of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>; any fractional digits are discarded.</p>\n"
  remarks: "\n<p>This method rounds <em>d</em> toward zero, to the nearest whole number, which corresponds to discarding any digits after the decimal point.</p>\n"
  example:
  - "\n<p>The following code example uses the <strong>Truncate</strong> method to discard the fractional digits of several <strong>Decimal</strong> values.</p>System.Decimal.Flr_Neg_Rnd_Trnc#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static decimal Truncate(decimal d)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Truncate(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Decimal.Round(System.Decimal,System.Int32)
    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)
  - type: System.Decimal.Floor(System.Decimal)
    commentId: M:System.Decimal.Floor(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Decimal.TryParse(System.String,System.Decimal@)
  commentId: M:System.Decimal.TryParse(System.String,System.Decimal@)
  id: TryParse(System.String,System.Decimal@)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: TryParse(String, out Decimal)
  fullName: System.Decimal.TryParse(System.String, out System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 525
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n"
  remarks: "\n<p>This overload differs from the <xref href=\"System.Decimal.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> in the event that <em>s</em> is invalid and cannot be successfully parsed.</p>\n<p>Parameter <em>s</em> contains a number of the form: </p>\n<p>[ws][sign][digits,]digits[.fractional-digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. </p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr></tbody></table>\n<p>Parameter <em>s</em> is interpreted using the <xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <em>s</em>, use the <xref href=\"System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n<p>Parameter <em>s</em> is parsed using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object initialized for the current system culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>. To parse a string using the formatting information of some other specified culture, use the <xref href=\"System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n<p>If necessary, the value of <em>s</em> is rounded using rounding to nearest.</p>\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object has 29 digits of precision. If <em>s</em> represents a number that has more than 29 digits, but has a fractional part and is within the range of <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</p>\n<p>If during a parse operation a separator is encountered in the <em>s</em> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Decimal.TryParse(System.String,System.Decimal@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the string representations of numeric values to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It assumes that en-US is the current culture.</p>System.Decimal.TryParse#1"
  syntax:
    content: public static bool TryParse(string s, out decimal result)
    content.vb: Public Shared Function TryParse(s As String, ByRef result As Decimal) As Boolean
    parameters:
    - id: s
      type: System.String
    - id: result
      type: System.Decimal
    return:
      type: System.Boolean
  seealso:
  - type: System.Decimal.ToString
    commentId: M:System.Decimal.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.TryParse(System.String, ByRef System.Decimal)
  name.vb: TryParse(String, ByRef Decimal)
- uid: System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)
  commentId: M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)
  parent: System.Decimal
  langs:
  - csharp
  - vb
  name: TryParse(String, NumberStyles, IFormatProvider, out Decimal)
  fullName: System.Decimal.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Decimal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Decimal.cs
    startLine: 529
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</p>\n"
  remarks: "\n<p>This overload differs from the <xref href=\"System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> in the event that <em>s</em> is invalid and cannot be successfully parsed.</p>\n<p>The <em>style</em> parameter defines the allowable format of the <em>s</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The following <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members are not supported:</p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>Depending on the value of style, the <em>s</em> parameter may include the following elements: </p>\n<p>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag. It can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method of the <em>provider</em> parameter. The currency symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. </p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. </p>\n</td></tr></tbody></table>\n<p>The <em>style</em> parameter specifies the permitted format of the <em>s</em> parameter, and can be one or more <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumerated constants combined using a bitwise OR operation. If <em>style</em> is null, <em>s</em> is interpreted using the <xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref> style.</p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation such as a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in parsing. If <em>provider</em> is <strong>null</strong>, the thread current culture is used.</p>\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object has 29 digits of precision. If <em>s</em> represents a number that has more than 29 digits, but has a fractional part and is within the range of <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\" data-throw-if-not-resolved=\"false\"></xref> method to parse the string representation of a number that has a particular style and is formatted using the conventions of a particular culture. </p>System.Decimal.TryParse#2"
  syntax:
    content: public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out decimal result)
    content.vb: Public Shared Function TryParse(s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Decimal) As Boolean
    parameters:
    - id: s
      type: System.String
    - id: style
      type: System.Globalization.NumberStyles
    - id: provider
      type: System.IFormatProvider
    - id: result
      type: System.Decimal
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n<p>-or-</p>\n<p>\n<em>style</em> is the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Decimal.ToString
    commentId: M:System.Decimal.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Decimal.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Decimal)
  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef Decimal)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Decimal}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Decimal>
  fullName: System.IComparable<System.Decimal>
  fullname.vb: System.IComparable(Of System.Decimal)
  name.vb: IComparable(Of Decimal)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: IConvertible
  fullName: System.IConvertible
- uid: System.IEquatable{System.Decimal}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Decimal>
  fullName: System.IEquatable<System.Decimal>
  fullname.vb: System.IEquatable(Of System.Decimal)
  name.vb: IEquatable(Of Decimal)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.IComparable{System.Decimal}.CompareTo(System.Decimal)
  parent: System.IComparable{System.Decimal}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Decimal)
  fullName: System.IComparable<System.Decimal>.CompareTo(System.Decimal)
  fullname.vb: System.IComparable(Of System.Decimal).CompareTo(System.Decimal)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Decimal>.CompareTo
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Decimal).CompareTo
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable{System.Decimal}.Equals(System.Decimal)
  parent: System.IEquatable{System.Decimal}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Decimal)
  fullName: System.IEquatable<System.Decimal>.Equals(System.Decimal)
  fullname.vb: System.IEquatable(Of System.Decimal).Equals(System.Decimal)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Decimal>.Equals
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Decimal).Equals
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: GetTypeCode()
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToBoolean(IFormatProvider)
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToByte(IFormatProvider)
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToChar(IFormatProvider)
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDateTime(IFormatProvider)
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDecimal(IFormatProvider)
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDouble(IFormatProvider)
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt16(IFormatProvider)
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt32(IFormatProvider)
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt64(IFormatProvider)
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSByte(IFormatProvider)
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSingle(IFormatProvider)
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToType(Type, IFormatProvider)
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt16(IFormatProvider)
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt32(IFormatProvider)
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt64(IFormatProvider)
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToString(IFormatProvider)
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.DivideByZeroException
  isExternal: false
  name: DivideByZeroException
  fullName: System.DivideByZeroException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
