items:
- uid: System.OverflowException
  commentId: T:System.OverflowException
  id: OverflowException
  parent: System
  children:
  - System.OverflowException.#ctor
  - System.OverflowException.#ctor(System.String)
  - System.OverflowException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: OverflowException
  fullName: System.OverflowException
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OverflowException
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1343
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</p>\n"
  remarks: "\n<p>An <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> is thrown at run time under the following conditions:</p>\n<ul><li>\n<p>An arithmetic operation produces a result that is outside the range of the data type returned by the operation. The following example illustrates the <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown by a multiplication operation that overflows the bounds of the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>System.OverflowException#1</li><li>\n<p>A casting or conversion operation attempts to perform a narrowing conversion, and the value of the source data type is outside the range of the target data type. The following example illustrates the <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown by the attempt to convert a large unsigned byte value to a signed byte value.</p>System.OverflowException#2</li></ul>\n<p>In each case, the result of the operation is a value that is less than the <strong>MinValue</strong> property or greater than the <strong>MaxValue</strong> property of the data type that results from the operation. </p>\n<p>For the arithmetic, casting, or conversion operation to throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>, the operation must occur in a checked context. By default, arithmetic operations and overflows in Visual Basic are checked; in C#, they are not. If the operation occurs in an unchecked context, the result is truncated by discarding any high-order bits that do not fit into the destination type. The following example illustrates such an unchecked conversion in C#. It repeats the previous example in an unchecked context.</p>System.OverflowException#3<p>The following Microsoft intermediate language (MSIL) instructions throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>: </p><ul><li><p><code>add.ovf.</code><signed></p></li><li><p><code>conv.ovf.</code><to type></p></li><li><p><code>conv.ovf.</code><to type><code>.un</code></p></li><li><p><code>mul.ovf.</code><type></p></li><li><p><code>sub.ovf.</code><type></p></li><li><p><code>newarr </code></p></li></ul><p><xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_OVERFLOW, which has the value 0x80131516.</p><p>For a list of initial property values for an instance of <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.OverflowException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>"
  syntax:
    content: 'public class OverflowException : ArithmeticException'
    content.vb: >-
      Public Class OverflowException
          Inherits ArithmeticException
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  - System.ArithmeticException
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.OverflowException.#ctor
  commentId: M:System.OverflowException.#ctor
  id: '#ctor'
  parent: System.OverflowException
  langs:
  - csharp
  - vb
  name: OverflowException()
  fullName: System.OverflowException.OverflowException()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1345
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The following table shows the initial property values for an instance of <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public OverflowException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.OverflowException.#ctor(System.String)
  commentId: M:System.OverflowException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.OverflowException
  langs:
  - csharp
  - vb
  name: OverflowException(String)
  fullName: System.OverflowException.OverflowException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1346
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of the <em>message</em> should be understandable to the user. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public OverflowException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that describes the error. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.OverflowException.#ctor(System.String,System.Exception)
  commentId: M:System.OverflowException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.OverflowException
  langs:
  - csharp
  - vb
  name: OverflowException(String, Exception)
  fullName: System.OverflowException.OverflowException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1347
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or a null reference (<strong>Nothing</strong> in Visual Basic) if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public OverflowException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>innerException</em> parameter is not a null reference (<strong>Nothing</strong> in Visual Basic), the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.ArithmeticException
  parent: System
  isExternal: false
  name: ArithmeticException
  fullName: System.ArithmeticException
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
