items:
- uid: System.Net.NetworkInformation.IPGlobalProperties
  commentId: T:System.Net.NetworkInformation.IPGlobalProperties
  id: IPGlobalProperties
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.IPGlobalProperties.#ctor
  - System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName
  - System.Net.NetworkInformation.IPGlobalProperties.DomainName
  - System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections
  - System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners
  - System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners
  - System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties
  - System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics
  - System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync
  - System.Net.NetworkInformation.IPGlobalProperties.HostName
  - System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy
  - System.Net.NetworkInformation.IPGlobalProperties.NodeType
  langs:
  - csharp
  - vb
  name: IPGlobalProperties
  fullName: System.Net.NetworkInformation.IPGlobalProperties
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPGlobalProperties
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 124
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about the network connectivity of the local computer.</p>\n"
  remarks: "\n<p>This class provides configuration and statistical information about the local computer's network interfaces and network connections.</p>\n<p>The information provided by this class is similar to that provided by the Internet Protocol Helper API functions. For information about the Internet Protocol Helper, see the documentation in the MSDN Library.</p>\n"
  example:
  - "\n<p>The following code example displays information about the local computer using an instance of this class.</p>NclNetInfo2#15"
  syntax:
    content: public abstract class IPGlobalProperties
    content.vb: Public MustInherit Class IPGlobalProperties
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.NetworkInformation.IPGlobalProperties.#ctor
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: IPGlobalProperties()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.IPGlobalProperties()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 126
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.IPGlobalProperties\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor can be called only by classes derived from <xref href=\"System.Net.NetworkInformation.IPGlobalProperties\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected IPGlobalProperties()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName
  commentId: P:System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName
  id: DhcpScopeName
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: DhcpScopeName
  fullName: System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DhcpScopeName
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 127
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the Dynamic Host Configuration Protocol (DHCP) scope name.</p>\n"
  remarks: "\n<p>A DHCP scope is an administrative grouping of networked computers that are on the same subnet.</p>\n"
  example:
  - "\n<p>The following code example displays network information for the local computer.</p>NCLNetInfoReport#15"
  syntax:
    content: public abstract string DhcpScopeName { get; }
    content.vb: Public MustOverride ReadOnly Property DhcpScopeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the computer's DHCP scope name.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>A Win32 function call failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPGlobalProperties.DomainName
  commentId: P:System.Net.NetworkInformation.IPGlobalProperties.DomainName
  id: DomainName
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: DomainName
  fullName: System.Net.NetworkInformation.IPGlobalProperties.DomainName
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DomainName
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 128
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the domain in which the local computer is registered.</p>\n"
  example:
  - "\n<p>The following code example displays network information for the local computer.</p>NCLNetInfoReport#15"
  syntax:
    content: public abstract string DomainName { get; }
    content.vb: Public MustOverride ReadOnly Property DomainName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the computer's domain name. If the computer does not belong to a domain, returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>A Win32 function call failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPGlobalProperties.HostName
  commentId: P:System.Net.NetworkInformation.IPGlobalProperties.HostName
  id: HostName
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: HostName
  fullName: System.Net.NetworkInformation.IPGlobalProperties.HostName
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostName
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 129
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the host name for the local computer.</p>\n"
  remarks: "\n<p>This property calls into the native IP Helper function, GetNetworkParams, which returns a FIXED_INFO structure that contains the NetBIOS host name string. The host name string is truncated when it exceeds 15 characters.</p>\n<p>A computer's NetBIOS name must be unique within a network and is not fully qualified by the domain name.</p>\n"
  example:
  - "\n<p>The following code example displays network information for the local computer.</p>NCLNetInfoReport#15"
  syntax:
    content: public abstract string HostName { get; }
    content.vb: Public MustOverride ReadOnly Property HostName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the computer's NetBIOS name.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>A Win32 function call failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy
  commentId: P:System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy
  id: IsWinsProxy
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: IsWinsProxy
  fullName: System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsWinsProxy
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 130
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the local computer is acting as a Windows Internet Name Service (WINS) proxy.</p>\n"
  remarks: "\n<p>WINS provides a distributed database for registering and querying dynamic NetBIOS names to IP address mappings.</p>\n"
  example:
  - "\n<p>The following code example displays network information for the local computer.</p>NCLNetInfoReport#15"
  syntax:
    content: public abstract bool IsWinsProxy { get; }
    content.vb: Public MustOverride ReadOnly Property IsWinsProxy As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the local computer is a WINS proxy; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>A Win32 function call failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPGlobalProperties.NodeType
  commentId: P:System.Net.NetworkInformation.IPGlobalProperties.NodeType
  id: NodeType
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Net.NetworkInformation.IPGlobalProperties.NodeType
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 131
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the Network Basic Input/Output System (NetBIOS) node type of the local computer.</p>\n"
  remarks: "\n<p>The node type determines the way in which NetBIOS names are resolved to IP addresses. For additional information, see the <xref href=\"System.Net.NetworkInformation.NetBiosNodeType\" data-throw-if-not-resolved=\"false\"></xref> class overview.</p>\n"
  example:
  - "\n<p>The following code example displays network information for the local computer.</p>NCLNetInfoReport#15"
  syntax:
    content: public abstract NetBiosNodeType NodeType { get; }
    content.vb: Public MustOverride ReadOnly Property NodeType As NetBiosNodeType
    parameters: []
    return:
      type: System.Net.NetworkInformation.NetBiosNodeType
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.NetBiosNodeType\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>A Win32 function call failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections
  id: GetActiveTcpConnections
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetActiveTcpConnections()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetActiveTcpConnections
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 132
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns information about the Internet Protocol version 4 (IPv4) and IPv6 Transmission Control Protocol (TCP) connections on the local computer.</p>\n"
  remarks: "\n<p>The objects returned by this method include connections in all TCP states except the <xref href=\"System.Net.NetworkInformation.TcpState.Listen\" data-throw-if-not-resolved=\"false\"></xref> state. You can check the state of a connection by calling <xref href=\"System.Net.NetworkInformation.TcpConnectionInformation.State\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The TCP protocol is defined in IETF RFC 793. Note that the objects returned by this method reflect the connections as of the time the array is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays endpoint information for active TCP connections.</p>NCLNetInfoReport#17"
  syntax:
    content: public abstract TcpConnectionInformation[] GetActiveTcpConnections()
    content.vb: Public MustOverride Function GetActiveTcpConnections As TcpConnectionInformation()
    return:
      type: System.Net.NetworkInformation.TcpConnectionInformation[]
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.TcpConnectionInformation\" data-throw-if-not-resolved=\"false\"></xref> array that contains objects that describe the active TCP connections, or an empty array if no active TCP connections are detected.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The Win32 function <strong>GetTcpTable</strong> failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners
  id: GetActiveTcpListeners
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetActiveTcpListeners()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetActiveTcpListeners
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 133
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns endpoint information about the Internet Protocol version 4 (IPv4) and IPv6 Transmission Control Protocol (TCP) listeners on the local computer.</p>\n"
  remarks: "\n<p>The objects returned by this method include listeners in all TCP states except the <xref href=\"System.Net.NetworkInformation.TcpState.Listen\" data-throw-if-not-resolved=\"false\"></xref> state. </p>\n<p>The TCP protocol is defined in IETF RFC 793. Note that the objects returned by this method reflect the connections as of the time the array is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following code example displays endpoint information for active TCP listeners.</p>NCLNetInfoReport#18"
  syntax:
    content: public abstract IPEndPoint[] GetActiveTcpListeners()
    content.vb: Public MustOverride Function GetActiveTcpListeners As IPEndPoint()
    return:
      type: System.Net.IPEndPoint[]
      description: "\n<p>A <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> array that contains objects that describe the active TCP listeners, or an empty array, if no active TCP listeners are detected.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The Win32 function <strong>GetTcpTable</strong> failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners
  id: GetActiveUdpListeners
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetActiveUdpListeners()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetActiveUdpListeners
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 134
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns information about the Internet Protocol version 4 (IPv4) and IPv6 User Datagram Protocol (UDP) listeners on the local computer.</p>\n"
  remarks: "\n<p>UDP is a connectionless transport layer protocol that is responsible for sending and receiving datagrams. It is defined in IETF RFC 768.</p>\n<p>A UDP listener is an open socket that waits for and receives UDP datagrams. Because UDP is a connectionless protocol, the listener does not maintain a connection to a remote endpoint.</p>\n"
  example:
  - "\n<p>The following example displays the active UDP listeners.</p>NCLNetInfoReport#19"
  syntax:
    content: public abstract IPEndPoint[] GetActiveUdpListeners()
    content.vb: Public MustOverride Function GetActiveUdpListeners As IPEndPoint()
    return:
      type: System.Net.IPEndPoint[]
      description: "\n<p>An <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> array that contains objects that describe the UDP listeners, or an empty array if no UDP listeners are detected.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function <strong>GetUdpTable</strong> failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics
  id: GetIcmpV4Statistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetIcmpV4Statistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIcmpV4Statistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 135
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Control Message Protocol (ICMP) version 4 statistical data for the local computer.</p>\n"
  remarks: "\n<p>ICMP is a set of messages for use with Internet Protocol version 4 (IPv4). ICMP is used by IPv4 nodes to report errors encountered in processing data packets and to perform other Internet layer functions. ICMP version 4 is defined in IETF RFC 792.</p>\n<p>For details on the ICMP version 4 traffic statistics that are available to applications, see the <xref href=\"System.Net.NetworkInformation.IcmpV4Statistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the <xref href=\"System.Net.NetworkInformation.IcmpV4Statistics\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method reflects the statistics as of the time the object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays the current ICMPv4 statistics.</p>NCLNetInfoReport#6"
  syntax:
    content: public abstract IcmpV4Statistics GetIcmpV4Statistics()
    content.vb: Public MustOverride Function GetIcmpV4Statistics As IcmpV4Statistics
    return:
      type: System.Net.NetworkInformation.IcmpV4Statistics
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IcmpV4Statistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides ICMP version 4 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The Win32 function <strong>GetIcmpStatistics</strong> failed. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics
  id: GetIcmpV6Statistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetIcmpV6Statistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIcmpV6Statistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 136
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Control Message Protocol (ICMP) version 6 statistical data for the local computer.</p>\n"
  remarks: "\n<p>ICMP version 6 is a set of messages for use with Internet Protocol version 6 (IPv6). ICMP is used by IPv6 nodes to report errors encountered in processing data packets and to perform other Internet layer functions. ICMP version 6 is defined in IETF RFC 1885.</p>\n<p>The IPv6 protocol is not supported for computers with Windows 2000 or earlier operating systems.</p>\n<p>For details on the ICMP version 6 traffic statistics available to applications, see the <xref href=\"System.Net.NetworkInformation.IcmpV6Statistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the <xref href=\"System.Net.NetworkInformation.IcmpV6Statistics\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method reflects the statistics as of the time the object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays the current ICMPv6 statistics.</p>NCLNetInfoReport#7"
  syntax:
    content: public abstract IcmpV6Statistics GetIcmpV6Statistics()
    content.vb: Public MustOverride Function GetIcmpV6Statistics As IcmpV6Statistics
    return:
      type: System.Net.NetworkInformation.IcmpV6Statistics
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IcmpV6Statistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides ICMP version 6 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The Win32 function <strong>GetIcmpStatisticsEx</strong> failed. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The local computer's operating system is not Windows XP or later.</p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties
  id: GetIPGlobalProperties
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetIPGlobalProperties()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPGlobalProperties
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 137
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets an object that provides information about the local computer's network connectivity and traffic statistics.</p>\n"
  remarks: "\n<p>The object returned by this method is a system-supplied type that derives from the <xref href=\"System.Net.NetworkInformation.IPGlobalProperties\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example displays information about the local computer.</p>NCLNetInfoReport#15"
  syntax:
    content: public static IPGlobalProperties GetIPGlobalProperties()
    content.vb: Public Shared Function GetIPGlobalProperties As IPGlobalProperties
    return:
      type: System.Net.NetworkInformation.IPGlobalProperties
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.IPGlobalProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about the local computer.</p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics
  id: GetIPv4GlobalStatistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetIPv4GlobalStatistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPv4GlobalStatistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 138
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol version 4 (IPv4) statistical data for the local computer.</p>\n"
  remarks: "\n<p>IPv4 is a network layer protocol that is responsible for routing data packets from its source computer to its destination. </p>\n<p>For details on the IP traffic statistics available to applications, see the <xref href=\"System.Net.NetworkInformation.IPGlobalStatistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by this method reflects the statistics as of the time the <xref href=\"System.Net.NetworkInformation.IPGlobalStatistics\" data-throw-if-not-resolved=\"false\"></xref> object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following code example displays IP statistics for the local computer.</p>NCLNetInfoReport#1"
  syntax:
    content: public abstract IPGlobalStatistics GetIPv4GlobalStatistics()
    content.vb: Public MustOverride Function GetIPv4GlobalStatistics As IPGlobalStatistics
    return:
      type: System.Net.NetworkInformation.IPGlobalStatistics
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPGlobalStatistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides IPv4 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function <strong>GetIpStatistics</strong> failed.</p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics
  id: GetIPv6GlobalStatistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetIPv6GlobalStatistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPv6GlobalStatistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 139
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol version 6 (IPv6) statistical data for the local computer.</p>\n"
  remarks: "\n<p>IPv6 is a network layer protocol responsible for routing data packets from its source computer to its destination. The IPv6 protocol is not supported on computers with Windows 2000 or earlier operating systems.</p>\n<p>For details on the IP traffic statistics available to applications, see the <xref href=\"System.Net.NetworkInformation.IPGlobalStatistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by this method reflects the statistics as of the time the <xref href=\"System.Net.NetworkInformation.IPGlobalStatistics\" data-throw-if-not-resolved=\"false\"></xref> object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following code example displays IP statistics for the local computer.</p>NCLNetInfoReport#1"
  syntax:
    content: public abstract IPGlobalStatistics GetIPv6GlobalStatistics()
    content.vb: Public MustOverride Function GetIPv6GlobalStatistics As IPGlobalStatistics
    return:
      type: System.Net.NetworkInformation.IPGlobalStatistics
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPGlobalStatistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides IPv6 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function <strong>GetIpStatistics</strong> failed.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The local computer is not running an operating system that supports IPv6. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics
  id: GetTcpIPv4Statistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetTcpIPv4Statistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTcpIPv4Statistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 140
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Transmission Control Protocol/Internet Protocol version 4 (TCP/IPv4) statistical data for the local computer.</p>\n"
  remarks: "\n<p>TCP is a transport layer protocol that is responsible for reliably sending and receiving data packets. It is defined in IETF RFC 793.</p>\n<p>For details on the TCP traffic statistics available to applications, see the <xref href=\"System.Net.NetworkInformation.TcpStatistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by this method reflects the statistics as of the time the <xref href=\"System.Net.NetworkInformation.TcpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays the TCP/IP statistics for the local computer.</p>NCLNetInfoReport#2"
  syntax:
    content: public abstract TcpStatistics GetTcpIPv4Statistics()
    content.vb: Public MustOverride Function GetTcpIPv4Statistics As TcpStatistics
    return:
      type: System.Net.NetworkInformation.TcpStatistics
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.TcpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides TCP/IPv4 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function <strong>GetTcpStatistics</strong> failed.</p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics
  id: GetTcpIPv6Statistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetTcpIPv6Statistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTcpIPv6Statistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 141
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Transmission Control Protocol/Internet Protocol version 6 (TCP/IPv6) statistical data for the local computer.</p>\n"
  remarks: "\n<p>TCP is a transport layer protocol responsible for reliably sending and receiving data packets. It is defined in IETF RFC 793.</p>\n<p>For details on the TCP traffic statistics that are available to applications, see the <xref href=\"System.Net.NetworkInformation.TcpStatistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by this method reflects the statistics as of the time the <xref href=\"System.Net.NetworkInformation.TcpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays the TCP/IP statistics for the local computer.</p>NCLNetInfoReport#2"
  syntax:
    content: public abstract TcpStatistics GetTcpIPv6Statistics()
    content.vb: Public MustOverride Function GetTcpIPv6Statistics As TcpStatistics
    return:
      type: System.Net.NetworkInformation.TcpStatistics
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.TcpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides TCP/IPv6 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function <strong>GetTcpStatistics</strong> failed.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The local computer is not running an operating system that supports IPv6. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics
  id: GetUdpIPv4Statistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetUdpIPv4Statistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetUdpIPv4Statistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 142
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides User Datagram Protocol/Internet Protocol version 4 (UDP/IPv4) statistical data for the local computer.</p>\n"
  remarks: "\n<p>UDP is a connectionless transport layer protocol that is responsible for sending and receiving datagrams. It is defined in IETF RFC 768.</p>\n<p>For details on the UDP traffic statistics that are available to applications, see the <xref href=\"System.Net.NetworkInformation.UdpStatistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by this method reflects the statistics as of the time the <xref href=\"System.Net.NetworkInformation.UdpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays the UDP/IP statistics for the local computer.</p>NCLNetInfoReport#3"
  syntax:
    content: public abstract UdpStatistics GetUdpIPv4Statistics()
    content.vb: Public MustOverride Function GetUdpIPv4Statistics As UdpStatistics
    return:
      type: System.Net.NetworkInformation.UdpStatistics
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.UdpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides UDP/IPv4 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function GetUdpStatistics failed.</p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics
  id: GetUdpIPv6Statistics
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetUdpIPv6Statistics()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetUdpIPv6Statistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 143
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides User Datagram Protocol/Internet Protocol version 6 (UDP/IPv6) statistical data for the local computer.</p>\n"
  remarks: "\n<p>UDP is a connectionless transport layer protocol that is responsible for sending and receiving datagrams. It is defined in IETF RFC 768.</p>\n<p>For details on the UDP traffic statistics that are available to applications, see the <xref href=\"System.Net.NetworkInformation.UdpStatistics\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by this method reflects the statistics as of the time the <xref href=\"System.Net.NetworkInformation.UdpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object is created. This information is not updated dynamically.</p>\n"
  example:
  - "\n<p>The following example displays the UDP/IP statistics for the local computer.</p>NCLNetInfoReport#3"
  syntax:
    content: public abstract UdpStatistics GetUdpIPv6Statistics()
    content.vb: Public MustOverride Function GetUdpIPv6Statistics As UdpStatistics
    return:
      type: System.Net.NetworkInformation.UdpStatistics
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.UdpStatistics\" data-throw-if-not-resolved=\"false\"></xref> object that provides UDP/IPv6 traffic statistics for the local computer.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the Win32 function <strong>GetUdpStatistics</strong> failed.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The local computer is not running an operating system that supports IPv6. </p>\n"
  see:
  - type: System.Net.NetworkInformation.NetworkInformationPermission
    commentId: T:System.Net.NetworkInformation.NetworkInformationPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync
  commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync
  id: GetUnicastAddressesAsync
  parent: System.Net.NetworkInformation.IPGlobalProperties
  langs:
  - csharp
  - vb
  name: GetUnicastAddressesAsync()
  fullName: System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetUnicastAddressesAsync
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 144
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Retrieves the stable unicast IP address table on the local computer as an asynchronous operation.</p>\n"
  remarks: "\n<p>In order to support outbound connections or to accept incoming connections on a Teredo interface, applications need to ensure that the Teredo interface is up and ready for use. This is because Teredo can go into a dormant state when not used for some period of time.</p>\n<p>The <xref href=\"System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync\" data-throw-if-not-resolved=\"false\"></xref> method will allow an application to retrieve the list of stable unicast IP addresses as asynchronous operation. The <xref href=\"System.Net.IPAddress.IsIPv6Teredo\" data-throw-if-not-resolved=\"false\"></xref> property can be used to determine if an IP address is an IPv6 Teredo address with the prefix of 2001::/32. </p>\n<p>The <xref href=\"System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses\" data-throw-if-not-resolved=\"false\"></xref> method also returns non-Teredo addresses and provides a more convenient way to obtain the unicast IP addresses for a system than enumerating all the <xref href=\"System.Net.NetworkInformation.NetworkInterface\" data-throw-if-not-resolved=\"false\"></xref> objects on a local computer and querying the associated IP addresses.</p>\n"
  syntax:
    content: public virtual Task<UnicastIPAddressInformationCollection> GetUnicastAddressesAsync()
    content.vb: Public Overridable Function GetUnicastAddressesAsync As Task(Of UnicastIPAddressInformationCollection)
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.UnicastIPAddressInformationCollection}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The call to the native <strong>GetAdaptersAddresses</strong> function failed.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have necessary <xref href=\"System.Net.NetworkInformation.NetworkInformationAccess.Read\" data-throw-if-not-resolved=\"false\"></xref> permission. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The call to the native <strong>NotifyStableUnicastIpAddressTable</strong> function failed.</p>\n"
  seealso:
  - type: System.Net.IPAddress.IsIPv6Teredo
    commentId: P:System.Net.IPAddress.IsIPv6Teredo
  - type: System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
  - type: System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
  - type: System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.NetworkInformation.NetBiosNodeType
  parent: System.Net.NetworkInformation
  isExternal: false
  name: NetBiosNodeType
  fullName: System.Net.NetworkInformation.NetBiosNodeType
- uid: System.Net.NetworkInformation.TcpConnectionInformation[]
  isExternal: false
  name: TcpConnectionInformation[]
  fullName: System.Net.NetworkInformation.TcpConnectionInformation[]
  fullname.vb: System.Net.NetworkInformation.TcpConnectionInformation()
  name.vb: TcpConnectionInformation()
  spec.csharp:
  - uid: System.Net.NetworkInformation.TcpConnectionInformation
    name: TcpConnectionInformation
    fullName: System.Net.NetworkInformation.TcpConnectionInformation
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.NetworkInformation.TcpConnectionInformation
    name: TcpConnectionInformation
    fullName: System.Net.NetworkInformation.TcpConnectionInformation
  - name: ()
    fullName: ()
- uid: System.Net.IPEndPoint[]
  isExternal: true
  name: IPEndPoint[]
  fullName: System.Net.IPEndPoint[]
  fullname.vb: System.Net.IPEndPoint()
  name.vb: IPEndPoint()
  spec.csharp:
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Net.NetworkInformation.IcmpV4Statistics
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IcmpV4Statistics
  fullName: System.Net.NetworkInformation.IcmpV4Statistics
- uid: System.Net.NetworkInformation.IcmpV6Statistics
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IcmpV6Statistics
  fullName: System.Net.NetworkInformation.IcmpV6Statistics
- uid: System.Net.NetworkInformation.IPGlobalProperties
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPGlobalProperties
  fullName: System.Net.NetworkInformation.IPGlobalProperties
- uid: System.Net.NetworkInformation.IPGlobalStatistics
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPGlobalStatistics
  fullName: System.Net.NetworkInformation.IPGlobalStatistics
- uid: System.Net.NetworkInformation.TcpStatistics
  parent: System.Net.NetworkInformation
  isExternal: false
  name: TcpStatistics
  fullName: System.Net.NetworkInformation.TcpStatistics
- uid: System.Net.NetworkInformation.UdpStatistics
  parent: System.Net.NetworkInformation
  isExternal: false
  name: UdpStatistics
  fullName: System.Net.NetworkInformation.UdpStatistics
- uid: System.Threading.Tasks.Task{System.Net.NetworkInformation.UnicastIPAddressInformationCollection}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnicastIPAddressInformationCollection>
  fullName: System.Threading.Tasks.Task<System.Net.NetworkInformation.UnicastIPAddressInformationCollection>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.NetworkInformation.UnicastIPAddressInformationCollection)
  name.vb: Task(Of UnicastIPAddressInformationCollection)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
    name: UnicastIPAddressInformationCollection
    fullName: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
    name: UnicastIPAddressInformationCollection
    fullName: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Net.NetworkInformation.NetworkInformationException
  isExternal: false
  name: NetworkInformationException
  fullName: System.Net.NetworkInformation.NetworkInformationException
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ComponentModel.Win32Exception
  isExternal: false
  name: Win32Exception
  fullName: System.ComponentModel.Win32Exception
