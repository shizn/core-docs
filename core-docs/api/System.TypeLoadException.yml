items:
- uid: System.TypeLoadException
  commentId: T:System.TypeLoadException
  id: TypeLoadException
  parent: System
  children:
  - System.TypeLoadException.#ctor
  - System.TypeLoadException.#ctor(System.String)
  - System.TypeLoadException.#ctor(System.String,System.Exception)
  - System.TypeLoadException.Message
  - System.TypeLoadException.TypeName
  langs:
  - csharp
  - vb
  name: TypeLoadException
  fullName: System.TypeLoadException
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeLoadException
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1950
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when type-loading failures occur.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when the common language runtime cannot find the assembly, the type within the assembly, or cannot load the type. The <xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref> property contains more detailed information that can help you identify the cause of the exception. </p>\n<p>\n<xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_TYPELOAD, that has the value 0x80131522.</p>\n<p>For a list of initial property values for an instance of <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.TypeLoadException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>\n"
  syntax:
    content: 'public class TypeLoadException : Exception'
    content.vb: >-
      Public Class TypeLoadException
          Inherits Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.TypeLoadException.#ctor
  commentId: M:System.TypeLoadException.#ctor
  id: '#ctor'
  parent: System.TypeLoadException
  langs:
  - csharp
  - vb
  name: TypeLoadException()
  fullName: System.TypeLoadException.TypeLoadException()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1952
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"A failure has occurred while loading a type.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public TypeLoadException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TypeLoadException.#ctor(System.String)
  commentId: M:System.TypeLoadException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.TypeLoadException
  langs:
  - csharp
  - vb
  name: TypeLoadException(String)
  fullName: System.TypeLoadException.TypeLoadException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1953
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of the <em>message</em> parameter should be understandable to the user. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.TypeLoadException.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor. It contains a method that generates a <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> with a custom message, and displays the error message to the console.</p>TypeLoadException_Constructor2#1"
  syntax:
    content: public TypeLoadException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that describes the error. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TypeLoadException.#ctor(System.String,System.Exception)
  commentId: M:System.TypeLoadException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.TypeLoadException
  langs:
  - csharp
  - vb
  name: TypeLoadException(String, Exception)
  fullName: System.TypeLoadException.TypeLoadException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1954
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.TypeLoadException.#ctor(System.String,System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> constructor. It contains a method that generates a <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref>, catches that exception, and throws a new <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> with a custom message, including the original <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> as the inner exception.</p>TypeLoadException_Constructor3#1"
  syntax:
    content: public TypeLoadException(string message, Exception inner)
    content.vb: Public Sub New(message As String, inner As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TypeLoadException.Message
  commentId: P:System.TypeLoadException.Message
  id: Message
  parent: System.TypeLoadException
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.TypeLoadException.Message
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1955
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the error message for this exception.</p>\n"
  remarks: "\n<p>This property overrides <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>. The error message should be localized.</p>\n<p>This property is read-only.</p>\n"
  example:
  - "\n<p>The following example attempts to load a non-existent type from the mscorlib assembly. The resulting exception is caught, and the <xref href=\"System.TypeLoadException.TypeName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref> values are displayed. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see Assembly Names.</p>TypeLoadException_TypeName#1"
  syntax:
    content: public override string Message { get; }
    content.vb: Public Overrides ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The error message string.</p>\n"
  overridden: System.Exception.Message
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.TypeLoadException.TypeName
  commentId: P:System.TypeLoadException.TypeName
  id: TypeName
  parent: System.TypeLoadException
  langs:
  - csharp
  - vb
  name: TypeName
  fullName: System.TypeLoadException.TypeName
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeName
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1956
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the fully qualified name of the type that causes the exception.</p>\n"
  example:
  - "\n<p>The following example attempts to load a non-existent type from the mscorlib assembly. The resulting exception is caught, and the <xref href=\"System.TypeLoadException.TypeName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.TypeLoadException.Message\" data-throw-if-not-resolved=\"false\"></xref> values are displayed. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see Assembly Names.</p>TypeLoadException_TypeName#1"
  syntax:
    content: public string TypeName { get; }
    content.vb: Public ReadOnly Property TypeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The fully qualified type name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
