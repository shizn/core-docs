items:
- uid: System.Security.Principal.IdentityReferenceCollection
  commentId: T:System.Security.Principal.IdentityReferenceCollection
  id: IdentityReferenceCollection
  parent: System.Security.Principal
  children:
  - System.Security.Principal.IdentityReferenceCollection.#ctor
  - System.Security.Principal.IdentityReferenceCollection.#ctor(System.Int32)
  - System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)
  - System.Security.Principal.IdentityReferenceCollection.Clear
  - System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)
  - System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
  - System.Security.Principal.IdentityReferenceCollection.Count
  - System.Security.Principal.IdentityReferenceCollection.GetEnumerator
  - System.Security.Principal.IdentityReferenceCollection.Item(System.Int32)
  - System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)
  - System.Security.Principal.IdentityReferenceCollection.System#Collections#Generic#ICollection{System#Security#Principal#IdentityReference}#IsReadOnly
  - System.Security.Principal.IdentityReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  - System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)
  - System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
  type: Class
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IdentityReferenceCollection
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 41
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Represents a collection of <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> objects and provides a means of converting sets of <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>-derived objects to <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>-derived types. </p>\n"
  example:
  - 
  syntax:
    content: 'public class IdentityReferenceCollection : ICollection<IdentityReference>, IEnumerable<IdentityReference>, IEnumerable'
    content.vb: >-
      Public Class IdentityReferenceCollection
          Implements ICollection(Of IdentityReference), IEnumerable(Of IdentityReference), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  - System.Collections.Generic.IEnumerable{System.Security.Principal.IdentityReference}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Principal.IdentityReferenceCollection.#ctor
  commentId: M:System.Security.Principal.IdentityReferenceCollection.#ctor
  id: '#ctor'
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: IdentityReferenceCollection()
  fullName: System.Security.Principal.IdentityReferenceCollection.IdentityReferenceCollection()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 43
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> class with zero items in the collection.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReferenceCollection()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.#ctor(System.Int32)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: IdentityReferenceCollection(Int32)
  fullName: System.Security.Principal.IdentityReferenceCollection.IdentityReferenceCollection(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 44
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified initial size.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReferenceCollection(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of items in the collection. The value of <em>capacity</em> is a hint only; it is not necessarily the maximum number of items created.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.Count
  commentId: P:System.Security.Principal.IdentityReferenceCollection.Count
  id: Count
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Security.Principal.IdentityReferenceCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 45
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the number of items in the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> objects in the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.IdentityReferenceCollection.Item(System.Int32)
  commentId: P:System.Security.Principal.IdentityReferenceCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Security.Principal.IdentityReferenceCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 46
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Sets or gets the node at the specified index of the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReference this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As IdentityReference
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> at the specified index in the collection. If <em>index</em> is greater than or equal to the number of nodes in the collection, the return value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Principal.IdentityReferenceCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Security.Principal.IdentityReferenceCollection.System#Collections#Generic#ICollection{System#Security#Principal#IdentityReference}#IsReadOnly
  commentId: P:System.Security.Principal.IdentityReferenceCollection.System#Collections#Generic#ICollection{System#Security#Principal#IdentityReference}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Security#Principal#IdentityReference}#IsReadOnly
  isEii: true
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: ICollection<IdentityReference>.IsReadOnly
  fullName: System.Security.Principal.IdentityReferenceCollection.System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 47
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  syntax:
    content: bool ICollection<IdentityReference>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly As Boolean Implements ICollection(Of IdentityReference).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly
- uid: System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)
  id: Add(System.Security.Principal.IdentityReference)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Add(IdentityReference)
  fullName: System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 48
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Adds an <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: public void Add(IdentityReference identity)
    content.vb: Public Sub Add(identity As IdentityReference)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object to add to the collection.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Add(System.Security.Principal.IdentityReference)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.Clear
  commentId: M:System.Security.Principal.IdentityReferenceCollection.Clear
  id: Clear
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Security.Principal.IdentityReferenceCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 49
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Clears all <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> objects from the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)
  id: Contains(System.Security.Principal.IdentityReference)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Contains(IdentityReference)
  fullName: System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 50
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Indicates whether the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection contains the specified <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public bool Contains(IdentityReference identity)
    content.vb: Public Function Contains(identity As IdentityReference) As Boolean
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object to check for.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection contains the specified object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Contains(System.Security.Principal.IdentityReference)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
  id: CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: CopyTo(IdentityReference[], Int32)
  fullName: System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 51
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Copies the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to an <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> array, starting at the specified index.</p>\n"
  example:
  - 
  syntax:
    content: public void CopyTo(IdentityReference[] array, int offset)
    content.vb: Public Sub CopyTo(array As IdentityReference(), offset As Integer)
    parameters:
    - id: array
      type: System.Security.Principal.IdentityReference[]
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> array object to which the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection is to be copied.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> where the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection is to be copied.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference(), System.Int32)
  name.vb: CopyTo(IdentityReference(), Int32)
- uid: System.Security.Principal.IdentityReferenceCollection.GetEnumerator
  commentId: M:System.Security.Principal.IdentityReferenceCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Security.Principal.IdentityReferenceCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 52
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets an enumerator that can be used to iterate through the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: public IEnumerator<IdentityReference> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of IdentityReference)
    return:
      type: System.Collections.Generic.IEnumerator{System.Security.Principal.IdentityReference}
      description: "\n<p>An enumerator for the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.Generic.IEnumerable{System.Security.Principal.IdentityReference}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)
  id: Remove(System.Security.Principal.IdentityReference)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Remove(IdentityReference)
  fullName: System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 53
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Removes the specified <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object from the collection.</p>\n"
  example:
  - 
  syntax:
    content: public bool Remove(IdentityReference identity)
    content.vb: Public Function Remove(identity As IdentityReference) As Boolean
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified object was removed from the collection.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Remove(System.Security.Principal.IdentityReference)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Security.Principal.IdentityReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Security.Principal.IdentityReferenceCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 54
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets an enumerator that can be used to iterate through the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator for the <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)
  id: Translate(System.Type)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Translate(Type)
  fullName: System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Translate
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 55
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Converts the objects in the collection to the specified type. Calling this method is the same as calling <xref href=\"System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with the second parameter set to <strong>false</strong>, which means that exceptions will not be thrown for items that fail conversion.</p>\n"
  remarks: "\n<p>Order is preserved in the returned collection, That is, the first item in the returned collection corresponds to the first item in the source collection, and so on, for each item in the collection. </p>\n<p>The items in the source collection are not required to be of the same type.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReferenceCollection Translate(Type targetType)
    content.vb: Public Function Translate(targetType As Type) As IdentityReferenceCollection
    parameters:
    - id: targetType
      type: System.Type
      description: "\n<p>The type to which items in the collection are being converted.</p>\n"
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "\n<p>A <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection that represents the converted contents of the original collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)
  commentId: M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)
  id: Translate(System.Type,System.Boolean)
  parent: System.Security.Principal.IdentityReferenceCollection
  langs:
  - csharp
  - vb
  name: Translate(Type, Boolean)
  fullName: System.Security.Principal.IdentityReferenceCollection.Translate(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Translate
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 56
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Converts the objects in the collection to the specified type and uses the specified fault tolerance to handle or ignore errors associated with a type not having a conversion mapping.</p>\n"
  remarks: "\n<p>Order is preserved in the returned collection, That is, the first item in the returned collection corresponds to the first item in the source collection, and so on, for each item in the collection. </p>\n<p>The items in the source collection are not required to be of the same type.</p>\n"
  example:
  - 
  syntax:
    content: public IdentityReferenceCollection Translate(Type targetType, bool forceSuccess)
    content.vb: Public Function Translate(targetType As Type, forceSuccess As Boolean) As IdentityReferenceCollection
    parameters:
    - id: targetType
      type: System.Type
      description: "\n<p>The type to which items in the collection are being converted.</p>\n"
    - id: forceSuccess
      type: System.Boolean
      description: "\n<p>A Boolean value that determines how conversion errors are handled.</p>\n<p>If <em>forceSuccess</em> is <strong>true</strong>, conversion errors due to a mapping not being found for the translation result in a failed conversion and exceptions being thrown.</p>\n<p>If <em>forceSuccess</em> is <strong>false</strong>, types that failed to convert due to a mapping not being found for the translation are copied without being converted into the collection being returned.</p>\n"
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "\n<p>A <xref href=\"System.Security.Principal.IdentityReferenceCollection\" data-throw-if-not-resolved=\"false\"></xref> collection that represents the converted contents of the original collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IdentityReference>
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference)
  name.vb: ICollection(Of IdentityReference)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Security.Principal.IdentityReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IdentityReference>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Principal.IdentityReference>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Principal.IdentityReference)
  name.vb: IEnumerable(Of IdentityReference)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Count
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Count
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Add(System.Security.Principal.IdentityReference)
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(IdentityReference)
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Add(System.Security.Principal.IdentityReference)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Add(System.Security.Principal.IdentityReference)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Clear
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Contains(System.Security.Principal.IdentityReference)
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(IdentityReference)
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Contains(System.Security.Principal.IdentityReference)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Contains(System.Security.Principal.IdentityReference)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(IdentityReference[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.CopyTo(System.Security.Principal.IdentityReference[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).CopyTo(System.Security.Principal.IdentityReference(), System.Int32)
  name.vb: CopyTo(IdentityReference(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.CopyTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).CopyTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Principal.IdentityReference[]
  isExternal: false
  name: IdentityReference[]
  fullName: System.Security.Principal.IdentityReference[]
  fullname.vb: System.Security.Principal.IdentityReference()
  name.vb: IdentityReference()
  spec.csharp:
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Security.Principal.IdentityReference}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Security.Principal.IdentityReference>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Principal.IdentityReference).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Security.Principal.IdentityReference>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Security.Principal.IdentityReference).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Security.Principal.IdentityReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<IdentityReference>
  fullName: System.Collections.Generic.IEnumerator<System.Security.Principal.IdentityReference>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Security.Principal.IdentityReference)
  name.vb: IEnumerator(Of IdentityReference)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}.Remove(System.Security.Principal.IdentityReference)
  parent: System.Collections.Generic.ICollection{System.Security.Principal.IdentityReference}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(IdentityReference)
  fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Remove(System.Security.Principal.IdentityReference)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Remove(System.Security.Principal.IdentityReference)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of System.Security.Principal.IdentityReference).Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Principal.IdentityReference
    name: IdentityReference
    fullName: System.Security.Principal.IdentityReference
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
