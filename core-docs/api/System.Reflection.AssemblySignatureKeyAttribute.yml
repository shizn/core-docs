items:
- uid: System.Reflection.AssemblySignatureKeyAttribute
  commentId: T:System.Reflection.AssemblySignatureKeyAttribute
  id: AssemblySignatureKeyAttribute
  parent: System.Reflection
  children:
  - System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)
  - System.Reflection.AssemblySignatureKeyAttribute.Countersignature
  - System.Reflection.AssemblySignatureKeyAttribute.PublicKey
  langs:
  - csharp
  - vb
  name: AssemblySignatureKeyAttribute
  fullName: System.Reflection.AssemblySignatureKeyAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblySignatureKeyAttribute
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 363
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Provides migration from an older, simpler strong name key to a larger key with a stronger hashing algorithm.</p>\n"
  remarks: "\n<p>The new larger key is the signature key. In versions before the .NET Framework 4.5, the signature key was identical to the identity key. Starting with the .NET Framework 4.5, the <xref href=\"System.Reflection.AssemblySignatureKeyAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute allows the assembly metadata to continue to have the old public key token and binary large object (BLOB) so that existing assembly references continue to work. It also ensures that the mapping comes from an owner of the identity key.</p>\n<p>The presence of the attribute does not necessarily mean that strong name validation takes place. In common full-trust scenarios, the attribute is never considered, because strong name signatures are never validated. However, when the strong name signature does have to be validated, both the strong name signature and the countersignature must be validated. The assembly’s identity key does not have to be identical to the signature key (the key used to do the actual signing and validation). The identity key can be mapped to a different (more robust) signing key. This lets you set the identity of an assembly, and update the signing keys and algorithms to more secure versions.</p>\n<p>The countersignature addresses security concerns when a malicious assembly claims some other identity. For example, a malicious System.Core.dll assembly could contain the Microsoft public key in its metadata, and use the attribute to tell strong name validation to use the attacker’s signature key if no countersignature is present. Thus, it could masquerade as a strong name-validated Microsoft assembly.</p>\n<p>For information about how to sign assemblies for use with this new attribute, see Enhanced Strong Naming.</p>\n"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]

      public sealed class AssemblySignatureKeyAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False, AllowMultiple:=False)>

      Public NotInheritable Class AssemblySignatureKeyAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
    - name: AllowMultiple
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)
  commentId: M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Reflection.AssemblySignatureKeyAttribute
  langs:
  - csharp
  - vb
  name: AssemblySignatureKeyAttribute(String, String)
  fullName: System.Reflection.AssemblySignatureKeyAttribute.AssemblySignatureKeyAttribute(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 369
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Reflection.AssemblySignatureKeyAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified public key and countersignature.</p>\n"
  remarks: "\n<p>Use Sn.exe to generate the parameters for this constructor.</p>\n<pre><code>sn -a IdentityPubKey.snk IdentityKey.snk SignaturePubKey.snk</code></pre>\n"
  syntax:
    content: public AssemblySignatureKeyAttribute(string publicKey, string countersignature)
    content.vb: Public Sub New(publicKey As String, countersignature As String)
    parameters:
    - id: publicKey
      type: System.String
    - id: countersignature
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblySignatureKeyAttribute.Countersignature
  commentId: P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature
  id: Countersignature
  parent: System.Reflection.AssemblySignatureKeyAttribute
  langs:
  - csharp
  - vb
  name: Countersignature
  fullName: System.Reflection.AssemblySignatureKeyAttribute.Countersignature
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Countersignature
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 380
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Gets the countersignature for the strong name for this assembly.</p>\n"
  remarks: "\n<p>The countersignature represents the public key that is signed by the identity key.</p>\n"
  syntax:
    content: public string Countersignature { get; }
    content.vb: Public ReadOnly Property Countersignature As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.AssemblySignatureKeyAttribute.PublicKey
  commentId: P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey
  id: PublicKey
  parent: System.Reflection.AssemblySignatureKeyAttribute
  langs:
  - csharp
  - vb
  name: PublicKey
  fullName: System.Reflection.AssemblySignatureKeyAttribute.PublicKey
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PublicKey
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 375
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Gets the public key for the strong name used to sign the assembly.</p>\n"
  syntax:
    content: public string PublicKey { get; }
    content.vb: Public ReadOnly Property PublicKey As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
