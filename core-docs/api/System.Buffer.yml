items:
- uid: System.Buffer
  commentId: T:System.Buffer
  id: Buffer
  parent: System
  children:
  - System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Buffer.ByteLength(System.Array)
  - System.Buffer.GetByte(System.Array,System.Int32)
  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  - System.Buffer.SetByte(System.Array,System.Int32,System.Byte)
  langs:
  - csharp
  - vb
  name: Buffer
  fullName: System.Buffer
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Buffer
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 270
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Manipulates arrays of primitive types.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Buffer\" data-throw-if-not-resolved=\"false\"></xref> only affects arrays of primitive types; this class does not apply to objects. Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.</p>\n<p>\n<xref href=\"System.Buffer\" data-throw-if-not-resolved=\"false\"></xref> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array. This class provides better performance for manipulating primitive types than similar methods in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>\n<xref href=\"System.Buffer\" data-throw-if-not-resolved=\"false\"></xref> is applicable to the following primitive types: <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of several <strong>Buffer</strong> class methods.</p>System.Buffer.BlockCopy#1"
  syntax:
    content: public class Buffer
    content.vb: Public Class Buffer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: BlockCopy(Array, Int32, Array, Int32, Int32)
  fullName: System.Buffer.BlockCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockCopy
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 272
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</p>\n"
  remarks: "\n<p>This method copies <em>count</em> bytes from <em>src</em>, beginning at <em>srcOffset</em>, to <em>dst</em>, beginning at <em>dstOffset</em>. Both <em>srcOffset</em> and <em>dstOffset</em> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.</p>\n<p>The<xref href=\"System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method accesses the bytes in the <em>src</em> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds. For example, if in the programming language of your application you declare an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <xref href=\"System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, the first array element the method will access is the second element of the array, which is at index -49. Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.</p>\n<p>As its name suggests, the <xref href=\"System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method copies a block of bytes as a whole, rather than copying one byte at a time. Therefore, if <em>src</em> and <em>dst</em> reference the same array, and the range from <em>srcOffset</em> + <em>count</em> -1 overlaps the range from <em>dstOffset</em> + <em>count</em> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination. In the following example, the values of bytes 0-16 in an array named <code>arr</code> are copied to bytes 12-28. Despite the overlapping range, the values of the source bytes are successfully copied.</p>System.Buffer.BlockCopy#3<p>In the following example, the values of bytes 12-28 in an array named <code>arr</code> are copied to bytes 0-16. Again, despite the overlapping range, the values of the source bytes are successfully copied.</p>System.Buffer.BlockCopy#4"
  example:
  - "\n<p>The following example copies regions of arrays by using the <xref href=\"System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. For each<xref href=\"System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> operation, it lists the source and destination arrays as both an array of values and as a sequence of bytes. The example illustrates the importance of considering a system's endianness when working with the <xref href=\"System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method: Because Windows systems are little-endian, the lower-order bytes of a primitive data type's value precede the higher-order bytes. </p>System.Buffer.BlockCopy#2"
  syntax:
    content: public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count)
    content.vb: Public Shared Sub BlockCopy(src As Array, srcOffset As Integer, dst As Array, dstOffset As Integer, count As Integer)
    parameters:
    - id: src
      type: System.Array
      description: "\n<p>The source buffer. </p>\n"
    - id: srcOffset
      type: System.Int32
      description: "\n<p>The zero-based byte offset into <em>src</em>. </p>\n"
    - id: dst
      type: System.Array
      description: "\n<p>The destination buffer. </p>\n"
    - id: dstOffset
      type: System.Int32
      description: "\n<p>The zero-based byte offset into <em>dst</em>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>src</em> or <em>dst</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>src</em> or <em>dst</em> is not an array of primitives.</p>\n<p>-or- </p>\n<p>The number of bytes in <em>src</em> is less than <em>srcOffset</em> plus <em>count</em>.</p>\n<p>-or- </p>\n<p>The number of bytes in <em>dst</em> is less than <em>dstOffset</em> plus <em>count</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>srcOffset</em>, <em>dstOffset</em>, or <em>count</em> is less than 0. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.ByteLength(System.Array)
  commentId: M:System.Buffer.ByteLength(System.Array)
  id: ByteLength(System.Array)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: ByteLength(Array)
  fullName: System.Buffer.ByteLength(System.Array)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ByteLength
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 273
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the number of bytes in the specified array.</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of the <strong>ByteLength</strong> method to return the number of bytes in an array.</p>System.Buffer.Bytes#1"
  syntax:
    content: public static int ByteLength(Array array)
    content.vb: Public Shared Function ByteLength(array As Array) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>An array. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes in the array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is not a primitive. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>array</em> is larger than 2 gigabytes (GB).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.GetByte(System.Array,System.Int32)
  commentId: M:System.Buffer.GetByte(System.Array,System.Int32)
  id: GetByte(System.Array,System.Int32)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: GetByte(Array, Int32)
  fullName: System.Buffer.GetByte(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 274
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the byte at a specified location in a specified array.</p>\n"
  remarks: "\n<p>The <strong>GetByte</strong> method gets a particular byte out of the array. The array must be an array of primitives.</p>\n"
  example:
  - "\n<p>The following code example displays the byte values at specified locations within arrays using the <strong>GetByte</strong> method.</p>System.Buffer.Bytes#3"
  syntax:
    content: public static byte GetByte(Array array, int index)
    content.vb: Public Shared Function GetByte(array As Array, index As Integer) As Byte
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>An array. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>A location in the array. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>Returns the <em>index</em> byte in the array.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is not a primitive. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is negative or greater than the length of <em>array</em>. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>array</em> is larger than 2 gigabytes (GB).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  id: MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: MemoryCopy(Void*, Void*, Int64, Int64)
  fullName: System.Buffer.MemoryCopy(System.Void*, System.Void*, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemoryCopy
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 275
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a number of bytes specified as a long integer value from one address in memory to another. </p>\n<p>This API is not CLS-compliant.</p>\n"
  remarks: "\n<p>This method copies <em>sourceBytesToCopy</em> bytes from the address specified by <em>source</em> to the address specified by <em>destination</em>. If the buffers overlap and the difference between <em>destination</em> minus <em>source</em> is less than <em>sourceBytesToCopy</em>, the source block is copied to the destination block in reverse order. </p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [SecurityCritical]

      public static void MemoryCopy(void *source, void *destination, long destinationSizeInBytes, long sourceBytesToCopy)
    content.vb: >-
      <CLSCompliant(False)>

      <SecurityCritical>

      Public Shared Sub MemoryCopy(source As  *, destination As  *, destinationSizeInBytes As Long, sourceBytesToCopy As Long)
    parameters:
    - id: source
      type: System.Void*
      description: "\n<p>The address of the bytes to copy. </p>\n"
    - id: destination
      type: System.Void*
      description: "\n<p>The target address. </p>\n"
    - id: destinationSizeInBytes
      type: System.Int64
      description: "\n<p>The number of bytes available in the destination memory block. </p>\n"
    - id: sourceBytesToCopy
      type: System.Int64
      description: "\n<p>The number of bytes to copy.  </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  id: MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: MemoryCopy(Void*, Void*, UInt64, UInt64)
  fullName: System.Buffer.MemoryCopy(System.Void*, System.Void*, System.UInt64, System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemoryCopy
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 278
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another. </p>\n<p>This API is not CLS-compliant.</p>\n"
  remarks: "\n<p>This method copies <em>sourceBytesToCopy</em> bytes from the address specified by <em>source</em> to the address specified by <em>destination</em>. If the buffers overlap and the difference between <em>destination</em> minus <em>source</em> is less than <em>sourceBytesToCopy</em>, the source block is copied to the destination block in reverse order. </p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [SecurityCritical]

      public static void MemoryCopy(void *source, void *destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy)
    content.vb: >-
      <CLSCompliant(False)>

      <SecurityCritical>

      Public Shared Sub MemoryCopy(source As  *, destination As  *, destinationSizeInBytes As ULong, sourceBytesToCopy As ULong)
    parameters:
    - id: source
      type: System.Void*
      description: "\n<p>The address of the bytes to copy. </p>\n"
    - id: destination
      type: System.Void*
      description: "\n<p>The target address. </p>\n"
    - id: destinationSizeInBytes
      type: System.UInt64
      description: "\n<p>The number of bytes available in the destination memory block. </p>\n"
    - id: sourceBytesToCopy
      type: System.UInt64
      description: "\n<p>The number of bytes to copy.   </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.SetByte(System.Array,System.Int32,System.Byte)
  commentId: M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)
  id: SetByte(System.Array,System.Int32,System.Byte)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: SetByte(Array, Int32, Byte)
  fullName: System.Buffer.SetByte(System.Array, System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 281
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Assigns a specified value to a byte at a particular location in a specified array.</p>\n"
  remarks: "\n<p>\n<em>array</em> must be an array of primitives.</p>\n"
  example:
  - "\n<p>The following code example assigns values to bytes at particular locations within arrays using the <strong>SetByte</strong> method.</p>System.Buffer.Bytes#2"
  syntax:
    content: public static void SetByte(Array array, int index, byte value)
    content.vb: Public Shared Sub SetByte(array As Array, index As Integer, value As Byte)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>An array. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>A location in the array. </p>\n"
    - id: value
      type: System.Byte
      description: "\n<p>A value to assign. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is not a primitive. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is negative or greater than the length of <em>array</em>. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>array</em> is larger than 2 gigabytes (GB).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Void*
  isExternal: false
  name: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    fullName: System.Void
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    fullName: System.Void
  - name: '*'
    fullName: '*'
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
