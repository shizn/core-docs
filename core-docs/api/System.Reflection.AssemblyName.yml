items:
- uid: System.Reflection.AssemblyName
  commentId: T:System.Reflection.AssemblyName
  id: AssemblyName
  parent: System.Reflection
  children:
  - System.Reflection.AssemblyName.#ctor
  - System.Reflection.AssemblyName.#ctor(System.String)
  - System.Reflection.AssemblyName.ContentType
  - System.Reflection.AssemblyName.CultureName
  - System.Reflection.AssemblyName.Flags
  - System.Reflection.AssemblyName.FullName
  - System.Reflection.AssemblyName.GetPublicKey
  - System.Reflection.AssemblyName.GetPublicKeyToken
  - System.Reflection.AssemblyName.Name
  - System.Reflection.AssemblyName.ProcessorArchitecture
  - System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  - System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  - System.Reflection.AssemblyName.ToString
  - System.Reflection.AssemblyName.Version
  langs:
  - csharp
  - vb
  name: AssemblyName
  fullName: System.Reflection.AssemblyName
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyName
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Describes an assembly's unique identity in full.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object contains information about an assembly, which you can use to bind to that assembly. An assembly's identity consists of the following:</p>\n<ul><li>\n<p>Simple name.</p>\n</li><li>\n<p>Version number.</p>\n</li><li>\n<p>Cryptographic key pair.</p>\n</li><li>\n<p>Supported culture.</p>\n</li></ul>\n<p>The simple name is typically the file name for the manifest file without its extension. The key pair includes a public and private key, used to create strong-name signatures for assemblies.</p>\n<p>All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</p>\n<p>Delimiter </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Backslash (\\) </p>\n</td><td>\n<p>Escape character. </p>\n</td></tr><tr><td>\n<p>Comma (,) </p>\n</td><td>\n<p>Precedes the assembly name. </p>\n</td></tr><tr><td>\n<p>Plus sign (+) </p>\n</td><td>\n<p>Precedes a nested class. </p>\n</td></tr></tbody></table>\n<p>For example, the fully qualified name for a class might look like this: </p>\n<p>ContainingClass+NestedClass,MyAssembly </p>\n<p></p>\n<p>A \"++\" becomes \"\\+\\+\", and a \"\\\" becomes \"\\\\\".</p>\n<p>This qualified name can be persisted and later used to load the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. To search for and load a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref> either with the type name only or with the assembly qualified type name. <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref> with the type name only will look for the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in the caller's assembly and then in the System assembly. <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref> with the assembly qualified type name will look for the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in any assembly.</p>\n<p>A fully specified <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters. The last four are packaged in the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> type. </p>\n<p></p>\n<p>To create a simple name, create an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object using the default constructor and set the <xref href=\"System.Reflection.AssemblyName.Name\" data-throw-if-not-resolved=\"false\"></xref>. The other properties are optional.</p>\n<p>To create a full strong name, create an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object using the default constructor and set the <xref href=\"System.Reflection.AssemblyName.Name\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.AssemblyName.KeyPair\" data-throw-if-not-resolved=\"false\"></xref>. The other properties are optional. Use <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> to set the public key and the strong name. The strong name signing always uses the <xref href=\"System.Security.Cryptography.SHA1\" data-throw-if-not-resolved=\"false\"></xref> hash algorithm.</p>\n<p>To ensure that the names are constructed correctly, use the following properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.Reflection.Assembly.FullName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Reflection.AssemblyName.FullName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Type.AssemblyQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>You can also get the name by using the /l option with the Gacutil.exe (Global Assembly Cache Tool)</p>\n<p>For a partially specified strong name, create an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object using the default constructor and set the name and public key. An assembly created using such an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> can be signed later using the Assembly Linker (Al.exe).</p>\n<p>It is possible to specify a public key and a <xref href=\"System.Reflection.AssemblyName.KeyPair\" data-throw-if-not-resolved=\"false\"></xref> with inconsistent values. This can be useful in developer scenarios. In this case, the public key retrieved with <xref href=\"System.Reflection.AssemblyName.GetPublicKey\" data-throw-if-not-resolved=\"false\"></xref> specifies the correct public key, while the <xref href=\"System.Reflection.AssemblyName.KeyPair\" data-throw-if-not-resolved=\"false\"></xref> specifies the public and private keys used during development. When the runtime detects a mismatch between the <xref href=\"System.Reflection.AssemblyName.KeyPair\" data-throw-if-not-resolved=\"false\"></xref> and the public key, it looks up in the registry the correct key that matches the public key.</p>\n<p>The format of the display name of an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> is a comma-delimited Unicode string that begins with the name, as follows: </p>\n<p>\n<code>Name <,Culture = CultureInfo> <,Version = Major.Minor.Build.Revision> <, StrongName> <,PublicKeyToken> '\\0'</code>\n</p>\n<p>\n<code>Name</code> is the textual name of the assembly. <code>CultureInfo</code> is the RFC1766-format-defined culture. <code>Major</code>, <code>Minor</code>, <code>Build</code>, and <code>Revision</code> are the major version, minor version, build number, and revision number of the assembly. <code>StrongName</code> is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref>. <code>PublicKeyToken</code> is the hexadecimal-encoded public key specified by <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte. Additional display values will be added as deemed necessary.</p>\n<p>If the full public key is known, then PublicKey may be substituted for StrongName.</p>\n<p>Also note that except for <code>Name</code>, which must come first, the lexical order of parameters is unimportant. However, any parameter (<code>Version</code>, <code>Culture</code>, <code>StrongName</code> or <code>PublicKey</code>) not specifically set is considered to be omitted, and the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> is then considered partial. When specifying partial information, Name parameters must be specified in the order described above.</p>\n<p>When supplying a display name, the convention <code>StrongName =null</code> or <code>PublicKey= null</code> indicates that binding and matching against a simply named assembly is required. Additionally, the convention <code>Culture= \"\"</code> (double quote representing an empty string) indicates matching against the default culture.</p>\n<p>The following example shows an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> for a simply named assembly with default culture.</p>\n<pre><code>ExampleAssembly, Culture=\"\"</code></pre>\n<p>The following example shows a fully specified reference for a strongly named assembly with culture \"en\".</p>\n<pre><code>ExampleAssembly, Version=1.0.0.0, Culture=en, PublicKeyToken=a5d015c7d5a0b012</code></pre>\n"
  example:
  - "\n<p>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</p>Reflection#1"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_AssemblyName))]

      [ComVisible(true)]

      public sealed class AssemblyName : _AssemblyName, ICloneable, ISerializable, IDeserializationCallback
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_AssemblyName))>

      <ComVisible(True)>

      Public NotInheritable Class AssemblyName
          Implements _AssemblyName, ICloneable, ISerializable, IDeserializationCallback
  seealso:
  - type: System.Version
    commentId: T:System.Version
  - type: System.Reflection.AssemblyName.GetPublicKey
    commentId: M:System.Reflection.AssemblyName.GetPublicKey
  - type: System.Reflection.AssemblyName.GetPublicKeyToken
    commentId: M:System.Reflection.AssemblyName.GetPublicKeyToken
  - type: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
    commentId: M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  - type: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
    commentId: M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  - type: System.Type.FullName
    commentId: P:System.Type.FullName
  - type: System.Type.GetType
    commentId: M:System.Type.GetType
  - type: System.Type.AssemblyQualifiedName
    commentId: P:System.Type.AssemblyQualifiedName
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.AssemblyName.#ctor
  commentId: M:System.Reflection.AssemblyName.#ctor
  id: '#ctor'
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: AssemblyName()
  fullName: System.Reflection.AssemblyName.AssemblyName()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 58
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example creates a dynamic assembly named <code>MyAssembly.exe</code> and saves it to your hard disk. After running the example, you can use the Ildasm.exe (IL Disassembler) to examine the assembly metadata.</p>AssemblyName_Constructor#1"
  syntax:
    content: public AssemblyName()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.#ctor(System.String)
  commentId: M:System.Reflection.AssemblyName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: AssemblyName(String)
  fullName: System.Reflection.AssemblyName.AssemblyName(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 366
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> class with the specified display name.</p>\n"
  remarks: "\n<p>The supplied <em>assemblyName</em> is parsed, and the appropriate fields of the new <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> are initialized with values from the display name. This is the recommended way of parsing display names. Writing your own code to parse display names is not recommended. </p>\n"
  example:
  - "\n<p>The following example creates an instance of <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> from a display name. The individual elements of the display name are output to the console as properties of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref>object.</p>AssemblyName_Constructor_2#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public AssemblyName(string assemblyName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(assemblyName As String)
    parameters:
    - id: assemblyName
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>assemblyName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>assemblyName</em> is a zero length string. </p>\n"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The referenced assembly could not be found, or could not be loaded.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.ContentType
  commentId: P:System.Reflection.AssemblyName.ContentType
  id: ContentType
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: ContentType
  fullName: System.Reflection.AssemblyName.ContentType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContentType
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 146
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets a value that indicates what type of content the assembly contains.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public AssemblyContentType ContentType { get; set; }
    content.vb: >-
      <ComVisible(False)>

      Public Property ContentType As AssemblyContentType
    parameters: []
    return:
      type: System.Reflection.AssemblyContentType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.CultureName
  commentId: P:System.Reflection.AssemblyName.CultureName
  id: CultureName
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: CultureName
  fullName: System.Reflection.AssemblyName.CultureName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CultureName
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 95
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the name of the culture associated with the assembly.</p>\n"
  syntax:
    content: public string CultureName { get; set; }
    content.vb: Public Property CultureName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.Flags
  commentId: P:System.Reflection.AssemblyName.Flags
  id: Flags
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: Flags
  fullName: System.Reflection.AssemblyName.Flags
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flags
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 254
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the attributes of the assembly.</p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.Flags\" data-throw-if-not-resolved=\"false\"></xref> property is used to specify that the assembly has a public key.</p>AssemblyName_KeyPair#4"
  syntax:
    content: public AssemblyNameFlags Flags { get; set; }
    content.vb: Public Property Flags As AssemblyNameFlags
    parameters: []
    return:
      type: System.Reflection.AssemblyNameFlags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.FullName
  commentId: P:System.Reflection.AssemblyName.FullName
  id: FullName
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Reflection.AssemblyName.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 281
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the full name of the assembly, also known as the display name.</p>\n"
  remarks: "\n<p>The display name typically consists of the simple name, version number, supported culture, and public key. For example: </p>\n<pre><code>mylib, Version=1.2.1900.0, Culture=neutral, PublicKeyToken=a14f3033def15840</code></pre>\n<p>Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref href=\"System.Reflection.AssemblyName.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, which parses it and populates the appropriate fields of the new <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>When an assembly is loaded, this value can also be obtained using the <xref href=\"System.Reflection.Assembly.FullName\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the code example sets the <xref href=\"System.Reflection.AssemblyName.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.AssemblyName.Version\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.AssemblyName.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.AssemblyName.KeyPair\" data-throw-if-not-resolved=\"false\"></xref> properties, which together comprise an assembly's full name, or display name. The <xref href=\"System.Reflection.AssemblyName.FullName\" data-throw-if-not-resolved=\"false\"></xref> property is then used to retrieve the display name.</p>AssemblyName_CodeBase#4"
  syntax:
    content: >-
      public string FullName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.AssemblyName.Name
  commentId: P:System.Reflection.AssemblyName.Name
  id: Name
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.AssemblyName.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</p>\n"
  remarks: "\n<p>The manifest file is the file that contains the assembly manifest.</p>\n<p>For example, the simple name of a single-file assembly named \"MyAssembly.dll\" is \"MyAssembly\".</p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.Name\" data-throw-if-not-resolved=\"false\"></xref> property is used to set the simple name of the dynamic assembly.</p>AssemblyName_Constructor#2"
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.ProcessorArchitecture
  commentId: P:System.Reflection.AssemblyName.ProcessorArchitecture
  id: ProcessorArchitecture
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: ProcessorArchitecture
  fullName: System.Reflection.AssemblyName.ProcessorArchitecture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ProcessorArchitecture
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 129
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</p>\n"
  remarks: "\n<p>Beginning with the .NET Framework 4, this property always returns <xref href=\"System.Reflection.ProcessorArchitecture.None\" data-throw-if-not-resolved=\"false\"></xref> for reference assemblies.</p>\n"
  syntax:
    content: public ProcessorArchitecture ProcessorArchitecture { get; set; }
    content.vb: Public Property ProcessorArchitecture As ProcessorArchitecture
    parameters: []
    return:
      type: System.Reflection.ProcessorArchitecture
  seealso:
  - type: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    commentId: M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.Version
  commentId: P:System.Reflection.AssemblyName.Version
  id: Version
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Reflection.AssemblyName.Version
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Version
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 74
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the major, minor, build, and revision numbers of the assembly.</p>\n"
  remarks: "\n<p>All components of the version must be integers greater than or equal to zero. Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> - 1. If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.</p>\n"
  example:
  - "\n<p>This section contains two examples. The first example shows how to retrieve the version of the currently executing assembly. The second example shows how to use the <xref href=\"System.Reflection.AssemblyName.Version\" data-throw-if-not-resolved=\"false\"></xref> property to specify the assembly version when you emit a dynamic assembly.</p>\n<p>Example 1</p>\n<p>The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class.</p>AssemblyName.Version#1<p>Example 2</p><p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.Version\" data-throw-if-not-resolved=\"false\"></xref> property is used to specify version information for the assembly.</p>AssemblyName_Constructor#3"
  syntax:
    content: public Version Version { get; set; }
    content.vb: Public Property Version As Version
    parameters: []
    return:
      type: System.Version
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.GetPublicKey
  commentId: M:System.Reflection.AssemblyName.GetPublicKey
  id: GetPublicKey
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: GetPublicKey()
  fullName: System.Reflection.AssemblyName.GetPublicKey()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPublicKey
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 217
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the public key of the assembly.</p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to give the assembly a public key. The <xref href=\"System.Reflection.AssemblyName.GetPublicKey\" data-throw-if-not-resolved=\"false\"></xref> method is then used to retrieve the public key, which is displayed to the console.</p>AssemblyName_KeyPair#2"
  syntax:
    content: public byte[] GetPublicKey()
    content.vb: Public Function GetPublicKey As Byte()
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A public key was provided (for example, by using the <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method), but no public key token was provided. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.GetPublicKeyToken
  commentId: M:System.Reflection.AssemblyName.GetPublicKeyToken
  id: GetPublicKeyToken
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: GetPublicKeyToken()
  fullName: System.Reflection.AssemblyName.GetPublicKeyToken()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPublicKeyToken
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 234
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to set the assembly's public key token. The <xref href=\"System.Reflection.AssemblyName.GetPublicKeyToken\" data-throw-if-not-resolved=\"false\"></xref> method is then used to retrieve the public key token, which is displayed to the console.</p>AssemblyName_KeyPair#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public byte[] GetPublicKeyToken()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetPublicKeyToken As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  commentId: M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  id: SetPublicKey(System.Byte[])
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: SetPublicKey(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetPublicKey
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 222
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the public key identifying the assembly.</p>\n"
  remarks: "\n<p>You must also use the <xref href=\"System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to provide a public key token. Otherwise, a <xref href=\"System.Security.SecurityException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when the <xref href=\"System.Reflection.AssemblyName.GetPublicKey\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to give the assembly a public key. The <xref href=\"System.Reflection.AssemblyName.GetPublicKey\" data-throw-if-not-resolved=\"false\"></xref> method is then used to retrieve the public key, which is displayed to the console.</p>AssemblyName_SetPublicKey#1"
  syntax:
    content: public void SetPublicKey(byte[] publicKey)
    content.vb: Public Sub SetPublicKey(publicKey As Byte())
    parameters:
    - id: publicKey
      type: System.Byte[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.AssemblyName.SetPublicKey(System.Byte())
  name.vb: SetPublicKey(Byte())
- uid: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  commentId: M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  id: SetPublicKeyToken(System.Byte[])
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: SetPublicKeyToken(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetPublicKeyToken
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 242
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</p>\n"
  remarks: "\n<p>When you set the public key by calling the <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method, you must also use the <xref href=\"System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to provide a public key token. Otherwise, a <xref href=\"System.Security.SecurityException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when the <xref href=\"System.Reflection.AssemblyName.GetPublicKey\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  example:
  - "\n<p>The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref href=\"System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to set the assembly's public key token. The <xref href=\"System.Reflection.AssemblyName.GetPublicKeyToken\" data-throw-if-not-resolved=\"false\"></xref> method is then used to retrieve the public key token, which is displayed to the console.</p>AssemblyName_SetPublicKey#2"
  syntax:
    content: public void SetPublicKeyToken(byte[] publicKeyToken)
    content.vb: Public Sub SetPublicKeyToken(publicKeyToken As Byte())
    parameters:
    - id: publicKeyToken
      type: System.Byte[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte())
  name.vb: SetPublicKeyToken(Byte())
- uid: System.Reflection.AssemblyName.ToString
  commentId: M:System.Reflection.AssemblyName.ToString
  id: ToString
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.AssemblyName.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 290
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the full name of the assembly, also known as the display name.</p>\n"
  remarks: "\n<p>See the description of <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> for the format of the returned string.</p>\n"
  example:
  - "\n<p>The following example gets an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object for a hypothetical <code>MyAssembly.exe</code> assembly, and then uses the <xref href=\"System.Reflection.AssemblyName.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the full assembly name, or display name.</p>AssemblyName_GetAssemblyName#2"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.AssemblyContentType
  parent: System.Reflection
  isExternal: false
  name: AssemblyContentType
  fullName: System.Reflection.AssemblyContentType
- uid: System.Reflection.AssemblyNameFlags
  parent: System.Reflection
  isExternal: false
  name: AssemblyNameFlags
  fullName: System.Reflection.AssemblyNameFlags
- uid: System.Reflection.ProcessorArchitecture
  parent: System.Reflection
  isExternal: false
  name: ProcessorArchitecture
  fullName: System.Reflection.ProcessorArchitecture
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  fullName: System.Version
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.FileLoadException
  isExternal: false
  name: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
