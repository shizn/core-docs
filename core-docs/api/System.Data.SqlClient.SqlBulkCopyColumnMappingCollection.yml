items:
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  commentId: T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  id: SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.String)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.String)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[],System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Count
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.GetEnumerator
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert(System.Int32,System.Data.SqlClient.SqlBulkCopyColumnMapping)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item(System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#IsSynchronized
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#SyncRoot
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Add(System.Object)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Contains(System.Object)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IsFixedSize
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IsReadOnly
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Item(System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlBulkCopyColumnMappingCollection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 11
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Collection of <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects that inherits from <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Column mappings define the mapping between data source and the target table.</p>\n<p>If mappings are not defined—that is, the <xref href=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\" data-throw-if-not-resolved=\"false\"></xref> collection is empty—the columns are mapped implicitly based on ordinal position. For this to work, source and target schemas must match. If they do not, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>If the <xref href=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\" data-throw-if-not-resolved=\"false\"></xref> collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are ignored.</p>\n<p>You can refer to source and target columns by either name or ordinal. You can mix by-name and by-ordinal column references in the same mappings collection.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> are added to the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> object to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingCollection#1"
  syntax:
    content: 'public sealed class SqlBulkCopyColumnMappingCollection : IList, ICollection, IEnumerable'
    content.vb: >-
      Public NotInheritable Class SqlBulkCopyColumnMappingCollection
          Implements IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item(System.Int32)
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 60
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> object at the specified index.</p>\n"
  syntax:
    content: public SqlBulkCopyColumnMapping this[int index] { get; }
    content.vb: Public ReadOnly Property Item(index As Integer) As SqlBulkCopyColumnMapping
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  id: Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(SqlBulkCopyColumnMapping)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 62
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Adds the specified mapping to the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMapping#1"
  syntax:
    content: public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping)
    content.vb: Public Function Add(bulkCopyColumnMapping As SqlBulkCopyColumnMapping) As SqlBulkCopyColumnMapping
    parameters:
    - id: bulkCopyColumnMapping
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)
  id: Add(System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 92
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> and adds it to the collection, using ordinals to specify both source and destination columns.</p>\n"
  remarks: "\n<p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy using the ordinal position of the source and destination columns.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingCollectionOrdinal#1"
  syntax:
    content: public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex)
    content.vb: Public Function Add(sourceColumnIndex As Integer, destinationColumnIndex As Integer) As SqlBulkCopyColumnMapping
    parameters:
    - id: sourceColumnIndex
      type: System.Int32
    - id: destinationColumnIndex
      type: System.Int32
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.String)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.String)
  id: Add(System.Int32,System.String)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 81
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> and adds it to the collection, using an ordinal for the source column and a string for the destination column.</p>\n"
  remarks: "\n<p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks </strong>sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingIndexColName#1"
  syntax:
    content: public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn)
    content.vb: Public Function Add(sourceColumnIndex As Integer, destinationColumn As String) As SqlBulkCopyColumnMapping
    parameters:
    - id: sourceColumnIndex
      type: System.Int32
    - id: destinationColumn
      type: System.String
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.Int32)
  id: Add(System.String,System.Int32)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(String, Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 87
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> and adds it to the collection, using a column name to describe the source column and an ordinal to specify the destination column.</p>\n"
  remarks: "\n<p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingColNameIndex#1"
  syntax:
    content: public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex)
    content.vb: Public Function Add(sourceColumn As String, destinationColumnIndex As Integer) As SqlBulkCopyColumnMapping
    parameters:
    - id: sourceColumn
      type: System.String
    - id: destinationColumnIndex
      type: System.Int32
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.String)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(String, String)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 75
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> and adds it to the collection, using column names to specify both source and destination columns.</p>\n"
  remarks: "\n<p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. The code creates a <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> object by specifying the column names.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingCollection#1"
  syntax:
    content: public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn)
    content.vb: Public Function Add(sourceColumn As String, destinationColumn As String) As SqlBulkCopyColumnMapping
    parameters:
    - id: sourceColumn
      type: System.String
    - id: destinationColumn
      type: System.String
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  id: Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Contains(SqlBulkCopyColumnMapping)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 112
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a value indicating whether a specified <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> object exists in the collection.</p>\n"
  syntax:
    content: public bool Contains(SqlBulkCopyColumnMapping value)
    content.vb: Public Function Contains(value As SqlBulkCopyColumnMapping) As Boolean
    parameters:
    - id: value
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[],System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[],System.Int32)
  id: CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[],System.Int32)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: CopyTo(SqlBulkCopyColumnMapping[], Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 114
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Copies the elements of the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\" data-throw-if-not-resolved=\"false\"></xref> to an array of <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> items, starting at a particular index.</p>\n"
  syntax:
    content: public void CopyTo(SqlBulkCopyColumnMapping[] array, int index)
    content.vb: Public Sub CopyTo(array As SqlBulkCopyColumnMapping(), index As Integer)
    parameters:
    - id: array
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping[]
    - id: index
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping(), System.Int32)
  name.vb: CopyTo(SqlBulkCopyColumnMapping(), Int32)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  id: IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IndexOf(SqlBulkCopyColumnMapping)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 126
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the index of the specified <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int IndexOf(SqlBulkCopyColumnMapping value)
    content.vb: Public Function IndexOf(value As SqlBulkCopyColumnMapping) As Integer
    parameters:
    - id: value
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert(System.Int32,System.Data.SqlClient.SqlBulkCopyColumnMapping)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert(System.Int32,System.Data.SqlClient.SqlBulkCopyColumnMapping)
  id: Insert(System.Int32,System.Data.SqlClient.SqlBulkCopyColumnMapping)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, SqlBulkCopyColumnMapping)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert(System.Int32, System.Data.SqlClient.SqlBulkCopyColumnMapping)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 128
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Insert a new <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> at the index specified.</p>\n"
  syntax:
    content: public void Insert(int index, SqlBulkCopyColumnMapping value)
    content.vb: Public Sub Insert(index As Integer, value As SqlBulkCopyColumnMapping)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  id: Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Remove(SqlBulkCopyColumnMapping)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 134
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Removes the specified <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> element from the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)\" data-throw-if-not-resolved=\"false\"></xref> method is most commonly used when you use a single <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear\" data-throw-if-not-resolved=\"false\"></xref> method, or remove mappings individually using the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Performing several bulk copies using the same <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance will usually be more efficient from a performance point of view than using a separate <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> for each operation.</p>\n"
  example:
  - "\n<p>The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. Both bulk copies include a mapping for the <strong>SalesOrderID</strong>, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the <strong>SalesOrderID</strong> mapping and then adds the appropriate mappings for the second bulk copy operation.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingRemove#1"
  syntax:
    content: public void Remove(SqlBulkCopyColumnMapping value)
    content.vb: Public Sub Remove(value As SqlBulkCopyColumnMapping)
    parameters:
    - id: value
      type: System.Data.SqlClient.SqlBulkCopyColumnMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Count
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Count
  id: Count
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 29
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 33
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 35
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IsFixedSize
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsFixedSize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 37
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IsReadOnly
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsReadOnly
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 41
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.this[]
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 43
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  implements:
  - System.Collections.IList.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear
  id: Clear
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 106
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Clears the contents of the collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear\" data-throw-if-not-resolved=\"false\"></xref> method is most commonly used when you use a single <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must clear the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\" data-throw-if-not-resolved=\"false\"></xref> after the <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> method and before processing the next bulk copy.</p>\n<p>Performing several bulk copies using the same <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance will usually be more efficient from a performance point of view than using a separate <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> for each operation.</p>\n"
  example:
  - "\n<p>The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear\" data-throw-if-not-resolved=\"false\"></xref> method must be used after the first bulk copy is performed and before the next bulk copy's column mappings are defined.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingOrdersDetails#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.GetEnumerator
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 124
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 140
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Removes the mapping at the specified index from the collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is most commonly used when you use a single <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the <see cref=\"Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer\"></see> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear\" data-throw-if-not-resolved=\"false\"></xref> method, or remove mappings individually using the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Performing several bulk copies using the same <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref>  instance will usually be more efficient from a performance point of view than using a separate <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> for each operation.</p>\n"
  example:
  - "\n<p>The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. Both bulk copies include a mapping for the <strong>SalesOrderID</strong>, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the <strong>SalesOrderID</strong> mapping and then adds the appropriate mappings for the second bulk copy operation.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingRemoveAt#1"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 169
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Add(System.Object)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Add
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 171
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Contains
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 181
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IndexOf
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 183
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Insert
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 185
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Remove
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMappingCollection.cs
    startLine: 195
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
  implements:
  - System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMapping
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping[]
  isExternal: false
  name: SqlBulkCopyColumnMapping[]
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping[]
  fullname.vb: System.Data.SqlClient.SqlBulkCopyColumnMapping()
  name.vb: SqlBulkCopyColumnMapping()
  spec.csharp:
  - uid: System.Data.SqlClient.SqlBulkCopyColumnMapping
    name: SqlBulkCopyColumnMapping
    fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Data.SqlClient.SqlBulkCopyColumnMapping
    name: SqlBulkCopyColumnMapping
    fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping
  - name: ()
    fullName: ()
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
