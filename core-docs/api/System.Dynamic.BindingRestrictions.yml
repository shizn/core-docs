items:
- uid: System.Dynamic.BindingRestrictions
  commentId: T:System.Dynamic.BindingRestrictions
  id: BindingRestrictions
  parent: System.Dynamic
  children:
  - System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})
  - System.Dynamic.BindingRestrictions.Empty
  - System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)
  - System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)
  - System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)
  - System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)
  - System.Dynamic.BindingRestrictions.ToExpression
  langs:
  - csharp
  - vb
  name: BindingRestrictions
  fullName: System.Dynamic.BindingRestrictions
  type: Class
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BindingRestrictions
    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
    startLine: 15
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Represents a set of binding restrictions on the <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> under which the dynamic binding is valid.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (BindingRestrictions.BindingRestrictionsProxy))]

      [DebuggerDisplay("{DebugView}")]

      public abstract class BindingRestrictions
    content.vb: >-
      <DebuggerTypeProxy(GetType(BindingRestrictions.BindingRestrictionsProxy))>

      <DebuggerDisplay("{DebugView}")>

      Public MustInherit Class BindingRestrictions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Dynamic.BindingRestrictions.Empty
  commentId: F:System.Dynamic.BindingRestrictions.Empty
  id: Empty
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.Dynamic.BindingRestrictions.Empty
  type: Field
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
    startLine: 22
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Represents an empty set of binding restrictions. This field is read only.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]

      public static readonly BindingRestrictions Empty
    content.vb: >-
      <SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")>

      Public Shared ReadOnly Empty As BindingRestrictions
    return:
      type: System.Dynamic.BindingRestrictions
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})
  commentId: M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})
  id: Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: Combine(IList<DynamicMetaObject>)
  fullName: System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject>)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Combine
    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
    startLine: 118
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Combines binding restrictions from the list of <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> instances into one set of restrictions.</p>\n"
  example:
  - 
  syntax:
    content: public static BindingRestrictions Combine(IList<DynamicMetaObject> contributingObjects)
    content.vb: Public Shared Function Combine(contributingObjects As IList(Of DynamicMetaObject)) As BindingRestrictions
    parameters:
    - id: contributingObjects
      type: System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}
      description: The list of <xref href="System.Dynamic.DynamicMetaObject" data-throw-if-not-resolved="false"></xref> instances from which to combine restrictions.
    return:
      type: System.Dynamic.BindingRestrictions
      description: The new set of binding restrictions.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList(Of System.Dynamic.DynamicMetaObject))
  name.vb: Combine(IList(Of DynamicMetaObject))
- uid: System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)
  id: GetExpressionRestriction(System.Linq.Expressions.Expression)
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: GetExpressionRestriction(Expression)
  fullName: System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetExpressionRestriction
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 24
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Creates the binding restriction that checks the expression for arbitrary immutable properties.</p>\n"
  remarks: "\n<p>By convention, the general restrictions created by this method must only test immutable object properties.</p>\n"
  example:
  - 
  syntax:
    content: public static BindingRestrictions GetExpressionRestriction(Expression expression)
    content.vb: Public Shared Function GetExpressionRestriction(expression As Expression) As BindingRestrictions
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>The expression representing the restrictions.</p>\n"
    return:
      type: System.Dynamic.BindingRestrictions
      description: "\n<p>The new binding restrictions.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)
  commentId: M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)
  id: GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: GetInstanceRestriction(Expression, Object)
  fullName: System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInstanceRestriction
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 25
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Creates the binding restriction that checks the expression for object instance identity.</p>\n"
  example:
  - 
  syntax:
    content: public static BindingRestrictions GetInstanceRestriction(Expression expression, object instance)
    content.vb: Public Shared Function GetInstanceRestriction(expression As Expression, instance As Object) As BindingRestrictions
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>The expression to test.</p>\n"
    - id: instance
      type: System.Object
      description: "\n<p>The exact object instance to test.</p>\n"
    return:
      type: System.Dynamic.BindingRestrictions
      description: "\n<p>The new binding restrictions.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)
  id: GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: GetTypeRestriction(Expression, Type)
  fullName: System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeRestriction
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 26
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Creates the binding restriction that check the expression for runtime type identity.</p>\n"
  example:
  - 
  syntax:
    content: public static BindingRestrictions GetTypeRestriction(Expression expression, Type type)
    content.vb: Public Shared Function GetTypeRestriction(expression As Expression, type As Type) As BindingRestrictions
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>The expression to test.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The exact type to test.</p>\n"
    return:
      type: System.Dynamic.BindingRestrictions
      description: "\n<p>The new binding restrictions.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)
  commentId: M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)
  id: Merge(System.Dynamic.BindingRestrictions)
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: Merge(BindingRestrictions)
  fullName: System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Merge
    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
    startLine: 40
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Merges the set of binding restrictions with the current binding restrictions.</p>\n"
  example:
  - 
  syntax:
    content: public BindingRestrictions Merge(BindingRestrictions restrictions)
    content.vb: Public Function Merge(restrictions As BindingRestrictions) As BindingRestrictions
    parameters:
    - id: restrictions
      type: System.Dynamic.BindingRestrictions
      description: The set of restrictions with which to merge the current binding restrictions.
    return:
      type: System.Dynamic.BindingRestrictions
      description: The new set of binding restrictions.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Dynamic.BindingRestrictions.ToExpression
  commentId: M:System.Dynamic.BindingRestrictions.ToExpression
  id: ToExpression
  parent: System.Dynamic.BindingRestrictions
  langs:
  - csharp
  - vb
  name: ToExpression()
  fullName: System.Dynamic.BindingRestrictions.ToExpression()
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToExpression
    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs
    startLine: 186
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Creates the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> representing the binding restrictions.</p>\n"
  example:
  - 
  syntax:
    content: public Expression ToExpression()
    content.vb: Public Function ToExpression As Expression
    return:
      type: Expression
      description: The expression tree representing the restrictions.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Dynamic
  isExternal: false
  name: System.Dynamic
  fullName: System.Dynamic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Dynamic.BindingRestrictions
  parent: System.Dynamic
  isExternal: false
  name: BindingRestrictions
  fullName: System.Dynamic.BindingRestrictions
- uid: System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DynamicMetaObject>
  fullName: System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject>
  fullname.vb: System.Collections.Generic.IList(Of System.Dynamic.DynamicMetaObject)
  name.vb: IList(Of DynamicMetaObject)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Dynamic.DynamicMetaObject
    name: DynamicMetaObject
    fullName: System.Dynamic.DynamicMetaObject
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Dynamic.DynamicMetaObject
    name: DynamicMetaObject
    fullName: System.Dynamic.DynamicMetaObject
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
