items:
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  id: ArraySegment`1
  parent: System
  children:
  - System.ArraySegment`1.#ctor(`0[])
  - System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  - System.ArraySegment`1.Array
  - System.ArraySegment`1.Count
  - System.ArraySegment`1.Equals(System.ArraySegment{`0})
  - System.ArraySegment`1.Equals(System.Object)
  - System.ArraySegment`1.GetHashCode
  - System.ArraySegment`1.Offset
  - System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  - System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ArraySegment<T>
  fullName: System.ArraySegment<T>
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArraySegment
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 27
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Delimits a section of a one-dimensional array.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> is a wrapper around an array that delimits a range of elements in that array. Multiple <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instances can refer to the same original array and can overlap. The original array must be one-dimensional and must have zero-based indexing. </p>\n<p>\n<xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Generic.IReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure did not implement this interface. </p>\n<p>The <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure is useful whenever the elements of an array will be manipulated in distinct segments. For example: </p>\n<ul><li>\n<p>You can pass an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> object that represents only a portion of an array as an argument to a method, rather than call a relatively expensive method like <xref href=\"System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to pass a copy of a portion of an array.  </p>\n</li><li>\n<p>In a multithreaded app, you can use the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure to have each thread operate on only a portion of the array. </p>\n</li><li>\n<p>For task-based asynchronous operations, you can use an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> object to ensure that each task operates on a distinct segment of the array. The following example divides an array into individual segments with up to ten elements. Each element in the segment is multiplied by its segment number. The result shows that using the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> class to manipulate elements in this way changes the values of its underlying array. </p>System.ArraySegment#2</li></ul>\n<p>Note, however, that although the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure can be used to divide an array into distinct segments, the segments are not completely independent of one another. The <xref href=\"System.ArraySegment`1.Array\" data-throw-if-not-resolved=\"false\"></xref> property returns the entire original array, not a copy of the array; therefore, changes made to the array returned by the <xref href=\"System.ArraySegment`1.Array\" data-throw-if-not-resolved=\"false\"></xref> property are made to the original array. If this is undesirable, you should perform operations on a copy of the array, rather than an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> object that represents a portion of the array. </p>\n<p>The<xref href=\"System.ArraySegment`1.Equals(System.ArraySegment{`0})\" data-throw-if-not-resolved=\"false\"></xref> method and the equality and inequality operators test for reference equality when they compare two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> objects. For two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> objects to be considered equal, they must meet all of the following conditions: </p>\n<ul><li>\n<p>Reference the same array. </p>\n</li><li>\n<p>Begin at the same index in the array. </p>\n</li><li>\n<p>Have the same number of elements. </p>\n</li></ul>\n<p>If you want to retrieve an element by its index in the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> object, you must cast it to an <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> object and retrieve it or modify it by using the <xref href=\"System.Collections.Generic.IList`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. The following example retrieves the element in an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> object that delimits a section of a string array. </p>System.ArraySegment.Class#1"
  example:
  - "\n<p>The following code example passes an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure to a method.</p>System.ArraySegment#1"
  syntax:
    content: >-
      [Serializable]

      public struct ArraySegment<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
    content.vb: >-
      <Serializable>

      Public Structure ArraySegment(Of T)
          Implements IList(Of T), ICollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
  seealso:
  - type: System.Array
    commentId: T:System.Array
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
- uid: System.ArraySegment`1.#ctor(`0[])
  commentId: M:System.ArraySegment`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ArraySegment(T[])
  fullName: System.ArraySegment<T>.ArraySegment(T[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 34
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure that delimits all the elements in the specified array.</p>\n"
  remarks: "\n<p>This constructor creates an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> that delimits all the elements of <em>array</em>. That is, the <xref href=\"System.ArraySegment`1.Offset\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> is 0 and its <xref href=\"System.ArraySegment`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property is the length of <em>array</em>. To create an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> that delimits only part of an array, use the <xref href=\"System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>The original array must be one-dimensional and must have zero-based indexing.</p>\n<p>Multiple <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instances can refer to the same original array and can overlap.</p>\n"
  example:
  - "\n<p>The following code example passes an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure to a method.</p>System.ArraySegment#1"
  syntax:
    content: public ArraySegment(T[] array)
    content.vb: Public Sub New(array As T())
    parameters:
    - id: array
      type: '{T}[]'
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ArraySegment(Of T).ArraySegment(T())
  name.vb: ArraySegment(T())
- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  commentId: M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  id: '#ctor(`0[],System.Int32,System.Int32)'
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ArraySegment(T[], Int32, Int32)
  fullName: System.ArraySegment<T>.ArraySegment(T[], System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 45
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure that delimits the specified range of the elements in the specified array.</p>\n"
  remarks: "\n<p>The original array must be one-dimensional and must have zero-based indexing.</p>\n<p>Multiple <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instances can refer to the same original array and can overlap.</p>\n"
  example:
  - "\n<p>The following code example passes an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure to a method.</p>System.ArraySegment#1"
  syntax:
    content: public ArraySegment(T[] array, int offset, int count)
    content.vb: Public Sub New(array As T(), offset As Integer, count As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>offset</em> and <em>count</em> do not specify a valid range in <em>array</em>.</p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ArraySegment(Of T).ArraySegment(T(), System.Int32, System.Int32)
  name.vb: ArraySegment(T(), Int32, Int32)
- uid: System.ArraySegment`1.Array
  commentId: P:System.ArraySegment`1.Array
  id: Array
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Array
  fullName: System.ArraySegment<T>.Array
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Array
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 62
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the original array containing the range of elements that the array segment delimits.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ArraySegment`1.Array\" data-throw-if-not-resolved=\"false\"></xref> property returns the original array, not a copy of the array; therefore, changes made through the property are made directly to the original array. </p>\n"
  example:
  - "\n<p>The following code example passes an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> to a method.</p>System.ArraySegment#1"
  syntax:
    content: public T[] Array { get; }
    content.vb: Public ReadOnly Property Array As T()
    parameters: []
    return:
      type: '{T}[]'
  seealso:
  - type: System.Array
    commentId: T:System.Array
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).Array
- uid: System.ArraySegment`1.Count
  commentId: P:System.ArraySegment`1.Count
  id: Count
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.ArraySegment<T>.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 93
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the number of elements in the range delimited by the array segment.</p>\n"
  example:
  - "\n<p>The following code example passes an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure to a method.</p>System.ArraySegment#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.ArraySegment`1.Offset
    commentId: P:System.ArraySegment`1.Offset
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).Count
- uid: System.ArraySegment`1.Offset
  commentId: P:System.ArraySegment`1.Offset
  id: Offset
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Offset
  fullName: System.ArraySegment<T>.Offset
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Offset
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</p>\n"
  example:
  - "\n<p>The following code example passes an <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure to a method.</p>System.ArraySegment#1"
  syntax:
    content: public int Offset { get; }
    content.vb: Public ReadOnly Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.ArraySegment`1.Count
    commentId: P:System.ArraySegment`1.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).Offset
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 210
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value that indicates whether the array segment  is read-only.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.Item[Int32]
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.this[]
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 143
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> interface, as the following example shows.</p>System.ArraySegment.Class#1"
  syntax:
    content: T IList<T>.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the array segment is read-only.</p>\n"
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  commentId: P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IReadOnlyList<T>.Item[Int32]
  fullName: System.ArraySegment<T>.System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IReadOnlyList<T>.this[]
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 194
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the element at the specified index of the array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IReadOnlyList`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: T IReadOnlyList<T>.this[int index] { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyList<T>.Item(index As Integer) As T Implements IReadOnlyList(Of T).this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set.</p>\n"
  implements:
  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IReadOnlyList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IReadOnlyList<T>.Item(Int32)
- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})
  commentId: M:System.ArraySegment`1.Equals(System.ArraySegment{`0})
  id: Equals(System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Equals(ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equals(System.ArraySegment<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 127
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the specified <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structure is equal to the current instance.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> objects are considered to be equal if all the following conditions are met: </p>\n<ul><li>\n<p>They reference the same array. </p>\n</li><li>\n<p>They begin at the same index in the array. </p>\n</li><li>\n<p>They have the same number of elements. </p>\n</li></ul>\n"
  syntax:
    content: public bool Equals(ArraySegment<T> obj)
    content.vb: Public Function Equals(obj As ArraySegment(Of T)) As Boolean
    parameters:
    - id: obj
      type: System.ArraySegment`1
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ArraySegment(Of T).Equals(System.ArraySegment(Of T))
  name.vb: Equals(ArraySegment(Of T))
- uid: System.ArraySegment`1.Equals(System.Object)
  commentId: M:System.ArraySegment`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ArraySegment<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 119
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the specified object is equal to the current instance.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> objects are considered to be equal if all the following conditions are met: </p>\n<ul><li>\n<p>They reference the same array. </p>\n</li><li>\n<p>They begin at the same index in the array. </p>\n</li><li>\n<p>They have the same number of elements. </p>\n</li></ul>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.ArraySegment(Of T).Equals(System.Object)
- uid: System.ArraySegment`1.GetHashCode
  commentId: M:System.ArraySegment`1.GetHashCode
  id: GetHashCode
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ArraySegment<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 112
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for the current instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.ArraySegment(Of T).GetHashCode()
- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  commentId: M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Equality(ArraySegment<T>, ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equality(System.ArraySegment<T>, System.ArraySegment<T>)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 132
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structures are equal.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> objects are considered to be equal if all the following conditions are met: </p>\n<ul><li>\n<p>They reference the same array. </p>\n</li><li>\n<p>They begin at the same index. </p>\n</li><li>\n<p>They have the same number of elements. </p>\n</li></ul>\n"
  syntax:
    content: public static bool operator ==(ArraySegment<T> a, ArraySegment<T> b)
    content.vb: Public Shared Operator =(a As ArraySegment(Of T), b As ArraySegment(Of T)) As Boolean
    parameters:
    - id: a
      type: System.ArraySegment`1
    - id: b
      type: System.ArraySegment`1
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ArraySegment(Of T).Equality(System.ArraySegment(Of T), System.ArraySegment(Of T))
  name.vb: Equality(ArraySegment(Of T), ArraySegment(Of T))
- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  commentId: M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Inequality(ArraySegment<T>, ArraySegment<T>)
  fullName: System.ArraySegment<T>.Inequality(System.ArraySegment<T>, System.ArraySegment<T>)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 137
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> structures are unequal.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> objects are considered to be unequal if they are of the same closed generic type but any of the following conditions is true: </p>\n<ul><li>\n<p>They do not reference the same array. </p>\n</li><li>\n<p>They have different starting indexes. </p>\n</li><li>\n<p>They have a different number of elements. </p>\n</li></ul>\n"
  syntax:
    content: public static bool operator !=(ArraySegment<T> a, ArraySegment<T> b)
    content.vb: Public Shared Operator <>(a As ArraySegment(Of T), b As ArraySegment(Of T)) As Boolean
    parameters:
    - id: a
      type: System.ArraySegment`1
    - id: b
      type: System.ArraySegment`1
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ArraySegment(Of T).Inequality(System.ArraySegment(Of T), System.ArraySegment(Of T))
  name.vb: Inequality(ArraySegment(Of T), ArraySegment(Of T))
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 220
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds an item to the array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The array segment is read-only.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 225
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all items from the array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The array segment is read-only. </p>\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  id: System#Collections#Generic#ICollection{T}#Contains(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Contains(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Contains
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 230
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the array segment contains a specific value.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: bool ICollection<T>.Contains(T item)
    content.vb: Function System.Collections.Generic.ICollection<T>.Contains(item As T) As Boolean Implements ICollection(Of T).Contains
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  name.vb: System.Collections.Generic.ICollection<T>.Contains(T)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.CopyTo
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 244
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies the elements of the array segment to an array, starting at the specified array index.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or-</p>\n<p>The number of elements in the source array segment is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\n<p>-or-</p>\n<p>Type <em>T</em> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 253
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes the first occurrence of a specific object from the array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: bool ICollection<T>.Remove(T item)
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The array segment is read-only.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.ArraySegment<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 260
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an enumerator that iterates through the array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  id: System#Collections#Generic#IList{T}#IndexOf(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.IndexOf(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.IndexOf
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 168
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines the index of a specific item in the array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: int IList<T>.IndexOf(T item)
    content.vb: Function System.Collections.Generic.IList<T>.IndexOf(item As T) As Integer Implements IList(Of T).IndexOf
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  name.vb: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.Insert(Int32, T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.Insert
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 182
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Inserts an item into the array segment at the specified index.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: void IList<T>.Insert(int index, T item)
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the array segment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The array segment is read-only.</p>\n"
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.RemoveAt(Int32)
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.RemoveAt
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 187
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes the array segment item at the specified index.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: void IList<T>.RemoveAt(int index)
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
    parameters:
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the array segment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The array segment is read-only.</p>\n"
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 271
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an enumerator that iterates through an array segment.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.ArraySegment(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection{{T}}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList{{T}}
  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  fullName: System.ArraySegment<T>
  fullname.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList<T>.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList`1
  isExternal: true
  name: Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList<T>.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: true
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
