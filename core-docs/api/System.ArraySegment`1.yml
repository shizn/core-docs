items:
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  id: ArraySegment`1
  parent: System
  children:
  - System.ArraySegment`1.#ctor(`0[])
  - System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  - System.ArraySegment`1.Array
  - System.ArraySegment`1.Count
  - System.ArraySegment`1.Equals(System.ArraySegment{`0})
  - System.ArraySegment`1.Equals(System.Object)
  - System.ArraySegment`1.GetHashCode
  - System.ArraySegment`1.Offset
  - System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  - System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ArraySegment<T>
  fullName: System.ArraySegment<T>
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArraySegment
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 27
  assemblies:
  - System.Runtime
  namespace: System
  summary: Delimits a section of a one-dimensional array.
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct ArraySegment<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure ArraySegment(Of T)
          Implements IList(Of T), ICollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: The type of the elements in the array segment.
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
- uid: System.ArraySegment`1.#ctor(`0[])
  commentId: M:System.ArraySegment`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ArraySegment(T[])
  fullName: System.ArraySegment<T>.ArraySegment(T[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 34
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structure that delimits all the elements in the specified array.
  syntax:
    content: public ArraySegment(T[] array)
    content.vb: Public Sub New(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: The array to wrap.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ArraySegment(Of T).ArraySegment(T())
  name.vb: ArraySegment(T())
- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  commentId: M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  id: '#ctor(`0[],System.Int32,System.Int32)'
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ArraySegment(T[], Int32, Int32)
  fullName: System.ArraySegment<T>.ArraySegment(T[], System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 45
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structure that delimits the specified range of the elements in the specified array.
  syntax:
    content: public ArraySegment(T[] array, int offset, int count)
    content.vb: Public Sub New(array As T(), offset As Integer, count As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The array containing the range of elements to delimit.
    - id: offset
      type: System.Int32
      description: The zero-based index of the first element in the range.
    - id: count
      type: System.Int32
      description: The number of elements in the range.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>count</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>offset</em> and <em>count</em> do not specify a valid range in <em>array</em>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ArraySegment(Of T).ArraySegment(T(), System.Int32, System.Int32)
  name.vb: ArraySegment(T(), Int32, Int32)
- uid: System.ArraySegment`1.Array
  commentId: P:System.ArraySegment`1.Array
  id: Array
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Array
  fullName: System.ArraySegment<T>.Array
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Array
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 62
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the original array containing the range of elements that the array segment delimits.
  syntax:
    content: public T[] Array { get; }
    content.vb: Public ReadOnly Property Array As T()
    parameters: []
    return:
      type: '{T}[]'
      description: The original array that was passed to the constructor, and that contains the range delimited by the <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).Array
- uid: System.ArraySegment`1.Count
  commentId: P:System.ArraySegment`1.Count
  id: Count
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.ArraySegment<T>.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 93
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the number of elements in the range delimited by the array segment.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements in the range delimited by the <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).Count
- uid: System.ArraySegment`1.Offset
  commentId: P:System.ArraySegment`1.Offset
  id: Offset
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Offset
  fullName: System.ArraySegment<T>.Offset
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Offset
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.
  syntax:
    content: public int Offset { get; }
    content.vb: Public ReadOnly Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
      description: The position of the first element in the range delimited by the <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref>, relative to the start of the original array.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).Offset
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 210
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a value that indicates whether the array segment  is read-only.
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the array segment is read-only; otherwise, false.
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.Item[Int32]
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.this[]
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 143
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets or sets the element at the specified index.
  syntax:
    content: T IList<T>.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: '{T}'
      description: The element at the specified index.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is not a valid index in the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set and the array segment is read-only.
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  commentId: P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IReadOnlyList<T>.Item[Int32]
  fullName: System.ArraySegment<T>.System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IReadOnlyList<T>.this[]
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 194
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the element at the specified index of the array segment.
  syntax:
    content: T IReadOnlyList<T>.this[int index] { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyList<T>.Item(index As Integer) As T Implements IReadOnlyList(Of T).this
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: '{T}'
      description: The element at the specified index.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is not a valid index in the <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set.
  implements:
  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IReadOnlyList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IReadOnlyList<T>.Item(Int32)
- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})
  commentId: M:System.ArraySegment`1.Equals(System.ArraySegment{`0})
  id: Equals(System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Equals(ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equals(System.ArraySegment<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 127
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the specified <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structure is equal to the current instance.
  syntax:
    content: public bool Equals(ArraySegment<T> obj)
    content.vb: Public Function Equals(obj As ArraySegment(Of T)) As Boolean
    parameters:
    - id: obj
      type: System.ArraySegment`1
      description: The structure to compare with the current instance.
    return:
      type: System.Boolean
      description: true if the specified <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structure is equal to the current instance; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ArraySegment(Of T).Equals(System.ArraySegment(Of T))
  name.vb: Equals(ArraySegment(Of T))
- uid: System.ArraySegment`1.Equals(System.Object)
  commentId: M:System.ArraySegment`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ArraySegment<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 119
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the specified object is equal to the current instance.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to be compared with the current instance.
    return:
      type: System.Boolean
      description: true if the specified object is a <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structure and is equal to the current instance; otherwise, false.
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.ArraySegment(Of T).Equals(System.Object)
- uid: System.ArraySegment`1.GetHashCode
  commentId: M:System.ArraySegment`1.GetHashCode
  id: GetHashCode
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ArraySegment<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 112
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns the hash code for the current instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.ArraySegment(Of T).GetHashCode()
- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  commentId: M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Equality(ArraySegment<T>, ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equality(System.ArraySegment<T>, System.ArraySegment<T>)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 132
  assemblies:
  - System.Runtime
  namespace: System
  summary: Indicates whether two <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structures are equal.
  syntax:
    content: public static bool operator ==(ArraySegment<T> a, ArraySegment<T> b)
    content.vb: Public Shared Operator =(a As ArraySegment(Of T), b As ArraySegment(Of T)) As Boolean
    parameters:
    - id: a
      type: System.ArraySegment`1
      description: The  structure on the left side of the equality operator.
    - id: b
      type: System.ArraySegment`1
      description: The structure on the right side of the equality operator.
    return:
      type: System.Boolean
      description: true if <em>a</em> is equal to <em>b</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ArraySegment(Of T).Equality(System.ArraySegment(Of T), System.ArraySegment(Of T))
  name.vb: Equality(ArraySegment(Of T), ArraySegment(Of T))
- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  commentId: M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: Inequality(ArraySegment<T>, ArraySegment<T>)
  fullName: System.ArraySegment<T>.Inequality(System.ArraySegment<T>, System.ArraySegment<T>)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 137
  assemblies:
  - System.Runtime
  namespace: System
  summary: Indicates whether two <xref href="System.ArraySegment`1" data-throw-if-not-resolved="false"></xref> structures are unequal.
  syntax:
    content: public static bool operator !=(ArraySegment<T> a, ArraySegment<T> b)
    content.vb: Public Shared Operator <>(a As ArraySegment(Of T), b As ArraySegment(Of T)) As Boolean
    parameters:
    - id: a
      type: System.ArraySegment`1
      description: The structure on the left side of the inequality operator.
    - id: b
      type: System.ArraySegment`1
      description: The structure on the right side of the inequality operator.
    return:
      type: System.Boolean
      description: true if <em>a</em> is not equal to <em>b</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ArraySegment(Of T).Inequality(System.ArraySegment(Of T), System.ArraySegment(Of T))
  name.vb: Inequality(ArraySegment(Of T), ArraySegment(Of T))
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 220
  assemblies:
  - System.Runtime
  namespace: System
  summary: Adds an item to the array segment.
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
      description: The object to add to the array segment.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 225
  assemblies:
  - System.Runtime
  namespace: System
  summary: Removes all items from the array segment.
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The array segment is read-only. '
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  id: System#Collections#Generic#ICollection{T}#Contains(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Contains(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Contains
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 230
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the array segment contains a specific value.
  syntax:
    content: bool ICollection<T>.Contains(T item)
    content.vb: Function System.Collections.Generic.ICollection<T>.Contains(item As T) As Boolean Implements ICollection(Of T).Contains
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the array segment.
    return:
      type: System.Boolean
      description: true if <em>item</em> is found in the array segment; otherwise, false.
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  name.vb: System.Collections.Generic.ICollection<T>.Contains(T)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.CopyTo
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 244
  assemblies:
  - System.Runtime
  namespace: System
  summary: Copies the elements of the array segment to an array, starting at the specified array index.
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional array that is the destination of the elements copied from the array segment. The array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>arrayIndex</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>array</em> is multidimensional.-or-The number of elements in the source array segment is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.-or-Type <em>T</em> cannot be cast automatically to the type of the destination <em>array</em>."
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 253
  assemblies:
  - System.Runtime
  namespace: System
  summary: Removes the first occurrence of a specific object from the array segment.
  syntax:
    content: bool ICollection<T>.Remove(T item)
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
    parameters:
    - id: item
      type: '{T}'
      description: The object to remove from the array segment.
    return:
      type: System.Boolean
      description: true if <em>item</em> was successfully removed from the array segment; otherwise, false. This method also returns false if <em>item</em> is not found in the array segment.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.ArraySegment<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 260
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns an enumerator that iterates through the array segment.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator that can be used to iterate through the array segment.
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  id: System#Collections#Generic#IList{T}#IndexOf(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.IndexOf(T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.IndexOf
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 168
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines the index of a specific item in the array segment.
  syntax:
    content: int IList<T>.IndexOf(T item)
    content.vb: Function System.Collections.Generic.IList<T>.IndexOf(item As T) As Integer Implements IList(Of T).IndexOf
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the array segment.
    return:
      type: System.Int32
      description: The index of <em>item</em> if found in the list; otherwise, -1.
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  name.vb: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.Insert(Int32, T)
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.Insert
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 182
  assemblies:
  - System.Runtime
  namespace: System
  summary: Inserts an item into the array segment at the specified index.
  syntax:
    content: void IList<T>.Insert(int index, T item)
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <em>item</em> should be inserted.
    - id: item
      type: '{T}'
      description: The object to insert into the array segment.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is not a valid index in the array segment."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IList<T>.RemoveAt(Int32)
  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.RemoveAt
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 187
  assemblies:
  - System.Runtime
  namespace: System
  summary: Removes the array segment item at the specified index.
  syntax:
    content: void IList<T>.RemoveAt(int index)
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is not a valid index in the array segment."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/ArraySegment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/ArraySegment.cs
    startLine: 271
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns an enumerator that iterates through an array segment.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that can be used to iterate through the array segment.
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.ArraySegment(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.ICollection<>
  fullName: System.Collections.Generic.ICollection<>
  fullname.vb: System.Collections.Generic.ICollection(Of )
  name.vb: Generic.ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: Generic.ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: Generic.ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<>
  fullName: System.Collections.Generic.IReadOnlyList<>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection{{T}}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList{{T}}
  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList`1
  isExternal: false
  name: Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<>
  fullName: System.ArraySegment<>
  fullname.vb: System.ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: false
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList<T>.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList<T>.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
