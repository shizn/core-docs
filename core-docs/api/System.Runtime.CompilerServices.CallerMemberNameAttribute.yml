items:
- uid: System.Runtime.CompilerServices.CallerMemberNameAttribute
  commentId: T:System.Runtime.CompilerServices.CallerMemberNameAttribute
  id: CallerMemberNameAttribute
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor
  langs:
  - csharp
  - vb
  name: CallerMemberNameAttribute
  fullName: System.Runtime.CompilerServices.CallerMemberNameAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/CallerMemberNameAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CallerMemberNameAttribute
    path: src/mscorlib/src/System/Runtime/CompilerServices/CallerMemberNameAttribute.cs
    startLine: 9
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Allows you to obtain the method or property name of the caller to the method.</p>\n"
  remarks: "\n<p>You apply the CallerMemberName attribute to an optional parameter that has a default value. You must specify an explicit default value for the optional parameter. You can't apply this attribute to parameters that aren't specified as optional.</p>\n<p>For more information, see Caller Information (C# and Visual Basic).</p>\n<p>You can use the CallerMemberName attribute to avoid specifying the member name as a <strong>String</strong> argument to the called method. By using this technique, you avoid the problem that Rename Refactoring doesn't change the <strong>String</strong> values. This is especially useful for the following tasks:</p>\n<ul><li>\n<p>Using tracing and diagnostic routines.</p>\n</li><li>\n<p>Implementing the <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface when binding data. This interface allows the property of an object to notify a bound control that the property has changed, so that the control can display the updated information. Without the CallerMemberName attribute, you must specify the property name as a literal.</p>\n</li></ul>\n<p>The following chart shows the member names that are returned when you use the CallerMemberName attribute.</p>\n<table><tbody><tr><td>\n<p>Call occurs within</p>\n</td><td>\n<p>Member name result</p>\n</td></tr><tr><td>\n<p>Method, property, or event</p>\n</td><td>\n<p>The name of the method, property, or event from which the call originated.</p>\n</td></tr><tr><td>\n<p>Constructor</p>\n</td><td>\n<p>The string \".ctor\"</p>\n</td></tr><tr><td>\n<p>Static constructor</p>\n</td><td>\n<p>The string \".cctor\"</p>\n</td></tr><tr><td>\n<p>Destructor</p>\n</td><td>\n<p>The string \"Finalize\"</p>\n</td></tr><tr><td>\n<p>User-defined operators or conversions</p>\n</td><td>\n<p>The generated name for the member, for example, \"op_Addition\".</p>\n</td></tr><tr><td>\n<p>Attribute constructor</p>\n</td><td>\n<p>The name of the member to which the attribute is applied. If the attribute is any element within a member (such as a parameter, a return value, or a generic type parameter), this result is the name of the member that's associated with that element.</p>\n</td></tr><tr><td>\n<p>No containing member (for example, assembly-level or attributes applied to types)</p>\n</td><td>\n<p>The default value of the optional parameter.</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example shows how to use the CallerMemberName attribute. On each call to the <code>TraceMessage</code> method, the caller information is substituted as an argument to the optional parameter.</p>csProgGuideAttributes#51"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]

      public sealed class CallerMemberNameAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Parameter, Inherited:=False)>

      Public NotInheritable Class CallerMemberNameAttribute
          Inherits Attribute
          Implements _Attribute
  seealso:
  - type: System.Runtime.CompilerServices.CallerFilePathAttribute
    commentId: T:System.Runtime.CompilerServices.CallerFilePathAttribute
  - type: System.Runtime.CompilerServices.CallerLineNumberAttribute
    commentId: T:System.Runtime.CompilerServices.CallerLineNumberAttribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 2048
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor
  commentId: M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.CompilerServices.CallerMemberNameAttribute
  langs:
  - csharp
  - vb
  name: CallerMemberNameAttribute()
  fullName: System.Runtime.CompilerServices.CallerMemberNameAttribute.CallerMemberNameAttribute()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/CallerMemberNameAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/CompilerServices/CallerMemberNameAttribute.cs
    startLine: 12
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.CallerMemberNameAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CallerMemberNameAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
