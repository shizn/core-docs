items:
- uid: System.Reflection.AssemblyKeyFileAttribute
  commentId: T:System.Reflection.AssemblyKeyFileAttribute
  id: AssemblyKeyFileAttribute
  parent: System.Reflection
  children:
  - System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)
  - System.Reflection.AssemblyKeyFileAttribute.KeyFile
  langs:
  - csharp
  - vb
  name: AssemblyKeyFileAttribute
  fullName: System.Reflection.AssemblyKeyFileAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyKeyFileAttribute
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 239
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Specifies the name of a file containing the key pair used to generate a strong name.</p>\n"
  remarks: "\n<p>When building a strong-named assembly, the author must supply either this attribute or <xref href=\"System.Reflection.AssemblyKeyNameAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Reflection.AssemblyDelaySignAttribute\" data-throw-if-not-resolved=\"false\"></xref> has also been specified, it is likely that this file will only contain the public key.</p>\n<p>An example of the syntax is <code>[assembly:AssemblyKeyFileAttribute(\"myKey.snk\")]</code>.</p>\n<p>Since the path and file name persist, ensure that the string you use with <strong>AssemblyKeyFileAttribute</strong> does not contain sensitive information.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Reflection.AssemblyDelaySignAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute with the <xref href=\"System.Reflection.AssemblyKeyFileAttribute\" data-throw-if-not-resolved=\"false\"></xref>. To compile this example, you must create a strong-name key file named TestPublicKey.snk using the Sn.exe (Strong Name Tool):</p>\n<pre><code>sn -k TestPublicKey.snk </code></pre>\n<p>Compile the example as a .dll. If you compile from the command line, use the <strong>/t:library</strong> option for C# or Visual Basic, or the <strong>/LD</strong> linker option for Visual C++.</p>AssemblyDelaySignattribute#1"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]

      [ComVisible(true)]

      public sealed class AssemblyKeyFileAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>

      <ComVisible(True)>

      Public NotInheritable Class AssemblyKeyFileAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)
  commentId: M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Reflection.AssemblyKeyFileAttribute
  langs:
  - csharp
  - vb
  name: AssemblyKeyFileAttribute(String)
  fullName: System.Reflection.AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 245
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <strong>AssemblyKeyFileAttribute</strong> class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.</p>\n"
  remarks: "\n<p>There is no default path for the <xref href=\"System.Reflection.AssemblyKeyFileAttribute\" data-throw-if-not-resolved=\"false\"></xref> constructor. The value set by the constructor is interpreted by the linker, or by Microsoft Visual Studio 2005, that invokes the linker. </p>\n<p>The default setting for the Al.exe (Assembly Linker) tool assumes that the key file is in the current directory. In Visual Studio 2005, the Visual Basic and Visual C# compilers build and link to subdirectories of the project directory, so if you put the key file in the project directory the relative path might be \"..\\..\\keyfile.snk\" or \"..\\keyfile.snk\" in Visual Basic, or \"..\\\\..\\\\keyfile.snk\" or \"..\\\\keyfile.snk\" in C#. For C#, this attribute can be set in the project properties.</p>\n<p>Because the path and file name persist, ensure that the string you use with <strong>AssemblyKeyFileAttribute</strong> does not contain sensitive information.</p>\n"
  syntax:
    content: public AssemblyKeyFileAttribute(string keyFile)
    content.vb: Public Sub New(keyFile As String)
    parameters:
    - id: keyFile
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyKeyFileAttribute.KeyFile
  commentId: P:System.Reflection.AssemblyKeyFileAttribute.KeyFile
  id: KeyFile
  parent: System.Reflection.AssemblyKeyFileAttribute
  langs:
  - csharp
  - vb
  name: KeyFile
  fullName: System.Reflection.AssemblyKeyFileAttribute.KeyFile
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: KeyFile
    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs
    startLine: 250
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</p>\n"
  remarks: "\n<p>Because the path and file name persist, ensure that the string you use with <strong>AssemblyKeyFileAttribute</strong> does not contain sensitive information.</p>\n"
  syntax:
    content: public string KeyFile { get; }
    content.vb: Public ReadOnly Property KeyFile As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
