items:
- uid: System.Globalization.IdnMapping
  commentId: T:System.Globalization.IdnMapping
  id: IdnMapping
  parent: System.Globalization
  children:
  - System.Globalization.IdnMapping.#ctor
  - System.Globalization.IdnMapping.AllowUnassigned
  - System.Globalization.IdnMapping.Equals(System.Object)
  - System.Globalization.IdnMapping.GetAscii(System.String)
  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  - System.Globalization.IdnMapping.GetHashCode
  - System.Globalization.IdnMapping.GetUnicode(System.String)
  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  - System.Globalization.IdnMapping.UseStd3AsciiRules
  langs:
  - csharp
  - vb
  name: IdnMapping
  fullName: System.Globalization.IdnMapping
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IdnMapping
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 71
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</p>\n"
  remarks: "\n<p>An Internet domain name consists of one or more parts, called domain name labels, separated by label separators. For example, the domain name \"www.proseware.com\" consists of the labels, \"www\", \"proseware\", and \"com\", separated by periods. Standard domain names consist of designated characters in the US-ASCII (or Basic Latin) character range, from U+0021 to U+007E. To facilitate Internet usage in cultures that do not use the US-ASCII character set, the Internationalizing Domain Names in Applications (IDNA) standard was adopted in 2003 to support the inclusion of Unicode characters outside the US-ASCII character range. However, name servers and domain name resolution continue to rely on characters within the US-ASCII character range.</p>\n<p>The IDNA mechanism uses Punycode to map an internationalized domain name that contains Unicode characters outside the US-ASCII character range to the US-ASCII character range supported by the domain name system. The IDNA mechanism is used to convert only domain names, not data transmitted over the Internet. </p>\n<p>In the .NET Framework 4.5, the <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> class supports different versions of the IDNA standard, depending on the operating system in use: </p>\n<ul><li>\n<p>When run on Windows 8, it supports the 2008 version of the IDNA standard outlined by <see href=\"http://go.microsoft.com/fwlink/?LinkId=231875\">RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol</see>. </p>\n</li><li>\n<p>When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by <see href=\"http://go.microsoft.com/fwlink/?LinkId=158110\">RFC 3490: Internationalizing Domain Names in Applications (IDNA)</see>.</p>\n</li></ul>\n<p>See <see href=\"http://go.microsoft.com/fwlink/?LinkId=232459\">Unicode Technical Standard #46: IDNA Compatibility Processing</see> for the differences in the way these standards handle particular sets of characters.</p>\n<p>The <see cref=\"Overload:System.Globalization.IdnMapping.GetAscii\"></see> method normalizes a domain name, converts the normalized name to a representation that consists of displayable Unicode characters in the US-ASCII code point range (U+0020 to U+007E), and prepends an ASCII-compatible encoding (ACE) prefix (\"xn--\") to each label. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method restores the domain name labels converted by the <see cref=\"Overload:System.Globalization.IdnMapping.GetAscii\"></see> method. </p>\n<p>If the string to be converted includes the label separator characters IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61), the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method converts them to the label separator FULL STOP (period, U+002E). The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, however, does not restore the original label separator character.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an array of internationalized domain names to Punycode. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then converts the Punycode domain name back to the original domain name, but replaces the original label separators with the standard label separator.</p>System.Globalization.IdnMapping.Class#1"
  syntax:
    content: public sealed class IdnMapping
    content.vb: Public NotInheritable Class IdnMapping
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Globalization.IdnMapping.#ctor
  commentId: M:System.Globalization.IdnMapping.#ctor
  id: '#ctor'
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: IdnMapping()
  fullName: System.Globalization.IdnMapping.IdnMapping()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 89
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties are initialized to <strong>false</strong>. A small subset of ASCII characters other than A-Z, 0-9, the hyphen (-) character (U+002D), and the period (.) character are permitted in domain names, but unassigned Unicode code points are not. </p>\n"
  example:
  - 
  syntax:
    content: public IdnMapping()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.AllowUnassigned
  commentId: P:System.Globalization.IdnMapping.AllowUnassigned
  id: AllowUnassigned
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: AllowUnassigned
  fullName: System.Globalization.IdnMapping.AllowUnassigned
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AllowUnassigned
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 93
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>A registered domain name cannot contain unassigned code points. Consequently, the default value of the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. The IDNA specification permits unassigned code points only in queries for matching strings (that is, in domain name lookup). For more information about the use of unassigned code points in domain names, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=231873\">RFC 3454, \"Preparation of Internationalized Strings (stringprep)\"</see> and <see href=\"http://go.microsoft.com/fwlink/?LinkId=231875\">RFC 5891, \"Internationalized Domain Names in Applications (IDNA): Protocol\"</see>.</p>\n<p>If the<xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, the behavior associated with the property depends on the underlying operating system. On Windows 8, the <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> class conforms to IDNA 2008, which is based on the Unicode 6.0 standard. On previous versions of Windows, the <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> class is based on IDNA 2003, which is based on Unicode 3.x. Some code points that were unassigned in IDNA 2003 have been assigned characters and are supported in IDNA 2008. For example, U+0221 was introduced in Unicode 4.0. On Windows 8, it is encoded as \"xnâ€”6la\". On previous versions of Windows, it throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> exception.</p>\n"
  example:
  - 
  syntax:
    content: public bool AllowUnassigned { get; set; }
    content.vb: Public Property AllowUnassigned As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules
  commentId: P:System.Globalization.IdnMapping.UseStd3AsciiRules
  id: UseStd3AsciiRules
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: UseStd3AsciiRules
  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UseStd3AsciiRules
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 106
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Domain names that follow standard naming rules consist of a specific subset of characters in the US-ASCII character range. The characters are the letters A through Z, the digits 0 through 9, the hyphen (-) character (U+002D), and the period (.) character. The case of the characters is not significant. Relaxed naming conventions allow the use of a broader range of ASCII characters, including the space character (U+0020), the exclamation point character (U+0021), and the underbar character (U+005F). If <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, only standard characters can appear in a label returned by the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>By default, the value of the <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, and an expanded subset of ASCII characters is permitted in a label.</p>\n<p>The <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> class prohibits the use of the nondisplayable characters U+0000 through U+001F, and U+007F in domain name labels regardless of the setting of the <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property. This prohibition reduces the risk of security attacks such as name spoofing.</p>\n"
  example:
  - "\n<p>The following example generates URLs that contain characters in the ASCII range from U+0000 to U+007F and passes them to the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method of two <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects. One object has its <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property set to <strong>true</strong>, and the other object has it set to <strong>false</strong>. The output displays the characters that are invalid when the <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> but valid when it is <strong>false</strong>.</p>System.Globalization.IdnMapping.UseStd3AsciiRules#1"
  syntax:
    content: public bool UseStd3AsciiRules { get; set; }
    content.vb: Public Property UseStd3AsciiRules As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.Equals(System.Object)
  commentId: M:System.Globalization.IdnMapping.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Globalization.IdnMapping.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 331
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Indicates whether a specified object and the current <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> object are equal.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.IdnMapping.GetAscii(System.String)
  commentId: M:System.Globalization.IdnMapping.GetAscii(System.String)
  id: GetAscii(System.String)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetAscii(String)
  fullName: System.Globalization.IdnMapping.GetAscii(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAscii
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 120
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</p>\n"
  remarks: "\n<p>The <em>unicode</em> parameter specifies a string of one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The <em>unicode</em> parameter cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods. </p>\n<p>A label cannot contain any of the following characters: </p>\n<ul><li>\n<p>Unicode control characters from U+0001 through U+001F, and U+007F.</p>\n</li><li>\n<p>Unassigned Unicode characters, if the value of the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n</li><li>\n<p>Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, if the value of the <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. </p>\n</li><li>\n<p>Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=231873\">RFC 3454: Preparation of Internationalized Strings (\"stringprep\")</see> for IDNA 2003, and <see href=\"http://go.microsoft.com/fwlink/?LinkId=231877\">RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications</see> for IDNA 2008.</p>\n</li></ul>\n<p>The <see cref=\"Overload:System.Globalization.IdnMapping.GetAscii\"></see> method converts all label separators to FULL STOP (period, U+002E). </p>\n<p>If <em>unicode</em> contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns <em>unicode</em> unchanged.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an array of internationalized domain names to Punycode, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.</p>System.Globalization.IdnMapping.Class#1"
  syntax:
    content: public string GetAscii(string unicode)
    content.vb: Public Function GetAscii(unicode As String) As String
    parameters:
    - id: unicode
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>unicode</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>unicode</em> is invalid based on the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties, and the IDNA standard.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  commentId: M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  id: GetAscii(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetAscii(String, Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAscii
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 125
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.  </p>\n"
  remarks: "\n<p>The <em>unicode</em> and <em>index</em> parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods. </p>\n<p>A label cannot contain any of the following characters: </p>\n<ul><li>\n<p>Unicode control characters from U+0001 through U+001F, and U+007F.</p>\n</li><li>\n<p>Unassigned Unicode characters, depending on the value of the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=231873\">RFC 3454: Preparation of Internationalized Strings (\"stringprep\")</see> for IDNA 2003, and <see href=\"http://go.microsoft.com/fwlink/?LinkId=231877\">RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications</see> for IDNA 2008.</p>\n</li></ul>\n<p>The <see cref=\"Overload:System.Globalization.IdnMapping.GetAscii\"></see> method converts all label separators to FULL STOP (period, U+002E). </p>\n<p>If <em>unicode</em> contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns <em>unicode</em> unchanged.</p>\n"
  example:
  - "\n<p>The following example removes the local part and the @ character from an email address, and passes the resulting domain name to the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to create a Punycode domain name, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.</p>System.Globalization.IdnMapping.GetAscii#2"
  syntax:
    content: public string GetAscii(string unicode, int index)
    content.vb: Public Function GetAscii(unicode As String, index As Integer) As String
    parameters:
    - id: unicode
      type: System.String
    - id: index
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>unicode</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than the length of <em>unicode</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>unicode</em> is invalid based on the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties, and the IDNA standard.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  id: GetAscii(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetAscii(String, Int32, Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAscii
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 132
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard. </p>\n"
  remarks: "\n<p>The <em>Unicode</em>, <em>index</em>, and <em>count</em> parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods. </p>\n<p>A label cannot contain any of the following characters: </p>\n<ul><li>\n<p>Unicode control characters from U+0001 through U+001F, and U+007F.</p>\n</li><li>\n<p>Unassigned Unicode characters, depending on the value of the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=231873\">RFC 3454: Preparation of Internationalized Strings (\"stringprep\")</see> for IDNA 2003, and <see href=\"http://go.microsoft.com/fwlink/?LinkId=231877\">RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications</see> for IDNA 2008.</p>\n</li></ul>\n<p>The <see cref=\"Overload:System.Globalization.IdnMapping.GetAscii\"></see> method converts all label separators to FULL STOP (period, U+002E). If the substring contains no characters outside the US-ASCII character range, and no characters within the US-ASCII character range are prohibited, the method returns the substring unchanged.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an internationalized domain name to a domain name that complies with the IDNA standard. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then converts the standardized domain name back into the original domain name, but replaces the original label separators with the standard label separator.</p>IdnMapping.GetX#1"
  syntax:
    content: public string GetAscii(string unicode, int index, int count)
    content.vb: Public Function GetAscii(unicode As String, index As Integer, count As Integer) As String
    parameters:
    - id: unicode
      type: System.String
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>unicode</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than the length of <em>unicode</em>.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than the length of <em>unicode</em> minus <em>count</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>unicode</em> is invalid based on the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties, and the IDNA standard.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.GetHashCode
  commentId: M:System.Globalization.IdnMapping.GetHashCode
  id: GetHashCode
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Globalization.IdnMapping.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 344
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Returns a hash code for this <xref href=\"System.Globalization.IdnMapping\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Override the <xref href=\"System.Globalization.IdnMapping.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method if your application needs to implement a meaningful hash code algorithm.</p>\n"
  example:
  - "\n<p>The following example assumes that a single string can contain multiple email addresses separated by spaces. It removes the local part and the @ character from each email address, and passes the resulting domain name to the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to create a Punycode domain name. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then converts the Punycode domain name back into the original domain name.</p>System.Globalization.IdnMapping.GetAscii#3"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.IdnMapping.GetUnicode(System.String)
  commentId: M:System.Globalization.IdnMapping.GetUnicode(System.String)
  id: GetUnicode(System.String)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetUnicode(String)
  fullName: System.Globalization.IdnMapping.GetUnicode(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnicode
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 243
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters. </p>\n"
  remarks: "\n<p>For more information about domain names, labels, and label separators, see the remarks for the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an array of internationalized domain names to Punycode. The <xref href=\"System.Globalization.IdnMapping.GetUnicode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator. </p>System.Globalization.IdnMapping.Class#1"
  syntax:
    content: public string GetUnicode(string ascii)
    content.vb: Public Function GetUnicode(ascii As String) As String
    parameters:
    - id: ascii
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ascii</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ascii</em> is invalid based on the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties, and the IDNA standard.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  commentId: M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  id: GetUnicode(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetUnicode(String, Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnicode
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 248
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters. </p>\n"
  remarks: "\n<p>For more information about domain names, labels, and label separators, see the remarks for the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public string GetUnicode(string ascii, int index)
    content.vb: Public Function GetUnicode(ascii As String, index As Integer) As String
    parameters:
    - id: ascii
      type: System.String
    - id: index
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ascii</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than the length of <em>ascii</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ascii</em> is invalid based on the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties, and the IDNA standard.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  id: GetUnicode(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  - vb
  name: GetUnicode(String, Int32, Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/IdnMapping.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnicode
    path: src/mscorlib/src/System/Globalization/IdnMapping.cs
    startLine: 255
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Globalization
  summary: "\n<p>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters. </p>\n"
  remarks: "\n<p>For more information about domain names, labels, and label separators, see the remarks for the <xref href=\"System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public string GetUnicode(string ascii, int index, int count)
    content.vb: Public Function GetUnicode(ascii As String, index As Integer, count As Integer) As String
    parameters:
    - id: ascii
      type: System.String
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ascii</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than the length of <em>ascii</em>.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than the length of <em>ascii</em> minus <em>count</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ascii</em> is invalid based on the <xref href=\"System.Globalization.IdnMapping.AllowUnassigned\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.IdnMapping.UseStd3AsciiRules\" data-throw-if-not-resolved=\"false\"></xref> properties, and the IDNA standard.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
