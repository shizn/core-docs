items:
- uid: System.Collections.IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
  id: IDictionaryEnumerator
  parent: System.Collections
  children:
  - System.Collections.IDictionaryEnumerator.Entry
  - System.Collections.IDictionaryEnumerator.Key
  - System.Collections.IDictionaryEnumerator.Value
  langs:
  - csharp
  - vb
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IDictionaryEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2316
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Enumerates the elements of a nongeneric dictionary.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. The <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method also brings the enumerator back to this position. At this position, calling the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property throws an exception. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>This code example shows how to define a dictionary enumerator that implements the <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>Dictionary#1"
  syntax:
    content: 'public interface IDictionaryEnumerator : IEnumerator'
    content.vb: >-
      Public Interface IDictionaryEnumerator
          Inherits IEnumerator
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  inheritedMembers:
  - System.Collections.IEnumerator.Current
  - System.Collections.IEnumerator.MoveNext
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IDictionaryEnumerator.Entry
  commentId: P:System.Collections.IDictionaryEnumerator.Entry
  id: Entry
  parent: System.Collections.IDictionaryEnumerator
  langs:
  - csharp
  - vb
  name: Entry
  fullName: System.Collections.IDictionaryEnumerator.Entry
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Entry
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2318
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets both the key and the value of the current dictionary entry.</p>\n"
  remarks: "\n<p>After an enumerator is created or after the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref href=\"System.Collections.IDictionaryEnumerator.Entry\" data-throw-if-not-resolved=\"false\"></xref> property; otherwise, <xref href=\"System.Collections.IDictionaryEnumerator.Entry\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Collections.IDictionaryEnumerator.Entry\" data-throw-if-not-resolved=\"false\"></xref> also throws an exception if the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n<p>\n<xref href=\"System.Collections.IDictionaryEnumerator.Entry\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Collections.IDictionaryEnumerator.Entry\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  syntax:
    content: DictionaryEntry Entry { get; }
    content.vb: ReadOnly Property Entry As DictionaryEntry
    parameters: []
    return:
      type: System.Collections.DictionaryEntry
      description: "\n<p>A <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> containing both the key and the value of the current dictionary entry.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IDictionaryEnumerator.Key
    commentId: P:System.Collections.IDictionaryEnumerator.Key
  - type: System.Collections.IDictionaryEnumerator.Value
    commentId: P:System.Collections.IDictionaryEnumerator.Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IDictionaryEnumerator.Key
  commentId: P:System.Collections.IDictionaryEnumerator.Key
  id: Key
  parent: System.Collections.IDictionaryEnumerator
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Collections.IDictionaryEnumerator.Key
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2319
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets the key of the current dictionary entry.</p>\n"
  remarks: "\n<p>After an enumerator is created or after the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref href=\"System.Collections.IDictionaryEnumerator.Key\" data-throw-if-not-resolved=\"false\"></xref> property; otherwise, <xref href=\"System.Collections.IDictionaryEnumerator.Key\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Collections.IDictionaryEnumerator.Key\" data-throw-if-not-resolved=\"false\"></xref> also throws an exception if the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n<p>\n<xref href=\"System.Collections.IDictionaryEnumerator.Key\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Collections.IDictionaryEnumerator.Key\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  syntax:
    content: object Key { get; }
    content.vb: ReadOnly Property Key As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The key of the current element of the enumeration.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IDictionaryEnumerator.Value
    commentId: P:System.Collections.IDictionaryEnumerator.Value
  - type: System.Collections.IDictionaryEnumerator.Entry
    commentId: P:System.Collections.IDictionaryEnumerator.Entry
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IDictionaryEnumerator.Value
  commentId: P:System.Collections.IDictionaryEnumerator.Value
  id: Value
  parent: System.Collections.IDictionaryEnumerator
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Collections.IDictionaryEnumerator.Value
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2320
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets the value of the current dictionary entry.</p>\n"
  remarks: "\n<p>After an enumerator is created or after the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> property; otherwise, <xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> also throws an exception if the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n<p>\n<xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  syntax:
    content: object Value { get; }
    content.vb: ReadOnly Property Value As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The value of the current element of the enumeration.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IDictionaryEnumerator.Key
    commentId: P:System.Collections.IDictionaryEnumerator.Key
  - type: System.Collections.IDictionaryEnumerator.Entry
    commentId: P:System.Collections.IDictionaryEnumerator.Entry
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: false
  name: Current
  fullName: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: false
  name: MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: false
  name: Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.DictionaryEntry
  parent: System.Collections
  isExternal: false
  name: DictionaryEntry
  fullName: System.Collections.DictionaryEntry
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
