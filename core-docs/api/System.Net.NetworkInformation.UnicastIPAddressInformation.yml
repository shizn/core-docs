items:
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation
  commentId: T:System.Net.NetworkInformation.UnicastIPAddressInformation
  id: UnicastIPAddressInformation
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor
  - System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime
  - System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime
  - System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime
  - System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState
  - System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask
  - System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength
  - System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin
  - System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin
  langs:
  - csharp
  - vb
  name: UnicastIPAddressInformation
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnicastIPAddressInformation
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 418
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about a network interface's unicast address.</p>\n"
  remarks: "\n<p>You do not create instances of this class; instances are returned in the array returned by the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: 'public abstract class UnicastIPAddressInformation : IPAddressInformation'
    content.vb: >-
      Public MustInherit Class UnicastIPAddressInformation
          Inherits IPAddressInformation
  inheritance:
  - System.Object
  - System.Net.NetworkInformation.IPAddressInformation
  inheritedMembers:
  - System.Net.NetworkInformation.IPAddressInformation.Address
  - System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  - System.Net.NetworkInformation.IPAddressInformation.IsTransient
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor
  commentId: M:System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: UnicastIPAddressInformation()
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.UnicastIPAddressInformation()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 420
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.UnicastIPAddressInformation\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor can be called only by classes that derive from the <xref href=\"System.Net.NetworkInformation.UnicastIPAddressInformation\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected UnicastIPAddressInformation()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime
  id: AddressPreferredLifetime
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: AddressPreferredLifetime
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressPreferredLifetime
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 421
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of seconds remaining during which this address is the preferred address.</p>\n"
  remarks: "\n<p>Use the value returned by this property to determine how long the preferred address remains valid. Whenever possible, applications should use a preferred address. Use <xref href=\"System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState\" data-throw-if-not-resolved=\"false\"></xref> to determine the preferred address.</p>\n"
  syntax:
    content: public abstract long AddressPreferredLifetime { get; }
    content.vb: Public MustOverride ReadOnly Property AddressPreferredLifetime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the number of seconds left for this address to remain preferred.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime
  id: AddressValidLifetime
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: AddressValidLifetime
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressValidLifetime
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 422
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of seconds remaining during which this address is valid.</p>\n"
  remarks: "\n<p>Use the value returned by this property to determine whether this address can be used by your application. Whenever possible, applications should use a preferred address. Use <xref href=\"System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState\" data-throw-if-not-resolved=\"false\"></xref> to determine the preferred address.</p>\n"
  syntax:
    content: public abstract long AddressValidLifetime { get; }
    content.vb: Public MustOverride ReadOnly Property AddressValidLifetime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the number of seconds left for this address to remain assigned.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime
  id: DhcpLeaseLifetime
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: DhcpLeaseLifetime
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DhcpLeaseLifetime
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 423
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.</p>\n"
  remarks: "\n<p>Dynamic Host Configuration Protocol (DHCP) allows a computer to obtain a network address from a DHCP server, as opposed to using a static (fixed) network address. The DHCP server does not permanently assign addresses; instead, it \"leases\" one of a number of available addresses to the computer. Within a specified amount of time, known as the lease lifetime for the address, the computer releases the address, leaving the DHCP server free to assign it to a different computer.</p>\n<p>This property returns the number of seconds left in the lease lifetime for the IP address identified in the <xref href=\"System.Net.NetworkInformation.IPAddressInformation.Address\" data-throw-if-not-resolved=\"false\"></xref> property. Note that the computer can send requests to the DHCP server to extend its lease, so the lease lifetime can increase over time.</p>\n"
  syntax:
    content: public abstract long DhcpLeaseLifetime { get; }
    content.vb: Public MustOverride ReadOnly Property DhcpLeaseLifetime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that contains the number of seconds remaining before the computer must release the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState
  id: DuplicateAddressDetectionState
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: DuplicateAddressDetectionState
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DuplicateAddressDetectionState
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 424
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that indicates the state of the duplicate address detection algorithm.</p>\n"
  remarks: "\n<p>To ensure that all network interfaces on a network have a unique address, the interface host is responsible for running a \"duplicate address detection\" algorithm on unicast addresses. The purpose of this algorithm is to attempt to prevent non-unique addresses on the network. This process is defined in IETF RFC 1971.</p>\n"
  syntax:
    content: public abstract DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    content.vb: Public MustOverride ReadOnly Property DuplicateAddressDetectionState As DuplicateAddressDetectionState
    parameters: []
    return:
      type: System.Net.NetworkInformation.DuplicateAddressDetectionState
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.DuplicateAddressDetectionState\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the progress of the algorithm in determining the uniqueness of this IP address.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask
  id: IPv4Mask
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: IPv4Mask
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv4Mask
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 425
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the IPv4 mask.</p>\n"
  syntax:
    content: public abstract IPAddress IPv4Mask { get; }
    content.vb: Public MustOverride ReadOnly Property IPv4Mask As IPAddress
    parameters: []
    return:
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object that contains the IPv4 mask.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength
  id: PrefixLength
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: PrefixLength
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrefixLength
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 426
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the length, in bits, of the prefix or network part of the IP address.</p>\n"
  syntax:
    content: public virtual int PrefixLength { get; }
    content.vb: Public Overridable ReadOnly Property PrefixLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>the length, in bits, of the prefix or network part of the IP address.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin
  id: PrefixOrigin
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: PrefixOrigin
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrefixOrigin
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 427
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that identifies the source of a unicast Internet Protocol (IP) address prefix.</p>\n"
  remarks: "\n<p>IP addresses are divided into two parts: the prefix and the suffix. The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion. Prefixes are assigned by global authorities, and suffixes are assigned by local system administrators.</p>\n"
  syntax:
    content: public abstract PrefixOrigin PrefixOrigin { get; }
    content.vb: Public MustOverride ReadOnly Property PrefixOrigin As PrefixOrigin
    parameters: []
    return:
      type: System.Net.NetworkInformation.PrefixOrigin
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.PrefixOrigin\" data-throw-if-not-resolved=\"false\"></xref> values that identifies how the prefix information was obtained.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin
  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin
  id: SuffixOrigin
  parent: System.Net.NetworkInformation.UnicastIPAddressInformation
  langs:
  - csharp
  - vb
  name: SuffixOrigin
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SuffixOrigin
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 428
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that identifies the source of a unicast Internet Protocol (IP) address suffix.</p>\n"
  remarks: "\n<p>IP addresses are divided into two parts: the prefix and the suffix. The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion. Prefixes are assigned by global authorities, and suffixes are assigned by local system administrators.</p>\n"
  syntax:
    content: public abstract SuffixOrigin SuffixOrigin { get; }
    content.vb: Public MustOverride ReadOnly Property SuffixOrigin As SuffixOrigin
    parameters: []
    return:
      type: System.Net.NetworkInformation.SuffixOrigin
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.SuffixOrigin\" data-throw-if-not-resolved=\"false\"></xref> values that identifies how the suffix information was obtained.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.NetworkInformation.IPAddressInformation
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPAddressInformation
  fullName: System.Net.NetworkInformation.IPAddressInformation
- uid: System.Net.NetworkInformation.IPAddressInformation.Address
  parent: System.Net.NetworkInformation.IPAddressInformation
  isExternal: false
  name: Address
  fullName: System.Net.NetworkInformation.IPAddressInformation.Address
- uid: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  parent: System.Net.NetworkInformation.IPAddressInformation
  isExternal: false
  name: IsDnsEligible
  fullName: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
- uid: System.Net.NetworkInformation.IPAddressInformation.IsTransient
  parent: System.Net.NetworkInformation.IPAddressInformation
  isExternal: false
  name: IsTransient
  fullName: System.Net.NetworkInformation.IPAddressInformation.IsTransient
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Net.NetworkInformation.DuplicateAddressDetectionState
  parent: System.Net.NetworkInformation
  isExternal: false
  name: DuplicateAddressDetectionState
  fullName: System.Net.NetworkInformation.DuplicateAddressDetectionState
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net.NetworkInformation.PrefixOrigin
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PrefixOrigin
  fullName: System.Net.NetworkInformation.PrefixOrigin
- uid: System.Net.NetworkInformation.SuffixOrigin
  parent: System.Net.NetworkInformation
  isExternal: false
  name: SuffixOrigin
  fullName: System.Net.NetworkInformation.SuffixOrigin
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
