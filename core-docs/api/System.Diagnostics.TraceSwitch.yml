items:
- uid: System.Diagnostics.TraceSwitch
  commentId: T:System.Diagnostics.TraceSwitch
  id: TraceSwitch
  parent: System.Diagnostics
  children:
  - System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
  - System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.TraceSwitch.Level
  - System.Diagnostics.TraceSwitch.OnSwitchSettingChanged
  - System.Diagnostics.TraceSwitch.OnValueChanged
  - System.Diagnostics.TraceSwitch.TraceError
  - System.Diagnostics.TraceSwitch.TraceInfo
  - System.Diagnostics.TraceSwitch.TraceVerbose
  - System.Diagnostics.TraceSwitch.TraceWarning
  langs:
  - csharp
  - vb
  name: TraceSwitch
  fullName: System.Diagnostics.TraceSwitch
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceSwitch
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 12
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Provides a multilevel switch to control tracing and debug output without recompiling your code.</p>\n"
  remarks: "\n<p>You can use a trace switch to filter out messages based on their importance. The <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> class provides the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties to test the level of the switch. The <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property gets or sets the switch's <xref href=\"System.Diagnostics.TraceLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You can set the level of a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> through the application configuration file and then use the configured <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> level in your application. Alternately, you can create a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> in your code and set the level directly to instrument a specific section of code.</p>\n<p>To configure a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref>, edit the   for your application. In this file, you can add or remove a switch, set a switch's value, or clear all the switches previously set by the application. The configuration file should be formatted like the following example: </p>\n<pre><code><configuration>\n<system.diagnostics>\n<switches>\n<add name=\"mySwitch\" value=\"1\" />\n</switches>\n</system.diagnostics>\n</configuration></code></pre>\n<p>This configuration section defines a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Diagnostics.Switch.DisplayName\" data-throw-if-not-resolved=\"false\"></xref> set to <code>mySwitch</code>, and the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> set to 1, which corresponds to the enumeration value <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, <code>true</code> for a <xref href=\"System.Diagnostics.BooleanSwitch\" data-throw-if-not-resolved=\"false\"></xref> or the text representing an enumeration value, such as <code>Error</code> for a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref>. The line <code><add name=\"mySwitch\" value=\"Error\" /></code> is equivalent to <code><add name=\"mySwitch\" value=\"1\" /></code>.</p>\n<p> In your application, you can use the configured switch level by creating a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> with the same name, as shown in the following example:</p>Classic TraceSwitch.TraceError Example#3<p>By default, the switch <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set using the value specified in the configuration file. If the <see cref=\"Overload:System.Diagnostics.TraceSwitch.#ctor\"></see> constructor cannot find initial switch settings in the configuration file, the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> of the new switch defaults to <xref href=\"System.Diagnostics.TraceLevel.Off\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>You must enable tracing or debugging to use a switch. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</p><ul><li><p>To enable debugging in C#, add the <strong>/d:DEBUG</strong> flag to the compiler command line when you compile your code, or add <strong>#define DEBUG</strong> to the top of your file. In Visual Basic, add the <strong>/d:DEBUG=True</strong> flag to the compiler command line.</p></li><li><p>To enable tracing in C#, add the <strong>/d:TRACE</strong> flag to the compiler command line when you compile your code, or add <strong>#define TRACE</strong> to the top of your file. In Visual Basic, add the <strong>/d:TRACE=True</strong> flag to the compiler command line.</p></li></ul><p>These debug and trace compiler switches are not required when using the <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> class in isolation. They are only required in conjunction with <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> methods that are conditionally compiled.</p><p>For more information on instrumenting your application, see <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref>. For more information about configuring and using trace switches, see Trace Switches.</p><p>To improve performance, you can make <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> members <strong>static</strong> in your class.</p>"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to print error messages. The switch is created at the class level. <code>MyMethod</code> writes the first error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref> or higher. However, <code>MyMethod</code> does not write the second error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.TraceError Example#1"
  syntax:
    content: 'public class TraceSwitch : Switch'
    content.vb: >-
      Public Class TraceSwitch
          Inherits Switch
  seealso:
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.BooleanSwitch
    commentId: T:System.Diagnostics.BooleanSwitch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  inheritance:
  - System.Object
  - System.Diagnostics.Switch
  inheritedMembers:
  - System.Diagnostics.Switch.Description
  - System.Diagnostics.Switch.DisplayName
  - System.Diagnostics.Switch.SwitchSetting
  - System.Diagnostics.Switch.Value
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
  commentId: M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: TraceSwitch(String, String)
  fullName: System.Diagnostics.TraceSwitch.TraceSwitch(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 17
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified display name and description.</p>\n"
  remarks: "\n<p>To set the level of your <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref>, edit the configuration file that corresponds to the name of your application. In this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. The configuration file should be formatted like the following example: </p>\n<pre><code><configuration>\n<system.diagnostics>\n<switches>\n<add name=\"mySwitch\" value=\"1\" />\n</switches>\n</system.diagnostics>\n</configuration></code></pre>\n<p>In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, <code>true</code> for a <xref href=\"System.Diagnostics.BooleanSwitch\" data-throw-if-not-resolved=\"false\"></xref> or the text representing an enumeration value, such as <code>Error</code> for a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref>. The line <code><add name=\"mySwitch\" value=\"Error\" /></code> is equivalent to <code><add name=\"mySwitch\" value=\"1\" /></code>.</p>\n<p>In your application, you can use the configured switch level by creating a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> with the same name, as shown in the following example:</p>Classic TraceSwitch.TraceError Example#3<p>When the <see cref=\"Overload:System.Diagnostics.TraceSwitch.#ctor\"></see> constructor cannot find initial switch settings in the configuration file, the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property of the new switch is set to <xref href=\"System.Diagnostics.TraceLevel.Off\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>The <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> class provides the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties to test the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> of the switch. The <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property gets or sets the switch's <xref href=\"System.Diagnostics.TraceLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>To improve performance, you can make <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> members <strong>static</strong> in your class.</p>"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to print error messages. The switch is created at the class level. <code>MyMethod</code> writes the first error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref> or higher. However, <code>MyMethod</code> does not write the second error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.TraceError Example#1"
  syntax:
    content: public TraceSwitch(string displayName, string description)
    content.vb: Public Sub New(displayName As String, description As String)
    parameters:
    - id: displayName
      type: System.String
    - id: description
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
  commentId: M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: TraceSwitch(String, String, String)
  fullName: System.Diagnostics.TraceSwitch.TraceSwitch(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 22
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified display name, description, and default value for the switch. </p>\n"
  remarks: "\n<p>The <em>displayName</em> parameter is used to set the value of the <xref href=\"System.Diagnostics.Switch.DisplayName\" data-throw-if-not-resolved=\"false\"></xref> property, the <em>description</em> parameter is use to set the value of the <xref href=\"System.Diagnostics.Switch.Description\" data-throw-if-not-resolved=\"false\"></xref> property, and the <em>defaultSwitchValue</em> parameter is saved as a field and used to initialize the <xref href=\"System.Diagnostics.Switch.Value\" data-throw-if-not-resolved=\"false\"></xref> property on first reference. See the <xref href=\"System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor for more information and a code example.</p>\n"
  syntax:
    content: public TraceSwitch(string displayName, string description, string defaultSwitchValue)
    content.vb: Public Sub New(displayName As String, description As String, defaultSwitchValue As String)
    parameters:
    - id: displayName
      type: System.String
    - id: description
      type: System.String
    - id: defaultSwitchValue
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceSwitch.Level
  commentId: P:System.Diagnostics.TraceSwitch.Level
  id: Level
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: Level
  fullName: System.Diagnostics.TraceSwitch.Level
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Level
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 30
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the trace level that determines the messages the switch allows.</p>\n"
  remarks: "\n<p>To set the level of your <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref>, edit the configuration file that corresponds to the name of your application. In this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. The configuration file should be formatted like the following example: </p>\n<pre><code><configuration>\n<system.diagnostics>\n<switches>\n<add name=\"mySwitch\" value=\"0\" />\n<add name=\"myNewSwitch\" value=\"3\" />\n<remove name=\"mySwitch\" />\n<clear/>\n</switches>\n</system.diagnostics>\n</configuration></code></pre>\n<p>In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, <code>true</code> for a <xref href=\"System.Diagnostics.BooleanSwitch\" data-throw-if-not-resolved=\"false\"></xref> or the text representing an enumeration value, such as <code>Error</code> for a <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref>. The line <code><add name=\"mySwitch\" value=\"Error\" /></code> is equivalent to <code><add name=\"mySwitch\" value=\"1\" /></code>.</p>\n<p>When the <see cref=\"Overload:System.Diagnostics.TraceSwitch.#ctor\"></see> constructor cannot find initial switch settings in the configuration file, the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property of the new switch is set to <xref href=\"System.Diagnostics.TraceLevel.Off\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Setting this property updates the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties to reflect the new value.</p>\n"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to print error messages. The switch is created at the class level. <code>MyMethod</code> writes the first error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref> or higher. However, <code>MyMethod</code> does not write the second error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.Level Example#1"
  syntax:
    content: public TraceLevel Level { get; set; }
    content.vb: Public Property Level As TraceLevel
    parameters: []
    return:
      type: System.Diagnostics.TraceLevel
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is not one of the <xref href=\"System.Diagnostics.TraceLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceSwitch.TraceError
  commentId: P:System.Diagnostics.TraceSwitch.TraceError
  id: TraceError
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: TraceError
  fullName: System.Diagnostics.TraceSwitch.TraceError
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceError
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 51
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the switch allows error-handling messages.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties in conjunction with the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref> classes to emit all messages with a specified importance or greater. When the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to the highest importance, <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref> ,  only error-handling messages are emitted.</p>\n"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to emit error messages. The switch is created at the class level. <code>MyMethod</code> writes the first error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Error\" data-throw-if-not-resolved=\"false\"></xref> or higher. However, <code>MyMethod</code> does not write the second error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.TraceError Example#1"
  syntax:
    content: public bool TraceError { get; }
    content.vb: Public ReadOnly Property TraceError As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.TraceSwitch.TraceInfo
  commentId: P:System.Diagnostics.TraceSwitch.TraceInfo
  id: TraceInfo
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: TraceInfo
  fullName: System.Diagnostics.TraceSwitch.TraceInfo
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceInfo
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 77
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the switch allows informational messages.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties in conjunction with the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref> classes to emit all messages with a specified importance or greater. When the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Warning\" data-throw-if-not-resolved=\"false\"></xref>, informational messages, warnings, and error-handling messages are emitted.</p>\n"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to emit error messages. The switch is created at the class level. <code>MyMethod</code> writes the first error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Info\" data-throw-if-not-resolved=\"false\"></xref> or higher. However, <code>MyMethod</code> does not write the second error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.TraceInfo Example#1"
  syntax:
    content: public bool TraceInfo { get; }
    content.vb: Public ReadOnly Property TraceInfo As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.TraceSwitch.TraceVerbose
  commentId: P:System.Diagnostics.TraceSwitch.TraceVerbose
  id: TraceVerbose
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: TraceVerbose
  fullName: System.Diagnostics.TraceSwitch.TraceVerbose
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceVerbose
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 90
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the switch allows all messages.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties in conjunction with the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref> classes to emit all messages with a specified importance or greater. When the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>, all debugging and tracing messages are transmitted.</p>\n"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to emit error messages. The switch is created at the class level. <code>MyMethod</code> writes both error messages when the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.TraceError Example#1"
  syntax:
    content: public bool TraceVerbose { get; }
    content.vb: Public ReadOnly Property TraceVerbose As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.TraceSwitch.TraceWarning
  commentId: P:System.Diagnostics.TraceSwitch.TraceWarning
  id: TraceWarning
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: TraceWarning
  fullName: System.Diagnostics.TraceSwitch.TraceWarning
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceWarning
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 64
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the switch allows warning messages.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Diagnostics.TraceSwitch.TraceError\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceWarning\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TraceSwitch.TraceInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSwitch.TraceVerbose\" data-throw-if-not-resolved=\"false\"></xref> properties in conjunction with the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref> classes to emit all messages with a specified importance or greater. When the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Warning\" data-throw-if-not-resolved=\"false\"></xref>, warnings and error-handling messages are emitted.</p>\n"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.Diagnostics.TraceSwitch\" data-throw-if-not-resolved=\"false\"></xref> and uses the switch to determine whether to emit error messages. The switch is created at the class level. <code>MyMethod</code> writes the first error message if the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.TraceLevel.Warning\" data-throw-if-not-resolved=\"false\"></xref> or higher. However, <code>MyMethod</code> does not write the second error message when the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Diagnostics.TraceLevel.Verbose\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic TraceSwitch.TraceWarning Example#1"
  syntax:
    content: public bool TraceWarning { get; }
    content.vb: Public ReadOnly Property TraceWarning As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.TraceLevel
    commentId: T:System.Diagnostics.TraceLevel
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged
  commentId: M:System.Diagnostics.TraceSwitch.OnSwitchSettingChanged
  id: OnSwitchSettingChanged
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: OnSwitchSettingChanged()
  fullName: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSwitchSettingChanged
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 103
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Updates and corrects the level for this switch.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.TraceSwitch.OnSwitchSettingChanged\" data-throw-if-not-resolved=\"false\"></xref> method is used by the .NET framework to validate and correct the value of a switch initialized via a configuration file. A message is written to all trace listeners if the switch value specified in the configuration file is not defined by the <xref href=\"System.Diagnostics.TraceLevel\" data-throw-if-not-resolved=\"false\"></xref> enumeration and the switch is set to a defined value.</p>\n<p>If you attempt in your code to set the <xref href=\"System.Diagnostics.TraceSwitch.Level\" data-throw-if-not-resolved=\"false\"></xref> property to a value that is not defined by the <xref href=\"System.Diagnostics.TraceLevel\" data-throw-if-not-resolved=\"false\"></xref> enumeration, an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown.</p>\n"
  syntax:
    content: protected override void OnSwitchSettingChanged()
    content.vb: Protected Overrides Sub OnSwitchSettingChanged
  overridden: System.Diagnostics.Switch.OnSwitchSettingChanged
  seealso:
  - type: System.Diagnostics.TraceSwitch
    commentId: T:System.Diagnostics.TraceSwitch
  - type: System.Diagnostics.Switch
    commentId: T:System.Diagnostics.Switch
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Diagnostics.TraceSwitch.OnValueChanged
  commentId: M:System.Diagnostics.TraceSwitch.OnValueChanged
  id: OnValueChanged
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  - vb
  name: OnValueChanged()
  fullName: System.Diagnostics.TraceSwitch.OnValueChanged()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnValueChanged
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSwitch.cs
    startLine: 118
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Sets the <xref href=\"System.Diagnostics.Switch.SwitchSetting\" data-throw-if-not-resolved=\"false\"></xref> property to the integer equivalent of the <xref href=\"System.Diagnostics.Switch.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>This method is called internally when the <xref href=\"System.Diagnostics.Switch.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the switch changes. The method ensures that the properties relating to the switch's value reflect the new value.</p>\n"
  syntax:
    content: protected override void OnValueChanged()
    content.vb: Protected Overrides Sub OnValueChanged
  overridden: System.Diagnostics.Switch.OnValueChanged
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Diagnostics.Switch
  parent: System.Diagnostics
  isExternal: false
  name: Switch
  fullName: System.Diagnostics.Switch
- uid: System.Diagnostics.Switch.Description
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Description
  fullName: System.Diagnostics.Switch.Description
- uid: System.Diagnostics.Switch.DisplayName
  parent: System.Diagnostics.Switch
  isExternal: false
  name: DisplayName
  fullName: System.Diagnostics.Switch.DisplayName
- uid: System.Diagnostics.Switch.SwitchSetting
  parent: System.Diagnostics.Switch
  isExternal: false
  name: SwitchSetting
  fullName: System.Diagnostics.Switch.SwitchSetting
- uid: System.Diagnostics.Switch.Value
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Value
  fullName: System.Diagnostics.Switch.Value
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Diagnostics.TraceLevel
  parent: System.Diagnostics
  isExternal: false
  name: TraceLevel
  fullName: System.Diagnostics.TraceLevel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnSwitchSettingChanged()
  fullName: System.Diagnostics.Switch.OnSwitchSettingChanged()
  spec.csharp:
  - uid: System.Diagnostics.Switch.OnSwitchSettingChanged
    name: OnSwitchSettingChanged
    fullName: System.Diagnostics.Switch.OnSwitchSettingChanged
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Diagnostics.Switch.OnSwitchSettingChanged
    name: OnSwitchSettingChanged
    fullName: System.Diagnostics.Switch.OnSwitchSettingChanged
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Diagnostics.Switch.OnValueChanged
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnValueChanged()
  fullName: System.Diagnostics.Switch.OnValueChanged()
  spec.csharp:
  - uid: System.Diagnostics.Switch.OnValueChanged
    name: OnValueChanged
    fullName: System.Diagnostics.Switch.OnValueChanged
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Diagnostics.Switch.OnValueChanged
    name: OnValueChanged
    fullName: System.Diagnostics.Switch.OnValueChanged
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
