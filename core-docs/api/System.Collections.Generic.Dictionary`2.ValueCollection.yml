items:
- uid: System.Collections.Generic.Dictionary`2.ValueCollection
  commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection
  id: Dictionary`2.ValueCollection
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  - System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  - System.Collections.Generic.Dictionary`2.ValueCollection.Count
  - System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  langs:
  - csharp
  - vb
  name: Dictionary<TKey, TValue>.ValueCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueCollection
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 130
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents the collection of values in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. This class cannot be inherited. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property returns an instance of this type, containing all the values in that <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.  The order of the values in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated keys in the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Generic.Dictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: 'public sealed class ValueCollection : ICollection<TValue>, IEnumerable<TValue>, IReadOnlyCollection<TValue>, ICollection, IEnumerable'
    content.vb: >-
      Public NotInheritable Class ValueCollection
          Inherits ICollection(Of TValue)
          Implements IEnumerable(Of TValue), IReadOnlyCollection(Of TValue), ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{{TValue}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection
  name.vb: Dictionary(Of TKey, TValue).ValueCollection
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.Dictionary{`0,`1})'
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: ValueCollection(Dictionary<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 132
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> class that reflects the values in the specified <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public ValueCollection(Dictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As Dictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary`2
      description: "\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose values are reflected in the new <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.ValueCollection(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: ValueCollection(Dictionary(Of TKey, TValue))
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Count
  commentId: P:System.Collections.Generic.Dictionary`2.ValueCollection.Count
  id: Count
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 133
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.Count
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: CopyTo(TValue[], Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.CopyTo(TValue[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 137
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> elements to an existing one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified array index.</p>\n"
  remarks: "\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void CopyTo(TValue[] array, int index)
    content.vb: Public Sub CopyTo(array As TValue(), index As Integer)
    parameters:
    - id: array
      type: '{TValue}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.CopyTo(TValue(), System.Int32)
  name.vb: CopyTo(TValue(), Int32)
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 138
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public Dictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Dictionary(Of TKey, TValue).ValueCollection.Enumerator
    return:
      type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
    commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.GetEnumerator()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: Generic.IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{TValue}}
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<TValue>
  fullName: System.Collections.Generic.IReadOnlyCollection<TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of TValue)
  name.vb: Generic.IReadOnlyCollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  fullname.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{TValue}[]'
  isExternal: false
  name: TValue[]
  fullName: TValue[]
  fullname.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    fullName: TValue
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    fullName: TValue
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary.ValueCollection.Enumerator<>
  fullName: System.Collections.Generic.Dictionary.ValueCollection.Enumerator<>
  fullname.vb: System.Collections.Generic.Dictionary.ValueCollection.Enumerator(Of )
  name.vb: Dictionary.ValueCollection.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
    name: Dictionary.ValueCollection.Enumerator
    fullName: System.Collections.Generic.Dictionary.ValueCollection.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
    name: Dictionary.ValueCollection.Enumerator
    fullName: System.Collections.Generic.Dictionary.ValueCollection.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
