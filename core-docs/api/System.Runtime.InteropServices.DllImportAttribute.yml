items:
- uid: System.Runtime.InteropServices.DllImportAttribute
  commentId: T:System.Runtime.InteropServices.DllImportAttribute
  id: DllImportAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)
  - System.Runtime.InteropServices.DllImportAttribute.BestFitMapping
  - System.Runtime.InteropServices.DllImportAttribute.CallingConvention
  - System.Runtime.InteropServices.DllImportAttribute.CharSet
  - System.Runtime.InteropServices.DllImportAttribute.EntryPoint
  - System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
  - System.Runtime.InteropServices.DllImportAttribute.PreserveSig
  - System.Runtime.InteropServices.DllImportAttribute.SetLastError
  - System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar
  - System.Runtime.InteropServices.DllImportAttribute.Value
  langs:
  - csharp
  - vb
  name: DllImportAttribute
  fullName: System.Runtime.InteropServices.DllImportAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DllImportAttribute
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 223
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</p>\n"
  remarks: "\n<p>You can apply this attribute to methods.</p>\n<p>The <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute provides the information needed to call a function exported from an unmanaged DLL. As a minimum requirement, you must supply the name of the DLL containing the entry point.</p>\n<p>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <strong>Declare</strong> statement. For complex method definitions that include <xref href=\"System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CallingConvention\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> fields, you apply this attribute directly to Visual Basic method definitions.</p>\n<p>Note   JScript does not support this attribute. You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</p>\n<p>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see Consuming Unmanaged DLL Functions.</p>\n<p> The <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> does not support marshaling of generic types.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to import the Win32 <strong>MessageBox</strong> function.  The code example then calls the imported method.</p>System.Runtime.InteropServices.DllImport.Canonical#1"
  syntax:
    content: 'public sealed class DllImportAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class DllImportAttribute
          Inherits Attribute
  seealso:
  - type: System.Runtime.InteropServices.DllImportAttribute.SetLastError
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.SetLastError
  - type: System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
  - type: System.Runtime.InteropServices.DllImportAttribute.PreserveSig
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig
  - type: System.Runtime.InteropServices.DllImportAttribute.CallingConvention
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.DllImportAttribute.BestFitMapping
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping
  id: BestFitMapping
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: BestFitMapping
  fullName: System.Runtime.InteropServices.DllImportAttribute.BestFitMapping
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BestFitMapping
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 226
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</p>\n"
  remarks: "\n<p>If <strong>true</strong>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled. The <xref href=\"System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\" data-throw-if-not-resolved=\"false\"></xref> field is <strong>true</strong> by default. Settings for this field override the any level settings for the <xref href=\"System.Runtime.InteropServices.BestFitMappingAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n<p>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.</p>\n<p>Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path. By setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> field to <strong>true</strong>, you can signal the presence of an unmappable character to the caller by throwing an exception.</p>\n<p>You cannot change the default values provided by the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.</p>\n"
  example:
  - "\n<p>In some cases, Visual Basic developers use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref>, instead of the <strong>Declare</strong> statement, to define a DLL function in managed code. Setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\" data-throw-if-not-resolved=\"false\"></xref> field is one of those cases. The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</p>System.Runtime.InteropServices.DllImportAttribute#3"
  syntax:
    content: public bool BestFitMapping
    content.vb: Public BestFitMapping As Boolean
    return:
      type: System.Boolean
  seealso:
  - type: System.Runtime.InteropServices.DllImportAttribute.CharSet
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.CharSet
  - type: System.Runtime.InteropServices.BestFitMappingAttribute
    commentId: T:System.Runtime.InteropServices.BestFitMappingAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.CallingConvention
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention
  id: CallingConvention
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: CallingConvention
  fullName: System.Runtime.InteropServices.DllImportAttribute.CallingConvention
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CallingConvention
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 227
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates the calling convention of an entry point.</p>\n"
  remarks: "\n<p>You set this field to one of the <xref href=\"System.Runtime.InteropServices.CallingConvention\" data-throw-if-not-resolved=\"false\"></xref> enumeration members. The default value for the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CallingConvention\" data-throw-if-not-resolved=\"false\"></xref> field is <xref href=\"System.Runtime.InteropServices.CallingConvention.Winapi\" data-throw-if-not-resolved=\"false\"></xref>, which in turn defaults to <xref href=\"System.Runtime.InteropServices.CallingConvention.StdCall\" data-throw-if-not-resolved=\"false\"></xref> convention.</p>\n<p>For more information, see Calling Convention in the MSDN library.</p>\n"
  example:
  - "\n<p>In some cases, Visual Basic developers use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref>, instead of the <strong>Declare</strong> statement, to define a DLL function in managed code. Setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CallingConvention\" data-throw-if-not-resolved=\"false\"></xref> field is one of those cases.</p>\n<p>System.Runtime.InteropServices.DllImportAttribute#1 </p>\n"
  syntax:
    content: public CallingConvention CallingConvention
    content.vb: Public CallingConvention As CallingConvention
    return:
      type: System.Runtime.InteropServices.CallingConvention
  seealso:
  - type: System.Runtime.InteropServices.CallingConvention
    commentId: T:System.Runtime.InteropServices.CallingConvention
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.CharSet
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.CharSet
  id: CharSet
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: CharSet
  fullName: System.Runtime.InteropServices.DllImportAttribute.CharSet
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CharSet
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 228
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates how to marshal string parameters to the method and controls name mangling.</p>\n"
  remarks: "\n<p>Use this field with a member of the <xref href=\"System.Runtime.InteropServices.CharSet\" data-throw-if-not-resolved=\"false\"></xref> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with \"A\" or \"W\"). The default enumeration member for C# and Visual Basic is <strong>CharSet.Ansi</strong> and the default enumeration member for C++ is <strong>CharSet.None</strong>, which is equivalent to <strong>CharSet.Ansi</strong>. In Visual Basic, you use the <strong>Declare</strong> statement to specify the <strong>CharSet</strong> field.</p>\n<p>The <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\" data-throw-if-not-resolved=\"false\"></xref> field influences the behavior of the <strong>CharSet</strong> field in determining which entry-point name to invoke. For a detailed description and examples of the string marshaling and name matching behavior associated with the <strong>CharSet</strong> field, see Specifying a Character Set.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to import the Win32 <strong>MessageBox</strong> function.  The code example then calls the imported method.</p>System.Runtime.InteropServices.DllImport.Canonical#1"
  syntax:
    content: public CharSet CharSet
    content.vb: Public CharSet As CharSet
    return:
      type: System.Runtime.InteropServices.CharSet
  seealso:
  - type: System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.EntryPoint
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint
  id: EntryPoint
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: EntryPoint
  fullName: System.Runtime.InteropServices.DllImportAttribute.EntryPoint
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EntryPoint
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 229
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates the name or ordinal of the DLL entry point to be called.</p>\n"
  remarks: "\n<p>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal. Ordinals are prefixed with the # sign, for example, #1. If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For additional information, see Identifying Functions in DLLs. For examples showing how to use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.EntryPoint\" data-throw-if-not-resolved=\"false\"></xref> field, see Specifying an Entry Point.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to import the Win32 <strong>MessageBox</strong> function.  The code example uses the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.EntryPoint\" data-throw-if-not-resolved=\"false\"></xref> property to specify the function to import and then changes the name to <code>MyNewMessageBoxMethod</code>.</p>System.Runtime.InteropServices.DllImport.EntryPoint#1"
  syntax:
    content: public string EntryPoint
    content.vb: Public EntryPoint As String
    return:
      type: System.String
  seealso:
  - type: System.Runtime.InteropServices.DllImportAttribute
    commentId: T:System.Runtime.InteropServices.DllImportAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
  id: ExactSpelling
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: ExactSpelling
  fullName: System.Runtime.InteropServices.DllImportAttribute.ExactSpelling
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExactSpelling
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 230
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Controls whether the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\" data-throw-if-not-resolved=\"false\"></xref> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</p>\n"
  remarks: "\n<p>If <strong>false</strong>, the entry point name appended with the letter A is invoked when the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\" data-throw-if-not-resolved=\"false\"></xref> field is set to <strong>CharSet.Ansi</strong>, and the entry-point name appended with the letter W is invoked when the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\" data-throw-if-not-resolved=\"false\"></xref> field is set to the <strong>CharSet.Unicode</strong>. Typically, managed compilers set this field.</p>\n<p>The following table shows the relationship between the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\" data-throw-if-not-resolved=\"false\"></xref> fields, based on default values imposed by the programming language. You can override the default setting, but do so with caution.</p>\n<p>Language </p>\n<p>ANSI </p>\n<p>Unicode </p>\n<p>Auto </p>\n"
  example:
  - "\n<p>In some cases, Visual Basic developers use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref>, instead of using the <strong>Declare</strong> statement, to define a DLL function in managed code. Setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\" data-throw-if-not-resolved=\"false\"></xref> field is one of those cases.</p>System.Runtime.InteropServices.DllImportAttribute#4"
  syntax:
    content: public bool ExactSpelling
    content.vb: Public ExactSpelling As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.PreserveSig
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig
  id: PreserveSig
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: PreserveSig
  fullName: System.Runtime.InteropServices.DllImportAttribute.PreserveSig
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreserveSig
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 231
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates whether unmanaged methods that have <strong>HRESULT</strong> or <strong>retval</strong> return values are directly translated or whether <strong>HRESULT</strong> or <strong>retval</strong> return values are automatically converted to exceptions.</p>\n"
  remarks: "\n<p>Set the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field to <strong>true</strong> to directly translate unmanaged signatures with <strong>HRESULT</strong> or <strong>retval</strong> values; set it to <strong>false</strong> to automatically convert <strong>HRESULT</strong> or <strong>retval</strong> values to exceptions. By default, the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field is <strong>true</strong>.</p>\n<p>When <strong>true</strong>, the resulting method signature returns an integer value that contains the <strong>HRESULT</strong> value.  In this case, you must manually inspect the return value and respond accordingly in your application.  </p>\n<p>When you set the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field to <strong>false</strong>, the resulting method signature contains a void return type instead of an integer (<strong>HRESULT</strong>) return type.  When the unmanaged method produces an <strong>HRESULT</strong>, the runtime automatically ignores a return value of <strong>S_OK</strong> (or 0) and does not throw an exception.  For <strong>HRESULT</strong>s other than <strong>S_OK</strong>, the runtime automatically throws an exception that corresponds to the <strong>HRESULT</strong>.  Note that the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute only performs this conversion to methods that return an <strong>HRESULT</strong>.</p>\n<p>You might decide to change the default error reporting behavior from <strong>HRESULT</strong>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</p>\n<p>This field is similar to the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref>; however, in contrast to the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field, the default value for the attribute is <strong>false</strong>.</p>\n<p>In some cases, Visual Basic developers use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref>, instead of using the <strong>Declare</strong> statement, to define a DLL function in managed code. Setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field is one of those cases.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> to import the unmanaged <strong>SHAutoComplete</strong> function once with the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field set to <strong>true</strong> and again with the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> field set to <strong>false</strong>.  This code example causes the <strong>SHAutoComplete</strong> function to generate any errors with an exception one time and an <strong>HRESULT</strong> the next.</p>Runtime.InteropServices.PreserveSigAttribute#1"
  syntax:
    content: public bool PreserveSig
    content.vb: Public PreserveSig As Boolean
    return:
      type: System.Boolean
  seealso:
  - type: System.Runtime.InteropServices.PreserveSigAttribute
    commentId: T:System.Runtime.InteropServices.PreserveSigAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.SetLastError
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.SetLastError
  id: SetLastError
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: SetLastError
  fullName: System.Runtime.InteropServices.DllImportAttribute.SetLastError
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLastError
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 232
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates whether the callee calls the <strong>SetLastError</strong> Win32 API function before returning from the attributed method.</p>\n"
  remarks: "\n<p>\n<strong>true</strong> to indicate that the callee will call <strong>SetLastError</strong>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n<p>The runtime marshaler calls <strong>GetLastError</strong> and caches the value returned to prevent it from being overwritten by other API calls. You can retrieve the error code by calling <xref href=\"System.Runtime.InteropServices.Marshal.GetLastWin32Error\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>In some cases, Visual Basic developers use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref>, instead of using the <strong>Declare</strong> statement, to define a DLL function in managed code. Setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\" data-throw-if-not-resolved=\"false\"></xref> field is one of those cases.</p>System.Runtime.InteropServices.DllImportAttribute#5"
  syntax:
    content: public bool SetLastError
    content.vb: Public SetLastError As Boolean
    return:
      type: System.Boolean
  seealso:
  - type: System.Runtime.InteropServices.Marshal.GetLastWin32Error
    commentId: M:System.Runtime.InteropServices.Marshal.GetLastWin32Error
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar
  commentId: F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar
  id: ThrowOnUnmappableChar
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: ThrowOnUnmappableChar
  fullName: System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar
  type: Field
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThrowOnUnmappableChar
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 233
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.</p>\n"
  remarks: "\n<p>\n<strong>true</strong> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <strong>false</strong> to indicate that the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> field is disabled. This field is <strong>false</strong> by default.</p>\n<p>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.</p>\n<p>Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path. By setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> field to <strong>true</strong>, you can signal the presence of an unmappable character to the caller by throwing an exception.</p>\n<p>You cannot change the default values provided by the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.</p>\n"
  example:
  - "\n<p>In some cases, Visual Basic developers use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> to define a DLL function in managed code, instead of using the <strong>Declare</strong> statement. Setting the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\" data-throw-if-not-resolved=\"false\"></xref> field is one of those cases. The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</p>System.Runtime.InteropServices.DllImportAttribute#3"
  syntax:
    content: public bool ThrowOnUnmappableChar
    content.vb: Public ThrowOnUnmappableChar As Boolean
    return:
      type: System.Boolean
  seealso:
  - type: System.Runtime.InteropServices.DllImportAttribute.CharSet
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.CharSet
  - type: System.Runtime.InteropServices.DllImportAttribute.BestFitMapping
    commentId: F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)
  commentId: M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: DllImportAttribute(String)
  fullName: System.Runtime.InteropServices.DllImportAttribute.DllImportAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 234
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the name of the DLL containing the method to import.</p>\n"
  remarks: "\n<p>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <strong>/linkresource</strong> compiler option, you can specify the assembly display name as part of <em>dllName</em>. For example, if an unmanaged DLL named <code>unmanaged.dll</code> is included in a managed assembly named <code>MyAssembly</code>, the attribute might be specified as shown in the following code.</p>System.Runtime.InteropServices.DllImportAttribute#2"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to import the Win32 <strong>MessageBox</strong> function.  The code example then calls the imported method.</p>System.Runtime.InteropServices.DllImport.Canonical#1"
  syntax:
    content: public DllImportAttribute(string dllName)
    content.vb: Public Sub New(dllName As String)
    parameters:
    - id: dllName
      type: System.String
      description: "\n<p>The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.DllImportAttribute.Value
  commentId: P:System.Runtime.InteropServices.DllImportAttribute.Value
  id: Value
  parent: System.Runtime.InteropServices.DllImportAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Runtime.InteropServices.DllImportAttribute.Value
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 235
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the name of the DLL file that contains the entry point.</p>\n"
  remarks: "\n<p>You can provide a full or relative path. If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means. Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</p>\n"
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the DLL file that contains the entry point.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.CallingConvention
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CallingConvention
  fullName: System.Runtime.InteropServices.CallingConvention
- uid: System.Runtime.InteropServices.CharSet
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CharSet
  fullName: System.Runtime.InteropServices.CharSet
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
