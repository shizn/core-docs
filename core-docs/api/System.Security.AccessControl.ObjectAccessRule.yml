items:
- uid: System.Security.AccessControl.ObjectAccessRule
  commentId: T:System.Security.AccessControl.ObjectAccessRule
  id: ObjectAccessRule
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.ObjectAccessRule.InheritedObjectType
  - System.Security.AccessControl.ObjectAccessRule.ObjectFlags
  - System.Security.AccessControl.ObjectAccessRule.ObjectType
  langs:
  - csharp
  - vb
  name: ObjectAccessRule
  fullName: System.Security.AccessControl.ObjectAccessRule
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectAccessRule
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 337
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.</p>\n"
  example:
  - 
  syntax:
    content: 'public abstract class ObjectAccessRule : AccessRule'
    content.vb: >-
      Public MustInherit Class ObjectAccessRule
          Inherits AccessRule
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.ObjectAccessRule
  langs:
  - csharp
  - vb
  name: ObjectAccessRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AccessControlType)
  fullName: System.Security.AccessControl.ObjectAccessRule.ObjectAccessRule(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Guid, System.Guid, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 339
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified values.</p>\n"
  example:
  - 
  syntax:
    content: protected ObjectAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AccessControlType type)
    content.vb: Protected Sub New(identity As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectType As Guid, inheritedObjectType As Guid, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity to which the access rule applies.  It must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this rule is inherited from a parent container.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>Specifies the inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: objectType
      type: System.Guid
      description: "\n<p>The type of object to which the rule applies.</p>\n"
    - id: inheritedObjectType
      type: System.Guid
      description: "\n<p>The type of child object that can inherit the rule.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>Specifies whether this rule allows or denies access.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value of the <em>identity</em> parameter cannot be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, or the <em>type</em> parameter contains an invalid value.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>accessMask</em> parameter is 0, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.ObjectAccessRule.InheritedObjectType
  commentId: P:System.Security.AccessControl.ObjectAccessRule.InheritedObjectType
  id: InheritedObjectType
  parent: System.Security.AccessControl.ObjectAccessRule
  langs:
  - csharp
  - vb
  name: InheritedObjectType
  fullName: System.Security.AccessControl.ObjectAccessRule.InheritedObjectType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InheritedObjectType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 340
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type of child object that can inherit the <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public Guid InheritedObjectType { get; }
    content.vb: Public ReadOnly Property InheritedObjectType As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>The type of child object that can inherit the <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.ObjectAccessRule.ObjectFlags
  commentId: P:System.Security.AccessControl.ObjectAccessRule.ObjectFlags
  id: ObjectFlags
  parent: System.Security.AccessControl.ObjectAccessRule
  langs:
  - csharp
  - vb
  name: ObjectFlags
  fullName: System.Security.AccessControl.ObjectAccessRule.ObjectFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 341
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets flags that specify if the <xref href=\"System.Security.AccessControl.ObjectAccessRule.ObjectType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object contain valid values.</p>\n"
  example:
  - 
  syntax:
    content: public ObjectAceFlags ObjectFlags { get; }
    content.vb: Public ReadOnly Property ObjectFlags As ObjectAceFlags
    parameters: []
    return:
      type: System.Security.AccessControl.ObjectAceFlags
      description: "\n<p>\n<xref href=\"System.Security.AccessControl.ObjectAceFlags.ObjectAceTypePresent\" data-throw-if-not-resolved=\"false\"></xref> specifies that the <xref href=\"System.Security.AccessControl.ObjectAccessRule.ObjectType\" data-throw-if-not-resolved=\"false\"></xref> property contains a valid value. <xref href=\"System.Security.AccessControl.ObjectAceFlags.InheritedObjectAceTypePresent\" data-throw-if-not-resolved=\"false\"></xref> specifies that the <xref href=\"System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\" data-throw-if-not-resolved=\"false\"></xref> property contains a valid value. These values can be combined with a logical OR.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.ObjectAccessRule.ObjectType
  commentId: P:System.Security.AccessControl.ObjectAccessRule.ObjectType
  id: ObjectType
  parent: System.Security.AccessControl.ObjectAccessRule
  langs:
  - csharp
  - vb
  name: ObjectType
  fullName: System.Security.AccessControl.ObjectAccessRule.ObjectType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 342
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type of object to which the <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> applies.</p>\n"
  syntax:
    content: public Guid ObjectType { get; }
    content.vb: Public ReadOnly Property ObjectType As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>The type of object to which the <xref href=\"System.Security.AccessControl.ObjectAccessRule\" data-throw-if-not-resolved=\"false\"></xref> applies.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.AuthorizationRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuthorizationRule
  fullName: System.Security.AccessControl.AuthorizationRule
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.AccessControl.AccessRule.AccessControlType
  parent: System.Security.AccessControl.AccessRule
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessRule.AccessControlType
- uid: System.Security.AccessControl.AuthorizationRule.AccessMask
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: AccessMask
  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask
- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: IdentityReference
  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference
- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
- uid: System.Security.AccessControl.AuthorizationRule.IsInherited
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited
- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.ObjectAceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ObjectAceFlags
  fullName: System.Security.AccessControl.ObjectAceFlags
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
