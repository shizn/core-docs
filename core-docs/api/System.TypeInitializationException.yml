items:
- uid: System.TypeInitializationException
  commentId: T:System.TypeInitializationException
  id: TypeInitializationException
  parent: System
  children:
  - System.TypeInitializationException.#ctor(System.String,System.Exception)
  - System.TypeInitializationException.TypeName
  langs:
  - csharp
  - vb
  name: TypeInitializationException
  fullName: System.TypeInitializationException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/TypeInitializationException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypeInitializationException
    path: src/mscorlib/src/System/TypeInitializationException.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.</p>\n"
  remarks: "\n<p>When a class initializer fails to initialize a type, a <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> is created and passed a reference to the exception thrown by the type's class initializer. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> holds the underlying exception.</p>\n<p>Typically, the <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.  Most commonly, the <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown in response to some change in the executing environment of the application. Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a <strong>try</strong>/<strong>catch</strong> block. Instead, the cause of the exception should be investigated and eliminated. </p>\n<p>\n<xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</p>\n<p>For a list of initial property values for an instance of <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.TypeInitializationException.#ctor(System.String,System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>\n<p>The following sections describe some of the situations in which a <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown. </p>\n<p>Static constructors and the TypeInitializationException exceptionRegular expression match timeout valuesCalendars and cultural data</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class TypeInitializationException : SystemException, ISerializable, _Exception
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class TypeInitializationException
          Inherits SystemException
          Implements ISerializable, _Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.TypeInitializationException.#ctor(System.String,System.Exception)
  commentId: M:System.TypeInitializationException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.TypeInitializationException
  langs:
  - csharp
  - vb
  name: TypeInitializationException(String, Exception)
  fullName: System.TypeInitializationException.TypeInitializationException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/TypeInitializationException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/TypeInitializationException.cs
    startLine: 39
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or a null reference (<strong>Nothing</strong> in Visual Basic) if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.TypeInitializationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TypeInitializationException.TypeName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The name of the type. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public TypeInitializationException(string fullTypeName, Exception innerException)
    content.vb: Public Sub New(fullTypeName As String, innerException As Exception)
    parameters:
    - id: fullTypeName
      type: System.String
    - id: innerException
      type: System.Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TypeInitializationException.TypeName
  commentId: P:System.TypeInitializationException.TypeName
  id: TypeName
  parent: System.TypeInitializationException
  langs:
  - csharp
  - vb
  name: TypeName
  fullName: System.TypeInitializationException.TypeName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TypeInitializationException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypeName
    path: src/mscorlib/src/System/TypeInitializationException.cs
    startLine: 48
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the fully qualified name of the type that fails to initialize.</p>\n"
  syntax:
    content: public string TypeName { get; }
    content.vb: Public ReadOnly Property TypeName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
