items:
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  id: EventRegistrationTokenTable`1
  parent: System.Runtime.InteropServices.WindowsRuntime
  children:
  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor
  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)
  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)
  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList
  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)
  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)
  langs:
  - csharp
  - vb
  name: EventRegistrationTokenTable<T>
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EventRegistrationTokenTable
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 15
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.</p>\n"
  remarks: "\n<p>Use this type when you need to manage the addition and removal of events manually. </p>\n<p>An instance of this table stores the delegates that represent the event handlers that have been added to an event. To raise the event, invoke the delegate that is returned by the <xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\" data-throw-if-not-resolved=\"false\"></xref> property, if it is not <strong>null</strong>. An instance of this table is required for each event.</p>\n"
  syntax:
    content: >-
      public sealed class EventRegistrationTokenTable<T>
          where T : class
    content.vb: Public NotInheritable Class EventRegistrationTokenTable(Of T As Class)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T)
  name.vb: EventRegistrationTokenTable(Of T)
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor
  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor
  id: '#ctor'
  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  langs:
  - csharp
  - vb
  name: EventRegistrationTokenTable()
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.EventRegistrationTokenTable()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 24
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public EventRegistrationTokenTable()
    content.vb: Public Sub New
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>T</em> is not a delegate type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).EventRegistrationTokenTable()
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList
  commentId: P:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList
  id: InvocationList
  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  langs:
  - csharp
  - vb
  name: InvocationList
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.InvocationList
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InvocationList
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 36
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Gets or sets a delegate of type <em>T</em> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed. Invoking this delegate invokes all the event handlers. </p>\n"
  syntax:
    content: public T InvocationList { get; set; }
    content.vb: Public Property InvocationList As T
    parameters: []
    return:
      type: '{T}'
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).InvocationList
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)
  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)
  id: AddEventHandler(`0)
  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  langs:
  - csharp
  - vb
  name: AddEventHandler(T)
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.AddEventHandler(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddEventHandler
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 59
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler. </p>\n"
  syntax:
    content: public EventRegistrationToken AddEventHandler(T handler)
    content.vb: Public Function AddEventHandler(handler As T) As EventRegistrationToken
    parameters:
    - id: handler
      type: '{T}'
    return:
      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).AddEventHandler(T)
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)
  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)
  id: GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)
  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  langs:
  - csharp
  - vb
  name: GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T>)
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(ref System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOrCreateEventRegistrationTokenTable
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 245
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Returns the specified event registration token table, if it is not <strong>null</strong>; otherwise, returns a new event registration token table. </p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\" data-throw-if-not-resolved=\"false\"></xref> method to initialize an event registration token table in scenarios where any of several threads can create the table. If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads. </p>\n"
  syntax:
    content: public static EventRegistrationTokenTable<T> GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T> refEventTable)
    content.vb: Public Shared Function GetOrCreateEventRegistrationTokenTable(ByRef refEventTable As EventRegistrationTokenTable(Of T)) As EventRegistrationTokenTable(Of T)
    parameters:
    - id: refEventTable
      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
    return:
      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).GetOrCreateEventRegistrationTokenTable(ByRef System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T))
  name.vb: GetOrCreateEventRegistrationTokenTable(ByRef EventRegistrationTokenTable(Of T))
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)
  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)
  id: RemoveEventHandler(`0)
  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  langs:
  - csharp
  - vb
  name: RemoveEventHandler(T)
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.RemoveEventHandler(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveEventHandler
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 185
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Removes the specified event handler delegate from the table and the invocation list. </p>\n"
  remarks: "\n<p>If the handler is not registered, the table and the invocation list are not modified. </p>\n"
  syntax:
    content: public void RemoveEventHandler(T handler)
    content.vb: Public Sub RemoveEventHandler(handler As T)
    parameters:
    - id: handler
      type: '{T}'
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).RemoveEventHandler(T)
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)
  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)
  id: RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)
  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  langs:
  - csharp
  - vb
  name: RemoveEventHandler(EventRegistrationToken)
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveEventHandler
    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs
    startLine: 171
  assemblies:
  - System.Runtime.InteropServices.WindowsRuntime
  namespace: System.Runtime.InteropServices.WindowsRuntime
  summary: "\n<p>Removes the event handler that is associated with the specified token from the table and the invocation list. </p>\n"
  remarks: "\n<p>If the token is not registered, the table and the invocation list are not modified. </p>\n"
  syntax:
    content: public void RemoveEventHandler(EventRegistrationToken token)
    content.vb: Public Sub RemoveEventHandler(token As EventRegistrationToken)
    parameters:
    - id: token
      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)
references:
- uid: System.Runtime.InteropServices.WindowsRuntime
  isExternal: false
  name: System.Runtime.InteropServices.WindowsRuntime
  fullName: System.Runtime.InteropServices.WindowsRuntime
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken
  parent: System.Runtime.InteropServices.WindowsRuntime
  isExternal: false
  name: EventRegistrationToken
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken
- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
  parent: System.Runtime.InteropServices.WindowsRuntime
  isExternal: false
  name: EventRegistrationTokenTable<T>
  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>
  fullname.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T)
  name.vb: EventRegistrationTokenTable(Of T)
  spec.csharp:
  - uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
    name: EventRegistrationTokenTable
    fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1
    name: EventRegistrationTokenTable
    fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
