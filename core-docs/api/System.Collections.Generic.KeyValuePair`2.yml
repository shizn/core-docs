items:
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  id: KeyValuePair`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)
  - System.Collections.Generic.KeyValuePair`2.Key
  - System.Collections.Generic.KeyValuePair`2.ToString
  - System.Collections.Generic.KeyValuePair`2.Value
  langs:
  - csharp
  - vb
  name: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: KeyValuePair
    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
    startLine: 23
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Defines a key/value pair that can be set or retrieved.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns an instance of this type.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of a collection based on <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref>. For example: </p>Generic.Dictionary#11<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</p>"
  example:
  - "\n<p>The following code example shows how to enumerate the keys and values in a dictionary, using the <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n<p>This code is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.Dictionary#7"
  syntax:
    content: >-
      [Serializable]

      public struct KeyValuePair<TKey, TValue>
    content.vb: >-
      <Serializable>

      Public Structure KeyValuePair(Of TKey, TValue)
    typeParameters:
    - id: TKey
    - id: TValue
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.Dictionary`2.Enumerator
    commentId: T:System.Collections.Generic.Dictionary`2.Enumerator
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
- uid: System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)
  commentId: M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: System.Collections.Generic.KeyValuePair`2
  langs:
  - csharp
  - vb
  name: KeyValuePair(TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure with the specified key and value.</p>\n"
  syntax:
    content: public KeyValuePair(TKey key, TValue value)
    content.vb: Public Sub New(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).KeyValuePair(TKey, TValue)
- uid: System.Collections.Generic.KeyValuePair`2.Key
  commentId: P:System.Collections.Generic.KeyValuePair`2.Key
  id: Key
  parent: System.Collections.Generic.KeyValuePair`2
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.Key
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Key
    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
    startLine: 33
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the key in the key/value pair.</p>\n"
  remarks: "\n<p>This property is read/only.</p>\n"
  example:
  - "\n<p>The following code example shows how to enumerate the keys and values in a dictionary, using the <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n<p>This code is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.Dictionary#7"
  syntax:
    content: public TKey Key { get; }
    content.vb: Public ReadOnly Property Key As TKey
    parameters: []
    return:
      type: '{TKey}'
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).Key
- uid: System.Collections.Generic.KeyValuePair`2.Value
  commentId: P:System.Collections.Generic.KeyValuePair`2.Value
  id: Value
  parent: System.Collections.Generic.KeyValuePair`2
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
    startLine: 37
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the value in the key/value pair.</p>\n"
  remarks: "\n<p>This property is read/only.</p>\n"
  example:
  - "\n<p>The following code example shows how to enumerate the keys and values in a dictionary, using the <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n<p>This code is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.Dictionary#7"
  syntax:
    content: public TValue Value { get; }
    content.vb: Public ReadOnly Property Value As TValue
    parameters: []
    return:
      type: '{TValue}'
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).Value
- uid: System.Collections.Generic.KeyValuePair`2.ToString
  commentId: M:System.Collections.Generic.KeyValuePair`2.ToString
  id: ToString
  parent: System.Collections.Generic.KeyValuePair`2
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs
    startLine: 41
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Returns a string representation of the <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref>, using the string representations of the key and value.</p>\n"
  remarks: "\n<p>The string representation consists of the string representations of the key and value, separated by a comma and a space, and enclosed in square brackets. For example, the <xref href=\"System.Collections.Generic.KeyValuePair`2.ToString\" data-throw-if-not-resolved=\"false\"></xref> method for a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure with the string <xref href=\"System.Collections.Generic.KeyValuePair`2.Key\" data-throw-if-not-resolved=\"false\"></xref> \"Test\" and the integer <xref href=\"System.Collections.Generic.KeyValuePair`2.Value\" data-throw-if-not-resolved=\"false\"></xref> 14 returns the string \"[Test, 14]\". </p>\n<p>This method uses the <strong>ToString</strong> methods provided by the key and value types. Some types do not return useful or informative values for their <strong>ToString</strong> methods.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).ToString()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
