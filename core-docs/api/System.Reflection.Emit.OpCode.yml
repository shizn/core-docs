items:
- uid: System.Reflection.Emit.OpCode
  commentId: T:System.Reflection.Emit.OpCode
  id: OpCode
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.OpCode.Equals(System.Object)
  - System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.OpCode.FlowControl
  - System.Reflection.Emit.OpCode.GetHashCode
  - System.Reflection.Emit.OpCode.Name
  - System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.OpCode.OpCodeType
  - System.Reflection.Emit.OpCode.OperandType
  - System.Reflection.Emit.OpCode.Size
  - System.Reflection.Emit.OpCode.StackBehaviourPop
  - System.Reflection.Emit.OpCode.StackBehaviourPush
  - System.Reflection.Emit.OpCode.ToString
  - System.Reflection.Emit.OpCode.Value
  langs:
  - csharp
  - vb
  name: OpCode
  fullName: System.Reflection.Emit.OpCode
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpCode
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 10
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Describes an intermediate language (IL) instruction.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public struct OpCode
    content.vb: >-
      <ComVisible(True)>

      Public Structure OpCode
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Reflection.Emit.OpCode.FlowControl
  commentId: P:System.Reflection.Emit.OpCode.FlowControl
  id: FlowControl
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: FlowControl
  fullName: System.Reflection.Emit.OpCode.FlowControl
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FlowControl
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 66
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>The flow control characteristics of the intermediate language (IL) instruction.</p>\n"
  syntax:
    content: public FlowControl FlowControl { get; }
    content.vb: Public ReadOnly Property FlowControl As FlowControl
    parameters: []
    return:
      type: System.Reflection.Emit.FlowControl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.Name
  commentId: P:System.Reflection.Emit.OpCode.Name
  id: Name
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.OpCode.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 232
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>The name of the intermediate language (IL) instruction.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.OpCode.Value\" data-throw-if-not-resolved=\"false\"></xref> property returns the numeric value of the IL instruction. </p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.OpCodeType
  commentId: P:System.Reflection.Emit.OpCode.OpCodeType
  id: OpCodeType
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: OpCodeType
  fullName: System.Reflection.Emit.OpCode.OpCodeType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpCodeType
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 74
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>The type of intermediate language (IL) instruction.</p>\n"
  syntax:
    content: public OpCodeType OpCodeType { get; }
    content.vb: Public ReadOnly Property OpCodeType As OpCodeType
    parameters: []
    return:
      type: System.Reflection.Emit.OpCodeType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.OperandType
  commentId: P:System.Reflection.Emit.OpCode.OperandType
  id: OperandType
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: OperandType
  fullName: System.Reflection.Emit.OpCode.OperandType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OperandType
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 58
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>The operand type of an intermediate language (IL) instruction.</p>\n"
  syntax:
    content: public OperandType OperandType { get; }
    content.vb: Public ReadOnly Property OperandType As OperandType
    parameters: []
    return:
      type: System.Reflection.Emit.OperandType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.Size
  commentId: P:System.Reflection.Emit.OpCode.Size
  id: Size
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Size
  fullName: System.Reflection.Emit.OpCode.Size
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Size
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 99
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>The size of the intermediate language (IL) instruction.</p>\n"
  syntax:
    content: public int Size { get; }
    content.vb: Public ReadOnly Property Size As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.StackBehaviourPop
  commentId: P:System.Reflection.Emit.OpCode.StackBehaviourPop
  id: StackBehaviourPop
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: StackBehaviourPop
  fullName: System.Reflection.Emit.OpCode.StackBehaviourPop
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StackBehaviourPop
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 83
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>How the intermediate language (IL) instruction pops the stack.</p>\n"
  syntax:
    content: public StackBehaviour StackBehaviourPop { get; }
    content.vb: Public ReadOnly Property StackBehaviourPop As StackBehaviour
    parameters: []
    return:
      type: System.Reflection.Emit.StackBehaviour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.StackBehaviourPush
  commentId: P:System.Reflection.Emit.OpCode.StackBehaviourPush
  id: StackBehaviourPush
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: StackBehaviourPush
  fullName: System.Reflection.Emit.OpCode.StackBehaviourPush
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StackBehaviourPush
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 91
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>How the intermediate language (IL) instruction pushes operand onto the stack.</p>\n"
  syntax:
    content: public StackBehaviour StackBehaviourPush { get; }
    content.vb: Public ReadOnly Property StackBehaviourPush As StackBehaviour
    parameters: []
    return:
      type: System.Reflection.Emit.StackBehaviour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.Value
  commentId: P:System.Reflection.Emit.OpCode.Value
  id: Value
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Reflection.Emit.OpCode.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 107
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the numeric value of the intermediate language (IL) instruction.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.OpCode.Name\" data-throw-if-not-resolved=\"false\"></xref> property returns the string name that corresponds to the instruction's numeric value. </p>\n"
  example:
  - "\n<p>The following example displays the property values of the <xref href=\"System.Reflection.Emit.OpCodes.Add\" data-throw-if-not-resolved=\"false\"></xref> instruction. </p>System.Reflection.Emit.OpCode.Value#1"
  syntax:
    content: public short Value { get; }
    content.vb: Public ReadOnly Property Value As Short
    parameters: []
    return:
      type: System.Int16
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.OpCode.Equals(System.Object)
  commentId: M:System.Reflection.Emit.OpCode.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Emit.OpCode.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 273
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Tests whether the given object is equal to this <strong>Opcode</strong>.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)
  id: Equals(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Equals(OpCode)
  fullName: System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 282
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates whether the current instance is equal to the specified <xref href=\"System.Reflection.Emit.OpCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Equals(OpCode obj)
    content.vb: Public Function Equals(obj As OpCode) As Boolean
    parameters:
    - id: obj
      type: System.Reflection.Emit.OpCode
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.OpCode.GetHashCode
  commentId: M:System.Reflection.Emit.OpCode.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Emit.OpCode.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 300
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the generated hash code for this <strong>Opcode</strong>.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  id: op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Equality(OpCode, OpCode)
  fullName: System.Reflection.Emit.OpCode.Equality(System.Reflection.Emit.OpCode, System.Reflection.Emit.OpCode)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 288
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates whether two <xref href=\"System.Reflection.Emit.OpCode\" data-throw-if-not-resolved=\"false\"></xref> structures are equal.</p>\n"
  syntax:
    content: public static bool operator ==(OpCode a, OpCode b)
    content.vb: Public Shared Operator =(a As OpCode, b As OpCode) As Boolean
    parameters:
    - id: a
      type: System.Reflection.Emit.OpCode
    - id: b
      type: System.Reflection.Emit.OpCode
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  id: op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: Inequality(OpCode, OpCode)
  fullName: System.Reflection.Emit.OpCode.Inequality(System.Reflection.Emit.OpCode, System.Reflection.Emit.OpCode)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 294
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates whether two <xref href=\"System.Reflection.Emit.OpCode\" data-throw-if-not-resolved=\"false\"></xref> structures are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(OpCode a, OpCode b)
    content.vb: Public Shared Operator <>(a As OpCode, b As OpCode) As Boolean
    parameters:
    - id: a
      type: System.Reflection.Emit.OpCode
    - id: b
      type: System.Reflection.Emit.OpCode
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.OpCode.ToString
  commentId: M:System.Reflection.Emit.OpCode.ToString
  id: ToString
  parent: System.Reflection.Emit.OpCode
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Emit.OpCode.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs
    startLine: 305
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns this <strong>Opcode</strong> as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.Emit.FlowControl
  parent: System.Reflection.Emit
  isExternal: false
  name: FlowControl
  fullName: System.Reflection.Emit.FlowControl
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.Emit.OpCodeType
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCodeType
  fullName: System.Reflection.Emit.OpCodeType
- uid: System.Reflection.Emit.OperandType
  parent: System.Reflection.Emit
  isExternal: false
  name: OperandType
  fullName: System.Reflection.Emit.OperandType
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.StackBehaviour
  parent: System.Reflection.Emit
  isExternal: false
  name: StackBehaviour
  fullName: System.Reflection.Emit.StackBehaviour
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
