items:
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  id: SecureString
  parent: System.Security
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  - vb
  name: SecureString
  fullName: System.Security.SecureString
  type: Class
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SecureString
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 9
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> is a string type that provides a measure of security. It tries to avoid storing potentially sensitive strings in process memory as plain text.  (For limitations, however, see the How secure is SecureString? section.) The value of an instance of <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified. Your application can render the instance immutable and prevent further modification by invoking the <xref href=\"System.Security.SecureString.MakeReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The maximum length of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> instance is 65,536 characters. </p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic. </p>\n<p>The <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class and its members are not visible to COM. For more information, see <xref href=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In this section:</p>\n<p>String vs. SecureStringSecureString operationsSecureString and interopHow secure is  SecureString?</p>\n"
  example:
  - "<p>The following example demonstrates how to use a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> to secure a user’s password for use as a credential to start a new process.</p>System.Security.SecureString.Ctor#4"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
    content.vb: >-
      Public NotInheritable Class SecureString
          Implements IDisposable
  seealso:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
    commentId: T:System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Runtime.InteropServices.Marshal
    commentId: T:System.Runtime.InteropServices.Marshal
  - type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - type: System.IDisposable
    commentId: T:System.IDisposable
  see:
  - type: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - type: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - type: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - type: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - type: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - type: System.Security.SecureString
    commentId: T:System.Security.SecureString
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.SecureString.#ctor
  commentId: M:System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 11
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example uses the default (or parameterless) constructor to instantiate a new <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object. It then calls the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method to add an array of characters to it.</p>System.Security.SecureString.Ctor#2<p>The following example creates a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object from the value of a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Security.SecureString.Ctor#3"
  syntax:
    content: public SecureString()
    content.vb: Public Sub New
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this instance.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This operation is not supported on this platform.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  commentId: M:System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: SecureString(Char*, Int32)
  fullName: System.Security.SecureString.SecureString(System.Char*, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 12
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class from a subarray of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>This constructor is not CLS-compliant. The CLS-compliant alternative is <xref href=\"System.Security.SecureString.#ctor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This constructor initializes the new <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object to the number of characters in <em>value</em> specified by <em>length</em>; the value of the instance is then encrypted.</p>\n<p>In C#, this constructor is defined only in the context of unsafe code.</p>\n"
  example:
  - "\n<p>The following example instantiates a new <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object by passing its constructor a pointer to a character array.</p>System.Security.SecureString.Ctor2#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public SecureString(char *value, int length)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As Char *, length As Integer)
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to an array of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements of <em>value</em> to include in the new instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero or greater than 65,536.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This operation is not supported on this platform.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Length
  commentId: P:System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Security.SecureString.Length
  type: Property
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 14
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Gets the number of characters in the current secure string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.SecureString.Length\" data-throw-if-not-resolved=\"false\"></xref> property returns the number of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in this instance, not the number of Unicode characters. A Unicode character might be represented by more than one <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The maximum length of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> instance is 65,536 characters. </p>\n"
  example:
  - 
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.SecureString.AppendChar(System.Char)
  commentId: M:System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendChar
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 15
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Appends a character to the end of the current secure string.</p>\n"
  remarks: "\n<p>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <em>c</em> is appended; then the new value of the secure string is re-protected.</p>\n"
  example:
  - "\n<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.SetAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.SecureString.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods affect the value of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>SecureString.xAt#1<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods can be used to collect the characters in a password.</p>SecureString.xChar#1"
  syntax:
    content: public void AppendChar(char c)
    content.vb: Public Sub AppendChar(c As Char)
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>A character to append to this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Clear
  commentId: M:System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 16
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Deletes the value of the current secure string.</p>\n"
  remarks: "\n<p>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</p>\n"
  example:
  - "\n<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.SetAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.SecureString.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods affect the value of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>SecureString.xAt#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  seealso:
  - type: System.Security.SecureString.Length
    commentId: P:System.Security.SecureString.Length
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Copy
  commentId: M:System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Copy
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 17
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Creates a copy of the current secure string.</p>\n"
  remarks: "\n<p>If an instance of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> is marked read-only, the copy of that instance will not be read-only.</p>\n"
  example:
  - 
  syntax:
    content: public SecureString Copy()
    content.vb: Public Function Copy As SecureString
    return:
      type: System.Security.SecureString
      description: "\n<p>A duplicate of this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  seealso:
  - type: System.Security.SecureString.MakeReadOnly
    commentId: M:System.Security.SecureString.MakeReadOnly
  - type: System.Security.SecureString.IsReadOnly
    commentId: M:System.Security.SecureString.IsReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Dispose
  commentId: M:System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 18
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Releases all resources used by the current <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.SecureString.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method writes binary zeroes to the allocated memory that contains the value of this <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object, then frees the allocated memory. </p>\n<p>For more information, see Garbage Collection.</p>\n"
  example:
  - 
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  commentId: M:System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: InsertAt(Int32, Char)
  fullName: System.Security.SecureString.InsertAt(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertAt
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 19
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Inserts a character in this secure string at the specified index position. </p>\n"
  remarks: "\n<p>The index is zero-based; the first character in this secure string is at index position zero. </p>\n<p>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <em>c</em> is inserted at the specified index position; then the new value is re-protected. The <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method yields the same results as the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, which inserts a character at the end of a secure string, if the <em>index</em> parameter of <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> is set to the length of this instance. </p>\n"
  example:
  - "\n<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.SetAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.SecureString.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods affect the value of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>SecureString.xAt#1"
  syntax:
    content: public void InsertAt(int index, char c)
    content.vb: Public Sub InsertAt(index As Integer, c As Char)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index position where parameter <em>c</em> is inserted.</p>\n"
    - id: c
      type: System.Char
      description: "\n<p>The character to insert.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero, or greater than the length of this secure string.</p>\n<p>-or-</p>\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.IsReadOnly
  commentId: M:System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 20
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Indicates whether this secure string is marked read-only.</p>\n"
  remarks: "\n<p>After an instance of <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> is marked read-only by the <xref href=\"System.Security.SecureString.MakeReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method, any attempt to modify the value of the instance throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.Security.SecureString.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> is read-only before attempting to modify it. </p>\n"
  example:
  - 
  syntax:
    content: public bool IsReadOnly()
    content.vb: Public Function IsReadOnly As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this secure string is marked read-only; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  seealso:
  - type: System.Security.SecureString.MakeReadOnly
    commentId: M:System.Security.SecureString.MakeReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.MakeReadOnly
  commentId: M:System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeReadOnly
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 21
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Makes the text value of this secure string read-only.   </p>\n"
  remarks: "\n<p>Initialize the text value of an instance of the <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class with the <see cref=\"Overload:System.Security.SecureString.#ctor\"></see> constructors, and modify the value with the <xref href=\"System.Security.SecureString.Clear\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.SetAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n<p>After you have made your final modifications, use the <xref href=\"System.Security.SecureString.MakeReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method to make the value of the instance immutable (read-only). After the value is marked as read-only, any further attempt to modify it throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The effect of invoking <xref href=\"System.Security.SecureString.MakeReadOnly\" data-throw-if-not-resolved=\"false\"></xref> is permanent because the <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class provides no means to make the secure string modifiable again. Use the <xref href=\"System.Security.SecureString.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method to test whether an instance of <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  example:
  - "\n<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.</p>SecureString.xChar#1"
  syntax:
    content: public void MakeReadOnly()
    content.vb: Public Sub MakeReadOnly
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  seealso:
  - type: System.Security.SecureString.IsReadOnly
    commentId: M:System.Security.SecureString.IsReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  commentId: M:System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 22
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Removes the character at the specified index position from this secure string.</p>\n"
  remarks: "\n<p>The index is zero-based; the first character in this instance is at index position zero.</p>\n<p>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</p>\n"
  example:
  - "\n<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.SetAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.SecureString.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods affect the value of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>SecureString.xAt#1<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods can be used to collect the characters in a password.</p>SecureString.xChar#1"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index position of a character in this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  commentId: M:System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: SetAt(Int32, Char)
  fullName: System.Security.SecureString.SetAt(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAt
    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs
    startLine: 23
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Replaces the existing character at the specified index position with another character.</p>\n"
  remarks: "\n<p>The index is zero-based; the first character in this instance is at index position zero.</p>\n<p>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <em>c</em> is assigned to the specified index position; then the new value is re-protected.</p>\n"
  example:
  - "\n<p>The following example demonstrates how the <xref href=\"System.Security.SecureString.AppendChar(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.InsertAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.SecureString.SetAt(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.SecureString.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods affect the value of a <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>SecureString.xAt#1"
  syntax:
    content: public void SetAt(int index, char c)
    content.vb: Public Sub SetAt(index As Integer, c As Char)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index position of an existing character in this secure string</p>\n"
    - id: c
      type: System.Char
      description: "\n<p>A character that replaces the existing character.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security
  isExternal: false
  name: System.Security
  fullName: System.Security
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Char*
  isExternal: true
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  fullName: System.Security.SecureString
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
