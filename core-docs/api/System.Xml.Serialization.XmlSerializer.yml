items:
- uid: System.Xml.Serialization.XmlSerializer
  commentId: T:System.Xml.Serialization.XmlSerializer
  id: XmlSerializer
  parent: System.Xml.Serialization
  children:
  - System.Xml.Serialization.XmlSerializer.#ctor
  - System.Xml.Serialization.XmlSerializer.#ctor(System.Type)
  - System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)
  - System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])
  - System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)
  - System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)
  - System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)
  - System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  - System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  - System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)
  - System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)
  - System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])
  - System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)
  - System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  - System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  - System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  - System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)
  - System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  langs:
  - csharp
  - vb
  name: XmlSerializer
  fullName: System.Xml.Serialization.XmlSerializer
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSerializer
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 178
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes and deserializes objects into and from XML documents. The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> enables you to control how objects are encoded into XML.</p>\n"
  remarks: "\n<p>XML serialization is the process of converting an object's public properties and fields to a serial format (in this case, XML) for storage or transport. Deserialization re-creates the object in its original state from the XML output. You can think of serialization as a way of saving the state of an object into a stream or buffer. For example, ASP.NET uses the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to encode XML Web service messages.</p>\n<p>The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> objects. You have the option of creating your own classes, annotated with attributes, or using the XML Schema Definition Tool (Xsd.exe) to generate the classes based on an existing XML Schema definition (XSD) document. If you have an XML Schema, you can run the Xsd.exe to produce a set of classes that are strongly typed to the schema and annotated with attributes to adhere to the schema when serialized.</p>\n<p>To transfer data between objects and XML requires a mapping from the programming language constructs to XML schema and from the XML schema to the programming language constructs. The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> and related tools like Xsd.exe provide the bridge between these two technologies at both design time and runtime. At design time, use the Xsd.exe to produce an XML schema document (.xsd) from your custom classes or to produce classes from a given schema. In either case, the classes are annotated with custom attributes to instruct the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> how to map between the XML schema system and the common language runtime. At runtime, instances of the classes can be serialized into XML documents that follow the given schema. Likewise, these XML documents can be deserialized into runtime objects. Note that the XML schema is optional, and not required at design time or runtime. </p>\n"
  example:
  - '<p>The following example contains two main classes: <strong>PurchaseOrder</strong> and <strong>Test</strong>. The <strong>PurchaseOrder</strong> class contains information about a single purchase. The <strong>Test</strong> class contains the methods that create the purchase order, and that read the created purchase order.</p>Classic XmlSerializer Example#1'
  syntax:
    content: public class XmlSerializer
    content.vb: Public Class XmlSerializer
  seealso:
  - type: System.Xml.Serialization.XmlAttributeOverrides
    commentId: T:System.Xml.Serialization.XmlAttributeOverrides
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer
    commentId: T:System.Xml.Serialization.XmlSerializer
  - type: System.Xml.Serialization.XmlAttributes.XmlText
    commentId: P:System.Xml.Serialization.XmlAttributes.XmlText
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.Serialization.XmlSerializer.#ctor
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor
  id: '#ctor'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer()
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 180
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected XmlSerializer()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Xml.Serialization.XmlSerializer.#ctor(System.Type)
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer(Type)
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 181
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</p>\n"
  remarks: "\n<p>Commonly, an application defines several classes that the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> converts into a single XML-instance document. However, the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must know only one type--the type of the class that represents the XML root element. The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> automatically serializes all subordinate class instances. Similarly, only the type of the XML root element is required for deserialization.</p>\n"
  example:
  - "\n<p>The following example constructs an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> that serializes an object named <strong>Widget</strong>. The example sets various properties of the object before calling the <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic XmlSerializer.XmlSerializer6 Example#1"
  syntax:
    content: public XmlSerializer(Type type)
    content.vb: Public Sub New(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the object that this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can serialize. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  - type: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)
  id: '#ctor(System.Type,System.String)'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer(Type, String)
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 182
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the XML elements.</p>\n"
  example:
  - "\n<p>The following example constructs an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> that serializes an object named <strong>Widget</strong>. The example sets various properties of the object before calling the <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic XmlSerializer.XmlSerializer1 Example#1"
  syntax:
    content: public XmlSerializer(Type type, string defaultNamespace)
    content.vb: Public Sub New(type As Type, defaultNamespace As String)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the object that this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can serialize. </p>\n"
    - id: defaultNamespace
      type: System.String
      description: "\n<p>The default namespace to use for all the XML elements. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])
  id: '#ctor(System.Type,System.Type[])'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer(Type, Type[])
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.Type[])
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 183
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type. If a property or field returns an array, the <em>extraTypes</em> parameter specifies objects that can be inserted into the array.</p>\n"
  remarks: "\n<p>By default, if a public property or field returns an object, or array of objects, the object types are automatically serialized. However, if a class contains a field or property that returns an array of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>, any object can be inserted into that array. In that case, the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must be instructed to expect all the possible object types that are inserted into the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array. To do this, use the <em>extraTypes</em> parameter to specify the extra object types to serialize or deserialize.</p>\n<p>You can also use the <em>extraTypes</em> parameter to specify types derived from a base class. For example, suppose a base class named <strong>Phone</strong> exists, and a class named <strong>InternationalPhone</strong> derives from it. Use the <em>extraTypes</em> parameter to specify the derived type as well.</p>\n"
  example:
  - "\n<p>The following example serializes an instance of a class that contains a public field that returns an array of objects. The <em>extraTypes</em> parameter of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> constructor specifies the types of the objects that can be serialized in the array.</p>Classic XmlSerializer.XmlSerializer3 Example#1"
  syntax:
    content: public XmlSerializer(Type type, Type[] extraTypes)
    content.vb: Public Sub New(type As Type, extraTypes As Type())
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the object that this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can serialize. </p>\n"
    - id: extraTypes
      type: System.Type[]
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array of additional object types to serialize. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.Type())
  name.vb: XmlSerializer(Type, Type())
- uid: System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)
  id: '#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer(Type, XmlAttributeOverrides)
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.Xml.Serialization.XmlAttributeOverrides)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 184
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</p>\n"
  remarks: "\n<p>The <em>overrides</em> parameter can be used to control how fields and properties are encoded in XML. These settings override any attributes that already exist on the objects. This can be useful when the source code cannot be modified or multiple encodings are required for the same classes.</p>\n"
  example:
  - "\n<p>The following example serializes an instance of a class that is defined in a DLL and to do so, overrides the public members found in the DLL.</p>Classic XmlSerializer.XmlSerializer4 Example#1"
  syntax:
    content: public XmlSerializer(Type type, XmlAttributeOverrides overrides)
    content.vb: Public Sub New(type As Type, overrides As XmlAttributeOverrides)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the object to serialize. </p>\n"
    - id: overrides
      type: System.Xml.Serialization.XmlAttributeOverrides
      description: "\n<p>An <xref href=\"System.Xml.Serialization.XmlAttributeOverrides\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributeOverrides
    commentId: T:System.Xml.Serialization.XmlAttributeOverrides
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)
  id: '#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer(Type, XmlAttributeOverrides, Type[], XmlRootAttribute, String)
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.Xml.Serialization.XmlAttributeOverrides, System.Type[], System.Xml.Serialization.XmlRootAttribute, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 185
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class that can serialize objects of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> into XML document instances, and deserialize XML document instances into objects of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</p>\n"
  remarks: "\n<p>The <em>overrides</em> parameter allows for the creation of an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> that serializes a class that extends or overrides the behavior of a base class. For example, given a DLL, it is possible to create a class that inherits or extends a class contained in the DLL. To serialize such a class, you must use an instance of the <xref href=\"System.Xml.Serialization.XmlAttributeOverrides\" data-throw-if-not-resolved=\"false\"></xref> class when constructing the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref>. For more details, see <xref href=\"System.Xml.Serialization.XmlAttributeOverrides\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>By default, if a public property or field returns an object, or array of objects, the object types are automatically serialized. However, if a class contains a field or property that returns an array of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>, any object can be inserted into that array. In that case, the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must be instructed to expect all the possible object types that are inserted into the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array. To do this, use the <em>extraTypes</em> parameter to specify the extra object types to serialize or deserialize.</p>\n<p>The root element of an XML document encloses all the other elements. By default, the object specified by the <em>type</em> parameter is serialized as the root element. Properties, such as the XML element name of the root element are taken from the <em>type</em> object. However, the <em>root</em> parameter allows you to replace the default object's information by specifying an <xref href=\"System.Xml.Serialization.XmlRootAttribute\" data-throw-if-not-resolved=\"false\"></xref>; the object allows you to set a different namespace, element name, and so on.</p>\n<p>Use the <em>defaultName</em> parameter to specify the default namespace of all XML elements generated by the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an instance of a class that is defined in a DLL and to do so, overrides the public members found in the class. The example also specifies an array of extra types, the default namespace for all XML elements, and the class to use that provides the XML root element information. The example assumes that the code at the beginning has been compiled into a DLL named <strong>HighSchool</strong>.</p>Classic XmlSerializer.XmlSerializer Example#1"
  syntax:
    content: public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace)
    content.vb: Public Sub New(type As Type, overrides As XmlAttributeOverrides, extraTypes As Type(), root As XmlRootAttribute, defaultNamespace As String)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the object that this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can serialize. </p>\n"
    - id: overrides
      type: System.Xml.Serialization.XmlAttributeOverrides
      description: "\n<p>An <xref href=\"System.Xml.Serialization.XmlAttributeOverrides\" data-throw-if-not-resolved=\"false\"></xref> that extends or overrides the behavior of the class specified in the <em>type</em> parameter. </p>\n"
    - id: extraTypes
      type: System.Type[]
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array of additional object types to serialize. </p>\n"
    - id: root
      type: System.Xml.Serialization.XmlRootAttribute
      description: "\n<p>An <xref href=\"System.Xml.Serialization.XmlRootAttribute\" data-throw-if-not-resolved=\"false\"></xref> that defines the XML root element properties. </p>\n"
    - id: defaultNamespace
      type: System.String
      description: "\n<p>The default namespace of all XML elements in the XML document. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributeOverrides
    commentId: T:System.Xml.Serialization.XmlAttributeOverrides
  - type: System.Xml.Serialization.XmlRootAttribute
    commentId: T:System.Xml.Serialization.XmlRootAttribute
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.Xml.Serialization.XmlAttributeOverrides, System.Type(), System.Xml.Serialization.XmlRootAttribute, System.String)
  name.vb: XmlSerializer(Type, XmlAttributeOverrides, Type(), XmlRootAttribute, String)
- uid: System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)
  commentId: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)
  id: '#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)'
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: XmlSerializer(Type, XmlRootAttribute)
  fullName: System.Xml.Serialization.XmlSerializer.XmlSerializer(System.Type, System.Xml.Serialization.XmlRootAttribute)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 186
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type. It also specifies the class to use as the XML root element.</p>\n"
  remarks: "\n<p>The root element of an XML document encloses all the other elements. By default, the object specified by the <em>type</em> parameter is serialized as the root element. Properties, such as the XML element name of the root element, are taken from the <em>type</em> object. However, the <em>root</em> parameter allows you to replace the default object's information by specifying an <xref href=\"System.Xml.Serialization.XmlRootAttribute\" data-throw-if-not-resolved=\"false\"></xref>; the object allows you to set a different namespace, element name, and so on.</p>\n"
  example:
  - "\n<p>The following example constructs an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> that uses an <xref href=\"System.Xml.Serialization.XmlRootAttribute\" data-throw-if-not-resolved=\"false\"></xref> that contains various properties of the XML root element, such as its namespace and element name.</p>Classic XmlSerializer.XmlSerializer2 Example#1"
  syntax:
    content: public XmlSerializer(Type type, XmlRootAttribute root)
    content.vb: Public Sub New(type As Type, root As XmlRootAttribute)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the object that this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can serialize. </p>\n"
    - id: root
      type: System.Xml.Serialization.XmlRootAttribute
      description: "\n<p>An <xref href=\"System.Xml.Serialization.XmlRootAttribute\" data-throw-if-not-resolved=\"false\"></xref> that represents the XML root element. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  id: CanDeserialize(System.Xml.XmlReader)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: CanDeserialize(XmlReader)
  fullName: System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanDeserialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 187
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets a value that indicates whether this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can deserialize a specified XML document.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)\" data-throw-if-not-resolved=\"false\"></xref> method to check whether an XML document can be deserialized.</p>Classic XmlSerializer.CanDeserialize Example#1"
  syntax:
    content: public virtual bool CanDeserialize(XmlReader xmlReader)
    content.vb: Public Overridable Function CanDeserialize(xmlReader As XmlReader) As Boolean
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that points to the document to deserialize. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> can deserialize the object that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> points to; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  id: Deserialize(System.IO.Stream)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Deserialize(Stream)
  fullName: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Deserialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 188
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Deserializes the XML document contained by the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Deserialization is the process of reading an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</p>\n<p>Before deserializing, an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must be constructed using the type of the object that is being deserialized.</p>\n<p>Use the <em>stream</em> parameter to specify an object that derives from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class, which is designed to write to streams. Classes that derive from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class include: </p>\n<ul><li>\n<p>\n<xref href=\"System.IO.BufferedStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot deserialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example deserializes an object using a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic XmlSerializer.Deserialize Example#1"
  syntax:
    content: public object Deserialize(Stream stream)
    content.vb: Public Function Deserialize(stream As Stream) As Object
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> that contains the XML document to deserialize. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> being deserialized.</p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
    commentId: M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  - type: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)
  commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)
  id: Deserialize(System.IO.TextReader)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Deserialize(TextReader)
  fullName: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Deserialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 189
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Deserializes the XML document contained by the specified <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</p>\n<p>Before deserializing, an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must be constructed using the type of the object that is being deserialized.</p>\n<p>Classes that inherit from <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> include <xref href=\"System.IO.StringReader\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref>. If you are using a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> to deserialize an object, you must construct the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> with an appropriate <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref>. The encoding specified by the XML document is ignored.</p>\n<p>To use the encoding specified by the XML document, use the <xref href=\"System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> overload that takes an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instead. The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> automatically detects and uses the encoding specified by the XML document.</p>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot deserialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example deserializes an object using a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic XmlSerializer.Deserialize1 Example#1"
  syntax:
    content: public object Deserialize(TextReader textReader)
    content.vb: Public Function Deserialize(textReader As TextReader) As Object
    parameters:
    - id: textReader
      type: System.IO.TextReader
      description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> that contains the XML document to deserialize. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> being deserialized.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during deserialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
    commentId: M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  - type: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)
  id: Deserialize(System.Xml.XmlReader)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Deserialize(XmlReader)
  fullName: System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Deserialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 190
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Deserializes the XML document contained by the specified <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</p>\n<p>Before deserializing, an <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must be constructed using the type of the object that is being deserialized.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> automatically detects and uses the encoding specified by the XML document.</p>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot deserialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example deserializes an object using an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic XmlSerializer.Deserialize2 Example#1"
  syntax:
    content: public object Deserialize(XmlReader xmlReader)
    content.vb: Public Function Deserialize(xmlReader As XmlReader) As Object
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that contains the XML document to deserialize. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> being deserialized.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during deserialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
    commentId: M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
  - type: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])
  commentId: M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])
  id: FromTypes(System.Type[])
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: FromTypes(Type[])
  fullName: System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromTypes
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 191
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Returns an array of <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> objects created from an array of types.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method allows you to efficiently create an array of <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> objects for processing an array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method to return an array of <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> objects. The code includes three class definitions that are each used to create an array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>Classic XmlSerializer.FromTypes Example#1"
  syntax:
    content: public static XmlSerializer[] FromTypes(Type[] types)
    content.vb: Public Shared Function FromTypes(types As Type()) As XmlSerializer()
    parameters:
    - id: types
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n"
    return:
      type: System.Xml.Serialization.XmlSerializer[]
      description: "\n<p>An array of <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Serialization.XmlSerializer.FromTypes(System.Type())
  name.vb: FromTypes(Type())
- uid: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)
  commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)
  id: Serialize(System.IO.Stream,System.Object)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Serialize(Stream, Object)
  fullName: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 192
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and writes the XML document to a file using the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method converts the public fields and read/write properties of an object into XML. It does not convert methods, indexers, private fields, or read-only properties. To serialize all of an object's fields and properties, both public and private, use the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In the <em>stream</em> parameter, specify an object that derives from the abstract <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class. Classes that derive from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> include: </p>\n<ul><li>\n<p>\n<xref href=\"System.IO.BufferedStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot serialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an object using a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic XmlSerializer.Serialize2 Example#1"
  syntax:
    content: public void Serialize(Stream stream, object o)
    content.vb: Public Sub Serialize(stream As Stream, o As Object)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> used to write the XML document. </p>\n"
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to serialize. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during serialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  id: Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Serialize(Stream, Object, XmlSerializerNamespaces)
  fullName: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream, System.Object, System.Xml.Serialization.XmlSerializerNamespaces)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 193
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and writes the XML document to a file using the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>that references the specified namespaces.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked, the public fields and read/write properties of an object are converted into XML. Methods, indexers, private fields, and read-only properties are not serialized. To serialize all fields and properties, both public and private, use the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <em>stream</em> parameter to specify an object that derives from the abstract <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class, which is designed to write to streams. Classes that derive from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class include: </p>\n<ul><li>\n<p>\n<xref href=\"System.IO.BufferedStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot serialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an object with a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object. The example also creates an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> and adds two namespaces to the object. The class that defines the serialized object is also attributed with <xref href=\"System.Xml.Serialization.XmlElementAttribute\" data-throw-if-not-resolved=\"false\"></xref> attributes to specify the namespace for each element.</p>Classic XmlSerializer.Serialize3 Example#1"
  syntax:
    content: public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces)
    content.vb: Public Sub Serialize(stream As Stream, o As Object, namespaces As XmlSerializerNamespaces)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> used to write the XML document. </p>\n"
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to serialize. </p>\n"
    - id: namespaces
      type: System.Xml.Serialization.XmlSerializerNamespaces
      description: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> referenced by the object. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during serialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  id: Serialize(System.IO.TextWriter,System.Object)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Serialize(TextWriter, Object)
  fullName: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 194
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and writes the XML document to a file using the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method converts the public fields and read/write properties of an object into XML. It does not convert methods, indexers, private fields, or read-only properties. To serialize all an object's fields and properties, both public and private, use the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In the <em>textWriter</em> parameter, specify an object that derives from the abstract <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class. Classes that derive from <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> include: </p>\n<ul><li>\n<p>\n<xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.CodeDom.Compiler.IndentedTextWriter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot serialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an object using a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic XmlSerializer.Serialize Example#1"
  syntax:
    content: public void Serialize(TextWriter textWriter, object o)
    content.vb: Public Sub Serialize(textWriter As TextWriter, o As Object)
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> used to write the XML document. </p>\n"
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to serialize. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  id: Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Serialize(TextWriter, Object, XmlSerializerNamespaces)
  fullName: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 195
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and writes the XML document to a file using the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> and references the specified namespaces.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked the public fields and read/write properties of an object are converted into XML. Methods, indexers, private fields, and read-only properties are not serialized. To serialize all fields and properties, both public and private, use the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <em>textWriter</em> parameter to specify an object that derives from the abstract <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class. Classes that derive from <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class include: </p>\n<ul><li>\n<p>\n<xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.CodeDom.Compiler.IndentedTextWriter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot serialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an object with a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>. The example also creates an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> object and adds two namespaces to the object. The class that defines the serialized object is also attributed with <xref href=\"System.Xml.Serialization.XmlElementAttribute\" data-throw-if-not-resolved=\"false\"></xref> attributes to specify the namespace for each element.</p>Classic XmlSerializer.Serialize1 Example#1"
  syntax:
    content: public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces)
    content.vb: Public Sub Serialize(textWriter As TextWriter, o As Object, namespaces As XmlSerializerNamespaces)
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> used to write the XML document. </p>\n"
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to serialize. </p>\n"
    - id: namespaces
      type: System.Xml.Serialization.XmlSerializerNamespaces
      description: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> that contains namespaces for the generated XML document. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during serialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)
  commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)
  id: Serialize(System.Xml.XmlWriter,System.Object)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Serialize(XmlWriter, Object)
  fullName: System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 196
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and writes the XML document to a file using the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method converts the public fields and read/write properties of an object into XML. It does not convert methods, indexers, private fields, or read-only properties. To serialize all an object's fields and properties, both public and private, use the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In the <em>xmlWriter</em> parameter, specify an object that derives from the abstract <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> class. The <xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> derives from the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot serialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an object using an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic XmlSerializer.Serialize4 Example#1"
  syntax:
    content: public void Serialize(XmlWriter xmlWriter, object o)
    content.vb: Public Sub Serialize(xmlWriter As XmlWriter, o As Object)
    parameters:
    - id: xmlWriter
      type: System.Xml.XmlWriter
      description: "\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> used to write the XML document. </p>\n"
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to serialize. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during serialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  id: Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
  parent: System.Xml.Serialization.XmlSerializer
  langs:
  - csharp
  - vb
  name: Serialize(XmlWriter, Object, XmlSerializerNamespaces)
  fullName: System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 197
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Serializes the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and writes the XML document to a file using the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> and references the specified namespaces.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked, the public fields and read/write properties of an object are converted into XML. Methods, indexers, private fields, and read-only properties are not serialized. To serialize all fields and properties, both public and private, use the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <em>xmlWriter</em> parameter to specify an object that derives from the abstract <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> class, which is designed to write XML documents. The <xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> derives from the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> cannot serialize the following: arrays of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and arrays of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an object with an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>. The example also creates an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> and adds two namespaces to the object. Several instances of the <xref href=\"System.Xml.Serialization.XmlElementAttribute\" data-throw-if-not-resolved=\"false\"></xref> class are applied to the class members to specify the namespace for each element.</p>Classic XmlSerializer.Serialize5 Example#1"
  syntax:
    content: public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces)
    content.vb: Public Sub Serialize(xmlWriter As XmlWriter, o As Object, namespaces As XmlSerializerNamespaces)
    parameters:
    - id: xmlWriter
      type: System.Xml.XmlWriter
      description: "\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> used to write the XML document. </p>\n"
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to serialize. </p>\n"
    - id: namespaces
      type: System.Xml.Serialization.XmlSerializerNamespaces
      description: "\n<p>The <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> referenced by the object. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred during serialization. The original exception is available using the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    commentId: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Xml.Serialization.XmlAttributeOverrides
  parent: System.Xml.Serialization
  isExternal: false
  name: XmlAttributeOverrides
  fullName: System.Xml.Serialization.XmlAttributeOverrides
- uid: System.Xml.Serialization.XmlRootAttribute
  parent: System.Xml.Serialization
  isExternal: false
  name: XmlRootAttribute
  fullName: System.Xml.Serialization.XmlRootAttribute
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.Serialization.XmlSerializer[]
  isExternal: false
  name: XmlSerializer[]
  fullName: System.Xml.Serialization.XmlSerializer[]
  fullname.vb: System.Xml.Serialization.XmlSerializer()
  name.vb: XmlSerializer()
  spec.csharp:
  - uid: System.Xml.Serialization.XmlSerializer
    name: XmlSerializer
    fullName: System.Xml.Serialization.XmlSerializer
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Xml.Serialization.XmlSerializer
    name: XmlSerializer
    fullName: System.Xml.Serialization.XmlSerializer
  - name: ()
    fullName: ()
- uid: System.Xml.Serialization.XmlSerializerNamespaces
  parent: System.Xml.Serialization
  isExternal: false
  name: XmlSerializerNamespaces
  fullName: System.Xml.Serialization.XmlSerializerNamespaces
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
