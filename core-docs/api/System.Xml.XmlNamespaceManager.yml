items:
- uid: System.Xml.XmlNamespaceManager
  commentId: T:System.Xml.XmlNamespaceManager
  id: XmlNamespaceManager
  parent: System.Xml
  children:
  - System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  - System.Xml.XmlNamespaceManager.DefaultNamespace
  - System.Xml.XmlNamespaceManager.GetEnumerator
  - System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  - System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  - System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  - System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  - System.Xml.XmlNamespaceManager.NameTable
  - System.Xml.XmlNamespaceManager.PopScope
  - System.Xml.XmlNamespaceManager.PushScope
  - System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  langs:
  - csharp
  - vb
  name: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlNamespaceManager
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 146
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </p>\n"
  remarks: "\n<p>For general information about how namespaces are declared and used in XML documents, see Managing Namespaces in an XML Document. </p>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> stores prefixes and namespaces as strings. Here's a summary of management and lookup tasks you can perform with this class. For more information and examples, follow the links to the reference page for each method or property.</p>\n<p></p>\n<p>To</p>\n<p>Use</p>\n<table><tbody><tr><td>\n<p>Add a namespace</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td></tr><tr><td>\n<p>Remove a namespace</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td></tr><tr><td>\n<p>Find the URI for the default namespace</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.DefaultNamespace\" data-throw-if-not-resolved=\"false\"></xref> property</p>\n</td></tr><tr><td>\n<p>Find the URI for a namespace prefix</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td></tr><tr><td>\n<p>Find the prefix for a namespace URI</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td></tr><tr><td>\n<p>Get a list of namespaces in the current node</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td></tr><tr><td>\n<p>Scope a namespace</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.PushScope\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlNamespaceManager.PopScope\" data-throw-if-not-resolved=\"false\"></xref> methods</p>\n</td></tr><tr><td>\n<p>Check whether a prefix is defined in the current scope</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.HasNamespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td></tr><tr><td>\n<p>Get the name table used to look up prefixes and URIs</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager.NameTable\" data-throw-if-not-resolved=\"false\"></xref> property</p>\n</td></tr></tbody></table>\n<p></p>\n<p>To add namespaces to the namespace manager, you create a <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object and then use the <xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. Default prefix and namespace pairs are automatically added to the namespace manager on creation.</p>\n<p>When you create the namespace manager, you can specify a name table from the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.Xsl.XsltContext\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> class, and then use the <xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to add the namespaces. </p>\n<p>You can supply the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object as a parameter to the <see cref=\"Overload:System.Xml.XmlNode.SelectNodes\"></see> or <see cref=\"Overload:System.Xml.XmlNode.SelectSingleNode\"></see> method of the <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> class to execute XPath query expressions that reference namespace-qualified element and attribute names.</p>\n<p>The namespace manager assumes that prefixes and namespaces have already been verified and conform to the <see href=\"http://www.w3.org/TR/REC-xml-names/\">W3C Namespaces</see> specification. The namespace manager does not perform any validation. </p>\n<p>The namespace manager atomizes the strings when they are added by using the <xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and when a lookup is performed by using the <xref href=\"System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The namespace manager implements enumeration support in addition to adding and retrieving namespaces. You can loop through the information saved in the namespace manager by using the <code>foreach</code> construct. For example, if you create a namespace manager with the name <code>nsmanager</code>, you can iterate through the table by using <code>foreach (String prefix in nsmanager)</code>. </p>\n<p>Because the namespace manager provides a string comparison with the prefix and namespaces as objects, there is a performance improvement when using the namespace manager over the direct comparison of a string.</p>\n<p>The following code example shows how to bind the prefix <code>xsd</code> with the namespace URI of <code>http://www.w3.org/2001/XMLSchema</code> and add it to the namespace manager:</p>\n<pre><code class=\"vb#\">nsmgr.AddNamespace(\"xsd\", \"http://www.w3.org/2001/XMLSchema\")</code></pre>\n<pre><code class=\"c#\">nsmgr.AddNamespace(\"xsd\", \"http://www.w3.org/2001/XMLSchema\");</code></pre>\n<p>You can then find the namespace by using the <xref href=\"System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method:</p>\n<pre><code class=\"vb#\">nsmgr.LookupNamespace(\"xsd\")</code></pre>\n<pre><code class=\"c#\">nsmgr.LookupNamespace(\"xsd\");</code></pre>\n<p>The following example creates an <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> by using the name table from an XML reader:</p>\n<pre><code class=\"vb#\">Dim reader As New XmlTextReader(\"myfile.xml\")\nDim nsmanager As New XmlNamespaceManager(reader.NameTable)\nnsmanager.AddNamespace(\"msbooks\", \"www.microsoft.com/books\")\nnsmanager.PushScope()\nnsmanager.AddNamespace(\"msstore\", \"www.microsoft.com/store\")\nWhile reader.Read()\nConsole.WriteLine(\"Reader Prefix:{0}\", reader.Prefix)\nConsole.WriteLine(\"XmlNamespaceManager Prefix:{0}\",\nnsmanager.LookupPrefix(nsmanager.NameTable.Get(reader.NamespaceURI)))\nEnd While</code></pre>\n<pre><code class=\"c#\">XmlTextReader reader = new XmlTextReader(\"myfile.xml\");\nXmlNamespaceManager nsmanager = new XmlNamespaceManager(reader.NameTable);\nnsmanager.AddNamespace(\"msbooks\", \"www.microsoft.com/books\");\nnsmanager.PushScope();\nnsmanager.AddNamespace(\"msstore\", \"www.microsoft.com/store\");\nwhile (reader.Read())\n{\nConsole.WriteLine(\"Reader Prefix:{0}\", reader.Prefix);\nConsole.WriteLine(\"XmlNamespaceManager Prefix:{0}\",\nnsmanager.LookupPrefix(nsmanager.NameTable.Get(reader.NamespaceURI)));\n}</code></pre>\n"
  syntax:
    content: 'public class XmlNamespaceManager : IEnumerable, IXmlNamespaceResolver'
    content.vb: >-
      Public Class XmlNamespaceManager
          Implements IEnumerable, IXmlNamespaceResolver
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Xml.IXmlNamespaceResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
  commentId: M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: XmlNamespaceManager(XmlNameTable)
  fullName: System.Xml.XmlNamespaceManager.XmlNamespaceManager(System.Xml.XmlNameTable)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 148
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the specified <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The name table is used to look up prefixes and namespaces. An existing name table with pre-atomized strings can be specified in the constructor. There are several advantages in doing so. For example, if the name table of an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object is used, after each read, any namespace and prefix strings pushed into the name table can be re-used by <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>For more information on atomized strings, see <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If you specify an existing name table, any namespaces in the name table are not automatically added to <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>. You must use <xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> to add or remove namespaces.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> using the name table of the reader.</p>Classic WebData XmlNamespaceManager.XmlNamespaceManager Example#1"
  syntax:
    content: public XmlNamespaceManager(XmlNameTable nameTable)
    content.vb: Public Sub New(nameTable As XmlNameTable)
    parameters:
    - id: nameTable
      type: System.Xml.XmlNameTable
      description: "\n<p>The <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> to use. </p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<strong>null</strong> is passed to the constructor </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlNamespaceManager.DefaultNamespace
  commentId: P:System.Xml.XmlNamespaceManager.DefaultNamespace
  id: DefaultNamespace
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: DefaultNamespace
  fullName: System.Xml.XmlNamespaceManager.DefaultNamespace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 149
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the namespace URI for the default namespace.</p>\n"
  remarks: "\n<p>This method is equivalent to calling LookupNamespace(String.Empty).</p>\n"
  example:
  - "\n<p>The following example displays the default namespace, if one exists.</p>Classic WebData XmlNamespaceManager.DefaultNamespace Example#1"
  syntax:
    content: public virtual string DefaultNamespace { get; }
    content.vb: Public Overridable ReadOnly Property DefaultNamespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
    commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlNamespaceManager.NameTable
  commentId: P:System.Xml.XmlNamespaceManager.NameTable
  id: NameTable
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: NameTable
  fullName: System.Xml.XmlNamespaceManager.NameTable
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 150
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> associated with this object.</p>\n"
  remarks: "\n<p>The name table is used to look up prefixes and namespace URIs.</p>\n"
  syntax:
    content: public virtual XmlNameTable NameTable { get; }
    content.vb: Public Overridable ReadOnly Property NameTable As XmlNameTable
    parameters: []
    return:
      type: System.Xml.XmlNameTable
      description: "\n<p>The <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> used by this object.</p>\n"
  seealso:
  - type: System.Xml.XmlReader
    commentId: T:System.Xml.XmlReader
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  commentId: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  id: AddNamespace(System.String,System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: AddNamespace(String, String)
  fullName: System.Xml.XmlNamespaceManager.AddNamespace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 151
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Adds the given namespace to the collection.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> does not check <em>prefix</em> and <em>uri</em> for conformance.</p>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> checks names, including prefixes and namespaces, to ensure they are valid XML names according to the World Wide Web Consortium (W3C) <see href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces specification</see>. <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> is used internally by <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, so to avoid a duplication of efforts, <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> assumes all prefixes and namespaces are valid.</p>\n<p>If the prefix and namespace already exist within the current scope, the new prefix and namespace pair will replace the existing prefix/namespace combination. The same prefix and namespace combination can exist across different scopes.</p>\n<p>The following prefix/namespace pairs are added by default to the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>. They can be determined at any scope.</p>\n<p>Prefix </p>\n<p>Namespace </p>\n<table><tbody><tr><td>\n<p>xmlns </p>\n</td><td>\n<p>http://www.w3.org/2000/xmlns/ (the xmlns prefix namespace) </p>\n</td></tr><tr><td>\n<p>xml </p>\n</td><td>\n<p>http://www.w3.org/XML/1998/namespace (the XML namespace) </p>\n</td></tr><tr><td>\n<p>String.Empty </p>\n</td><td>\n<p>String.Empty (the empty namespace). This value can be reassigned a different prefix. For example, xmlns=\"\" defines the default namespace to be the empty namespace </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> to resolve namespaces in an XML fragment.</p>Classic WebData XmlNamespaceManager.AddNamespace Example#1"
  syntax:
    content: public virtual void AddNamespace(string prefix, string uri)
    content.vb: Public Overridable Sub AddNamespace(prefix As String, uri As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</p>\n<p>NoteIf the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>, refer to the <xref href=\"System.Xml.XmlNode.SelectNodes(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    - id: uri
      type: System.String
      description: "\n<p>The namespace to add. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value for <em>prefix</em> is \"xml\" or \"xmlns\". </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value for <em>prefix</em> or <em>uri</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
    commentId: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.GetEnumerator
  commentId: M:System.Xml.XmlNamespaceManager.GetEnumerator
  id: GetEnumerator
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Xml.XmlNamespaceManager.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 152
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns an enumerator to use to iterate through the namespaces in the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following code shows how to use the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> to view all the namespace pairs stored in the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<pre><code>Dim nsEnum As IEnumerator = nsmgr.GetEnumerator()\nDo While nsEnum.MoveNext\nIf nsEnum.Current <> \"\" Then\nMsgBox(\"xmlns:\" + nsEnum.Current + \"=\" + nsmgr.LookupNamespace(nsEnum.Current))\nEnd If\nLoop</code></pre>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> containing the prefixes stored by the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  commentId: M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNamespacesInScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 153
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</p>\n"
  remarks: "\n<p>The dictionary consists of a collection of namespace names keyed by prefix. It can be used to enumerate the in-scope namespaces. The dictionary is a disconnected copy of the namespace list. It remains unchanged as the current in-scope namespace list changes.</p>\n<p>The following table shows how <xref href=\"System.Xml.XmlNamespaceScope\" data-throw-if-not-resolved=\"false\"></xref> values affect the namespaces returned by the <xref href=\"System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>XmlNamespaceScope value</p>\n<p>xmlns:xml</p>\n<p>xmlns:xmlns</p>\n<p>xmlns=\"\"</p>\n"
  syntax:
    content: public virtual IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
    content.vb: Public Overridable Function GetNamespacesInScope(scope As XmlNamespaceScope) As IDictionary(Of String, String)
    parameters:
    - id: scope
      type: System.Xml.XmlNamespaceScope
      description: "\n<p>An enumeration value that specifies the type of namespace nodes to return.</p>\n"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>A collection of namespace and prefix pairs currently in scope.</p>\n"
  implements:
  - System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  commentId: M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  id: HasNamespace(System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: HasNamespace(String)
  fullName: System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 154
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</p>\n"
  remarks: "\n<p>To determine whether there is a default empty namespace defined, set <em>prefix</em> to String.Empty. A return value of <strong>true</strong> indicates that there is a default namespace defined in the current scope; <strong>false</strong> indicates that no default namespace is defined.</p>\n<p>xmlns:x= \"\" is illegal according to the <see href=\"http://www.w3.org/TR/REC-xml-names/\">W3C Namespaces</see> recommendation.</p>\n"
  example:
  - "\n<p>The following example displays the default namespace, if one exists.</p>Classic WebData XmlNamespaceManager.DefaultNamespace Example#1"
  syntax:
    content: public virtual bool HasNamespace(string prefix)
    content.vb: Public Overridable Function HasNamespace(prefix As String) As Boolean
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the namespace you want to find. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there is a namespace defined; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: LookupNamespace(String)
  fullName: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 155
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the namespace URI for the specified prefix.</p>\n"
  example:
  - "\n<p>The following example adds prefix/namespace pairs to the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>, and then displays all the pairs in the collection.</p>Classic WebData XmlNamespaceManager.PopScope Example#1"
  syntax:
    content: public virtual string LookupNamespace(string prefix)
    content.vb: Public Overridable Function LookupNamespace(prefix As String) As String
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </p>\n"
    return:
      type: System.String
      description: "\n<p>Returns the namespace URI for <em>prefix</em> or <strong>null</strong> if there is no mapped namespace. The returned string is atomized.</p>\n<p>For more information on atomized strings, see the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
    commentId: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  implements:
  - System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  commentId: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  id: LookupPrefix(System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: LookupPrefix(String)
  fullName: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupPrefix
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 156
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Finds the prefix declared for the given namespace URI.</p>\n"
  remarks: "\n<p>This method finds the mapped prefix by walking the stack (that is, it looks globally). The supplied string must be atomized for the lookup to succeed. In other words, the supplied string object must exist in the namespace manager's name table (<xref href=\"System.Xml.XmlNamespaceManager.NameTable\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>The returned string is also atomized. For more information on atomized strings, see the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method when writing an attribute. It uses the <xref href=\"System.Xml.XmlWriter.WriteStartAttribute(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to start the attribute, looks up the prefix for the <code>urn:samples</code> namespace URI, and then uses that prefix in the <xref href=\"System.Xml.XmlWriter.WriteStartAttribute(System.String)\" data-throw-if-not-resolved=\"false\"></xref> when writing the <code>ISBN</code> attribute:</p>\n<pre><code class=\"vb#\">Dim prefix As String = nsMgr.LookupPrefix(\"urn:samples\")\nwriter.WriteStartAttribute(prefix, \"ISBN\", \"urn:samples\")</code></pre>\n<pre><code class=\"c#\">XmlNameTable nt = new XmlNameTable();\nXmlNamespaceManager nsMgr = new XmlNamespaceManager(nt);\nnsMgr.AddNamespace(\"bk\",\"urn:samples\");string prefix = writer nsMgr.LookupPrefix(\"urn:samples\");\nwriter.WriteStartAttribute(prefix, \"ISBN\", \"urn:samples\");</code></pre>\n<p>The following example uses <xref href=\"System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to find the prefix defined on an element.</p>\n<pre><code class=\"vb#\">writer.WriteStartElement(\"root\", \"book\")\nwriter.WriteStartElement(\"x\", \"node\", \"author\")\ns = writer.LookupPrefix(\"author\")\nCError.Compare(s, \"x\", \"Error in nested element\")\nwriter.WriteEndElement()\ns = writer.LookupPrefix(\"book\")\nCError.Compare(s, Nothing, \"Error in root element\")\nwriter.WriteEndElement()</code></pre>\n<p>\n<strong>Output</strong>\n</p>\n<pre><code><root xmlns=\"book\">\n<x:node xmlns:x=\"author\" /> \n</root></code></pre>\n"
  - "\n<p></p>\n"
  syntax:
    content: public virtual string LookupPrefix(string uri)
    content.vb: Public Overridable Function LookupPrefix(uri As String) As String
    parameters:
    - id: uri
      type: System.String
      description: "\n<p>The namespace to resolve for the prefix. </p>\n"
    return:
      type: System.String
      description: "\n<p>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then <strong>null</strong> is returned.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
    commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  implements:
  - System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.PopScope
  commentId: M:System.Xml.XmlNamespaceManager.PopScope
  id: PopScope
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: PopScope()
  fullName: System.Xml.XmlNamespaceManager.PopScope()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PopScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 157
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Pops a namespace scope off the stack.</p>\n"
  remarks: "\n<p>When you call this method, all namespaces which were added to <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> (by calling <xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>) since the last call to <xref href=\"System.Xml.XmlNamespaceManager.PopScope\" data-throw-if-not-resolved=\"false\"></xref> are removed.</p>\n"
  example:
  - "\n<p>The following example adds prefix/namespace pairs to the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> and then displays all the pairs in the collection.</p>Classic WebData XmlNamespaceManager.PopScope Example#1"
  syntax:
    content: public virtual bool PopScope()
    content.vb: Public Overridable Function PopScope As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are namespace scopes left on the stack; <strong>false</strong> if there are no more namespaces to pop.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.PushScope
    commentId: M:System.Xml.XmlNamespaceManager.PushScope
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.PushScope
  commentId: M:System.Xml.XmlNamespaceManager.PushScope
  id: PushScope
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: PushScope()
  fullName: System.Xml.XmlNamespaceManager.PushScope()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PushScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 158
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Pushes a namespace scope onto the stack.</p>\n"
  remarks: "\n<p>After a call to this method, all namespaces, which are added to <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> (by calling <xref href=\"System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>), belong to the pushed namespace scope.</p>\n"
  example:
  - "\n<p>The following example adds prefix/namespace pairs to the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> and then displays all the pairs in the collection.</p>Classic WebData XmlNamespaceManager.PopScope Example#1"
  syntax:
    content: public virtual void PushScope()
    content.vb: Public Overridable Sub PushScope
  seealso:
  - type: System.Xml.XmlNamespaceManager.PopScope
    commentId: M:System.Xml.XmlNamespaceManager.PopScope
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  commentId: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  id: RemoveNamespace(System.String,System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: RemoveNamespace(String, String)
  fullName: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 159
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Removes the given namespace for the given prefix.</p>\n"
  syntax:
    content: public virtual void RemoveNamespace(string prefix, string uri)
    content.vb: Public Overridable Sub RemoveNamespace(prefix As String, uri As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix for the namespace </p>\n"
    - id: uri
      type: System.String
      description: "\n<p>The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value of <em>prefix</em> or <em>uri</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
    commentId: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: false
  name: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.IXmlNamespaceResolver
  isExternal: false
  name: GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  spec.csharp:
  - uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    name: GetNamespacesInScope
    fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
  - name: (
    fullName: (
  - uid: System.Xml.XmlNamespaceScope
    name: XmlNamespaceScope
    fullName: System.Xml.XmlNamespaceScope
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    name: GetNamespacesInScope
    fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
  - name: (
    fullName: (
  - uid: System.Xml.XmlNamespaceScope
    name: XmlNamespaceScope
    fullName: System.Xml.XmlNamespaceScope
  - name: )
    fullName: )
- uid: System.Xml.XmlNamespaceScope
  parent: System.Xml
  isExternal: false
  name: XmlNamespaceScope
  fullName: System.Xml.XmlNamespaceScope
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  parent: System.Xml.IXmlNamespaceResolver
  isExternal: true
  name: LookupNamespace(String)
  fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  spec.csharp:
  - uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
    name: LookupNamespace
    fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
    name: LookupNamespace
    fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  parent: System.Xml.IXmlNamespaceResolver
  isExternal: true
  name: LookupPrefix(String)
  fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  spec.csharp:
  - uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
    name: LookupPrefix
    fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
    name: LookupPrefix
    fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
