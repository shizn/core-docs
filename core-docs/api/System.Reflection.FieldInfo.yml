items:
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  id: FieldInfo
  parent: System.Reflection
  children:
  - System.Reflection.FieldInfo.Attributes
  - System.Reflection.FieldInfo.Equals(System.Object)
  - System.Reflection.FieldInfo.FieldType
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.FieldInfo.GetHashCode
  - System.Reflection.FieldInfo.GetValue(System.Object)
  - System.Reflection.FieldInfo.IsAssembly
  - System.Reflection.FieldInfo.IsFamily
  - System.Reflection.FieldInfo.IsFamilyAndAssembly
  - System.Reflection.FieldInfo.IsFamilyOrAssembly
  - System.Reflection.FieldInfo.IsInitOnly
  - System.Reflection.FieldInfo.IsLiteral
  - System.Reflection.FieldInfo.IsPrivate
  - System.Reflection.FieldInfo.IsPublic
  - System.Reflection.FieldInfo.IsSpecialName
  - System.Reflection.FieldInfo.IsStatic
  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldInfo
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 102
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a field and provides access to field metadata. </p>\n"
  remarks: "\n<p>The field information is obtained from metadata. The <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> class does not have a public constructor. <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects are obtained by calling either the <xref href=\"System.Type.GetFields\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type.GetField(System.String,System.Reflection.BindingFlags)\" data-throw-if-not-resolved=\"false\"></xref> method of a <strong>Type</strong> object.</p>\n<p>Fields are variables defined in the class. <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Type.GetFields\" data-throw-if-not-resolved=\"false\"></xref> method to get the field-related information from the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> class, and then displays field attributes.</p>FieldInfo#1"
  syntax:
    content: 'public abstract class FieldInfo : MemberInfo'
    content.vb: >-
      Public MustInherit Class FieldInfo
          Inherits MemberInfo
  seealso:
  - type: System.Type
    commentId: T:System.Type
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.FieldInfo.Attributes
  commentId: P:System.Reflection.FieldInfo.Attributes
  id: Attributes
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.FieldInfo.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 105
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the attributes associated with this field.</p>\n"
  remarks: "\n<p>All members have a set of attributes, which are defined in relation to the specific type of member. <strong>FieldAttributes</strong> informs the user whether this field is the private field, a static field, and so on.</p>\n<p>To get the <strong>Attributes</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>Attributes</strong>.</p>\n"
  example:
  - "\n<p>The following code example builds three fields and displays their field attributes. A <strong>FieldAttributes</strong> value can contain more than one attribute, such as both <strong>Public</strong> and <strong>Literal</strong>, as shown in the third field.</p>Classic FieldAttributes Example#1"
  syntax:
    content: public abstract FieldAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As FieldAttributes
    parameters: []
    return:
      type: System.Reflection.FieldAttributes
      description: "\n<p>The <strong>FieldAttributes</strong> for this field.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.FieldInfo.FieldType
  commentId: P:System.Reflection.FieldInfo.FieldType
  id: FieldType
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: FieldType
  fullName: System.Reflection.FieldInfo.FieldType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 106
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of this field object.</p>\n"
  remarks: "\n<p>The type is some primitive data type, such as <strong>String</strong>, <strong>Boolean</strong>, or <strong>GUID</strong>.</p>\n<p>To get the <strong>FieldType</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>FieldType</strong> value.</p>\n"
  example:
  - "\n<p>The following example creates a field, gets its type and <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref>, and displays its <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic FieldInfo.FieldType Example#1"
  syntax:
    content: public abstract Type FieldType { get; }
    content.vb: Public MustOverride ReadOnly Property FieldType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of this field object.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsAssembly
  commentId: P:System.Reflection.FieldInfo.IsAssembly
  id: IsAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsAssembly
  fullName: System.Reflection.FieldInfo.IsAssembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAssembly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 107
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\n"
  remarks: "\n<p>The actual visibility of a field is limited by the visibility of its type. The <xref href=\"System.Reflection.FieldInfo.IsAssembly\" data-throw-if-not-resolved=\"false\"></xref> property might be <strong>true</strong> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</p>\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref> if the only visibility modifier is <strong>internal</strong> (<strong>Friend</strong> in Visual Basic). This property is <strong>false</strong> for fields that are <strong>protected internal</strong> in C# (<strong>Protected Friend</strong> in Visual Basic, <strong>protected public</strong> in C++); use the <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref> property to identify such fields.</p>\n"
  example:
  - "\n<p>The following code example defines fields with varying levels of visibility, and displays the values of their <xref href=\"System.Reflection.FieldInfo.IsAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamily\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.FieldInfo.IsFamilyAndAssembly\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>The Visual Basic and C# languages cannot define fields with <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> visibility; that access level appears only in the C++ example.</p>Classic FieldInfo.IsAssembly Example#1"
  syntax:
    content: public bool IsAssembly { get; }
    content.vb: Public ReadOnly Property IsAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the visibility of this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.FieldInfo.IsFamily
    commentId: P:System.Reflection.FieldInfo.IsFamily
  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  - type: System.Reflection.FieldInfo.IsFamilyAndAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamily
  commentId: P:System.Reflection.FieldInfo.IsFamily
  id: IsFamily
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamily
  fullName: System.Reflection.FieldInfo.IsFamily
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFamily
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 108
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field is visible only within its class and derived classes.</p>\n"
  remarks: "\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref> if the only visibility modifier is <strong>protected</strong>. This property is <strong>false</strong> for fields that are <strong>protected internal</strong> in C# (<strong>Protected Friend</strong> in Visual Basic, <strong>protected public</strong> in C++); use the <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref> property to identify such fields.</p>\n"
  example:
  - "\n<p>The following code example defines fields with varying levels of visibility, and displays the values of their <xref href=\"System.Reflection.FieldInfo.IsAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamily\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.FieldInfo.IsFamilyAndAssembly\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>The Visual Basic and C# languages cannot define fields with <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> visibility; that access level appears only in the C++ example.</p>Classic FieldInfo.IsAssembly Example#1"
  syntax:
    content: public bool IsFamily { get; }
    content.vb: Public ReadOnly Property IsFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type
    commentId: T:System.Type
  - type: System.Reflection.FieldInfo.IsAssembly
    commentId: P:System.Reflection.FieldInfo.IsAssembly
  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  - type: System.Reflection.FieldInfo.IsFamilyAndAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  id: IsFamilyAndAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamilyAndAssembly
  fullName: System.Reflection.FieldInfo.IsFamilyAndAssembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFamilyAndAssembly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 109
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</p>\n"
  remarks: "\n<p>If a field has <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</p>\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> if the visibility modifier is <strong>protected private</strong> in C++. Fields with this visibility cannot be defined in Visual Basic or C#.</p>\n"
  example:
  - "\n<p>The following code example defines fields with varying levels of visibility, and displays the values of their <xref href=\"System.Reflection.FieldInfo.IsAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamily\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.FieldInfo.IsFamilyAndAssembly\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>The Visual Basic and C# languages cannot define fields with <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> visibility; that access level appears only in the C++ example.</p>Classic FieldInfo.IsAssembly Example#1"
  syntax:
    content: public bool IsFamilyAndAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyAndAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.FieldInfo.IsAssembly
    commentId: P:System.Reflection.FieldInfo.IsAssembly
  - type: System.Reflection.FieldInfo.IsFamily
    commentId: P:System.Reflection.FieldInfo.IsFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  id: IsFamilyOrAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamilyOrAssembly
  fullName: System.Reflection.FieldInfo.IsFamilyOrAssembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFamilyOrAssembly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 110
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</p>\n"
  remarks: "\n<p>If a field has <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</p>\n<p>The actual visibility of a field is limited by the visibility of its type. The <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref> property might be <strong>true</strong> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</p>\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref> if the visibility modifier is <strong>protected internal</strong> in C# (<strong>Protected Friend</strong> in Visual Basic, <strong>protected public</strong> in C++).</p>\n"
  example:
  - "\n<p>The following code example defines fields with varying levels of visibility, and displays the values of their <xref href=\"System.Reflection.FieldInfo.IsAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamily\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.FieldInfo.IsFamilyAndAssembly\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>The Visual Basic and C# languages cannot define fields with <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> visibility; that access level appears only in the C++ example.</p>Classic FieldInfo.IsAssembly Example#1"
  syntax:
    content: public bool IsFamilyOrAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyOrAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.FieldInfo.IsAssembly
    commentId: P:System.Reflection.FieldInfo.IsAssembly
  - type: System.Reflection.FieldInfo.IsFamily
    commentId: P:System.Reflection.FieldInfo.IsFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsInitOnly
  commentId: P:System.Reflection.FieldInfo.IsInitOnly
  id: IsInitOnly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsInitOnly
  fullName: System.Reflection.FieldInfo.IsInitOnly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInitOnly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 111
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field can only be set in the body of the constructor.</p>\n"
  remarks: "\n<p>If the returned value is <strong>true</strong>, the field can only be initialized, and is read-only thereafter.</p>\n<p>To get the <strong>IsInitOnly</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsInitOnly</strong> property. To access a non-public field, combine <xref href=\"System.Reflection.BindingFlags.NonPublic\" data-throw-if-not-resolved=\"false\"></xref> with either or both of <xref href=\"System.Reflection.BindingFlags.Static\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.BindingFlags.Instance\" data-throw-if-not-resolved=\"false\"></xref> in the <strong>GetField</strong> method.</p>\n<p>The <strong>IsInitOnly</strong> property is set when the <xref href=\"System.Reflection.FieldAttributes.InitOnly\" data-throw-if-not-resolved=\"false\"></xref> attribute is set.</p>\n"
  example:
  - "\n<p>In the following example, two fields are created. The second field is read-only, having no set accessor, and <strong>IsInitOnly</strong> is set to <strong>true</strong>.</p>Classic FieldInfo.IsInitOnly Example#1<p>This code produces the following output: </p><p>Reflection.FieldInfo </p><p>Myfielda - A- modified, IsInitOnly = False </p><p>Myfieldb - B readonly field, IsInitOnly = True </p>"
  syntax:
    content: public bool IsInitOnly { get; }
    content.vb: Public ReadOnly Property IsInitOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the field has the <strong>InitOnly</strong> attribute set; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type.GetField(System.String,System.Reflection.BindingFlags)
    commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsLiteral
  commentId: P:System.Reflection.FieldInfo.IsLiteral
  id: IsLiteral
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsLiteral
  fullName: System.Reflection.FieldInfo.IsLiteral
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLiteral
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 112
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the value is written at compile time and cannot be changed.</p>\n"
  remarks: "\n<p>The <strong>IsLiteral</strong> property is set when the <strong>FieldAttributes.Literal</strong> attribute is set. If this attribute is set, the field cannot be changed and is constant.</p>\n"
  syntax:
    content: public bool IsLiteral { get; }
    content.vb: Public ReadOnly Property IsLiteral As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the field has the <strong>Literal</strong> attribute set; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsPrivate
  commentId: P:System.Reflection.FieldInfo.IsPrivate
  id: IsPrivate
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsPrivate
  fullName: System.Reflection.FieldInfo.IsPrivate
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPrivate
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 113
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field is private.</p>\n"
  remarks: "\n<p>Private fields are accessible only from member functions.</p>\n<p>The <strong>IsPrivate</strong> property is set when the <strong>FieldAttributes.Private</strong> attribute is set.</p>\n<p>To get the <strong>IsPrivate</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsPrivate</strong> property. To access a non-public field, set the <strong>BindingFlags</strong> to <strong>NonPublic</strong>, and either <strong>Static</strong> or <strong>Instance</strong> in the <strong>GetField</strong> method.</p>\n"
  example:
  - "\n<p>The following example returns a value indicating whether or not the field of the class is private.</p>FieldInfo_IsPrivate#1"
  syntax:
    content: public bool IsPrivate { get; }
    content.vb: Public ReadOnly Property IsPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the field is private; otherwise; <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsPublic
  commentId: P:System.Reflection.FieldInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsPublic
  fullName: System.Reflection.FieldInfo.IsPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPublic
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 114
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field is public.</p>\n"
  remarks: "\n<p>Public fields are accessible everywhere their corresponding classes are visible.</p>\n<p>The <strong>IsPublic</strong> property is set when the <strong>FieldAttributes.Public</strong> attribute is set.</p>\n<p>To get the <strong>IsPublic</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsPublic</strong> property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the <strong>BindingFlags</strong> to <strong>NonPublic</strong>, specify either <strong>BindingFlags.Instance</strong> or <strong>BindingFlags.Static</strong>, and use this for the <strong>GetField</strong> method.</p>\n"
  example:
  - "\n<p>The following example returns a value indicating whether or not the field of the class is public or private.</p>Classic FieldInfo.IsPublic Example#1"
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this field is public; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsSpecialName
  commentId: P:System.Reflection.FieldInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  fullName: System.Reflection.FieldInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSpecialName
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 115
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the corresponding <strong>SpecialName</strong> attribute is set in the <xref href=\"System.Reflection.FieldAttributes\" data-throw-if-not-resolved=\"false\"></xref> enumerator.</p>\n"
  remarks: "\n<p>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</p>\n"
  example:
  - "\n<p>The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</p>FieldInfo_IsSpecialName#1"
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <strong>SpecialName</strong> attribute is set in <xref href=\"System.Reflection.FieldAttributes\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsStatic
  commentId: P:System.Reflection.FieldInfo.IsStatic
  id: IsStatic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsStatic
  fullName: System.Reflection.FieldInfo.IsStatic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStatic
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 116
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field is static.</p>\n"
  remarks: "\n<p>When a field is static, one copy of the field is shared by all instances of the type.</p>\n<p>The <strong>IsStatic</strong> property is set when the <strong>FieldAttributes.Static</strong> attribute is set.</p>\n<p>To get the <strong>IsStatic</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsStatic</strong> property. To access a non-public field, set the <strong>BindingFlags</strong> to <strong>NonPublic</strong> in the <strong>GetField</strong> method and set the accessibility to <strong>Instance</strong> or <strong>Static</strong>.</p>\n"
  example:
  - "\n<p>The following example determines whether the specified field is static and displays the result.</p>Classic FieldInfo.IsStatic Example#1<p>This code produces the following output: </p><p>Reflection.FieldInfo </p><p>Myfielda - A private field; IsStatic - False </p><p>Myfieldb - B static field; IsStatic - True </p>"
  syntax:
    content: public bool IsStatic { get; }
    content.vb: Public ReadOnly Property IsStatic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this field is static; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type.GetField(System.String,System.Reflection.BindingFlags)
    commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.Equals(System.Object)
  commentId: M:System.Reflection.FieldInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.FieldInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 117
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetFieldFromHandle(RuntimeFieldHandle)
  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldFromHandle
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 118
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> for the field represented by the specified handle.</p>\n"
  remarks: "\n<p>Handles are valid only in the application domain in which they were obtained.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Type.GetFields\" data-throw-if-not-resolved=\"false\"></xref> method to get <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects for the fields of a type, gets a <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structure for each field, and then retrieves the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects from the handles using this overload of the <see cref=\"Overload:System.Reflection.FieldInfo.GetFieldFromHandle\"></see> method.</p>FieldInfo_GetFieldFromHandle#1"
  syntax:
    content: public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle)
    content.vb: Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle) As FieldInfo
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: "\n<p>A <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the handle to the internal metadata representation of a field. </p>\n"
    return:
      type: System.Reflection.FieldInfo
      description: "\n<p>A <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing the field specified by <em>handle</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>handle</em> is invalid.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle, System.RuntimeTypeHandle)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldFromHandle
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 119
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> for the field represented by the specified handle, for the specified generic type.</p>\n"
  remarks: "\n<p>Handles are valid only in the application domain in which they were obtained.</p>\n<p>The recommended practice is that <em>declaringType</em> should always be the runtime type handle of the constructed type that <em>handle</em> belongs to. That is, if <em>handle</em> is a runtime field handle for a field that belongs to <code>MyType<int></code> (<code>MyType(Of Integer)</code> in Visual Basic), <em>declaringType</em> is the runtime type handle for <code>MyType<int></code>. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</p>\n<p>Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, <code>MyType<string></code>, <code>MyType<object></code>, and <code>MyType<ArrayList></code> all share the same implementation. In this situation, the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is returned represents a field on the type that <em>declaringType</em> specifies, regardless of the original source of <em>handle</em>. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</p>\n<p>If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the <xref href=\"System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\" data-throw-if-not-resolved=\"false\"></xref> overload is to ensure that <em>declaringType</em> is the runtime type handle for the constructed type that <em>handle</em> belongs to.</p>\n"
  example:
  - "\n<p>The following example shows how to retrieve <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects for fields on constructed generic classes. The example defines the generic type <code>Test<T></code> (<code>Test(Of T)</code> in Visual Basic) with a single field named <code>TestField</code>, of type <code>T</code>. The example gets the <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.RuntimeTypeHandle\" data-throw-if-not-resolved=\"false\"></xref> for the case where <code>T</code> is <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, and demonstrates the following:</p>\n<ul><li>\n<p>An exception is thrown if the <xref href=\"System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used. This is true even if the field is not of type <code>T</code>.</p>\n</li><li>\n<p>A <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case <code>Test<string></code>.</p>\n</li><li>\n<p>If the runtime type handle is from a compatible construction, in this case <code>Test<object></code>, a <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> for the field on the compatible construction is retrieved.</p>\n</li><li>\n<p>If the runtime type handle is not from a compatible construction, an exception is thrown. In this case, a value type is specified for <code>T</code>.</p>\n</li></ul>FieldInfo_GetFieldFromHandle2#1"
  syntax:
    content: public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType)
    content.vb: Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: "\n<p>A <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the handle to the internal metadata representation of a field.</p>\n"
    - id: declaringType
      type: System.RuntimeTypeHandle
      description: "\n<p>A <xref href=\"System.RuntimeTypeHandle\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the handle to the generic type that defines the field.</p>\n"
    return:
      type: System.Reflection.FieldInfo
      description: "\n<p>A <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing the field specified by <em>handle</em>, in the generic type specified by <em>declaringType</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>handle</em> is invalid.</p>\n<p>-or-</p>\n<p>\n<em>declaringType</em> is not compatible with <em>handle</em>. For example, <em>declaringType</em> is the runtime type handle of the generic type definition, and <em>handle</em> comes from a constructed type. See Remarks.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.FieldInfo.GetHashCode
  commentId: M:System.Reflection.FieldInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.FieldInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 120
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.FieldInfo.GetValue(System.Object)
  commentId: M:System.Reflection.FieldInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  fullName: System.Reflection.FieldInfo.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 121
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>When overridden in a derived class, returns the value of a field supported by a given object.</p>\n"
  remarks: "\n<p>If the field is static, <em>obj</em> is ignored. For non-static fields, <em>obj</em> should be an instance of a class that inherits or declares the field. Note that the return type of <strong>GetValue</strong> is <strong>Object</strong>. For example, if the field holds a Boolean primitive value, an instance of <strong>Object</strong> with the appropriate Boolean value is returned. Before returning the value, <strong>GetValue</strong> checks to see if the user has access permission.</p>\n<p>Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Reflection.FieldInfo.GetValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the value of a static field. Note that the value of the <em>obj</em> argument is <strong>null</strong>. </p>getfldval#1"
  - "\n<p>The following example retrieves an array of <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represents the fields of the <code>FieldsClass</code> type, and then calls the <xref href=\"System.Reflection.FieldInfo.GetValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to display the value of each field for the <code>fieldsInst</code> object.</p>FieldInfo_GetValue#1"
  syntax:
    content: public abstract object GetValue(object obj)
    content.vb: Public MustOverride Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object whose field value will be returned. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object containing the value of the field reflected by this instance.</p>\n"
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The field is non-static and <em>obj</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>A field is marked literal, but the field does not have one of the accepted literal types. </p>\n"
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to access this field. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is neither declared nor inherited by the class of <em>obj</em>. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object)
  fullName: System.Reflection.FieldInfo.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 122
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the value of the field supported by the given object.</p>\n"
  remarks: "\n<p>This method will assign <em>value</em> to the field reflected by this instance on object <em>obj</em>. If the field is static, <em>obj</em> will be ignored. For non-static fields, <em>obj</em> should be an instance of a class that inherits or declares the field. The new value is passed as an <strong>Object</strong>. For example, if the field's type is Boolean, an instance of <strong>Object</strong> with the appropriate Boolean value is passed. Before setting the value, <strong>SetValue</strong> checks to see if the user has access permission. This final method is a convenience method for calling the following <strong>SetValue</strong> method.</p>\n<p>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</p>FieldInfo_SetValue#1"
  syntax:
    content: public virtual void SetValue(object obj, object value)
    content.vb: Public Overridable Sub SetValue(obj As Object, value As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object whose field value will be set. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to assign to the field. </p>\n"
  exceptions:
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to access this field. </p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The <em>obj</em> parameter is <strong>null</strong> and the field is an instance field. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The field does not exist on the object.</p>\n<p>-or- </p>\n<p>The <em>value</em> parameter cannot be converted and stored in the field. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  fullName: System.Reflection.TargetException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.FieldAccessException
  isExternal: false
  name: FieldAccessException
  fullName: System.FieldAccessException
