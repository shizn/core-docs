items:
- uid: System.Security.SecurityCriticalAttribute
  commentId: T:System.Security.SecurityCriticalAttribute
  id: SecurityCriticalAttribute
  parent: System.Security
  children:
  - System.Security.SecurityCriticalAttribute.#ctor
  langs:
  - csharp
  - vb
  name: SecurityCriticalAttribute
  fullName: System.Security.SecurityCriticalAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SecurityCriticalAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3073
  assemblies:
  - System.Runtime
  namespace: System.Security
  summary: "\n<p>Specifies that code or an assembly performs security-critical operations.</p>\n"
  remarks: "\n<p>Security-critical operations are actions that affect code access security, such as elevation of privilege through suppression of code access security checks by using the <xref href=\"System.Security.CodeAccessPermission.Assert\" data-throw-if-not-resolved=\"false\"></xref> method, calling unsafe managed code, and so forth. Either the <xref href=\"System.Security.SecurityCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute or the <xref href=\"System.Security.SecuritySafeCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute must be applied to code for the code to perform security-critical operations. </p>\n<p>The <xref href=\"System.Security.SecurityCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> is equivalent to a link demand for full trust. A type or member marked with the <xref href=\"System.Security.SecurityCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> can be called only by fully trusted code; it does not have to demand specific permissions. It cannot be called by partially trusted code.</p>\n<p>Applying the <xref href=\"System.Security.SecurityCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> at the assembly level identifies the assembly as a security-critical assembly. The entire assembly can be identified as critical by setting the scope parameter <xref href=\"System.Security.SecurityCriticalScope.Everything\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Constructor | AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]

      public sealed class SecurityCriticalAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly Or AttributeTargets.Class Or AttributeTargets.Constructor Or AttributeTargets.Delegate Or AttributeTargets.Enum Or AttributeTargets.Field Or AttributeTargets.Interface Or AttributeTargets.Method Or AttributeTargets.Struct, AllowMultiple:=False, Inherited:=False)>

      Public NotInheritable Class SecurityCriticalAttribute
          Inherits Attribute
  seealso:
  - type: System.Security.SecurityTransparentAttribute
    commentId: T:System.Security.SecurityTransparentAttribute
  - type: System.Security.SecuritySafeCriticalAttribute
    commentId: T:System.Security.SecuritySafeCriticalAttribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 5501
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: false
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.SecurityCriticalAttribute.#ctor
  commentId: M:System.Security.SecurityCriticalAttribute.#ctor
  id: '#ctor'
  parent: System.Security.SecurityCriticalAttribute
  langs:
  - csharp
  - vb
  name: SecurityCriticalAttribute()
  fullName: System.Security.SecurityCriticalAttribute.SecurityCriticalAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3076
  assemblies:
  - System.Runtime
  namespace: System.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.SecurityCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public SecurityCriticalAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security
  isExternal: false
  name: System.Security
  fullName: System.Security
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
