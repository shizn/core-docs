items:
- uid: System.Text.Decoder
  commentId: T:System.Text.Decoder
  id: Decoder
  parent: System.Text
  children:
  - System.Text.Decoder.#ctor
  - System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  - System.Text.Decoder.Fallback
  - System.Text.Decoder.FallbackBuffer
  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  - System.Text.Decoder.Reset
  langs:
  - csharp
  - vb
  name: Decoder
  fullName: System.Text.Decoder
  type: Class
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decoder
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 10
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Converts a sequence of encoded bytes into a set of characters.</p>\n"
  remarks: "\n<p>To obtain an instance of an implementation of the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> class, the application should use the <xref href=\"System.Text.Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method of an <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> implementation. </p>\n<p>The <xref href=\"System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many characters result in decoding a sequence of bytes, and the <xref href=\"System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method performs the actual decoding. There are several versions of both of these methods available in the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> class. For more information, see <xref href=\"System.Text.Encoding.GetChars(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref>. A <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object maintains state information between successive calls to <strong>GetChars</strong> or <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> methods so it can correctly decode byte sequences that span blocks. The <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref href=\"System.Text.Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.</p>\n<p>When the application is done with a stream of data, it should make sure that the state information is flushed by setting the <em>flush</em> parameter to <strong>true</strong> in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref href=\"System.Text.Decoder.Reset\" data-throw-if-not-resolved=\"false\"></xref> to clear the internal state of the <strong>Decoder</strong> object.</p>\n"
  example:
  - <p>The following example demonstrates the use of a <xref href="System.Text.Decoder" data-throw-if-not-resolved="false"></xref> to convert two different byte arrays into a character array. One of the character's bytes spans the arrays. This is similar to what a <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> object does internally when reading a stream.</p>Classic Decoder Example#1
  syntax:
    content: 'public abstract class Decoder : object'
    content.vb: >-
      Public MustInherit Class Decoder
          Inherits Object
  seealso:
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  - type: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Text.Decoder.#ctor
  commentId: M:System.Text.Decoder.#ctor
  id: '#ctor'
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: Decoder()
  fullName: System.Text.Decoder.Decoder()
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 12
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>To obtain an instance of an implementation of this class, the application should use the <xref href=\"System.Text.Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n"
  example:
  - "\n<p>The following example demonstrates two techniques for initializing a new <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>System.Text.Decoder.ctor Example#1"
  syntax:
    content: protected Decoder()
    content.vb: Protected Sub New
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.Decoder.Fallback
  commentId: P:System.Text.Decoder.Fallback
  id: Fallback
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: Fallback
  fullName: System.Text.Decoder.Fallback
  type: Property
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Fallback
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 13
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets or sets a <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object for the current <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character. </p>\n"
  example:
  - 
  syntax:
    content: public DecoderFallback Fallback { get; set; }
    content.vb: Public Property Fallback As DecoderFallback
    parameters: []
    return:
      type: System.Text.DecoderFallback
      description: "\n<p>A <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is <strong>null </strong>(<strong>Nothing</strong>).</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.DecoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object contains data that has not been decoded yet. </p>\n"
  seealso:
  - type: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - type: System.Text.Encoder.FallbackBuffer
    commentId: P:System.Text.Encoder.FallbackBuffer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Text.Decoder.FallbackBuffer
  commentId: P:System.Text.Decoder.FallbackBuffer
  id: FallbackBuffer
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: FallbackBuffer
  fullName: System.Text.Decoder.FallbackBuffer
  type: Property
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FallbackBuffer
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 14
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets the <xref href=\"System.Text.DecoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object associated with the current <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.DecoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object represents data used by the <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character. </p>\n"
  example:
  - 
  syntax:
    content: public DecoderFallbackBuffer FallbackBuffer { get; }
    content.vb: Public ReadOnly Property FallbackBuffer As DecoderFallbackBuffer
    parameters: []
    return:
      type: System.Text.DecoderFallbackBuffer
      description: "\n<p>A <xref href=\"System.Text.DecoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - type: System.Text.Encoder.Fallback
    commentId: P:System.Text.Encoder.Fallback
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  commentId: M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  id: Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)
  fullName: System.Text.Decoder.Convert(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32, System.Int32, System.Boolean, out System.Int32, out System.Int32, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 15
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</p>\n"
  remarks: "\n<p>Remember that the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object saves state between calls to <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>. When the application is done with a stream of data, it should set the <em>flush</em> parameter to <strong>true</strong> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</p>\n<p>The <strong>Convert</strong> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> will throw an exception if the output buffer isn't large enough, but <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> will fill as much space as possible and return the bytes read and chars written. Also see the <xref href=\"System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> topic for more comments.</p>\n<p>The <em>completed</em> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to <strong>false</strong> if the number of bytes specified by the <em>byteCount</em> parameter cannot be converted without exceeding the number of characters specified by the <em>charCount</em> parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <em>bytes</em> parameter by the number of bytes specified by the <em>bytesUsed</em> parameter, then call the <strong>Convert</strong> method again to process the remaining input.</p>\n<p>The <em>completed</em> parameter can also be set to <strong>false</strong>, even though the <em>bytesUsed</em> and <em>byteCount</em> parameters are equal. This situation occurs if there is still data in the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object that has not been stored in the <em>bytes</em> buffer.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a file of UTF-16 characters to UTF-8. It then uses the <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the UTF-8 characters back to UTF-16 characters.</p>sys.txt.EncoderDecoder.convert#1"
  syntax:
    content: public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed)
    content.vb: Public Overridable Sub Convert(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer, charCount As Integer, flush As Boolean, ByRef bytesUsed As Integer, ByRef charsUsed As Integer, ByRef completed As Boolean)
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>A byte array to convert.</p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The first element of <em>bytes</em> to convert.</p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of elements of <em>bytes</em> to convert.</p>\n"
    - id: chars
      type: System.Char[]
      description: "\n<p>An array to store the converted characters.</p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The first element of <em>chars</em> in which data is stored.</p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The maximum number of elements of <em>chars</em> to use in the conversion.</p>\n"
    - id: flush
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to indicate that no further data is to be converted; otherwise, <strong>false</strong>.</p>\n"
    - id: bytesUsed
      type: System.Int32
      description: "\n<p>When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</p>\n"
    - id: charsUsed
      type: System.Int32
      description: "\n<p>When this method returns, contains the number of characters from <em>chars</em> that were produced by the conversion. This parameter is passed uninitialized.</p>\n"
    - id: completed
      type: System.Boolean
      description: "\n<p>When this method returns, contains <strong>true</strong> if all the characters specified by <em>byteCount</em> were converted; otherwise, <strong>false</strong>. This parameter is passed uninitialized.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> or <em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em>, <em>charCount</em>, <em>byteIndex</em>, or <em>byteCount</em> is less than zero.</p>\n<p>-or-</p>\n<p>The length of <em>chars</em> - <em>charIndex</em> is less than <em>charCount</em>.</p>\n<p>-or-</p>\n<p>The length of <em>bytes</em> - <em>byteIndex</em> is less than <em>byteCount</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref=\"Overload:System.Text.Decoder.GetCharCount\"></see> method.</p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Decoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Decoder.Convert(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32, System.Int32, System.Boolean, ByRef System.Int32, ByRef System.Int32, ByRef System.Boolean)
  name.vb: Convert(Byte(), Int32, Int32, Char(), Int32, Int32, Boolean, ByRef Int32, ByRef Int32, ByRef Boolean)
- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.Decoder.GetCharCount(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCharCount
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 16
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n"
  remarks: "\n<p>This method does not affect the state of the decoder.</p>\n<p>To calculate the exact array size that <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> requires to store the resulting characters, the application should use <xref href=\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If <strong>GetChars</strong> is called with <em>flush</em> set to <strong>false</strong>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <strong>GetCharCount</strong> on a block of data immediately before calling <strong>GetChars</strong> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate the number of characters required to decode the specified range of bytes in the array.</p>System.Text.Decoder.GetCharCount Example#1"
  syntax:
    content: public abstract int GetCharCount(byte[] bytes, int index, int count)
    content.vb: Public MustOverride Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Decoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.Decoder.Reset
    commentId: M:System.Text.Decoder.Reset
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Decoder.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32, Boolean)
  fullName: System.Text.Decoder.GetCharCount(System.Byte[], System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCharCount
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 17
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</p>\n"
  remarks: "\n<p>This method does not affect the state of the decoder.</p>\n<p>To calculate the exact array size that <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> requires to store the resulting characters, the application should use <xref href=\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If <strong>GetChars</strong> is called with <em>flush</em> set to <strong>false</strong>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <strong>GetCharCount</strong> on a block of data immediately before calling <strong>GetChars</strong> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n"
  syntax:
    content: public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush)
    content.vb: Public Overridable Function GetCharCount(bytes As Byte(), index As Integer, count As Integer, flush As Boolean) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    - id: flush
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to simulate clearing the internal state of the encoder after the calculation; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Decoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
    commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  - type: System.Text.Decoder.Reset
    commentId: M:System.Text.Decoder.Reset
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Decoder.GetCharCount(System.Byte(), System.Int32, System.Int32, System.Boolean)
  name.vb: GetCharCount(Byte(), Int32, Int32, Boolean)
- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.Decoder.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 18
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</p>\n"
  remarks: "\n<p>Remember that the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object saves state between calls to <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. When the application is done with a stream of data, it should set the <em>flush</em> parameter to <strong>true</strong> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</p>\n<p>To calculate the exact array size that <strong>GetChars</strong> requires to store the resulting characters, the application should use <xref href=\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If <strong>GetChars</strong> is called with <em>flush</em> set to <strong>false</strong>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <strong>GetCharCount</strong> on a block of data immediately before calling <strong>GetChars</strong> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n<p>If your application is to convert many segments of an input stream, consider using the <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will throw an exception if the output buffer isn't large enough, but <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> will fill as much space as possible and return the bytes read and chars written. Also see the <xref href=\"System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> topic for more comments.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to decode a range of elements from a byte array and store them in a Unicode character array. The <xref href=\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to calculate the number of characters needed to store the decoded elements in the array <code>bytes</code>. The <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method decodes the specified elements in the byte array and stores them in the new character array.</p>System.Text.Decoder.GetChars Example#1"
  syntax:
    content: public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: Public MustOverride Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array to contain the resulting set of characters. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting set of characters. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written into <em>chars</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Decoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.Decoder.Reset
    commentId: M:System.Text.Decoder.Reset
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Decoder.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
  fullName: System.Text.Decoder.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 19
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</p>\n"
  remarks: "\n<p>Remember that the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object saves state between calls to <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. When the application is done with a stream of data, it should set the <em>flush</em> parameter to <strong>true</strong> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</p>\n<p>To calculate the exact array size that <strong>GetChars</strong> requires to store the resulting characters, the application should use <xref href=\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If <strong>GetChars</strong> is called with <em>flush</em> set to <strong>false</strong>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <strong>GetCharCount</strong> on a block of data immediately before calling <strong>GetChars</strong> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n<p>If your application is to convert many segments of an input stream, consider using the <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> will throw an exception if the output buffer isn't large enough, but <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> will fill as much space as possible and return the bytes read and chars written. Also see the <xref href=\"System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> topic for more comments.</p>\n"
  syntax:
    content: public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush)
    content.vb: Public Overridable Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer, flush As Boolean) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array to contain the resulting set of characters. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting set of characters. </p>\n"
    - id: flush
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to clear the internal state of the decoder after the conversion; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written into the <em>chars</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Decoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
    commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  - type: System.Text.Decoder.Reset
    commentId: M:System.Text.Decoder.Reset
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Decoder.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32, System.Boolean)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32, Boolean)
- uid: System.Text.Decoder.Reset
  commentId: M:System.Text.Decoder.Reset
  id: Reset
  parent: System.Text.Decoder
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Text.Decoder.Reset()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 20
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, sets the decoder back to its initial state.</p>\n"
  remarks: "\n<p>This method clears the internal state of the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> object. The method clears any state information preserved from a previous call to <xref href=\"System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, including trailing bytes at the end of the previous data block.</p>\n<p>Your application should call the <xref href=\"System.Text.Decoder.Reset\" data-throw-if-not-resolved=\"false\"></xref> method if it wants to reuse the same decoder even after an exception is thrown by <xref href=\"System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, or if the decoder switches streams and begins to decode another stream.</p>\n"
  syntax:
    content: public virtual void Reset()
    content.vb: Public Overridable Sub Reset
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Text.DecoderFallback
  parent: System.Text
  isExternal: false
  name: DecoderFallback
  fullName: System.Text.DecoderFallback
- uid: System.Text.DecoderFallbackBuffer
  parent: System.Text
  isExternal: false
  name: DecoderFallbackBuffer
  fullName: System.Text.DecoderFallbackBuffer
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
