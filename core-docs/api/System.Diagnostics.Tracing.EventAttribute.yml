items:
- uid: System.Diagnostics.Tracing.EventAttribute
  commentId: T:System.Diagnostics.Tracing.EventAttribute
  id: EventAttribute
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)
  - System.Diagnostics.Tracing.EventAttribute.ActivityOptions
  - System.Diagnostics.Tracing.EventAttribute.Channel
  - System.Diagnostics.Tracing.EventAttribute.EventId
  - System.Diagnostics.Tracing.EventAttribute.Keywords
  - System.Diagnostics.Tracing.EventAttribute.Level
  - System.Diagnostics.Tracing.EventAttribute.Message
  - System.Diagnostics.Tracing.EventAttribute.Opcode
  - System.Diagnostics.Tracing.EventAttribute.Tags
  - System.Diagnostics.Tracing.EventAttribute.Task
  - System.Diagnostics.Tracing.EventAttribute.Version
  langs:
  - csharp
  - vb
  name: EventAttribute
  fullName: System.Diagnostics.Tracing.EventAttribute
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventAttribute
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 18
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Specifies additional event schema information for an event.</p>\n"
  remarks: "\n<p>When you apply this attribute to an ETW event method defined on an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class, you must call the <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on the base class, passing the event ID, followed by the same arguments as the defined method is passed. You should follow the pattern shown in the following examples.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to define a variety of events. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#5ETWTrace#6ETWTrace#7ETWTrace#8"
  syntax:
    content: 'public sealed class EventAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class EventAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: EventAttribute(Int32)
  fullName: System.Diagnostics.Tracing.EventAttribute.EventAttribute(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 21
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Tracing.EventAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the specified event identifier.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor to specify events. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#1ETWTrace#2"
  syntax:
    content: public EventAttribute(int eventId)
    content.vb: Public Sub New(eventId As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier for the event.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.ActivityOptions
  commentId: P:System.Diagnostics.Tracing.EventAttribute.ActivityOptions
  id: ActivityOptions
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: ActivityOptions
  fullName: System.Diagnostics.Tracing.EventAttribute.ActivityOptions
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ActivityOptions
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 22
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Specifies the behavior of the start and stop events of an activity. An activity is the region of time in an app between the start and the stop.</p>\n"
  syntax:
    content: public EventActivityOptions ActivityOptions { get; set; }
    content.vb: Public Property ActivityOptions As EventActivityOptions
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventActivityOptions
      description: "\n<p>Returns <xref href=\"System.Diagnostics.Tracing.EventActivityOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Channel
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Channel
  id: Channel
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Channel
  fullName: System.Diagnostics.Tracing.EventAttribute.Channel
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Channel
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 23
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets an additional event log where the event should be written.</p>\n"
  syntax:
    content: public EventChannel Channel { get; set; }
    content.vb: Public Property Channel As EventChannel
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventChannel
      description: "\n<p>An additional event log where the event should be written.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.EventId
  commentId: P:System.Diagnostics.Tracing.EventAttribute.EventId
  id: EventId
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: EventId
  fullName: System.Diagnostics.Tracing.EventAttribute.EventId
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 24
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the identifier for the event.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> should be greater than 0 or less than 65535 or errors can occur in a tracing operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n"
  syntax:
    content: public int EventId { get; }
    content.vb: Public ReadOnly Property EventId As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The event identifier. This value should be between 0 and 65535.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventAttribute.Keywords
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Keywords
  id: Keywords
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Keywords
  fullName: System.Diagnostics.Tracing.EventAttribute.Keywords
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keywords
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 25
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the keywords for the event.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Keywords\" data-throw-if-not-resolved=\"false\"></xref> property to define event keywords. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#3ETWTrace#5ETWTrace#6ETWTrace#7"
  syntax:
    content: public EventKeywords Keywords { get; set; }
    content.vb: Public Property Keywords As EventKeywords
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>A bitwise combination of the enumeration values.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Level
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Level
  id: Level
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Level
  fullName: System.Diagnostics.Tracing.EventAttribute.Level
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Level
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 26
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the level for the event.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Level\" data-throw-if-not-resolved=\"false\"></xref> property to specify event levels. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#5ETWTrace#6ETWTrace#11"
  syntax:
    content: public EventLevel Level { get; set; }
    content.vb: Public Property Level As EventLevel
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>One of the enumeration values that specifies the level for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Message
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Message
  id: Message
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.Diagnostics.Tracing.EventAttribute.Message
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 27
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the message for the event.</p>\n"
  remarks: "\n<p>You can use standard .NET Framework substitution operators (for example, {1}) in the string). They will be replaced with the string representation of the corresponding part of the event payload.</p>\n<pre><code>[Event(1, Message = \"Application Falure: {0}\", Level = EventLevel.Error, Keywords = Keywords.Diagnostic)]\npublic void Failure(string message) { WriteEvent(1, message); }</code></pre>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Message\" data-throw-if-not-resolved=\"false\"></xref> property to specify event messages. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#5ETWTrace#6ETWTrace#7"
  syntax:
    content: public string Message { get; set; }
    content.vb: Public Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The message for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Opcode
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Opcode
  id: Opcode
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Opcode
  fullName: System.Diagnostics.Tracing.EventAttribute.Opcode
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Opcode
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 28
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the operation code for the event.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Opcode\" data-throw-if-not-resolved=\"false\"></xref> property to specify operation codes. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#8ETWTrace#9ETWTrace#10"
  syntax:
    content: public EventOpcode Opcode { get; set; }
    content.vb: Public Property Opcode As EventOpcode
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventOpcode
      description: "\n<p>One of the enumeration values that specifies the operation code.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Tags
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Tags
  id: Tags
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Tags
  fullName: System.Diagnostics.Tracing.EventAttribute.Tags
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tags
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 29
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets and sets the <xref href=\"System.Diagnostics.Tracing.EventTags\" data-throw-if-not-resolved=\"false\"></xref> value for this <xref href=\"System.Diagnostics.Tracing.EventAttribute\" data-throw-if-not-resolved=\"false\"></xref> object. An event tag is a user-defined value that is passed through when the event is logged. </p>\n"
  syntax:
    content: public EventTags Tags { get; set; }
    content.vb: Public Property Tags As EventTags
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventTags
      description: "\n<p>Returns the <xref href=\"System.Diagnostics.Tracing.EventTags\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Task
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Task
  id: Task
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Task
  fullName: System.Diagnostics.Tracing.EventAttribute.Task
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Task
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 30
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the task for the event.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Task\" data-throw-if-not-resolved=\"false\"></xref> property to define event tasks. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#4ETWTrace#8ETWTrace#9"
  syntax:
    content: public EventTask Task { get; set; }
    content.vb: Public Property Task As EventTask
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventTask
      description: "\n<p>The task for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventAttribute.Version
  commentId: P:System.Diagnostics.Tracing.EventAttribute.Version
  id: Version
  parent: System.Diagnostics.Tracing.EventAttribute
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Diagnostics.Tracing.EventAttribute.Version
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Version
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 31
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets or sets the version of the event.</p>\n"
  syntax:
    content: public byte Version { get; set; }
    content.vb: Public Property Version As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>The version of the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Tracing.EventActivityOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventActivityOptions
  fullName: System.Diagnostics.Tracing.EventActivityOptions
- uid: System.Diagnostics.Tracing.EventChannel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventChannel
  fullName: System.Diagnostics.Tracing.EventChannel
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Diagnostics.Tracing.EventOpcode
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventOpcode
  fullName: System.Diagnostics.Tracing.EventOpcode
- uid: System.Diagnostics.Tracing.EventTags
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventTags
  fullName: System.Diagnostics.Tracing.EventTags
- uid: System.Diagnostics.Tracing.EventTask
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventTask
  fullName: System.Diagnostics.Tracing.EventTask
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
