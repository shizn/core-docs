items:
- uid: System.AggregateException
  commentId: T:System.AggregateException
  id: AggregateException
  parent: System
  children:
  - System.AggregateException.#ctor
  - System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  - System.AggregateException.#ctor(System.Exception[])
  - System.AggregateException.#ctor(System.String)
  - System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  - System.AggregateException.#ctor(System.String,System.Exception)
  - System.AggregateException.#ctor(System.String,System.Exception[])
  - System.AggregateException.Flatten
  - System.AggregateException.GetBaseException
  - System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  - System.AggregateException.InnerExceptions
  - System.AggregateException.ToString
  langs:
  - csharp
  - vb
  name: AggregateException
  fullName: System.AggregateException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AggregateException
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 31
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Represents one or more errors that occur during application execution.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> is used to consolidate multiple failures into a single, throwable exception object. It is used extensively in the Task Parallel Library (TPL) and Parallel LINQ (PLINQ). For additional information, see the <see href=\"http://go.microsoft.com/fwlink/p/?LinkId=259617\">Aggregating Exceptions</see> entry in the .NET Matters blog. For an example, see NIB: How to: Handle Exceptions Thrown by Tasks and How to: Handle Exceptions in a PLINQ Query.</p>\n"
  example:
  - "\n<p>The following example catches the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception and calls the <xref href=\"System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method to handle each exception it contains. Compiling and running the example with the first <code>task1</code> variable should result in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> object that contains an <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref> exception. Commenting out that line, uncommenting the second <code>task1</code> variable, and compiling and running the example produces an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> object that contains an <xref href=\"System.IndexOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>System.AggregateException.Class#1"
  syntax:
    content: >-
      [Serializable]

      [DebuggerDisplay("Count = {InnerExceptionCount}")]

      public class AggregateException : Exception, ISerializable, _Exception
    content.vb: >-
      <Serializable>

      <DebuggerDisplay("Count = {InnerExceptionCount}")>

      Public Class AggregateException
          Inherits Exception
          Implements ISerializable, _Exception
  inheritance:
  - System.Object
  - System.Exception
  implements:
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.InteropServices._Exception
  inheritedMembers:
  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Exception.GetType
  - System.Exception.Message
  - System.Exception.Data
  - System.Exception.InnerException
  - System.Exception.TargetSite
  - System.Exception.StackTrace
  - System.Exception.HelpLink
  - System.Exception.Source
  - System.Exception.HResult
  - System.Exception.SerializeObjectState
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.AggregateException.#ctor
  commentId: M:System.AggregateException.#ctor
  id: '#ctor'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException()
  fullName: System.AggregateException.AggregateException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 41
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with a system-supplied message that describes the error.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"DefaultMessageDisplayedByParameterlessCtorWriterMustSupply\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.InsufficientMemoryException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public AggregateException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  commentId: M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Exception})'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(System.Collections.Generic.IEnumerable<System.Exception>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 86
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with references to the inner exceptions that are the cause of this exception.</p>\n"
  example:
  - 
  syntax:
    content: public AggregateException(IEnumerable<Exception> innerExceptions)
    content.vb: Public Sub New(innerExceptions As IEnumerable(Of Exception))
    parameters:
    - id: innerExceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>innerExceptions</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>innerExceptions</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.Collections.Generic.IEnumerable(Of System.Exception))
  name.vb: AggregateException(IEnumerable(Of Exception))
- uid: System.AggregateException.#ctor(System.Exception[])
  commentId: M:System.AggregateException.#ctor(System.Exception[])
  id: '#ctor(System.Exception[])'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(Exception[])
  fullName: System.AggregateException.AggregateException(System.Exception[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 100
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with references to the inner exceptions that are the cause of this exception.</p>\n"
  example:
  - 
  syntax:
    content: public AggregateException(params Exception[] innerExceptions)
    content.vb: Public Sub New(ParamArray innerExceptions As Exception())
    parameters:
    - id: innerExceptions
      type: System.Exception[]
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>innerExceptions</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>innerExceptions</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.Exception())
  name.vb: AggregateException(Exception())
- uid: System.AggregateException.#ctor(System.String)
  commentId: M:System.AggregateException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String)
  fullName: System.AggregateException.AggregateException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 52
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified message that describes the error.</p>\n"
  remarks: "\n<p>The following table shows the initial property values for an instance of <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string specified in <em>message</em>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public AggregateException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  commentId: M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String, IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(System.String, System.Collections.Generic.IEnumerable<System.Exception>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 115
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and references to the inner exceptions that are the cause of this exception.</p>\n"
  example:
  - 
  syntax:
    content: public AggregateException(string message, IEnumerable<Exception> innerExceptions)
    content.vb: Public Sub New(message As String, innerExceptions As IEnumerable(Of Exception))
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerExceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>innerExceptions</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>innerExceptions</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.String, System.Collections.Generic.IEnumerable(Of System.Exception))
  name.vb: AggregateException(String, IEnumerable(Of Exception))
- uid: System.AggregateException.#ctor(System.String,System.Exception)
  commentId: M:System.AggregateException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String, Exception)
  fullName: System.AggregateException.AggregateException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 66
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string specified in <em>message</em>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public AggregateException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerException
      type: System.Exception
      description: The exception that is the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>innerException</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.#ctor(System.String,System.Exception[])
  commentId: M:System.AggregateException.#ctor(System.String,System.Exception[])
  id: '#ctor(System.String,System.Exception[])'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String, Exception[])
  fullName: System.AggregateException.AggregateException(System.String, System.Exception[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 132
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and references to the inner exceptions that are the cause of this exception.</p>\n"
  example:
  - 
  syntax:
    content: public AggregateException(string message, params Exception[] innerExceptions)
    content.vb: Public Sub New(message As String, ParamArray innerExceptions As Exception())
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerExceptions
      type: System.Exception[]
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>innerExceptions</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>innerExceptions</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.String, System.Exception())
  name.vb: AggregateException(String, Exception())
- uid: System.AggregateException.InnerExceptions
  commentId: P:System.AggregateException.InnerExceptions
  id: InnerExceptions
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: InnerExceptions
  fullName: System.AggregateException.InnerExceptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InnerExceptions
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 324
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Gets a read-only collection of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instances that caused the current exception.</p>\n"
  example:
  - 
  syntax:
    content: public ReadOnlyCollection<Exception> InnerExceptions { get; }
    content.vb: Public ReadOnly Property InnerExceptions As ReadOnlyCollection(Of Exception)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Exception}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.AggregateException.Flatten
  commentId: M:System.AggregateException.Flatten
  id: Flatten
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: Flatten()
  fullName: System.AggregateException.Flatten()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flatten
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 391
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Flattens an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instances into a single, new instance.</p>\n"
  remarks: "\n<p>If a task has an attached child task that throws an exception, that exception is wrapped in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception before it is propagated to the parent task, which wraps that exception in its own <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception before it propagates it back to the calling thread. In such cases, the <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception that is caught by the <see cref=\"Overload:System.Threading.Tasks.Task.Wait\"></see>, <see cref=\"Overload:System.Threading.Tasks.Task`1.Wait\"></see>, <see cref=\"Overload:System.Threading.Tasks.Task.WaitAny\"></see> or <see cref=\"Overload:System.Threading.Tasks.Task.WaitAll\"></see> method contains one or more <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instances, not the original exceptions that caused the fault. To avoid having to iterate over nested <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exceptions, you can use the <xref href=\"System.AggregateException.Flatten\" data-throw-if-not-resolved=\"false\"></xref> method to remove all the nested <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exceptions, so that the <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> object contains the original exceptions. </p>\n<p>This method recursively flattens all instances of  <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exceptions that are inner exceptions of the current <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instance . The inner exceptions returned in the new <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> are the union of all the inner exceptions from exception tree rooted at the current <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>In the following example, nested <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instances are flattened and handled in just one loop.</p>TPL_Exceptions#22"
  - "\n<p>You can also use the <xref href=\"System.AggregateException.Flatten\" data-throw-if-not-resolved=\"false\"></xref> method to rethrow the inner exceptions from multiple <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instances thrown by multiple tasks in a single <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> instance, as the following example shows. </p>TPL_Exceptions#13"
  syntax:
    content: public AggregateException Flatten()
    content.vb: Public Function Flatten As AggregateException
    return:
      type: System.AggregateException
      description: A new, flattened <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.GetBaseException
  commentId: M:System.AggregateException.GetBaseException
  id: GetBaseException
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: GetBaseException()
  fullName: System.AggregateException.GetBaseException()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBaseException
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 305
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Returns the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> that is the root cause of this exception.</p>\n"
  example:
  - 
  syntax:
    content: public override Exception GetBaseException()
    content.vb: Public Overrides Function GetBaseException As Exception
    return:
      type: System.Exception
  overridden: System.Exception.GetBaseException
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  commentId: M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  id: Handle(System.Func{System.Exception,System.Boolean})
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: Handle(Func<Exception, Boolean>)
  fullName: System.AggregateException.Handle(System.Func<System.Exception, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Handle
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 349
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Invokes a handler on each <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> contained by this <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Each invocation of the <em>predicate</em> returns true or false to indicate whether the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> was handled. After all invocations, if any exceptions went unhandled, all unhandled exceptions will be put into a new <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> which will be thrown. Otherwise, the <xref href=\"System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method simply returns. If any invocations of the <em>predicate</em> throws an exception, it will halt the processing of any more exceptions and immediately propagate the thrown exception as-is.</p>\n"
  example:
  - "\n<p>Ordinarily, an exception handler that catches an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception uses a <strong>foreach</strong> loop (in C#) or <strong>For Each</strong> loop (in Visual Basic) to handle each exception in its <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection. Instead, the following example uses the <xref href=\"System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method to handle each exception, and only re-throws exceptions that are not <code>CustomException</code> instances. </p>TPL_Exceptions#16"
  - "\n<p>The following is a more complete example that uses the <xref href=\"System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method to provide special handling for an <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref> when enumerating files. </p>TPL_Exceptions#12"
  syntax:
    content: public void Handle(Func<Exception, bool> predicate)
    content.vb: Public Sub Handle(predicate As Func(Of Exception, Boolean))
    parameters:
    - id: predicate
      type: System.Func{System.Exception,System.Boolean}
      description: >-
        The predicate to execute for each exception. The predicate accepts as an

        argument the <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> to be processed and returns a Boolean to indicate

        whether the exception was handled.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>predicate</em> argument is null.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>An exception contained by this <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> was not handled.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.Handle(System.Func(Of System.Exception, System.Boolean))
  name.vb: Handle(Func(Of Exception, Boolean))
- uid: System.AggregateException.ToString
  commentId: M:System.AggregateException.ToString
  id: ToString
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.AggregateException.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 463
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: "\n<p>Creates and returns a string representation of the current <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representation of the current exception.
  overridden: System.Exception.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.InteropServices._Exception
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Exception
  fullName: System.Runtime.InteropServices._Exception
- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Exception
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
- uid: System.Exception.GetType
  parent: System.Exception
  isExternal: true
  name: GetType()
  fullName: System.Exception.GetType()
  spec.csharp:
  - uid: System.Exception.GetType
    name: GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetType
    name: GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.TargetSite
  parent: System.Exception
  isExternal: true
  name: TargetSite
  fullName: System.Exception.TargetSite
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.SerializeObjectState
  parent: System.Exception
  isExternal: true
  name: SerializeObjectState
  fullName: System.Exception.SerializeObjectState
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Collections.Generic.IEnumerable{System.Exception}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Exception>
  fullName: System.Collections.Generic.IEnumerable<System.Exception>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Exception)
  name.vb: IEnumerable(Of Exception)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Exception[]
  isExternal: true
  name: Exception[]
  fullName: System.Exception[]
  fullname.vb: System.Exception()
  name.vb: Exception()
  spec.csharp:
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Exception}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Exception>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Exception>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Exception)
  name.vb: ReadOnlyCollection(Of Exception)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Func{System.Exception,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Exception, Boolean>
  fullName: System.Func<System.Exception, System.Boolean>
  fullname.vb: System.Func(Of System.Exception, System.Boolean)
  name.vb: Func(Of Exception, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
