items:
- uid: System.AggregateException
  commentId: T:System.AggregateException
  id: AggregateException
  parent: System
  children:
  - System.AggregateException.#ctor
  - System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  - System.AggregateException.#ctor(System.Exception[])
  - System.AggregateException.#ctor(System.String)
  - System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  - System.AggregateException.#ctor(System.String,System.Exception)
  - System.AggregateException.#ctor(System.String,System.Exception[])
  - System.AggregateException.Flatten
  - System.AggregateException.GetBaseException
  - System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  - System.AggregateException.InnerExceptions
  - System.AggregateException.ToString
  langs:
  - csharp
  - vb
  name: AggregateException
  fullName: System.AggregateException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AggregateException
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 31
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Represents one or more errors that occur during application execution.
  syntax:
    content: 'public class AggregateException : Exception'
    content.vb: >-
      Public Class AggregateException
          Inherits Exception
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.AggregateException.#ctor
  commentId: M:System.AggregateException.#ctor
  id: '#ctor'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException()
  fullName: System.AggregateException.AggregateException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 41
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with a system-supplied message that describes the error.
  syntax:
    content: public AggregateException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  commentId: M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Exception})'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(Collections.Generic.IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(System.Collections.Generic.IEnumerable<System.Exception>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 86
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with references to the inner exceptions that are the cause of this exception.
  syntax:
    content: public AggregateException(Collections.Generic.IEnumerable<Exception> innerExceptions)
    content.vb: Public Sub New(innerExceptions As Collections.Generic.IEnumerable(Of Exception))
    parameters:
    - id: innerExceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>innerExceptions</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>innerExceptions</em> is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.Collections.Generic.IEnumerable(Of System.Exception))
  name.vb: AggregateException(Collections.Generic.IEnumerable(Of Exception))
- uid: System.AggregateException.#ctor(System.Exception[])
  commentId: M:System.AggregateException.#ctor(System.Exception[])
  id: '#ctor(System.Exception[])'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(Exception[])
  fullName: System.AggregateException.AggregateException(System.Exception[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 100
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with references to the inner exceptions that are the cause of this exception.
  syntax:
    content: public AggregateException(params Exception[] innerExceptions)
    content.vb: Public Sub New(ParamArray innerExceptions As Exception())
    parameters:
    - id: innerExceptions
      type: System.Exception[]
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>innerExceptions</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>innerExceptions</em> is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.Exception())
  name.vb: AggregateException(Exception())
- uid: System.AggregateException.#ctor(System.String)
  commentId: M:System.AggregateException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String)
  fullName: System.AggregateException.AggregateException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 52
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with a specified message that describes the error.
  syntax:
    content: public AggregateException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  commentId: M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String, Collections.Generic.IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(System.String, System.Collections.Generic.IEnumerable<System.Exception>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 115
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with a specified error message and references to the inner exceptions that are the cause of this exception.
  syntax:
    content: public AggregateException(string message, Collections.Generic.IEnumerable<Exception> innerExceptions)
    content.vb: Public Sub New(message As String, innerExceptions As Collections.Generic.IEnumerable(Of Exception))
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerExceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>innerExceptions</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>innerExceptions</em> is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.String, System.Collections.Generic.IEnumerable(Of System.Exception))
  name.vb: AggregateException(String, Collections.Generic.IEnumerable(Of Exception))
- uid: System.AggregateException.#ctor(System.String,System.Exception)
  commentId: M:System.AggregateException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String, Exception)
  fullName: System.AggregateException.AggregateException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 66
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.
  syntax:
    content: public AggregateException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: 'The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. '
    - id: innerException
      type: System.Exception
      description: 'The exception that is the cause of the current exception. If the <em>innerException</em> parameter is not null, the current exception is raised in a catch block that handles the inner exception. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>innerException</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.#ctor(System.String,System.Exception[])
  commentId: M:System.AggregateException.#ctor(System.String,System.Exception[])
  id: '#ctor(System.String,System.Exception[])'
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: AggregateException(String, Exception[])
  fullName: System.AggregateException.AggregateException(System.String, System.Exception[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 132
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> class with a specified error message and references to the inner exceptions that are the cause of this exception.
  syntax:
    content: public AggregateException(string message, params Exception[] innerExceptions)
    content.vb: Public Sub New(message As String, ParamArray innerExceptions As Exception())
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerExceptions
      type: System.Exception[]
      description: The exceptions that are the cause of the current exception.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>innerExceptions</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>innerExceptions</em> is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.AggregateException(System.String, System.Exception())
  name.vb: AggregateException(String, Exception())
- uid: System.AggregateException.InnerExceptions
  commentId: P:System.AggregateException.InnerExceptions
  id: InnerExceptions
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: InnerExceptions
  fullName: System.AggregateException.InnerExceptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InnerExceptions
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 324
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Gets a read-only collection of the <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instances that caused the current exception.
  syntax:
    content: public Collections.ObjectModel.ReadOnlyCollection<Exception> InnerExceptions { get; }
    content.vb: Public ReadOnly Property InnerExceptions As Collections.ObjectModel.ReadOnlyCollection(Of Exception)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Exception}
      description: Returns a read-only collection of the <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instances that caused the current exception.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.AggregateException.Flatten
  commentId: M:System.AggregateException.Flatten
  id: Flatten
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: Flatten()
  fullName: System.AggregateException.Flatten()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flatten
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 391
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Flattens an <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> instances into a single, new instance.
  syntax:
    content: public AggregateException Flatten()
    content.vb: Public Function Flatten As AggregateException
    return:
      type: System.AggregateException
      description: A new, flattened <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AggregateException.GetBaseException
  commentId: M:System.AggregateException.GetBaseException
  id: GetBaseException
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: GetBaseException()
  fullName: System.AggregateException.GetBaseException()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBaseException
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 305
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Returns the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> that is the root cause of this exception.
  syntax:
    content: public override Exception GetBaseException()
    content.vb: Public Overrides Function GetBaseException As Exception
    return:
      type: System.Exception
      description: Returns the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> that is the root cause of this exception.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  commentId: M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  id: Handle(System.Func{System.Exception,System.Boolean})
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: Handle(Func<Exception, Boolean>)
  fullName: System.AggregateException.Handle(System.Func<System.Exception, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Handle
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 349
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Invokes a handler on each <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> contained by this <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Handle(Func<Exception, bool> predicate)
    content.vb: Public Sub Handle(predicate As Func(Of Exception, Boolean))
    parameters:
    - id: predicate
      type: System.Func{System.Exception,System.Boolean}
      description: The predicate to execute for each exception. The predicate accepts as an argument the <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> to be processed and returns a Boolean to indicate whether the exception was handled.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>predicate</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: An exception contained by this <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> was not handled.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.AggregateException.Handle(System.Func(Of System.Exception, System.Boolean))
  name.vb: Handle(Func(Of Exception, Boolean))
- uid: System.AggregateException.ToString
  commentId: M:System.AggregateException.ToString
  id: ToString
  parent: System.AggregateException
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.AggregateException.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/AggregateException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/AggregateException.cs
    startLine: 463
  assemblies:
  - System.Threading.Tasks
  namespace: System
  summary: Creates and returns a string representation of the current <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representation of the current exception.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{System.Exception}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Exception>
  fullName: System.Collections.Generic.IEnumerable<System.Exception>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Exception)
  name.vb: Collections.Generic.IEnumerable(Of Exception)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Exception[]
  isExternal: true
  name: Exception[]
  fullName: System.Exception[]
  fullname.vb: System.Exception()
  name.vb: Exception()
  spec.csharp:
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Exception}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<Exception>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Exception>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Exception)
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of Exception)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.Func{System.Exception,System.Boolean}
  definition: System.Func`2
  name: Func<Exception, Boolean>
  fullName: System.Func<System.Exception, System.Boolean>
  fullname.vb: System.Func(Of System.Exception, System.Boolean)
  name.vb: Func(Of Exception, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
