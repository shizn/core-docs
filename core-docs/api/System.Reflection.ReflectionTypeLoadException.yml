items:
- uid: System.Reflection.ReflectionTypeLoadException
  commentId: T:System.Reflection.ReflectionTypeLoadException
  id: ReflectionTypeLoadException
  parent: System.Reflection
  children:
  - System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])
  - System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)
  - System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  - System.Reflection.ReflectionTypeLoadException.Types
  langs:
  - csharp
  - vb
  name: ReflectionTypeLoadException
  fullName: System.Reflection.ReflectionTypeLoadException
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReflectionTypeLoadException
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 254
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>The exception that is thrown by the <xref href=\"System.Reflection.Module.GetTypes\" data-throw-if-not-resolved=\"false\"></xref> method if any of the classes in a module cannot be loaded. This class cannot be inherited.</p>\n"
  remarks: "\n<p>\n<strong>ReflectionTypeLoadException</strong> uses the HRESULT COR_E_REFLECTIONTYPELOAD that has the value 0x80131602.</p>\n<p>An instance contains the array of classes (Types property) that were defined in the module and were loaded. The array can contain some null values. There is also another array of exceptions (<strong>LoaderExceptions</strong> property). This exception array represents the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.</p>\n<p>This exception exposes both the array of classes and the array of <strong>TypeLoadExceptions</strong>.</p>\n"
  syntax:
    content: 'public sealed class ReflectionTypeLoadException : Exception'
    content.vb: >-
      Public NotInheritable Class ReflectionTypeLoadException
          Inherits Exception
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])
  commentId: M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])
  id: '#ctor(System.Type[],System.Exception[])'
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: ReflectionTypeLoadException(Type[], Exception[])
  fullName: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type[], System.Exception[])
  type: Constructor
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 256
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.ReflectionTypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class with the given classes and their associated exceptions.</p>\n"
  syntax:
    content: public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions)
    content.vb: Public Sub New(classes As Type(), exceptions As Exception())
    parameters:
    - id: classes
      type: System.Type[]
      description: "\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values. </p>\n"
    - id: exceptions
      type: System.Exception[]
      description: "\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader. The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type(), System.Exception())
  name.vb: ReflectionTypeLoadException(Type(), Exception())
- uid: System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)
  commentId: M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)
  id: '#ctor(System.Type[],System.Exception[],System.String)'
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: ReflectionTypeLoadException(Type[], Exception[], String)
  fullName: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type[], System.Exception[], System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 257
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.ReflectionTypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class with the given classes, their associated exceptions, and exception descriptions.</p>\n"
  syntax:
    content: public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message)
    content.vb: Public Sub New(classes As Type(), exceptions As Exception(), message As String)
    parameters:
    - id: classes
      type: System.Type[]
      description: "\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values. </p>\n"
    - id: exceptions
      type: System.Exception[]
      description: "\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader. The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array. </p>\n"
    - id: message
      type: System.String
      description: "\n<p>A <strong>String</strong> describing the reason the exception was thrown. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type(), System.Exception(), System.String)
  name.vb: ReflectionTypeLoadException(Type(), Exception(), String)
- uid: System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  commentId: P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  id: LoaderExceptions
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: LoaderExceptions
  fullName: System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LoaderExceptions
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 258
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the array of exceptions thrown by the class loader.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\" data-throw-if-not-resolved=\"false\"></xref> property retrieves an array of type <strong>Exception</strong> that is parallel to the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\" data-throw-if-not-resolved=\"false\"></xref> array. This array will contain null values whenever reflection cannot load a class.</p>\n"
  syntax:
    content: public Exception[] LoaderExceptions { get; }
    content.vb: Public ReadOnly Property LoaderExceptions As Exception()
    parameters: []
    return:
      type: System.Exception[]
      description: "\n<p>An array of type <strong>Exception</strong> containing the exceptions thrown by the class loader. The null values in the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\" data-throw-if-not-resolved=\"false\"></xref> array of this instance line up with the exceptions in this array.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.ReflectionTypeLoadException.Types
  commentId: P:System.Reflection.ReflectionTypeLoadException.Types
  id: Types
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: Types
  fullName: System.Reflection.ReflectionTypeLoadException.Types
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Types
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 259
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the array of classes that were defined in the module and loaded.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\" data-throw-if-not-resolved=\"false\"></xref> property retrieves an array of type <strong>Exception</strong> that is parallel to this <strong>Types</strong> array. This array will contain null values whenever reflection cannot load a class.</p>\n"
  syntax:
    content: public Type[] Types { get; }
    content.vb: Public ReadOnly Property Types As Type()
    parameters: []
    return:
      type: System.Type[]
      description: "\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain some <strong>null</strong> values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Exception[]
  isExternal: true
  name: Exception[]
  fullName: System.Exception[]
  fullname.vb: System.Exception()
  name.vb: Exception()
  spec.csharp:
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
