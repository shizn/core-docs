items:
- uid: System.Net.Sockets.UdpClient
  commentId: T:System.Net.Sockets.UdpClient
  id: UdpClient
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  - vb
  name: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UdpClient
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 454
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Provides User Datagram Protocol (UDP) network services.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways: </p>\n<ul><li>\n<p>Create an instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class using the remote host name and port number as parameters.</p>\n</li><li>\n<p>Create an instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and then call the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n<p>You can use any of the send methods provided in the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to send data to a remote device. Use the <xref href=\"System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\" data-throw-if-not-resolved=\"false\"></xref> method to receive data from remote hosts.</p>\n<p>Do not call <xref href=\"System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\" data-throw-if-not-resolved=\"false\"></xref> using a host name or <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> if you have already specified a default remote host. If you do, <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> will throw an exception.</p>\n<p>\n<xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> methods also allow you to send and receive multicast datagrams. Use the <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method to subscribe a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group. Use the <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method to unsubscribe a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> from a multicast group.</p>\n"
  example:
  - "\n<p>The following example establishes a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref href=\"System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\" data-throw-if-not-resolved=\"false\"></xref> method blocks execution until a message is received. Using the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> passed to <xref href=\"System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\" data-throw-if-not-resolved=\"false\"></xref>, the identity of the responding host is revealed.</p>Classic UdpClientExample#1"
  syntax:
    content: 'public class UdpClient : IDisposable'
    content.vb: >-
      Public Class UdpClient
          Implements IDisposable
  seealso:
  - type: System.Net.Sockets.TcpClient
    commentId: T:System.Net.Sockets.TcpClient
  see:
  - type: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.UdpClient.#ctor
  commentId: M:System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 456
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n<p>This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the default constructor to create an instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Classic UdpClient.PublicMethodsAndPropertiesExample#4"
  syntax:
    content: public UdpClient()
    content.vb: Public Sub New
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 457
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and binds it to the local port number provided.</p>\n"
  remarks: "\n<p>This constructor creates an underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n<p>This constructor works only with IPv4 address types.</p>\n"
  example:
  - "\n<p>The following example demonstrates using a local port number to create an instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Classic UdpClient.PublicMethodsAndPropertiesExample#1"
  syntax:
    content: public UdpClient(int port)
    content.vb: Public Sub New(port As Integer)
    parameters:
    - id: port
      type: System.Int32
      description: "\n<p>The local port number from which you intend to communicate. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>port</em> parameter is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(Int32, AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Int32, System.Net.Sockets.AddressFamily)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 458
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and binds it to the local port number provided.</p>\n"
  remarks: "\n<p>This constructor creates an underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> and binds it to the port number from which you intend to communicate.</p>\n<p>The <em>family</em> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> value. To use an IPv6 address, pass the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> value. Passing any other value will cause the method to throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If this constructor is used, the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> instance is set with the address family specified by the <em>family</em> parameter  that cannot be changed or overwritten by a connect method call with a different address family.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a UDP client to use in a multicast group.</p>System.Net.Sockets.UdpClient.JoinMulticastGroup#3"
  syntax:
    content: public UdpClient(int port, AddressFamily family)
    content.vb: Public Sub New(port As Integer, family As AddressFamily)
    parameters:
    - id: port
      type: System.Int32
      description: "\n<p>The port on which to listen for incoming connection attempts. </p>\n"
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the addressing scheme of the socket. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>family</em> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Net.IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 459
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and binds it to the specified local endpoint.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> and binds it to the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> specified by the <em>localEP</em> parameter. Before you call this constructor, you must create an <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.</p>\n<p>If this constructor is used, the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> instance is set with the address family specified by the <em>localEP</em> parameter  that cannot be changed or overwritten by a connect method call with a different address family.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class using a local endpoint.</p>Classic UdpClient.PublicMethodsAndPropertiesExample#2"
  syntax:
    content: public UdpClient(IPEndPoint localEP)
    content.vb: Public Sub New(localEP As IPEndPoint)
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "\n<p>An <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> that respresents the local endpoint to which you bind the UDP connection. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  seealso:
  - type: System.Net.IPEndPoint
    commentId: T:System.Net.IPEndPoint
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Net.Sockets.AddressFamily)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 460
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <em>family</em> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> value. To use an IPv6 address, pass the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> value. Passing any other value will cause the method to throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If this constructor is used, the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> instance is set with the address family specified by the <em>family</em> parameter  that cannot be changed or overwritten by a connect method call with a different address family.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n<p>The <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref> is not suitable for joining a multicast group because it does not perform socket binding.</p>\n"
  syntax:
    content: public UdpClient(AddressFamily family)
    content.vb: Public Sub New(family As AddressFamily)
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the addressing scheme of the socket. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>family</em> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.Active
  commentId: P:System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Active
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 461
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value indicating whether a default remote host has been established.</p>\n"
  remarks: "\n<p>Classes deriving from <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref href=\"System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected bool Active { get; set; }
    content.vb: Protected Property Active As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a connection is active; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient
    commentId: T:System.Net.Sockets.UdpClient
  - type: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
    commentId: M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - type: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
    commentId: M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Net.Sockets.UdpClient.Available
  commentId: P:System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Available
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 462
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the amount of data received from the network that is available to read.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient.Available\" data-throw-if-not-resolved=\"false\"></xref> property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to get the data. If no data is available, the <xref href=\"System.Net.Sockets.UdpClient.Available\" data-throw-if-not-resolved=\"false\"></xref> property returns 0.</p>\n<p>If the remote host shuts down or closes the connection, the <xref href=\"System.Net.Sockets.UdpClient.Available\" data-throw-if-not-resolved=\"false\"></xref> property throws a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p> If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code and refer to the WindowsÂ Sockets version 2 API error code documentation in the MSDN library at <see href=\"http://msdn.microsoft.com/library\">http://msdn.microsoft.com/library</see>/ for a detailed description of the error.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Net.Sockets.UdpClient.Available\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Net.Sockets.UdpClient#1"
  syntax:
    content: public int Available { get; }
    content.vb: Public ReadOnly Property Available As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of bytes of data received from the network.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred while attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.UdpClient.Client
  commentId: P:System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Client
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 463
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the underlying network <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> creates a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> used to send and receive data over a network. Classes deriving from <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> can use this property to get or set this <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. Use the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> returned from <xref href=\"System.Net.Sockets.UdpClient.Client\" data-throw-if-not-resolved=\"false\"></xref> if you require access beyond that which <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> provides. You can also use <xref href=\"System.Net.Sockets.UdpClient.Client\" data-throw-if-not-resolved=\"false\"></xref> to set the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to an existing <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. This is useful if you want to take advantage of the simplicity of <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> using a pre-existing <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Net.Sockets.UdpClient.Client\" data-throw-if-not-resolved=\"false\"></xref> property. In this example, broadcasting is enabled for the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic UdpClient.ProtectedMethodsAndPropertiesExample#1"
  syntax:
    content: public Socket Client { get; set; }
    content.vb: Public Property Client As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The underlying Network <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.DontFragment
  commentId: P:System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DontFragment
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 464
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.</p>\n"
  remarks: "\n<p>Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref href=\"System.Net.Sockets.Socket.DontFragment\" data-throw-if-not-resolved=\"false\"></xref> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Net.Sockets.Socket.DontFragment\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Net.Sockets.UdpClient#2"
  syntax:
    content: public bool DontFragment { get; set; }
    content.vb: Public Property DontFragment As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows datagram fragmentation; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property can be set only for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  commentId: P:System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableBroadcast
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 465
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> may send or receive broadcast packets.</p>\n"
  remarks: "\n<p>Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Net.Sockets.UdpClient.EnableBroadcast\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Net.Sockets.UdpClient#3"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    content.vb: Public Property EnableBroadcast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows broadcast packets; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveAddressUse
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 466
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows only one client to use a port.</p>\n"
  remarks: "\n<p>By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref href=\"System.Net.Sockets.UdpClient.ExclusiveAddressUse\" data-throw-if-not-resolved=\"false\"></xref> property to prevent multiple clients from using a specific port.</p>\n<p>This property must be set before the underlying socket is bound to a client port. If you call <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref href=\"System.Net.Sockets.UdpClient.ExclusiveAddressUse\" data-throw-if-not-resolved=\"false\"></xref> property </p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref>, and gets and sets the <xref href=\"System.Net.Sockets.UdpClient.ExclusiveAddressUse\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Net.Sockets.UdpClient#4"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows only one client to use a specific port; otherwise, <strong>false</strong>. The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <strong>false</strong> for all other versions.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the underlying socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  commentId: P:System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastLoopback
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 467
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether outgoing multicast packets are delivered to the sending application.</p>\n"
  remarks: "\n<p>Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address. </p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Net.Sockets.UdpClient.MulticastLoopback\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Net.Sockets.UdpClient#7"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    content.vb: Public Property MulticastLoopback As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> receives outgoing multicast packets; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.Ttl
  commentId: P:System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ttl
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 468
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Net.Sockets.UdpClient.Ttl\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Net.Sockets.UdpClient#5"
  syntax:
    content: public short Ttl { get; set; }
    content.vb: Public Property Ttl As Short
    parameters: []
    return:
      type: System.Int16
      description: "\n<p>The TTL value.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.Dispose
  commentId: M:System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 469
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  commentId: M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 470
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources. </p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong><strong></strong>method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is true, this method releases all resources held by any managed objects that this <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DropMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 471
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Leaves a multicast group.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method withdraws the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> from the multicast group identified by the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>. After calling the <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method, the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to drop a multicast group by providing a multicast address.</p>System.Net.Sockets.UdpClient.JoinMulticastGroup#2"
  syntax:
    content: public void DropMulticastGroup(IPAddress multicastAddr)
    content.vb: Public Sub DropMulticastGroup(multicastAddr As IPAddress)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the multicast group to leave. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>multicastAddr</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: DropMulticastGroup(IPAddress, Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DropMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 472
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Leaves a multicast group.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method withdraws the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> from the multicast group identified by the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>. After calling the <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. After you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to drop a multicast group by providing a multicast address.</p>System.Net.Sockets.UdpClient.JoinMulticastGroup#2"
  syntax:
    content: public void DropMulticastGroup(IPAddress multicastAddr, int ifindex)
    content.vb: Public Sub DropMulticastGroup(multicastAddr As IPAddress, ifindex As Integer)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the multicast group to leave. </p>\n"
    - id: ifindex
      type: System.Int32
      description: "\n<p>The local address of the multicast group to leave.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>multicastAddr</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(Int32, IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 473
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group.</p>\n"
  remarks: "\n<p>Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</p>\n<p>The <em>infindex</em> parameter is used to identify a hardware interface on the same link.</p>\n<p>There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.</p>\n<p>You cannot call <see cref=\"Overload:System.Net.Sockets.UdpClient.JoinMulticastGroup\"></see> on a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> constructed without a specific local port (that is, using the <xref href=\"System.Net.Sockets.UdpClient.#ctor\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref> constructor).</p>\n"
  example:
  - System.Net.Sockets.UdpClient.JoinMulticastGroup#5
  syntax:
    content: public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr)
    content.vb: Public Sub JoinMulticastGroup(ifindex As Integer, multicastAddr As IPAddress)
    parameters:
    - id: ifindex
      type: System.Int32
      description: "\n<p>The interface index associated with the local IP address on which to join the multicast group.</p>\n"
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The multicast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group you want to join. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 474
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method subscribes the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group using the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>. After calling the <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method, the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> will throw a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>. If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You must create the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method prior to calling the <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method, or the <xref href=\"System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\" data-throw-if-not-resolved=\"false\"></xref> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.</p>\n<p>Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.</p>\n<p>To stop receiving multicasted datagrams, call the <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method and provide the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group from which you would like to withdraw.</p>\n<p>In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.</p>\n<p>You cannot call <see cref=\"Overload:System.Net.Sockets.UdpClient.JoinMulticastGroup\"></see> on a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> constructed without a specific local port (that is, using the <xref href=\"System.Net.Sockets.UdpClient.#ctor\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref> constructor).</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to join a multicast group by providing a multicast address.</p>System.Net.Sockets.UdpClient.JoinMulticastGroup#1"
  syntax:
    content: public void JoinMulticastGroup(IPAddress multicastAddr)
    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The multicast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group you want to join. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(IPAddress, Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 475
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group with the specified Time to Live (TTL).</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method subscribes the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group using the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>. After calling the <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method, the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> will throw a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>. If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The <em>timeToLive</em> parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You must create the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method prior to calling the <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.</p>\n<p>Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.</p>\n<p>To stop receiving multicasted datagrams, call the <xref href=\"System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method and provide the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group from which you would like to withdraw.</p>\n<p>You cannot call <see cref=\"Overload:System.Net.Sockets.UdpClient.JoinMulticastGroup\"></see> on a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> constructed without a specific local port (that is, using the <xref href=\"System.Net.Sockets.UdpClient.#ctor\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref> constructor).</p>\n"
  example:
  - "\n<p>The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.</p>Classic UdpClient.PublicMethodsAndPropertiesExample#13"
  syntax:
    content: public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive)
    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress, timeToLive As Integer)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the multicast group to join. </p>\n"
    - id: timeToLive
      type: System.Int32
      description: "\n<p>The Time to Live (TTL), measured in router hops. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The TTL provided is not between 0 and 255 </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>multicastAddr</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(IPAddress, IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 476
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group.</p>\n"
  remarks: "\n<p>Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</p>\n<p>There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.</p>\n<p>You cannot call <see cref=\"Overload:System.Net.Sockets.UdpClient.JoinMulticastGroup\"></see> on a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> constructed without a specific local port (that is, using the <xref href=\"System.Net.Sockets.UdpClient.#ctor\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref> constructor).</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Net.Sockets.UdpClient#6"
  syntax:
    content: public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress)
    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress, localAddress As IPAddress)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The multicast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group you want to join.</p>\n"
    - id: localAddress
      type: System.Net.IPAddress
      description: "\n<p>The local <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  commentId: M:System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 477
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns a UDP datagram asynchronously that was sent by a remote host.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the UDP packet has been received.</p>\n<p>If you specify a default remote host in the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, this method will accept datagrams from that host only. All other datagrams will be discarded.</p>\n<p>If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n<p>If you intend to receive multicasted datagrams, do not call the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method prior to calling this method. The <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> you use to receive datagrams must be created using the multicast port number.</p>\n"
  syntax:
    content: public Task<UdpReceiveResult> ReceiveAsync()
    content.vb: Public Function ReceiveAsync As Task(Of UdpReceiveResult)
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>  has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: SendAsync(Byte[], Int32, IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(System.Byte[], System.Int32, System.Net.IPEndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 478
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends a UDP datagram asynchronously to a remote host.</p>\n"
  remarks: "\n<p>This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref href=\"System.Net.Sockets.SocketOptionName.Broadcast\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Net.IPAddress.Address\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>. After you have created this <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>, pass it to this method as the <em>endPoint</em> parameter.</p>\n<p>If you want to send datagrams to any other broadcast address, use the <xref href=\"System.Net.Sockets.UdpClient.Client\" data-throw-if-not-resolved=\"false\"></xref> method to obtain the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, and set the socket option to <xref href=\"System.Net.Sockets.SocketOptionName.Broadcast\" data-throw-if-not-resolved=\"false\"></xref>. You can also revert to using the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Do not provide an <em>endPoint</em> parameter to this method if you have already established a remote host with the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. If you do, this method will throw a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>. If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  syntax:
    content: public Task<int> SendAsync(byte[] datagram, int bytes, IPEndPoint endPoint)
    content.vb: Public Function SendAsync(datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n"
    - id: bytes
      type: System.Int32
      description: "\n<p>The number of bytes in the datagram.</p>\n"
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "\n<p>An <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the host and port to which to send the datagram.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dgram</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> has already established a default remote host. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.UdpClient.SendAsync(System.Byte(), System.Int32, System.Net.IPEndPoint)
  name.vb: SendAsync(Byte(), Int32, IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: SendAsync(Byte[], Int32, String, Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(System.Byte[], System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 479
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends a UDP datagram asynchronously to a remote host.</p>\n"
  remarks: "\n<p>This method sends datagrams to the values specified by the <em>hostname</em> and <em>port</em> parameters. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the <em>hostname</em> parameter value.</p>\n<p>If you want to send datagrams to any other broadcast address, use the <xref href=\"System.Net.Sockets.UdpClient.Client\" data-throw-if-not-resolved=\"false\"></xref> method to obtain the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, and set the socket option to <xref href=\"System.Net.Sockets.SocketOptionName.Broadcast\" data-throw-if-not-resolved=\"false\"></xref>. You can also revert to using the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Do not provide a host name or port number to this method if you have already established a remote host with the <xref href=\"System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. If you do, this method will throw a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>. If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> to obtain the specific error code. Once you have obtained this code, you can refer to the WindowsÂ Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  syntax:
    content: public Task<int> SendAsync(byte[] datagram, int bytes, string hostname, int port)
    content.vb: Public Function SendAsync(datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n"
    - id: bytes
      type: System.Int32
      description: "\n<p>The number of bytes in the datagram.</p>\n"
    - id: hostname
      type: System.String
      description: "\n<p>The name of the remote host to which you intend to send the datagram.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The remote port number with which you intend to communicate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dgram</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> has already established a default remote host. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.UdpClient.SendAsync(System.Byte(), System.Int32, System.String, System.Int32)
  name.vb: SendAsync(Byte(), Int32, String, Int32)
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.IPEndPoint
  isExternal: false
  name: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.UdpReceiveResult)
  name.vb: Task(Of UdpReceiveResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
