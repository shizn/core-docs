items:
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  id: ClaimsPrincipal
  parent: System.Security.Claims
  children:
  - System.Security.Claims.ClaimsPrincipal.#ctor
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.Identity
  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  type: Class
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClaimsPrincipal
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 80
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>An <xref href=\"System.Security.Principal.IPrincipal\" data-throw-if-not-resolved=\"false\"></xref> implementation that supports multiple claims-based identities.</p>\n"
  remarks: "\n<p>Beginning with .NET Framework 4.5, Windows Identity Foundation (WIF) and claims-based identity have been fully integrated into the .NET Framework. This means that many classes that represent a principal in the .NET Framework now derive from <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> rather than simply implementing the <xref href=\"System.Security.Principal.IPrincipal\" data-throw-if-not-resolved=\"false\"></xref> interface. In addition to implementing the <xref href=\"System.Security.Principal.IPrincipal\" data-throw-if-not-resolved=\"false\"></xref> interface, <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> exposes properties and methods that are useful for working with claims.</p>\n<p>\n<xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> exposes a collection of identities, each of which is a <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>. In the common case, this collection, which is accessed through the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> property, will only have a single element.</p>\n<p>The introduction of <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> in .NET 4.5 as the principal from which most principal classes derive does not force you to change anything in the way in which you deal with identity. It does, however open up more possibilities and offer more chances to exercise finer access control. For example:</p>\n<ul><li>\n<p>The application code itself can work directly with the claims contained in the current principal to drive extra authentication, authorization, and personalization tasks.</p>\n</li><li>\n<p>You can front your resources with a claims processing pipeline, which can deal with authentication requests and authorization policy even before execution reaches your code. For example, you can configure a web-based application or service with a custom claims authentication manager, an instance of a class that derives from the <xref href=\"System.Security.Claims.ClaimsAuthenticationManager\" data-throw-if-not-resolved=\"false\"></xref> class. When so configured, the request processing pipeline invokes the <xref href=\"System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)\" data-throw-if-not-resolved=\"false\"></xref> method on your claims authentication manager passing it a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> that represents the context of the incoming request. Your claims authentication manager can then perform authentication based on the values of the incoming claims. It can also filter, transform, or add claims to the incoming claim set. For example, it could be used to enrich the incoming claim set with new claims created from a local data source such as a local user profile</p>\n</li><li>\n<p>You can configure a web-based application with a custom claims authorization manager, an instance of a class that derives from the <xref href=\"System.Security.Claims.ClaimsAuthorizationManager\" data-throw-if-not-resolved=\"false\"></xref> class. When so configured, the request processing pipeline packages the incoming <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> in an <xref href=\"System.Security.Claims.AuthorizationContext\" data-throw-if-not-resolved=\"false\"></xref> and invokes the <xref href=\"System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)\" data-throw-if-not-resolved=\"false\"></xref> method on your claims authorization manager. Your claims authorization manager can then enforce authorization based on the incoming claims.</p>\n</li><li>\n<p>Inline claims-based code access checks can be performed by configuring your application with a custom claims authorization manager and using either the <xref href=\"System.IdentityModel.Services.ClaimsPrincipalPermission\" data-throw-if-not-resolved=\"false\"></xref> class to perform imperative access checks or the <xref href=\"System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute\" data-throw-if-not-resolved=\"false\"></xref> to perform declarative access checks. Claims-based code access checks are performed inline, outside of the processing pipeline, and so are available to all applications as long as a claims authorization manager is configured.</p>\n</li></ul>\n<p>You can obtain a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> instance for the principal associated with a request in an RP application (or the principal under which a thread is executing) by casting the <xref href=\"System.Threading.Thread.CurrentPrincipal\" data-throw-if-not-resolved=\"false\"></xref> property to <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref>. The claims associated with an <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> object are available through its <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> property returns all of the claims contained by the identities associated with the principal. In the uncommon case in which the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> contains multiple <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> instances, you can use the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> property or you can access the primary identity by using the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identity\" data-throw-if-not-resolved=\"false\"></xref> property. <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> provides several methods through which these claims may be searched and fully supports Language Integrated Query (LINQ). Identities can be added to the principal by using the <xref href=\"System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>To add identities to the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref>, a caller must have full trust. </p>\n<p>By default, WIF prioritizes <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> objects when selecting the primary identity to return through the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identity\" data-throw-if-not-resolved=\"false\"></xref> property. You can modify this behavior by supplying a delegate through the <xref href=\"System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\" data-throw-if-not-resolved=\"false\"></xref> property to perform the selection. The <xref href=\"System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\" data-throw-if-not-resolved=\"false\"></xref> property provides similar functionality for the <xref href=\"System.Security.Claims.ClaimsPrincipal.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>In the claim-based model, whether a principal is in a specified role is determined by the claims presented by its underlying identities. The <xref href=\"System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method essentially examines each identity associated with the principal to determine whether it possesses a claim with the specified role value. The type of the claim (represented by its <xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref> property) used to determine which claims should be examined during role checks is specified on an identity through its <xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> property. Thus, the claims examined during role checks can be of a different type for different identities associated with the principal.</p>\n"
  example:
  - "\n<p>The following example extracts the claims presented by a user in an HTTP request and writes them to the HTTP response. The current user is read from the <xref href=\"System.Web.HttpContext\" data-throw-if-not-resolved=\"false\"></xref> as a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref>. The claims are then read from it and then are written to the response. </p>\n<pre><code>ClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;\nif (null != principal)\n{\nforeach (Claim claim in principal.Claims)\n{\nResponse.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");\n}\n}</code></pre>\n"
  syntax:
    content: 'public class ClaimsPrincipal : IPrincipal'
    content.vb: >-
      Public Class ClaimsPrincipal
          Implements IPrincipal
  seealso:
  - type: System.Security.Claims.Claim
    commentId: T:System.Security.Claims.Claim
  - type: System.Security.Claims.ClaimsIdentity
    commentId: T:System.Security.Claims.ClaimsIdentity
  - type: System.Security.Claims.ClaimsAuthenticationManager
    commentId: T:System.Security.Claims.ClaimsAuthenticationManager
  - type: System.Security.Claims.ClaimsAuthorizationManager
    commentId: T:System.Security.Claims.ClaimsAuthorizationManager
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IPrincipal
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 82
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>No identities are associated with the new instance. (The <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection is empty).</p>\n"
  syntax:
    content: public ClaimsPrincipal()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 83
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class using the specified claims identities.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection is initialized with the specified identities. </p>\n"
  syntax:
    content: public ClaimsPrincipal(IEnumerable<ClaimsIdentity> identities)
    content.vb: Public Sub New(identities As IEnumerable(Of ClaimsIdentity))
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The identities from which to initialize the new claims principal.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identities</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))
  name.vb: ClaimsPrincipal(IEnumerable(Of ClaimsIdentity))
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.IO.BinaryReader)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 84
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public ClaimsPrincipal(BinaryReader reader)
    content.vb: Public Sub New(reader As BinaryReader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Security.Principal.IIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 85
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class from the specified identity.</p>\n"
  remarks: "\n<p>If the specified identity is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, it is used to initialize the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection. Otherwise, a <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> is created using the specified identity and is used to initialize the collection.</p>\n"
  syntax:
    content: public ClaimsPrincipal(IIdentity identity)
    content.vb: Public Sub New(identity As IIdentity)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to initialize the new claims principal.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  id: '#ctor(System.Security.Principal.IPrincipal)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Security.Principal.IPrincipal)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 86
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class from the specified principal.</p>\n"
  remarks: "\n<p>If the specified principal is assignable from <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref>, all of its identities are added to the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection. If the specified principal is not assignable from <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref>, a new <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> is created from the <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"System.Security.Principal.IPrincipal.Identity\" data-throw-if-not-resolved=\"false\"></xref> property and added to the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public ClaimsPrincipal(IPrincipal principal)
    content.vb: Public Sub New(principal As IPrincipal)
    parameters:
    - id: principal
      type: System.Security.Principal.IPrincipal
      description: "\n<p>The principal from which to initialize the new claims principal.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>principal</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  commentId: P:System.Security.Claims.ClaimsPrincipal.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 87
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.</p>\n"
  remarks: "\n<p>A claims principal has a collection of <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> objects that is accessible through the Identities property. Each <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> in the collection contains one or more claims. The <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> property returns all of the claims from all of the claims identities in this collection.</p>\n<p>The <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> property can be examined by custom implementations of the <xref href=\"System.Security.Claims.ClaimsAuthenticationManager\" data-throw-if-not-resolved=\"false\"></xref> class to make authentication decisions or to filter, transform, or enrich an incoming claim set; by custom implementations of the <xref href=\"System.Security.Claims.ClaimsAuthorizationManager\" data-throw-if-not-resolved=\"false\"></xref> class to enforce authorization policy; or by application code to make authorization decisions or to customize user experience based on the claims present in the collection.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> Claims { get; }
    content.vb: Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims associated with this principal.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  id: ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClaimsPrincipalSelector
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 88
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets and sets the delegate used to select the claims principal returned by the <xref href=\"System.Security.Claims.ClaimsPrincipal.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>You can set this property to override the default behavior of the <xref href=\"System.Security.Claims.ClaimsPrincipal.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: >-
      public static Func<ClaimsPrincipal> ClaimsPrincipalSelector

      {
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Shared Property ClaimsPrincipalSelector As Func(Of ClaimsPrincipal)
    parameters: []
    return:
      type: System.Func{System.Security.Claims.ClaimsPrincipal}
      description: "\n<p>The delegate. The default is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.Current
    commentId: P:System.Security.Claims.ClaimsPrincipal.Current
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Claims.ClaimsPrincipal.Current
  commentId: P:System.Security.Claims.ClaimsPrincipal.Current
  id: Current
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 89
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the current claims principal.</p>\n"
  remarks: "\n<p>By default, <xref href=\"System.Threading.Thread.CurrentPrincipal\" data-throw-if-not-resolved=\"false\"></xref> is returned. You can change this behavior by setting the <xref href=\"System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\" data-throw-if-not-resolved=\"false\"></xref> property to specify a delegate to be called to determine the current principal.</p>\n"
  syntax:
    content: public static ClaimsPrincipal Current { get; }
    content.vb: Public Shared ReadOnly Property Current As ClaimsPrincipal
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "\n<p>The current claims principal.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
    commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  commentId: P:System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomSerializationData
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 90
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  commentId: P:System.Security.Claims.ClaimsPrincipal.Identities
  id: Identities
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Identities
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 91
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a collection that contains all of the claims identities associated with this claims principal.</p>\n"
  remarks: "\n<p>In the common case, the collection contains only a single element.</p>\n<p>It is possible for the collection to contain some elements which are <strong>null</strong>.</p>\n"
  syntax:
    content: public virtual IEnumerable<ClaimsIdentity> Identities { get; }
    content.vb: Public Overridable ReadOnly Property Identities As IEnumerable(Of ClaimsIdentity)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The collection of claims identities.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  commentId: P:System.Security.Claims.ClaimsPrincipal.Identity
  id: Identity
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Identity
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 92
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the primary claims identity associated with this claims principal.</p>\n"
  remarks: "\n<p>By default, the framework prioritizes identities of type <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> when returning the identity. The first <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> found in the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection is returned. If there is no <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> in the collection, the first identity assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> is returned. If there is no <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, <strong>null</strong> is returned. If the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection is empty, an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>You can change the default behavior by setting the <xref href=\"System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\" data-throw-if-not-resolved=\"false\"></xref> property to specify a delegate to be called to determine the identity.</p>\n"
  syntax:
    content: public virtual IIdentity Identity { get; }
    content.vb: Public Overridable ReadOnly Property Identity As IIdentity
    parameters: []
    return:
      type: System.Security.Principal.IIdentity
      description: "\n<p>The primary claims identity associated with this claims principal.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
    commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  implements:
  - System.Security.Principal.IPrincipal.Identity
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  id: PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrimaryIdentitySelector
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 93
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets and sets the delegate used to select the claims identity returned by the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>You can set this property to override the default behavior of the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: >-
      public static Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity> PrimaryIdentitySelector

      {
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Shared Property PrimaryIdentitySelector As Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)
    parameters: []
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The delegate. The default is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.Identity
    commentId: P:System.Security.Claims.ClaimsPrincipal.Identity
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddIdentities
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 94
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds the specified claims identities to this claims principal.</p>\n"
  remarks: "\n<p>The identities are added to the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void AddIdentities(IEnumerable<ClaimsIdentity> identities)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub AddIdentities(identities As IEnumerable(Of ClaimsIdentity))
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The claims identities to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identities</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))
  name.vb: AddIdentities(IEnumerable(Of ClaimsIdentity))
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  id: AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddIdentity
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 96
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds the specified claims identity to this claims principal.</p>\n"
  remarks: "\n<p>The identity is added to the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identities\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void AddIdentity(ClaimsIdentity identity)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub AddIdentity(identity As ClaimsIdentity)
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The claims identity to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  commentId: M:System.Security.Claims.ClaimsPrincipal.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 98
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a copy of this instance.</p>\n"
  syntax:
    content: public virtual ClaimsPrincipal Clone()
    content.vb: Public Overridable Function Clone As ClaimsPrincipal
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "\n<p>A new copy of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  id: CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateClaimsIdentity
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 99
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Creates a new claims identity.</p>\n"
  syntax:
    content: protected virtual ClaimsIdentity CreateClaimsIdentity(BinaryReader reader)
    content.vb: Protected Overridable Function CreateClaimsIdentity(reader As BinaryReader) As ClaimsIdentity
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p>The binary reader.</p>\n"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The created claims identity.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 100
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all of the claims that are matched by the specified predicate.</p>\n"
  remarks: "\n<p>Returns claims from all identities associated with the claims principal.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(Predicate<Claim> match)
    content.vb: Public Overridable Function FindAll(match As Predicate(Of Claim)) As IEnumerable(Of Claim)
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindAll(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 101
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all or the claims that have the specified claim type.</p>\n"
  remarks: "\n<p>Returns claims from all identities associated with the claims principal. The comparison is made using Ordinal case in-sensitive on <em>type</em>.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(string type)
    content.vb: Public Overridable Function FindAll(type As String) As IEnumerable(Of Claim)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type against which to match claims.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 102
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(Predicate<Claim> match)
    content.vb: Public Overridable Function FindFirst(match As Predicate(Of Claim)) As Claim
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindFirst(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 103
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim with the specified claim type.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(string type)
    content.vb: Public Overridable Function FindFirst(type As String) As Claim
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type to match.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 104
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual bool HasClaim(Predicate<Claim> match)
    content.vb: Public Overridable Function HasClaim(match As Predicate(Of Claim)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: HasClaim(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: HasClaim(String, String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 105
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.</p>\n"
  remarks: "\n<p>Does not check the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> properties. The comparison is made using Ordinal, case sensitive on value; case in-sensitive on type.</p>\n"
  syntax:
    content: public virtual bool HasClaim(string type, string value)
    content.vb: Public Overridable Function HasClaim(type As String, value As String) As Boolean
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The type of the claim to match.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the claim to match.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInRole
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 106
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method checks whether an identity that this claims principal possesses contains a claim of type <xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> where the value of the claim is equal to the value specified by the <em>role</em> parameter.</p>\n<p>Each <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> has its own definition of the claim type that represents a role. This claim type can be accessed and set through the <xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public virtual bool IsInRole(string role)
    content.vb: Public Overridable Function IsInRole(role As String) As Boolean
    parameters:
    - id: role
      type: System.String
      description: "\n<p>The role for which to check.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if claims principal is in the specified role; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Security.Principal.IPrincipal.IsInRole(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 107
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public virtual void WriteTo(BinaryWriter writer)
    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 108
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)
    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
    - id: userData
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
references:
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: false
  name: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity)
  name.vb: IEnumerable(Of ClaimsIdentity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: false
  name: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Func{System.Security.Claims.ClaimsPrincipal}
  parent: System
  definition: System.Func`1
  name: Func<ClaimsPrincipal>
  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>
  fullname.vb: System.Func(Of System.Security.Claims.ClaimsPrincipal)
  name.vb: Func(Of ClaimsPrincipal)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Security.Principal.IPrincipal.Identity
  parent: System.Security.Principal.IPrincipal
  isExternal: true
  name: Identity
  fullName: System.Security.Principal.IPrincipal.Identity
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity>
  fullname.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity), System.Security.Claims.ClaimsIdentity)
  name.vb: Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  fullname.vb: System.Predicate(Of System.Security.Claims.Claim)
  name.vb: Predicate(Of Claim)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.IPrincipal.IsInRole(System.String)
  parent: System.Security.Principal.IPrincipal
  isExternal: true
  name: IsInRole(String)
  fullName: System.Security.Principal.IPrincipal.IsInRole(System.String)
  spec.csharp:
  - uid: System.Security.Principal.IPrincipal.IsInRole(System.String)
    name: IsInRole
    fullName: System.Security.Principal.IPrincipal.IsInRole
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IPrincipal.IsInRole(System.String)
    name: IsInRole
    fullName: System.Security.Principal.IPrincipal.IsInRole
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
