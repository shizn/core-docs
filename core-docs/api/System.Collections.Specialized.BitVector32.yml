items:
- uid: System.Collections.Specialized.BitVector32
  commentId: T:System.Collections.Specialized.BitVector32
  id: BitVector32
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)
  - System.Collections.Specialized.BitVector32.#ctor(System.Int32)
  - System.Collections.Specialized.BitVector32.CreateMask
  - System.Collections.Specialized.BitVector32.CreateMask(System.Int32)
  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)
  - System.Collections.Specialized.BitVector32.Data
  - System.Collections.Specialized.BitVector32.Equals(System.Object)
  - System.Collections.Specialized.BitVector32.GetHashCode
  - System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)
  - System.Collections.Specialized.BitVector32.Item(System.Int32)
  - System.Collections.Specialized.BitVector32.ToString
  - System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)
  langs:
  - csharp
  - vb
  name: BitVector32
  fullName: System.Collections.Specialized.BitVector32
  type: Struct
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BitVector32
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 13
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> is more efficient than <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> for Boolean values and small integers that are used internally. A <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> uses only 32 bits.</p>\n<p>A <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> is a window into the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref href=\"System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Some members can be used for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\" data-throw-if-not-resolved=\"false\"></xref> property is the indexer for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections, and the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property is the indexer for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as bit flags. <xref href=\"System.Collections.Specialized.BitVector32.CreateMask\" data-throw-if-not-resolved=\"false\"></xref> creates a series of masks that can be used to access individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as bit flags.</p>\n<p>Using a mask on a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections might cause unexpected results.</p>\n"
  example:
  - "\n<p>The following code example uses a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> as a collection of bit flags.</p>System.Collections.Specialized.BitVector32_BitFlags#1<p>The following code example uses a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> as a collection of sections.</p>System.Collections.Specialized.BitVector32_Sections#1"
  syntax:
    content: public struct BitVector32
    content.vb: Public Structure BitVector32
  seealso:
  - type: System.Collections.BitArray
    commentId: T:System.Collections.BitArray
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)
  commentId: M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)
  id: '#ctor(System.Collections.Specialized.BitVector32)'
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: BitVector32(BitVector32)
  fullName: System.Collections.Specialized.BitVector32.BitVector32(System.Collections.Specialized.BitVector32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 29
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> structure containing the data represented in an existing <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  remarks: "\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public BitVector32(BitVector32 value)
    content.vb: Public Sub New(value As BitVector32)
    parameters:
    - id: value
      type: System.Collections.Specialized.BitVector32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.BitVector32.#ctor(System.Int32)
  commentId: M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: BitVector32(Int32)
  fullName: System.Collections.Specialized.BitVector32.BitVector32(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 20
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> structure containing the data represented in an integer.</p>\n"
  remarks: "\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public BitVector32(int data)
    content.vb: Public Sub New(data As Integer)
    parameters:
    - id: data
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.BitVector32.Data
  commentId: P:System.Collections.Specialized.BitVector32.Data
  id: Data
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: Data
  fullName: System.Collections.Specialized.BitVector32.Data
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Data
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 81
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the value of the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> as an integer.</p>\n"
  remarks: "\n<p>To access the value of the individual sections or bit flags, use the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Data { get; }
    content.vb: Public ReadOnly Property Data As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Collections.Specialized.BitVector32.Item(System.Int32)
    commentId: P:System.Collections.Specialized.BitVector32.Item(System.Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)
  commentId: P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)
  id: Item(System.Collections.Specialized.BitVector32.Section)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: Item[BitVector32.Section]
  fullName: System.Collections.Specialized.BitVector32.Item[System.Collections.Specialized.BitVector32.Section]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 59
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> [Section] property is the indexer for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections, and the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> [int] property is the indexer for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as bit flags.</p>\n<p>A <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> is a window into the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref href=\"System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  syntax:
    content: public int this[BitVector32.Section section] { get; set; }
    content.vb: Public Property Item(section As BitVector32.Section) As Integer
    parameters:
    - id: section
      type: System.Collections.Specialized.BitVector32.Section
    return:
      type: System.Int32
  seealso:
  - type: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
    commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
  - type: System.Collections.Specialized.BitVector32.Section
    commentId: T:System.Collections.Specialized.BitVector32.Section
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)
  name.vb: Item(BitVector32.Section)
- uid: System.Collections.Specialized.BitVector32.Item(System.Int32)
  commentId: P:System.Collections.Specialized.BitVector32.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Specialized.BitVector32.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 37
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the state of the bit flag indicated by the specified mask.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> [Section] property is the indexer for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections, and the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> [int] property is the indexer for a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as bit flags.</p>\n<p>Using this property on a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections might cause unexpected results.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.BitVector32.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  syntax:
    content: public bool this[int bit] { get; set; }
    content.vb: Public Property Item(bit As Integer) As Boolean
    parameters:
    - id: bit
      type: System.Int32
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.Specialized.BitVector32.CreateMask
    commentId: M:System.Collections.Specialized.BitVector32.CreateMask
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.BitVector32.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Specialized.BitVector32.CreateMask
  commentId: M:System.Collections.Specialized.BitVector32.CreateMask
  id: CreateMask
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: CreateMask()
  fullName: System.Collections.Specialized.BitVector32.CreateMask()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateMask
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 104
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as bit flags.</p>\n"
  remarks: "\n<p>Use <code>CreateMask()</code> to create the first mask in a series and <code>CreateMask(int)</code> for all subsequent masks.</p>\n<p>Multiple masks can be created to refer to the same bit flag.</p>\n<p>The resulting mask isolates only one bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Using a mask on a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections might cause unexpected results.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to create and use masks.</p>System.Collections.Specialized.BitVector32.CreateMasks#1"
  syntax:
    content: public static int CreateMask()
    content.vb: Public Shared Function CreateMask As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)
  commentId: M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)
  id: CreateMask(System.Int32)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: CreateMask(Int32)
  fullName: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateMask
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 112
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as bit flags.</p>\n"
  remarks: "\n<p>Use <code>CreateMask()</code> to create the first mask in a series and <code>CreateMask(int)</code> for all subsequent masks.</p>\n<p>Multiple masks can be created to refer to the same bit flag.</p>\n<p>The resulting mask isolates only one bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Using a mask on a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> that is set up as sections might cause unexpected results.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to create and use masks.</p>System.Collections.Specialized.BitVector32.CreateMasks#1"
  syntax:
    content: public static int CreateMask(int previous)
    content.vb: Public Shared Function CreateMask(previous As Integer) As Integer
    parameters:
    - id: previous
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>previous</em> indicates the last bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
  commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
  id: CreateSection(System.Int16)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: CreateSection(Int16)
  fullName: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSection
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 153
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates the first <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> in a series of sections that contain small integers.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> is a window into the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref href=\"System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If sections already exist in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>, those sections are still accessible; however, overlapping sections might cause unexpected results.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example uses a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> as a collection of sections.</p>System.Collections.Specialized.BitVector32_Sections#1"
  syntax:
    content: public static BitVector32.Section CreateSection(short maxValue)
    content.vb: Public Shared Function CreateSection(maxValue As Short) As BitVector32.Section
    parameters:
    - id: maxValue
      type: System.Int16
    return:
      type: System.Collections.Specialized.BitVector32.Section
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>maxValue</em> is less than 1. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)
  commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)
  id: CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: CreateSection(Int16, BitVector32.Section)
  fullName: System.Collections.Specialized.BitVector32.CreateSection(System.Int16, System.Collections.Specialized.BitVector32.Section)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSection
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 161
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates a new <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> following the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> in a series of sections that contain small integers.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> is a window into the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref href=\"System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref href=\"System.Collections.Specialized.BitVector32.Section\" data-throw-if-not-resolved=\"false\"></xref> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If sections already exist after <em>previous</em> in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>, those sections are still accessible; however, overlapping sections might cause unexpected results.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example uses a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> as a collection of sections.</p>System.Collections.Specialized.BitVector32_Sections#1"
  syntax:
    content: public static BitVector32.Section CreateSection(short maxValue, BitVector32.Section previous)
    content.vb: Public Shared Function CreateSection(maxValue As Short, previous As BitVector32.Section) As BitVector32.Section
    parameters:
    - id: maxValue
      type: System.Int16
    - id: previous
      type: System.Collections.Specialized.BitVector32.Section
    return:
      type: System.Collections.Specialized.BitVector32.Section
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>maxValue</em> is less than 1. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>previous</em> includes the final bit in the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>maxValue</em> is greater than the highest value that can be represented by the number of bits after <em>previous</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Specialized.BitVector32.Equals(System.Object)
  commentId: M:System.Collections.Specialized.BitVector32.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Collections.Specialized.BitVector32.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 181
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Determines whether the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The object <em>o</em> is considered equal to the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> if the type of <em>o</em> is compatible with the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> type and if the value of <em>o</em> is equal to the value of <xref href=\"System.Collections.Specialized.BitVector32.Data\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example compares a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> with another <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> and with an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.BitVector32.Equals#1"
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Collections.Specialized.BitVector32.GetHashCode
  commentId: M:System.Collections.Specialized.BitVector32.GetHashCode
  id: GetHashCode
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Collections.Specialized.BitVector32.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 191
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Serves as a hash function for the <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The hash code of a <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> is based on the value of <xref href=\"System.Collections.Specialized.BitVector32.Data\" data-throw-if-not-resolved=\"false\"></xref>. Two instances of <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> with the same value for <xref href=\"System.Collections.Specialized.BitVector32.Data\" data-throw-if-not-resolved=\"false\"></xref> will also generate the same hash code.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Collections.Specialized.BitVector32.ToString
  commentId: M:System.Collections.Specialized.BitVector32.ToString
  id: ToString
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Collections.Specialized.BitVector32.ToString()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 217
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  seealso:
  - type: System.Object.ToString
    commentId: M:System.Object.ToString
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)
  commentId: M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)
  id: ToString(System.Collections.Specialized.BitVector32)
  parent: System.Collections.Specialized.BitVector32
  langs:
  - csharp
  - vb
  name: ToString(BitVector32)
  fullName: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs
    startLine: 196
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns a string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public static string ToString(BitVector32 value)
    content.vb: Public Shared Function ToString(value As BitVector32) As String
    parameters:
    - id: value
      type: System.Collections.Specialized.BitVector32
    return:
      type: System.String
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Specialized.BitVector32
  parent: System.Collections.Specialized
  isExternal: false
  name: BitVector32
  fullName: System.Collections.Specialized.BitVector32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.BitVector32.Section
  parent: System.Collections.Specialized
  isExternal: false
  name: BitVector32.Section
  fullName: System.Collections.Specialized.BitVector32.Section
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
