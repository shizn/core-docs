items:
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  id: Stream
  parent: System.IO
  children:
  - System.IO.Stream.#ctor
  - System.IO.Stream.CanRead
  - System.IO.Stream.CanSeek
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.CanWrite
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.Dispose
  - System.IO.Stream.Dispose(System.Boolean)
  - System.IO.Stream.Flush
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.Stream.Length
  - System.IO.Stream.Null
  - System.IO.Stream.Position
  - System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadByte
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Stream.SetLength(System.Int64)
  - System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.WriteByte(System.Byte)
  - System.IO.Stream.WriteTimeout
  langs:
  - csharp
  - vb
  name: Stream
  fullName: System.IO.Stream
  type: Class
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stream
    path: src/System.IO/ref/System.IO.cs
    startLine: 152
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Provides a generic view of a sequence of bytes. This is an abstract class.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>\n<xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</p>\n<p>Streams involve three fundamental operations: </p>\n<ul><li>\n<p>You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</p>\n</li><li>\n<p>You can write to streams. Writing is the transfer of data from a data structure into a stream.</p>\n</li><li>\n<p>Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</p>\n</li></ul>\n<p>Some of the more commonly used streams that inherit from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> are <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <xref href=\"System.IO.Stream.CanRead\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The <xref href=\"System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods read and write data in a variety of formats. For streams that support seeking, use the <xref href=\"System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Stream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> methods and the <xref href=\"System.IO.Stream.Position\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Stream.Length\" data-throw-if-not-resolved=\"false\"></xref> properties to query and modify the current position and length of a stream.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>Disposing a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object flushes any buffered data, and essentially calls the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method for you. <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <xref href=\"System.IO.BufferedStream\" data-throw-if-not-resolved=\"false\"></xref> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</p>\n<p>Starting with the .NET Framework 4.5, the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class includes async methods to simplify asynchronous operations. An async method contains <strong>Async</strong> in its name, such as <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>. These methods enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>When used in a Windows 8.x Store app, <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> includes two extension methods: <xref href=\"System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>. These methods convert a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object to a stream in the Windows Runtime. You can also convert a stream in the Windows Runtime to a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object by using the <xref href=\"System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream)\" data-throw-if-not-resolved=\"false\"></xref> methods. For more information, see How to: Convert Between .NET Framework Streams and Windows Runtime Streams</p>\n<p>Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Stream.FlushAsync\" data-throw-if-not-resolved=\"false\"></xref> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</p>\n<p>If you need a stream with no backing store (also known as a bit bucket), use the <xref href=\"System.IO.Stream.Null\" data-throw-if-not-resolved=\"false\"></xref> field to retrieve an instance of a stream that is designed for this purpose.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use two <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects to asynchronously copy the files from one directory to another directory. The <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class derives from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class. Notice that the <xref href=\"System.Web.UI.WebControls.Button.Click\" data-throw-if-not-resolved=\"false\"></xref> event handler for the <xref href=\"System.Windows.Controls.Button\" data-throw-if-not-resolved=\"false\"></xref> control is marked with the <strong>async</strong> modifier because it calls an asynchronous method.</p>Asynchronous_File_IO_async#1"
  syntax:
    content: 'public abstract class Stream : IDisposable'
    content.vb: >-
      Public MustInherit Class Stream
          Inherits IDisposable
  seealso:
  - type: System.IO.FileStream
    commentId: T:System.IO.FileStream
  - type: System.IO.MemoryStream
    commentId: T:System.IO.MemoryStream
  - type: System.IO.BufferedStream
    commentId: T:System.IO.BufferedStream
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.IO.Stream.Null
  commentId: F:System.IO.Stream.Null
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  fullName: System.IO.Stream.Null
  type: Field
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.IO/ref/System.IO.cs
    startLine: 154
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>A <strong>Stream</strong> with no backing store.</p>\n"
  remarks: "\n<p>Use <strong>Null</strong> to redirect output to a stream that will not consume any operating system resources. When the methods of <strong>Stream</strong> that provide writing are invoked on <strong>Null</strong>, the call simply returns, and no data is written. <strong>Null</strong> also implements a <strong>Read</strong> method that returns zero without reading data.</p>\n"
  syntax:
    content: public static readonly Stream Null
    content.vb: Public Shared ReadOnly Null As Stream
    return:
      type: System.IO.Stream
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.Stream.#ctor
  commentId: M:System.IO.Stream.#ctor
  id: '#ctor'
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Stream()
  fullName: System.IO.Stream.Stream()
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 155
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> is the abstract base class of all streams. </p>\n<p>Some of the more commonly used streams that inherit from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> are <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: protected Stream()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.Stream.CanRead
  commentId: P:System.IO.Stream.CanRead
  id: CanRead
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.Stream.CanRead
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.IO/ref/System.IO.cs
    startLine: 156
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support reading, calls to the <xref href=\"System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following is an example of using the <strong>CanRead</strong> property.</p>Classic FileStream.CanRead Example#1"
  syntax:
    content: public abstract bool CanRead { get; }
    content.vb: Public MustOverride ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream supports reading; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.Stream.CanSeek
  commentId: P:System.IO.Stream.CanSeek
  id: CanSeek
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.Stream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.IO/ref/System.IO.cs
    startLine: 157
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support seeking, calls to <xref href=\"System.IO.Stream.Length\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.Position\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  syntax:
    content: public abstract bool CanSeek { get; }
    content.vb: Public MustOverride ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream supports seeking; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.Stream.CanTimeout
  commentId: P:System.IO.Stream.CanTimeout
  id: CanTimeout
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CanTimeout
  fullName: System.IO.Stream.CanTimeout
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanTimeout
    path: src/System.IO/ref/System.IO.cs
    startLine: 158
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets a value that determines whether the current stream can time out.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.CanTimeout\" data-throw-if-not-resolved=\"false\"></xref> property always returns <strong>false</strong>. Some stream implementations require different behavior, such as <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>, which times out if network connectivity is interrupted or lost. If you are implementing a stream that must be able to time out, this property should be overridden to return <strong>true</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool CanTimeout { get; }
    content.vb: Public Overridable ReadOnly Property CanTimeout As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>A value that determines whether the current stream can time out.</p>\n"
  seealso:
  - type: System.IO.Stream.ReadTimeout
    commentId: P:System.IO.Stream.ReadTimeout
  - type: System.IO.Stream.WriteTimeout
    commentId: P:System.IO.Stream.WriteTimeout
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.Stream.CanWrite
  commentId: P:System.IO.Stream.CanWrite
  id: CanWrite
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.Stream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.IO/ref/System.IO.cs
    startLine: 159
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support writing, a call to <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.Stream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following is an example of using the <strong>CanWrite</strong> property.</p>Classic Stream.CanWrite Example#1"
  syntax:
    content: public abstract bool CanWrite { get; }
    content.vb: Public MustOverride ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream supports writing; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.Stream.Length
  commentId: P:System.IO.Stream.Length
  id: Length
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.Stream.Length
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO/ref/System.IO.cs
    startLine: 160
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, gets the length in bytes of the stream.</p>\n"
  syntax:
    content: public abstract long Length { get; }
    content.vb: Public MustOverride ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>A long value representing the length of the stream in bytes.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>A class derived from <strong>Stream</strong> does not support seeking. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.Stream.Position
  commentId: P:System.IO.Stream.Position
  id: Position
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.Stream.Position
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.IO/ref/System.IO.cs
    startLine: 161
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, gets or sets the position within the current stream.</p>\n"
  remarks: "\n<p>The stream must support seeking to get or set the position. Use the <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the stream supports seeking.</p>\n<p>Seeking to any location beyond the length of the stream is supported.</p>\n<p>The <strong>Position</strong> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</p>\n"
  example:
  - 
  syntax:
    content: public abstract long Position { get; set; }
    content.vb: Public MustOverride Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The current position within the stream.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support seeking. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.IO.Stream.ReadTimeout
  commentId: P:System.IO.Stream.ReadTimeout
  id: ReadTimeout
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadTimeout
    path: src/System.IO/ref/System.IO.cs
    startLine: 162
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. </p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadTimeout { get; set; }
    content.vb: Public Overridable Property ReadTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.IO.Stream.ReadTimeout\" data-throw-if-not-resolved=\"false\"></xref> method always throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.Stream.WriteTimeout
  commentId: P:System.IO.Stream.WriteTimeout
  id: WriteTimeout
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTimeout
    path: src/System.IO/ref/System.IO.cs
    startLine: 163
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. </p>\n"
  example:
  - "\n<p></p>\n"
  syntax:
    content: public virtual int WriteTimeout { get; set; }
    content.vb: Public Overridable Property WriteTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.IO.Stream.WriteTimeout\" data-throw-if-not-resolved=\"false\"></xref> method always throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)
  id: CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.IO/ref/System.IO.cs
    startLine: 164
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the bytes from the current stream and writes them to another stream.</p>\n"
  remarks: "\n<p>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</p>\n"
  example:
  - "\n<p>The following example copies the contents of a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.IO.Stream.CopyTo#1"
  syntax:
    content: public void CopyTo(Stream destination)
    content.vb: Public Sub CopyTo(destination As Stream)
    parameters:
    - id: destination
      type: System.IO.Stream
      description: "\n<p>The stream to which the contents of the current stream will be copied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading.</p>\n<p>-or-</p>\n<p>\n<em>destination</em> does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Either the current stream or <em>destination</em> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method was called.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  id: CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.IO/ref/System.IO.cs
    startLine: 165
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\n"
  remarks: "\n<p> Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</p>\n"
  example:
  - 
  syntax:
    content: public void CopyTo(Stream destination, int bufferSize)
    content.vb: Public Sub CopyTo(destination As Stream, bufferSize As Integer)
    parameters:
    - id: destination
      type: System.IO.Stream
      description: "\n<p>The stream to which the contents of the current stream will be copied.</p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>The size of the buffer. This value must be greater than zero. The default size is 81920.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is negative or zero.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading.</p>\n<p>-or-</p>\n<p>\n<em>destination</em> does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Either the current stream or <em>destination</em> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method was called.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyToAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 166
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads the bytes from the current stream and writes them to another stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Copying begins at the current position in the current stream.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use two <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects to asynchronously copy the files from one directory to another. The <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class derives from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class.  Notice that the <xref href=\"System.Web.UI.WebControls.Button.Click\" data-throw-if-not-resolved=\"false\"></xref> event handler for the <xref href=\"System.Windows.Controls.Button\" data-throw-if-not-resolved=\"false\"></xref> control is marked with the <strong>async</strong> modifier because it calls an asynchronous method</p>Asynchronous_File_IO_async#1"
  syntax:
    content: public Threading.Tasks.Task CopyToAsync(Stream destination)
    content.vb: Public Function CopyToAsync(destination As Stream) As Threading.Tasks.Task
    parameters:
    - id: destination
      type: System.IO.Stream
      description: "\n<p>The stream to which the contents of the current stream will be copied.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous copy operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Either the current stream or the destination stream is disposed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  id: CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyToAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 167
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Copying begins at the current position in the current stream.</p>\n<p>For an example of copying between two streams, see the <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  syntax:
    content: public Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize)
    content.vb: Public Function CopyToAsync(destination As Stream, bufferSize As Integer) As Threading.Tasks.Task
    parameters:
    - id: destination
      type: System.IO.Stream
      description: "\n<p>The stream to which the contents of the current stream will be copied.</p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous copy operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>buffersize</em> is negative or zero.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Either the current stream or the destination stream is disposed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: CopyToAsync(Stream, Int32, Threading.CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyToAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 168
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Copying begins at the current position in the current stream.</p>\n<p>For an example of copying between two streams, see the <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken)
    content.vb: Public Overridable Function CopyToAsync(destination As Stream, bufferSize As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: destination
      type: System.IO.Stream
      description: "\n<p>The stream to which the contents of the current stream will be copied.</p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous copy operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>buffersize</em> is negative or zero.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Either the current stream or the destination stream is disposed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.Stream.Dispose
  commentId: M:System.IO.Stream.Dispose
  id: Dispose
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.Stream.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 169
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases all resources used by the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources. </p>\n<p>Calling <strong>Dispose</strong> allows the resources used by the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> to be reallocated for other purposes. For more information about <strong>Dispose</strong>, see Cleaning Up Unmanaged Resources.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Stream.Dispose(System.Boolean)
  commentId: M:System.IO.Stream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 170
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>You should release all resources by specifying <strong>true</strong> for <em>disposing</em>. When <em>disposing</em> is <strong>true</strong>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.  This may not be possible when called from a finalizer due a lack of ordering among finalizers.  </p>\n<p>If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref href=\"System.Runtime.InteropServices.SafeHandle\" data-throw-if-not-resolved=\"false\"></xref> for this purpose. </p>\n<p>This method is called by the public <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.Stream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.Stream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.Stream.Flush
  commentId: M:System.IO.Stream.Flush
  id: Flush
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.Stream.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO/ref/System.IO.cs
    startLine: 171
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\n"
  remarks: "\n<p>Override <strong>Flush</strong> on streams that implement a buffer. Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both. Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking). For additional information see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When using the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class, do not flush the base <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object. Instead, use the class's <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</p>\n"
  syntax:
    content: public abstract void Flush()
    content.vb: Public MustOverride Sub Flush
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.IO.Stream.FlushAsync
  commentId: M:System.IO.Stream.FlushAsync
  id: FlushAsync
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 172
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\n"
  remarks: "\n<p>If a derived class, such as <xref href=\"System.IO.Compression.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Compression.GZipStream\" data-throw-if-not-resolved=\"false\"></xref>, does not flush the buffer in its implementation of the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.IO.Stream.FlushAsync\" data-throw-if-not-resolved=\"false\"></xref> method will not flush the buffer.</p>\n"
  syntax:
    content: public Threading.Tasks.Task FlushAsync()
    content.vb: Public Function FlushAsync As Threading.Tasks.Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous flush operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 173
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>If a derived class, such as <xref href=\"System.IO.Compression.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Compression.GZipStream\" data-throw-if-not-resolved=\"false\"></xref>, does not flush the buffer in its implementation of the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method will not flush the buffer.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overridable Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous flush operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO/ref/System.IO.cs
    startLine: 174
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Stream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading. Use the <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to read asynchronously from the current stream.</p>\n<p>Implementations of this method read a maximum of <em>count</em> bytes from the current stream and store them in <em>buffer</em> beginning at <em>offset</em>. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Implementations return the number of bytes read. The implementation will block until at least one byte of data can be read, in the event that no data is available. <xref href=\"System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</p>\n<p>Use <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> for reading primitive data types.</p>\n"
  example:
  - "\n<p>The following example shows how to use <xref href=\"System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to read a block of data.</p>Classic Stream.Read Example#1"
  syntax:
    content: public abstract int Read(byte[] buffer, int offset, int count)
    content.vb: Public MustOverride Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the bytes read from the current source. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> at which to begin storing the data read from the current stream. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to be read from the current stream. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 175
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Use the <xref href=\"System.IO.Stream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading.</p>\n"
  example:
  - "\n<p>The following example shows how to read from a file asynchronously. The example uses the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class, which derives from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Asynchronous_File_IO_async#4"
  syntax:
    content: public Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count)
    content.vb: Public Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write the data into.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 176
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Use the <xref href=\"System.IO.Stream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>For an example, see the <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overridable Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write the data into.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.Stream.ReadByte
  commentId: M:System.IO.Stream.ReadByte
  id: ReadByte
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.Stream.ReadByte()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadByte
    path: src/System.IO/ref/System.IO.cs
    startLine: 177
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Stream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading.</p>\n<p>Attempts to manipulate the stream after the stream has been closed could throw an <xref href=\"System.ObjectDisposedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int ReadByte()
    content.vb: Public Overridable Function ReadByte As Integer
    return:
      type: System.Int32
      description: "\n<p>The unsigned byte cast to an <strong>Int32</strong>, or -1 if at the end of the stream.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO/ref/System.IO.cs
    startLine: 178
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, sets the position within the current stream.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports seeking.</p>\n<p>If <em>offset</em> is negative, the new position is required to precede the position specified by <em>origin</em> by the number of bytes specified by <em>offset</em>. If <em>offset</em> is zero (0), the new position is required to be the position specified by <em>origin</em>. If <em>offset</em> is positive, the new position is required to follow the position specified by <em>origin</em> by the number of bytes specified by <em>offset</em>.</p>\n<p>Classes derived from <strong>Stream</strong> that support seeking must override this method to provide the functionality described above.</p>\n<p>Seeking to any location beyond the length of the stream is supported.</p>\n"
  example:
  - 
  syntax:
    content: public abstract long Seek(long offset, SeekOrigin origin)
    content.vb: Public MustOverride Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>A byte offset relative to the <em>origin</em> parameter. </p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>A value of type <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> indicating the reference point used to obtain the new position. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new position within the current stream.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.IO.Stream.SetLength(System.Int64)
  commentId: M:System.IO.Stream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.Stream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.IO/ref/System.IO.cs
    startLine: 179
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, sets the length of the current stream.</p>\n"
  remarks: "\n<p>If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.</p>\n<p>A stream must support both writing and seeking for <strong>SetLength</strong> to work.</p>\n<p>Use the <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing, and the <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether seeking is supported.</p>\n"
  syntax:
    content: public abstract void SetLength(long value)
    content.vb: Public MustOverride Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The desired length of the current stream in bytes. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 180
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing. Use the <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to write asynchronously to the current stream.</p>\n<p>If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged. </p>\n"
  syntax:
    content: public abstract void Write(byte[] buffer, int offset, int count)
    content.vb: Public MustOverride Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of bytes. This method copies <em>count</em> bytes from <em>buffer</em> to the current stream. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to be written to the current stream. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em>  is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occured, such as the specified file cannot be found.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> was called after the stream was closed.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 181
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Use the <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing.</p>\n"
  example:
  - "\n<p>The following example shows how to write asynchronously to a file. The example uses the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class, which derives from the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Asynchronous_File_IO_async#3"
  syntax:
    content: public Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count)
    content.vb: Public Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write data from.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 182
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Use the <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>For an example, see the <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overridable Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write data from.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.Stream.WriteByte(System.Byte)
  commentId: M:System.IO.Stream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.Stream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteByte
    path: src/System.IO/ref/System.IO.cs
    startLine: 183
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing.</p>\n"
  syntax:
    content: public virtual void WriteByte(byte value)
    content.vb: Public Overridable Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The byte to write to the stream. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing, or the stream is already closed. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
