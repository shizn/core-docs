items:
- uid: System.Diagnostics.ProcessThread
  commentId: T:System.Diagnostics.ProcessThread
  id: ProcessThread
  parent: System.Diagnostics
  children:
  - System.Diagnostics.ProcessThread.BasePriority
  - System.Diagnostics.ProcessThread.CurrentPriority
  - System.Diagnostics.ProcessThread.Id
  - System.Diagnostics.ProcessThread.IdealProcessor
  - System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - System.Diagnostics.ProcessThread.PriorityLevel
  - System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - System.Diagnostics.ProcessThread.ProcessorAffinity
  - System.Diagnostics.ProcessThread.ResetIdealProcessor
  - System.Diagnostics.ProcessThread.StartAddress
  - System.Diagnostics.ProcessThread.StartTime
  - System.Diagnostics.ProcessThread.ThreadState
  - System.Diagnostics.ProcessThread.TotalProcessorTime
  - System.Diagnostics.ProcessThread.UserProcessorTime
  - System.Diagnostics.ProcessThread.WaitReason
  langs:
  - csharp
  - vb
  name: ProcessThread
  fullName: System.Diagnostics.ProcessThread
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessThread
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 13
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Represents an operating system process thread.</p>\n"
  remarks: "\n<p>Use <xref href=\"System.Diagnostics.ProcessThread\" data-throw-if-not-resolved=\"false\"></xref> to obtain information about a thread that is currently running on the system. Doing so allows you, for example, to monitor the thread's performance characteristics.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>A thread is a path of execution through a program. It is the smallest unit of execution that Win32 schedules. It consists of a stack, the state of the CPU registers, and an entry in the execution list of the system scheduler.</p>\n<p>A process consists of one or more threads and the code, data, and other resources of a program in memory. Typical program resources are open files, semaphores, and dynamically allocated memory. Each resource of a process is shared by all that process's threads.</p>\n<p>A program executes when the system scheduler gives execution control to one of the program's threads. The scheduler determines which threads should run and when. A lower-priority thread might be forced to wait while higher-priority threads complete their tasks. On multiprocessor computers, the scheduler can move individual threads to different processors, thus balancing the CPU load.</p>\n<p>Each process starts with a single thread, which is known as the primary thread. Any thread can create additional threads. All the threads within a process share the address space of that process.</p>\n<p>The primary thread is not necessarily located at the first index in the collection.</p>\n<p>Starting with the .NET Framework version 2.0, the ability to reference performance counter data on other computers has been eliminated for many of the .NET Framework methods and properties. This change was made to improve performance and to enable non-administrators to use the <xref href=\"System.Diagnostics.ProcessThread\" data-throw-if-not-resolved=\"false\"></xref> class. As a result, some applications that did not get exceptions in earlier versions of the .NET Framework may now get a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>. The methods and properties affected are too numerous to list here, but the exception information has been added to the affected member topics.</p>\n<p>The threads of a process execute individually and are unaware of each other unless you make them visible to each other. Threads that share common resources, however, must coordinate their work by using semaphores or another method of interprocess communication.</p>\n<p>To get a collection of all the <xref href=\"System.Diagnostics.ProcessThread\" data-throw-if-not-resolved=\"false\"></xref> objects associated with the current process, get the <xref href=\"System.Diagnostics.Process.Threads\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public class ProcessThread
    content.vb: Public Class ProcessThread
  seealso:
  - type: System.Diagnostics.Process
    commentId: T:System.Diagnostics.Process
  - type: System.Diagnostics.Process.Threads
    commentId: P:System.Diagnostics.Process.Threads
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.ProcessThread.BasePriority
  commentId: P:System.Diagnostics.ProcessThread.BasePriority
  id: BasePriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BasePriority
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 36
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the base priority of the thread.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.ProcessThread.BasePriority\" data-throw-if-not-resolved=\"false\"></xref> is the starting priority for the process thread. You can view information about the base priority through the System Monitor's Priority Base counter.</p>\n<p>The operating system computes a thread's base priority by combining the thread's priority level range with the process's priority class. You can set the process's <xref href=\"System.Diagnostics.Process.PriorityClass\" data-throw-if-not-resolved=\"false\"></xref> property to one of the values in the <xref href=\"System.Diagnostics.ProcessPriorityClass\" data-throw-if-not-resolved=\"false\"></xref> enumeration, which are <xref href=\"System.Diagnostics.ProcessPriorityClass.Idle\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessPriorityClass.Normal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessPriorityClass.High\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessPriorityClass.AboveNormal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessPriorityClass.BelowNormal\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Diagnostics.ProcessPriorityClass.RealTime\" data-throw-if-not-resolved=\"false\"></xref>. You can set the thread's <xref href=\"System.Diagnostics.ProcessThread.PriorityLevel\" data-throw-if-not-resolved=\"false\"></xref> property to a range of values that bounds the thread's base priority. Win32 uses four priority classes with seven base priority levels per class.</p>\n<p>The thread's current priority might deviate from the base priority. For example, the operating system can change the <xref href=\"System.Diagnostics.ProcessThread.CurrentPriority\" data-throw-if-not-resolved=\"false\"></xref> property based on the time elapsed or other boosts when a process must be put ahead of others for access to the processor. In addition, you can set the <xref href=\"System.Diagnostics.Process.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state. The priority is reset when the process returns to the wait state.</p>\n"
  syntax:
    content: public int BasePriority { get; }
    content.vb: Public ReadOnly Property BasePriority As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.ProcessThread.PriorityBoostEnabled
    commentId: P:System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - type: System.Diagnostics.ProcessPriorityClass
    commentId: T:System.Diagnostics.ProcessPriorityClass
  - type: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  - type: System.Diagnostics.ProcessThread.CurrentPriority
    commentId: P:System.Diagnostics.ProcessThread.CurrentPriority
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  commentId: P:System.Diagnostics.ProcessThread.CurrentPriority
  id: CurrentPriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentPriority
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 46
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the current priority of the thread.</p>\n"
  remarks: "\n<p>The thread's current priority might deviate from the base priority. For example, the operating system can change the <xref href=\"System.Diagnostics.ProcessThread.CurrentPriority\" data-throw-if-not-resolved=\"false\"></xref> property based on the time elapsed, or other boosts, when a process must be put ahead of others for access to the processor. In addition, you can set the <xref href=\"System.Diagnostics.Process.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state. The priority is reset when the process returns to the wait state.</p>\n"
  syntax:
    content: public int CurrentPriority { get; }
    content.vb: Public ReadOnly Property CurrentPriority As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.ProcessThread.BasePriority
    commentId: P:System.Diagnostics.ProcessThread.BasePriority
  - type: System.Diagnostics.ProcessThread.PriorityBoostEnabled
    commentId: P:System.Diagnostics.ProcessThread.PriorityBoostEnabled
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.Id
  commentId: P:System.Diagnostics.ProcessThread.Id
  id: Id
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: Id
  fullName: System.Diagnostics.ProcessThread.Id
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Id
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 54
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the unique identifier of the thread.</p>\n"
  remarks: "\n<p>The operating system reuses thread identification numbers, which identify threads only during their lifetimes.</p>\n"
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  commentId: P:System.Diagnostics.ProcessThread.IdealProcessor
  id: IdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IdealProcessor
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 140
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Sets the preferred processor for this thread to run on.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.ProcessThread.IdealProcessor\" data-throw-if-not-resolved=\"false\"></xref> value is zero-based.  In other words, to set the thread affinity for the first processor, set the property to zero.</p>\n<p>The system schedules threads on their preferred processors whenever possible.</p>\n<p>A process thread can migrate from processor to processor, with each migration reloading the processor cache. Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to set the <xref href=\"System.Diagnostics.ProcessThread.IdealProcessor\" data-throw-if-not-resolved=\"false\"></xref> property for an instance of Notepad to the first processor.</p>ProcessThreadIdealProcessor#1"
  syntax:
    content: public int IdealProcessor { set; }
    content.vb: Public WriteOnly Property IdealProcessor As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The system could not set the thread to start on the specified processor. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  commentId: P:System.Diagnostics.ProcessThread.PriorityBoostEnabled
  id: PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PriorityBoostEnabled
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 63
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</p>\n"
  remarks: "\n<p>When <xref href=\"System.Diagnostics.ProcessThread.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, the system temporarily boosts the thread's priority whenever its associated process is taken out of the wait state. This action prevents other processes from interrupting the processing of the current thread. The <xref href=\"System.Diagnostics.ProcessThread.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> setting affects all existing threads as well as any threads subsequently created by the process. To restore normal behavior, set the <xref href=\"System.Diagnostics.Process.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong>.</p>\n<p>\n<xref href=\"System.Diagnostics.ProcessThread.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> has an effect only when the thread is running in a process that has a <xref href=\"System.Diagnostics.Process.PriorityClass\" data-throw-if-not-resolved=\"false\"></xref> set to one of the dynamic priority enumeration values (<xref href=\"System.Diagnostics.ProcessPriorityClass.Normal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessPriorityClass.High\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Diagnostics.ProcessPriorityClass.RealTime\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>Boosting the priority too high can drain resources from essential operating system and network functions. This could cause problems with other operating system tasks.</p>\n"
  syntax:
    content: public bool PriorityBoostEnabled { get; set; }
    content.vb: Public Property PriorityBoostEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The priority boost information could not be retrieved.</p>\n<p>-or-</p>\n<p>The priority boost information could not be set. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessPriorityClass
    commentId: T:System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  commentId: P:System.Diagnostics.ProcessThread.PriorityLevel
  id: PriorityLevel
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PriorityLevel
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 85
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the priority level of the thread.</p>\n"
  remarks: "\n<p>The priority level is not a single value, but rather a range of values. The operating system computes the thread's base priority by using the process's <xref href=\"System.Diagnostics.Process.PriorityClass\" data-throw-if-not-resolved=\"false\"></xref> to choose a value from the range specified in the <xref href=\"System.Diagnostics.ProcessThread.PriorityLevel\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public ThreadPriorityLevel PriorityLevel { get; set; }
    content.vb: Public Property PriorityLevel As ThreadPriorityLevel
    parameters: []
    return:
      type: System.Diagnostics.ThreadPriorityLevel
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread priority level information could not be retrieved. </p>\n<p>-or-</p>\n<p>The thread priority level could not be set.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ThreadPriorityLevel
    commentId: T:System.Diagnostics.ThreadPriorityLevel
  - type: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  - type: System.Diagnostics.ProcessThread.BasePriority
    commentId: P:System.Diagnostics.ProcessThread.BasePriority
  - type: System.Diagnostics.ProcessThread.CurrentPriority
    commentId: P:System.Diagnostics.ProcessThread.CurrentPriority
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  commentId: P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  id: PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivilegedProcessorTime
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 143
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of time that the thread has spent running code inside the operating system core.</p>\n"
  remarks: "\n<p>Windows uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode. <xref href=\"System.Diagnostics.ProcessThread.PrivilegedProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> corresponds to the amount of time that the application has spent running in privileged mode, inside the operating system core. The <xref href=\"System.Diagnostics.ProcessThread.UserProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> property indicates the amount of time that the application has spent running code in user mode, outside the system core.</p>\n<p>User mode restricts the application in two important ways. First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data. The operating system can thus ensure that one application does not destroy peripheral data that is needed by another. Second, the application cannot read or change data that the operating system itself maintains. This restriction prevents applications from either inadvertently or intentionally corrupting the core. If the application needs the operating system to perform an operation, it calls one of the system's routines. Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</p>\n"
  syntax:
    content: public TimeSpan PrivilegedProcessorTime { get; }
    content.vb: Public ReadOnly Property PrivilegedProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> indicating the amount of time that the thread has spent running code inside the operating system core.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessThread.UserProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.UserProcessorTime
  - type: System.Diagnostics.ProcessThread.TotalProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.TotalProcessorTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  commentId: P:System.Diagnostics.ProcessThread.ProcessorAffinity
  id: ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessorAffinity
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 144
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Sets the processors on which the associated thread can run.</p>\n"
  remarks: "\n<p>The processor affinity of a thread is the set of processors it has a relationship to. In other words, those it can be scheduled to run on.</p>\n<p>\n<xref href=\"System.Diagnostics.ProcessThread.ProcessorAffinity\" data-throw-if-not-resolved=\"false\"></xref> represents each processor as a bit. Bit 0 represents processor one, bit 1 represents processor two, and so on. The following table shows a subset of the possible <xref href=\"System.Diagnostics.ProcessThread.ProcessorAffinity\" data-throw-if-not-resolved=\"false\"></xref> for a four-processor system.</p>\n<p>Property value (in hexadecimal) </p>\n<p>Valid processors </p>\n<table><tbody><tr><td>\n<p>0x0001 </p>\n</td><td>\n<p>1 </p>\n</td></tr><tr><td>\n<p>0x0002 </p>\n</td><td>\n<p>2 </p>\n</td></tr><tr><td>\n<p>0x0003 </p>\n</td><td>\n<p>1 or 2 </p>\n</td></tr><tr><td>\n<p>0x0004 </p>\n</td><td>\n<p>3 </p>\n</td></tr><tr><td>\n<p>0x0005 </p>\n</td><td>\n<p>1 or 3 </p>\n</td></tr><tr><td>\n<p>0x0007 </p>\n</td><td>\n<p>1, 2, or 3 </p>\n</td></tr><tr><td>\n<p>0x000F </p>\n</td><td>\n<p>1, 2, 3, or 4 </p>\n</td></tr></tbody></table>\n<p>You can also specify the single, preferred processor for a thread by setting the <xref href=\"System.Diagnostics.ProcessThread.IdealProcessor\" data-throw-if-not-resolved=\"false\"></xref> property. A process thread can migrate from processor to processor, with each migration reloading the processor cache. Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</p>\n"
  example:
  - "\n<p>The following example shows how to set the <xref href=\"System.Diagnostics.ProcessThread.ProcessorAffinity\" data-throw-if-not-resolved=\"false\"></xref> property for an instance of Notepad to the first processor.</p>ProcessThreadIdealProcessor#1"
  syntax:
    content: public IntPtr ProcessorAffinity { set; }
    content.vb: Public WriteOnly Property ProcessorAffinity As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>An <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> that points to a set of bits, each of which represents a processor that the thread can run on.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The processor affinity could not be set. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessThread.IdealProcessor
    commentId: P:System.Diagnostics.ProcessThread.IdealProcessor
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: System.Diagnostics.ProcessThread.StartAddress
  commentId: P:System.Diagnostics.ProcessThread.StartAddress
  id: StartAddress
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartAddress
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 106
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the memory address of the function that the operating system called that started this thread.</p>\n"
  remarks: "\n<p>Each process starts with a single thread, which is known as the primary thread. Any thread can create additional threads.</p>\n<p>A process has a virtual address space, executable code, data, object handles, environment variables, a base priority, and minimum and maximum working set sizes. All the threads of a process share its virtual address space and system resources. In addition, each thread maintains exception handlers, a scheduling priority, and a set of structures in which the system saves the thread context while the thread is waiting to be scheduled. The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process.</p>\n<p>Every Windows thread actually begins execution in a system-supplied function, not the application-supplied function. The starting address for the primary thread is, therefore, the same (as it represents the address of the system-supplied function) for every Windows process in the system. However, the <xref href=\"System.Diagnostics.ProcessThread.StartAddress\" data-throw-if-not-resolved=\"false\"></xref> property allows you to get the starting function address that is specific to your application.</p>\n"
  syntax:
    content: public IntPtr StartAddress { get; }
    content.vb: Public ReadOnly Property StartAddress As IntPtr
    parameters: []
    return:
      type: System.IntPtr
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.StartTime
  commentId: P:System.Diagnostics.ProcessThread.StartTime
  id: StartTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartTime
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 146
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the time that the operating system started the thread.</p>\n"
  syntax:
    content: public DateTime StartTime { get; }
    content.vb: Public ReadOnly Property StartTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>A <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the time that was on the system when the operating system started the thread.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.ThreadState
  commentId: P:System.Diagnostics.ProcessThread.ThreadState
  id: ThreadState
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThreadState
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 114
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the current state of this thread.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.ProcessThread.WaitReason\" data-throw-if-not-resolved=\"false\"></xref> property value is valid only when the <xref href=\"System.Diagnostics.ProcessThread.ThreadState\" data-throw-if-not-resolved=\"false\"></xref> value is <xref href=\"System.Diagnostics.ThreadState.Wait\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, check the <xref href=\"System.Diagnostics.ProcessThread.ThreadState\" data-throw-if-not-resolved=\"false\"></xref> value before you get the <xref href=\"System.Diagnostics.ProcessThread.WaitReason\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public ThreadState ThreadState { get; }
    content.vb: Public ReadOnly Property ThreadState As ThreadState
    parameters: []
    return:
      type: System.Diagnostics.ThreadState
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  commentId: P:System.Diagnostics.ProcessThread.TotalProcessorTime
  id: TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TotalProcessorTime
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 148
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the total amount of time that this thread has spent using the processor.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.ProcessThread.TotalProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> property indicates the total amount of time that the system has taken the thread out of the wait state and given it priority on any processor. On a multiple processor system, this value would include time spent on each processor, if the thread used more than one processor.</p>\n<p>The <xref href=\"System.Diagnostics.ProcessThread.TotalProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> property is the sum of the <xref href=\"System.Diagnostics.ProcessThread.UserProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.ProcessThread.PrivilegedProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  syntax:
    content: public TimeSpan TotalProcessorTime { get; }
    content.vb: Public ReadOnly Property TotalProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that indicates the amount of time that the thread has had control of the processor.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - type: System.Diagnostics.ProcessThread.UserProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.UserProcessorTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  commentId: P:System.Diagnostics.ProcessThread.UserProcessorTime
  id: UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserProcessorTime
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 149
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of time that the associated thread has spent running code inside the application.</p>\n"
  remarks: "\n<p>Windows NT uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode. <xref href=\"System.Diagnostics.ProcessThread.UserProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> corresponds to the amount of time that the application has spent running in user mode, outside the operating system core. The <xref href=\"System.Diagnostics.ProcessThread.PrivilegedProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> corresponds to the amount of time that the application has spent running code in privileged mode, inside the system core.</p>\n<p>User mode restricts the application in two important ways. First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data. The operating system can thus ensure that one application does not destroy peripheral data that is needed by another. Second, the application cannot read or change data that the operating system itself maintains. This restriction prevents applications from either inadvertently or intentionally corrupting the core. If the application needs the operating system to perform an operation, it calls one of the system's routines. Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</p>\n"
  syntax:
    content: public TimeSpan UserProcessorTime { get; }
    content.vb: Public ReadOnly Property UserProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - type: System.Diagnostics.ProcessThread.TotalProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.TotalProcessorTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.WaitReason
  commentId: P:System.Diagnostics.ProcessThread.WaitReason
  id: WaitReason
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitReason
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 122
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the reason that the thread is waiting.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.ProcessThread.WaitReason\" data-throw-if-not-resolved=\"false\"></xref> property is valid only when the <xref href=\"System.Diagnostics.ProcessThread.ThreadState\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Diagnostics.ThreadState.Wait\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, check the <xref href=\"System.Diagnostics.ProcessThread.ThreadState\" data-throw-if-not-resolved=\"false\"></xref> value before you get the <xref href=\"System.Diagnostics.ProcessThread.WaitReason\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public ThreadWaitReason WaitReason { get; }
    content.vb: Public ReadOnly Property WaitReason As ThreadWaitReason
    parameters: []
    return:
      type: System.Diagnostics.ThreadWaitReason
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The thread is not in the wait state. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ThreadWaitReason
    commentId: T:System.Diagnostics.ThreadWaitReason
  - type: System.Diagnostics.ProcessThread.ThreadState
    commentId: P:System.Diagnostics.ProcessThread.ThreadState
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  commentId: M:System.Diagnostics.ProcessThread.ResetIdealProcessor
  id: ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetIdealProcessor
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 151
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Resets the ideal processor for this thread to indicate that there is no single ideal processor. In other words, so that any processor is ideal.</p>\n"
  syntax:
    content: public void ResetIdealProcessor()
    content.vb: Public Sub ResetIdealProcessor
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The ideal processor could not be reset. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessThread.IdealProcessor
    commentId: P:System.Diagnostics.ProcessThread.IdealProcessor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ThreadPriorityLevel
  parent: System.Diagnostics
  isExternal: false
  name: ThreadPriorityLevel
  fullName: System.Diagnostics.ThreadPriorityLevel
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.ThreadState
  parent: System.Diagnostics
  isExternal: false
  name: ThreadState
  fullName: System.Diagnostics.ThreadState
- uid: System.Diagnostics.ThreadWaitReason
  parent: System.Diagnostics
  isExternal: false
  name: ThreadWaitReason
  fullName: System.Diagnostics.ThreadWaitReason
- uid: System.ComponentModel.Win32Exception
  isExternal: false
  name: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
