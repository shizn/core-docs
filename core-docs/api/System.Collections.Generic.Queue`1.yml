items:
- uid: System.Collections.Generic.Queue`1
  commentId: T:System.Collections.Generic.Queue`1
  id: Queue`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Queue`1.#ctor
  - System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Queue`1.#ctor(System.Int32)
  - System.Collections.Generic.Queue`1.Clear
  - System.Collections.Generic.Queue`1.Contains(`0)
  - System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Queue`1.Count
  - System.Collections.Generic.Queue`1.Dequeue
  - System.Collections.Generic.Queue`1.Enqueue(`0)
  - System.Collections.Generic.Queue`1.GetEnumerator
  - System.Collections.Generic.Queue`1.Peek
  - System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Queue`1.ToArray
  - System.Collections.Generic.Queue`1.TrimExcess
  langs:
  - csharp
  - vb
  name: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Queue
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 19
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a first-in, first-out collection of objects.</p>\n"
  remarks: "\n<p>This class implements a generic queue as a circular array. Objects stored in a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> are inserted at one end and removed from the other. Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the information in the same order that it is stored in the collection. Use <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the information in reverse order. Use <xref href=\"System.Collections.Concurrent.ConcurrentQueue`1\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Concurrent.ConcurrentStack`1\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the collection from multiple threads concurrently.</p>\n<p>Three main operations can be performed on a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> and its elements:  </p>\n<ul><li>\n<p>\n<xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> adds an element to the end of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> removes the oldest element from the start of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> peek returns the oldest element that is at the start of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> but does not remove it from the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>The capacity of a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (QueueDebugView<>))]

      [DebuggerDisplay("Count = {Count}")]

      public class Queue<T> : ICollection, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
    content.vb: >-
      <DebuggerTypeProxy(GetType(QueueDebugView(Of )))>

      <DebuggerDisplay("Count = {Count}")>

      Public Class Queue(Of T)
          Implements ICollection, IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
- uid: System.Collections.Generic.Queue`1.#ctor
  commentId: M:System.Collections.Generic.Queue`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Queue()
  fullName: System.Collections.Generic.Queue<T>.Queue()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 38
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this constructor and several other methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public Queue()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Queue()
- uid: System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Queue(IEnumerable<T>)
  fullName: System.Collections.Generic.Queue<T>.Queue(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 58
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements are copied onto the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> of the collection.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>collection</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this constructor and several other methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public Queue(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Queue(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Queue(IEnumerable(Of T))
- uid: System.Collections.Generic.Queue`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.Queue`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Queue(Int32)
  fullName: System.Collections.Generic.Queue<T>.Queue(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 47
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the specified initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: public Queue(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Queue(System.Int32)
- uid: System.Collections.Generic.Queue`1.Count
  commentId: P:System.Collections.Generic.Queue`1.Count
  id: Count
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.Queue<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 69
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity is always greater than or equal to <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several properties and methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Queue(Of T).Count
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 75
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>\n<xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> returns an object, which can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. Synchronization is effective only if all threads lock this object before accessing the collection.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.ICollection.SyncRoot
    commentId: P:System.Collections.ICollection.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.Queue(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 80
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>\n<xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> returns an object, which can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property for C#, C++, and Visual Basic.</p>\n<pre><code class=\"c#\">ICollection ic = ...;\nlock (ic.SyncRoot) {\n// Access the collection.\n}</code></pre>\n<pre><code class=\"vb#\">Dim ic As IColletion = ...\nSyncLock ic.SyncRoot\n' Access the collection.\nEnd SyncLock</code></pre>\n<pre><code class=\"cpp#\">ICollection^ ic = ...;\ntry {\nMonitor::Enter(ic->SyncRoot);\n// Access the collection.\n}\nfinally {\nMonitor::Exit(ic->SyncRoot);\n}</code></pre>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.ICollection.IsSynchronized
    commentId: P:System.Collections.ICollection.IsSynchronized
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.Queue(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Queue`1.Clear
  commentId: M:System.Collections.Generic.Queue`1.Clear
  id: Clear
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.Queue<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 94
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all objects from the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>The capacity remains unchanged. To reset the capacity of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.Generic.Queue`1.TrimExcess
    commentId: M:System.Collections.Generic.Queue`1.TrimExcess
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Clear()
- uid: System.Collections.Generic.Queue`1.Contains(`0)
  commentId: M:System.Collections.Generic.Queue`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.Queue<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 270
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the queue.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Contains(T)
- uid: System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.Queue<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 118
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> elements to an existing one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified array index.</p>\n"
  remarks: "\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.Queue`1.Dequeue
  commentId: M:System.Collections.Generic.Queue`1.Dequeue
  id: Dequeue
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Dequeue()
  fullName: System.Collections.Generic.Queue<T>.Dequeue()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dequeue
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 241
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes and returns the object at the beginning of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If type <em>T</em> is a reference type, <strong>null</strong> can be added to the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> as a value.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public T Dequeue()
    content.vb: Public Function Dequeue As T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  seealso:
  - type: System.Collections.Generic.Queue`1.Enqueue(`0)
    commentId: M:System.Collections.Generic.Queue`1.Enqueue(`0)
  - type: System.Collections.Generic.Queue`1.Peek
    commentId: M:System.Collections.Generic.Queue`1.Peek
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Dequeue()
- uid: System.Collections.Generic.Queue`1.Enqueue(`0)
  commentId: M:System.Collections.Generic.Queue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Enqueue(T)
  fullName: System.Collections.Generic.Queue<T>.Enqueue(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enqueue
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 199
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public void Enqueue(T item)
    content.vb: Public Sub Enqueue(item As T)
    parameters:
    - id: item
      type: '{T}'
  seealso:
  - type: System.Collections.Generic.Queue`1.Dequeue
    commentId: M:System.Collections.Generic.Queue`1.Dequeue
  - type: System.Collections.Generic.Queue`1.Peek
    commentId: M:System.Collections.Generic.Queue`1.Peek
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Enqueue(T)
- uid: System.Collections.Generic.Queue`1.GetEnumerator
  commentId: M:System.Collections.Generic.Queue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 221
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.Queue`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.Queue`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Queue`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.Queue`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.Queue`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.Queue`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.Queue`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates that the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class is enumerable. The <strong>foreach</strong> statement (<strong>For Each</strong> in Visual Basic, <strong>for each</strong> in C++) is used to enumerate the queue.</p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public Queue<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Queue(Of T).Enumerator
    return:
      type: System.Collections.Generic.Queue`1.Enumerator
  seealso:
  - type: System.Collections.Generic.Queue`1.Enumerator
    commentId: T:System.Collections.Generic.Queue`1.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).GetEnumerator()
- uid: System.Collections.Generic.Queue`1.Peek
  commentId: M:System.Collections.Generic.Queue`1.Peek
  id: Peek
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: Peek()
  fullName: System.Collections.Generic.Queue<T>.Peek()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Peek
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 258
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns the object at the beginning of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> without removing it.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If type <em>T</em> is a reference type, <strong>null</strong> can be added to the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> as a value.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  seealso:
  - type: System.Collections.Generic.Queue`1.Enqueue(`0)
    commentId: M:System.Collections.Generic.Queue`1.Enqueue(`0)
  - type: System.Collections.Generic.Queue`1.Dequeue
    commentId: M:System.Collections.Generic.Queue`1.Dequeue
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).Peek()
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 228
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
  seealso:
  - type: System.Collections.Generic.Queue`1.GetEnumerator
    commentId: M:System.Collections.Generic.Queue`1.GetEnumerator
  - type: System.Collections.IEnumerable.GetEnumerator
    commentId: M:System.Collections.IEnumerable.GetEnumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  fullName.vb: System.Collections.Generic.Queue(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 148
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at a particular <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> index.</p>\n"
  remarks: "\n<p>If the type of the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>, the non-generic implementations of <xref href=\"System.Collections.ICollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> throw <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>, whereas the generic implementations throw <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or-</p>\n<p>\n<em>array</em> does not have zero-based indexing.</p>\n<p>-or-</p>\n<p>The number of elements in the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n<p>-or-</p>\n<p>The type of the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  fullName.vb: System.Collections.Generic.Queue(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 233
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.Generic.Queue`1.GetEnumerator
    commentId: M:System.Collections.Generic.Queue`1.GetEnumerator
  - type: System.Collections.Generic.IEnumerable`1.GetEnumerator
    commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Collections.Generic.Queue(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.Generic.Queue`1.ToArray
  commentId: M:System.Collections.Generic.Queue`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Generic.Queue<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 298
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> elements to a new array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> to its end.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a queue of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Queue`1.Enqueue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue the first string. The <xref href=\"System.Collections.Generic.Queue`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item in the queue, and then the <xref href=\"System.Collections.Generic.Queue`1.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method is used to dequeue it.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the queue. The elements of the copy are displayed.</p>\n<p>An array twice the size of the queue is created, and the <xref href=\"System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</p>\n<p>The <xref href=\"System.Collections.Generic.Queue`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the queue is empty.</p>Generic.Queue#1"
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).ToArray()
- uid: System.Collections.Generic.Queue`1.TrimExcess
  commentId: M:System.Collections.Generic.Queue`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  fullName: System.Collections.Generic.Queue<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 353
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>, if that number is less than 90 percent of current capacity.</p>\n"
  remarks: "\n<p>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> can be considerable, however, so the <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Queue`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To reset a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> to its initial state, call the <xref href=\"System.Collections.Generic.Queue`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Collections.Generic.Queue`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method. Trimming an empty <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n"
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  seealso:
  - type: System.Collections.Generic.Queue`1.Clear
    commentId: M:System.Collections.Generic.Queue`1.Clear
  - type: System.Collections.Generic.Queue`1.Count
    commentId: P:System.Collections.Generic.Queue`1.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Queue(Of T).TrimExcess()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Queue`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Queue.Enumerator<>
  fullName: System.Collections.Generic.Queue.Enumerator<>
  fullname.vb: System.Collections.Generic.Queue.Enumerator(Of )
  name.vb: Queue.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1.Enumerator
    name: Queue.Enumerator
    fullName: System.Collections.Generic.Queue.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1.Enumerator
    name: Queue.Enumerator
    fullName: System.Collections.Generic.Queue.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
