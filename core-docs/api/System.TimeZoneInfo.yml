items:
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  id: TimeZoneInfo
  parent: System
  children:
  - System.TimeZoneInfo.BaseUtcOffset
  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  - System.TimeZoneInfo.DaylightName
  - System.TimeZoneInfo.DisplayName
  - System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  - System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  - System.TimeZoneInfo.GetHashCode
  - System.TimeZoneInfo.GetSystemTimeZones
  - System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  - System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  - System.TimeZoneInfo.Id
  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  - System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  - System.TimeZoneInfo.Local
  - System.TimeZoneInfo.StandardName
  - System.TimeZoneInfo.SupportsDaylightSavingTime
  - System.TimeZoneInfo.ToString
  - System.TimeZoneInfo.Utc
  langs:
  - csharp
  - vb
  name: TimeZoneInfo
  fullName: System.TimeZoneInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TimeZoneInfo
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 52
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents any time zone in the world.</p>\n"
  remarks: "\n<p>A time zone is a geographical region in which the same time is used.</p>\n<p>The<xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> class offers significant enhancements over the <xref href=\"System.TimeZone\" data-throw-if-not-resolved=\"false\"></xref> class, which provides only limited functionality.</p>\n<p>The <xref href=\"System.TimeZone\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the local time zone, and can convert times between Coordinated Universal Time (UTC) and local time. A <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object can represent any time zone, and methods of the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> class can be used to convert the time in one time zone to the corresponding time in any other time zone. The members of the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> class support the following operations:</p>\n<ul><li>\n<p>Retrieving a time zone that is already defined by the operating system.</p>\n</li><li>\n<p>Enumerating the time zones that are available on a system.</p>\n</li><li>\n<p>Converting times between different time zones.</p>\n</li><li>\n<p>Creating a new time zone that is not already defined by the operating system.</p>\n</li><li>\n<p>Serializing a time zone for later retrieval.</p>\n</li></ul>\n<p>An instance of the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> class is immutable. Once an object has been instantiated, its values cannot be modified.</p>\n<p>You cannot instantiate a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object using the <strong>new</strong> keyword. Instead, you must call one of the static members of the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> class shown in the following table.</p>\n<p>Static member name</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td><td>\n<p>Creates a custom time zone from application-supplied data.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td><td>\n<p>Instantiates a time zone defined in the system registry based on the zone's identifier.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TimeZoneInfo.FromSerializedString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td><td>\n<p>Deserializes a string value to re-create a previously serialized <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TimeZoneInfo.GetSystemTimeZones\" data-throw-if-not-resolved=\"false\"></xref> method</p>\n</td><td>\n<p>Returns an enumerable <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represents all time zones that are available on the local system.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref> property</p>\n</td><td>\n<p>Instantiates a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the local time zone.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref> property</p>\n</td><td>\n<p>Instantiates a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the UTC zone.</p>\n</td></tr></tbody></table>\n<p>You can use the <see cref=\"Overload:System.TimeZoneInfo.CreateCustomTimeZone\"></see> method to create a time zone that is not defined in the local system registry. You can then use the <xref href=\"System.TimeZoneInfo.ToSerializedString\" data-throw-if-not-resolved=\"false\"></xref> property to save the time zone object's information as a string, which can be stored in some form that is accessible to the application. You can use the <xref href=\"System.TimeZoneInfo.FromSerializedString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a serialized string back to a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [Serializable]

      [HostProtection(MayLeakOnAbort = true)]

      [TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")]

      public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback
    content.vb: >-
      <Serializable>

      <HostProtection(MayLeakOnAbort:=True)>

      <TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")>

      Public NotInheritable Class TimeZoneInfo
          Implements IEquatable(Of TimeZoneInfo), ISerializable, IDeserializationCallback
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.TimeZoneInfo}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.TimeZoneInfo.BaseUtcOffset
  commentId: P:System.TimeZoneInfo.BaseUtcOffset
  id: BaseUtcOffset
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: BaseUtcOffset
  fullName: System.TimeZoneInfo.BaseUtcOffset
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BaseUtcOffset
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 307
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</p>\n"
  remarks: "\n<p>The time span returned by the <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property can range from 14 hours (for a time zone that is 14 hours ahead of Coordinated Universal Time (UTC)) to -14 hours (for a time zone that is 14 hours behind UTC). Time zones that are ahead of UTC have a positive offset; time zones that are behind UTC have a negative offset. </p>\n<p>The <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> value is represented as a whole number of minutes. It cannot include a fractional number of minutes.</p>\n<p>   Because <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> is a property of the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object rather than the <xref href=\"System.TimeZoneInfo.AdjustmentRule\" data-throw-if-not-resolved=\"false\"></xref> object, the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> class applies a single offset from UTC to all of a time zone's adjustments. To reflect a time zone that has modified its offset from UTC, you must create a new time zone using the <see cref=\"Overload:System.TimeZoneInfo.CreateCustomTimeZone\"></see> method.</p>\n<p>The <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property differs from the <see cref=\"Overload:System.TimeZoneInfo.GetUtcOffset\"></see> method in the following ways:</p>\n<ul><li>\n<p>The <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property returns the difference between UTC and the time zone's standard time; the <see cref=\"Overload:System.TimeZoneInfo.GetUtcOffset\"></see> method returns the difference between UTC and the time zone's time at a particular point in time. </p>\n</li><li>\n<p>The <see cref=\"Overload:System.TimeZoneInfo.GetUtcOffset\"></see> method reflects the application of any adjustment rules to the time zone; the <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property does not. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property to display the difference between the local time and Coordinated Universal Time (UTC).</p>System.TimeZone2.Class#1"
  syntax:
    content: public TimeSpan BaseUtcOffset { get; }
    content.vb: Public ReadOnly Property BaseUtcOffset As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.DaylightName
  commentId: P:System.TimeZoneInfo.DaylightName
  id: DaylightName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: DaylightName
  fullName: System.TimeZoneInfo.DaylightName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DaylightName
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 301
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the display name for the current time zone's daylight saving time.</p>\n"
  remarks: "\n<p>The display name is localized based on the culture installed with the Windows operating system. </p>\n<p>A <xref href=\"System.TimeZoneInfo.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> property whose value is not <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or <strong>null</strong> does not necessarily indicate that the time zone supports daylight saving time. To determine whether the time zone supports daylight saving time, check the value of its <xref href=\"System.TimeZoneInfo.SupportsDaylightSavingTime\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>In most cases, the <xref href=\"System.TimeZoneInfo.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> property of time zones defined in the registry is not <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or <strong>null</strong>. However, the <xref href=\"System.TimeZoneInfo.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> property of custom time zones can be set to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. This occurs when custom time zones are created by the <xref href=\"System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> overload and the <em>disableDaylightSavingTime</em> parameter is <strong>true</strong>. Therefore, your code should never assume that the value of the <xref href=\"System.TimeZoneInfo.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong> or empty.</p>\n<p>The <xref href=\"System.TimeZoneInfo.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> property is equivalent to the <xref href=\"System.TimeZone.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.TimeZone\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example defines a method named <code>DisplayDateWithTimeZoneName</code> that uses the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether to display a time zone's standard time name or daylight saving time name.</p>System.TimeZone2.IsDaylightSavingTime#1"
  syntax:
    content: public string DaylightName { get; }
    content.vb: Public ReadOnly Property DaylightName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.DisplayName
  commentId: P:System.TimeZoneInfo.DisplayName
  id: DisplayName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: DisplayName
  fullName: System.TimeZoneInfo.DisplayName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DisplayName
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 289
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the general display name that represents the time zone.</p>\n"
  remarks: "\n<p>The display name is localized based on the culture installed with the Windows operating system. </p>\n<p>Time zone display names for Windows system time zones follow a fairly standard format. The first portion of the display name is the time zone's base offset from Coordinated Universal Time, which is indicated by the acronym GMT (for Greenwich Mean Time), enclosed in parentheses. For Coordinated Universal Time, the GMT acronym with no offset is enclosed in parentheses.  This is followed by a string that identifies the time zone or one or more of the cities, regions, or countries in the time zone. For example:</p>\n<pre><code>(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London\n(GMT+02:00) Athens, Beirut, Istanbul, Minsk\n(GMT-02:00) Mid-Atlantic\n(GMT-07:00) Mountain Time (US & Canada)</code></pre>\n"
  example:
  - "\n<p>The following example retrieves a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the local time zone and outputs its display name, standard time name, and daylight saving time name. The output is displayed for a system in the U.S. Pacific Standard Time zone.</p>System.TimeZone2.Class#2"
  syntax:
    content: public string DisplayName { get; }
    content.vb: Public ReadOnly Property DisplayName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.Id
  commentId: P:System.TimeZoneInfo.Id
  id: Id
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Id
  fullName: System.TimeZoneInfo.Id
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Id
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 283
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the time zone identifier.</p>\n"
  remarks: "\n<p>The time zone identifier is a key string that uniquely identifies a particular time zone. In Windows XP and Windows Vista, it corresponds to the subkeys of the HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zone branch of the registry. It can be passed as a parameter to the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve a particular time zone from the registry.</p>\n<p>Although a key name in the Windows registry can be a maximum of 255 characters, we recommend that an identifier that you assign to a custom time zone be 32 characters or fewer. The longer the identifier, the greater the probability that an incorrect key name will be supplied when retrieving it.</p>\n<p>The value of the <xref href=\"System.TimeZoneInfo.Id\" data-throw-if-not-resolved=\"false\"></xref> property is usually, but not always, identical to that of the <xref href=\"System.TimeZoneInfo.StandardName\" data-throw-if-not-resolved=\"false\"></xref> property. The identifier of the Coordinated Universal Time zone is UTC.</p>\n"
  example:
  - "\n<p>The following example lists the identifier of each of the time zones defined on the local computer. </p>System.TimeZone2.Class#5"
  syntax:
    content: public string Id { get; }
    content.vb: Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.Local
  commentId: P:System.TimeZoneInfo.Local
  id: Local
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Local
  fullName: System.TimeZoneInfo.Local
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Local
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 1072
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the local time zone.</p>\n"
  remarks: "\n<p>The local time zone is the time zone on the computer where the code is executing.</p>\n<p>You should always access the local time zone through the <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref> property rather than assigning the local time zone to a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object variable. This prevents the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object variable from being invalidated by a call to the <xref href=\"System.TimeZoneInfo.ClearCachedData\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref> property reflects the setting of the Automatically adjust clock for daylight saving changes checkbox or the Automatically adjust clock for Daylight Saving Time checkbox in the Control Panel Date and Time application for Windows XP and Windows Vista, respectively. If the checkbox is unchecked, the cached copy of the local time zone contains no daylight saving time information. This means that:</p>\n<ul><li>\n<p>The local time zone's <xref href=\"System.TimeZoneInfo.GetAdjustmentRules\" data-throw-if-not-resolved=\"false\"></xref> method returns an array whose length is zero.</p>\n</li><li>\n<p>The local time zone's <xref href=\"System.TimeZoneInfo.SupportsDaylightSavingTime\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>.</p>\n</li><li>\n<p>The local time zone has no ambiguous or invalid times (all calls to <see cref=\"Overload:System.TimeZoneInfo.IsAmbiguousTime\"></see> or <xref href=\"System.TimeZoneInfo.IsInvalidTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> return <strong>false</strong>).</p>\n</li><li>\n<p>All calls to <see cref=\"Overload:System.TimeZoneInfo.IsDaylightSavingTime\"></see> with individual local times return false.</p>\n</li></ul>\n<p>This is not true, however, if a reference to the local time zone is retrieved using the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref> property corresponds to the <xref href=\"System.TimeZone.CurrentTimeZone\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.TimeZone\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example retrieves a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the local time zone and outputs its display name, standard time name, and daylight saving time name.</p>System.TimeZone2.Class#2"
  syntax:
    content: public static TimeZoneInfo Local { get; }
    content.vb: Public Shared ReadOnly Property Local As TimeZoneInfo
    parameters: []
    return:
      type: System.TimeZoneInfo
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.TimeZoneInfo.StandardName
  commentId: P:System.TimeZoneInfo.StandardName
  id: StandardName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: StandardName
  fullName: System.TimeZoneInfo.StandardName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StandardName
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 295
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the display name for the time zone's standard time.</p>\n"
  remarks: "\n<p>The display name is localized based on the culture installed with the Windows operating system.</p>\n<p>The <xref href=\"System.TimeZoneInfo.StandardName\" data-throw-if-not-resolved=\"false\"></xref> property is identical to the <xref href=\"System.TimeZone.StandardName\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.TimeZone\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>If the operating system language is English, the value of the <xref href=\"System.TimeZoneInfo.StandardName\" data-throw-if-not-resolved=\"false\"></xref> property is usually, but not always, identical to that of the <xref href=\"System.TimeZoneInfo.Id\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example defines a method named <code>DisplayDateWithTimeZoneName</code> that uses the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether to display a time zone's standard time name or daylight saving time name.</p>System.TimeZone2.IsDaylightSavingTime#1<p></p>"
  syntax:
    content: public string StandardName { get; }
    content.vb: Public ReadOnly Property StandardName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.SupportsDaylightSavingTime
  commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  id: SupportsDaylightSavingTime
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: SupportsDaylightSavingTime
  fullName: System.TimeZoneInfo.SupportsDaylightSavingTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SupportsDaylightSavingTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 313
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the time zone has any daylight saving time rules.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.TimeZoneInfo.SupportsDaylightSavingTime\" data-throw-if-not-resolved=\"false\"></xref> property for the local time zone returned by the <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref> property reflects the setting of the Control Panel Date and Time application's checkbox that defines whether the system automatically adjusts for daylight saving time. If it is unchecked, or if no checkbox is displayed for a time zone, the value of this property is <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example retrieves a collection of all time zones that are available on a local system and displays the names of those that do not support daylight saving time.</p>System.TimeZone2.Class#4"
  syntax:
    content: public bool SupportsDaylightSavingTime { get; }
    content.vb: Public ReadOnly Property SupportsDaylightSavingTime As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.Utc
  commentId: P:System.TimeZoneInfo.Utc
  id: Utc
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Utc
  fullName: System.TimeZoneInfo.Utc
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Utc
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 1115
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Coordinated Universal Time (UTC) zone.</p>\n"
  remarks: "\n<p>This is a built-in object; information about this <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object is not retrieved from the registry. </p>\n<p>You should always access the Coordinated Universal Time (UTC) zone through the <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref> property rather than assigning the UTC time zone to a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object variable. This prevents the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object variable from being invalidated by a call to the <xref href=\"System.TimeZoneInfo.ClearCachedData\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Coordinated Universal Time was previously known as Greenwich Mean Time (GMT).</p>\n"
  example:
  - "\n<p>The following example retrieves a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents Coordinated Universal Time (UTC) and outputs its display name, standard time name, and daylight saving time name.</p>System.TimeZone2.Class#3"
  syntax:
    content: public static TimeZoneInfo Utc { get; }
    content.vb: Public Shared ReadOnly Property Utc As TimeZoneInfo
    parameters: []
    return:
      type: System.TimeZoneInfo
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  id: ConvertTime(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ConvertTime(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(System.DateTime, System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConvertTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 760
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts a time to the time in a particular time zone.</p>\n"
  remarks: "\n<p>When performing the conversion, the <xref href=\"System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method applies any adjustment rules in effect in the <em>destinationTimeZone</em> time zone. </p>\n<p>This overload of the <xref href=\"System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method determines the source time zone from the value of the <em>dateTime</em> parameter's <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property, as the following table shows.</p>\n<p>Kind property value</p>\n<p>Source time zone</p>\n<p>Method behavior</p>\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value is set as shown in the following table.</p>\n<p>Condition</p>\n<p>Returned Kind property value</p>\n<table><tbody><tr><td>\n<p>The <em>destinationTimeZone</em> is <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td><td>\n<p>\n<xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>The <em>destinationTimeZone</em> is <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td><td>\n<p>\n<xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>All other date and time values and destination time zones.</p>\n</td><td>\n<p>\n<xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n<p>If the value of the <em>dateTime</em> parameter is an ambiguous local time, it is interpreted as a standard time. If the <em>dateTime</em> parameter is an invalid local time, this method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the conversion of <em>dateTime</em> results in a date and time value that is earlier than <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or later than <xref href=\"System.DateTime.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, this method returns <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.DateTime.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, respectively.</p>\n<p>You can also convert to or from UTC by calling the <xref href=\"System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"Overload:System.TimeZoneInfo.ConvertTimeToUtc\"></see> methods.</p>\n"
  example:
  - "\n<p>The following example converts an array of date and time values to times in the Eastern Time zone of the U.S. and Canada. It shows that the source time zone depends on the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the source <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value. It also illustrates that the <see cref=\"Overload:System.TimeZoneInfo.ConvertTime\"></see> method takes time zone adjustments into account, because a time zone adjustment occurs in both the source and destination time zones at 2:00 A.M. on November 7, 2010.</p>System.TimeZoneInfo.ConvertTime#1"
  syntax:
    content: public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone)
    content.vb: Public Shared Function ConvertTime(dateTime As Date, destinationTimeZone As TimeZoneInfo) As Date
    parameters:
    - id: dateTime
      type: System.DateTime
    - id: destinationTimeZone
      type: System.TimeZoneInfo
    return:
      type: System.DateTime
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value of the <em>dateTime</em> parameter represents an invalid time.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  id: ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(System.DateTime, System.TimeZoneInfo, System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConvertTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 779
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts a time from one time zone to another.</p>\n"
  remarks: "\n<p>When performing the conversion, the <xref href=\"System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method applies any adjustment rules in effect in the <em>destinationTimeZone</em> time zone.</p>\n<p>The value of the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter must correspond to the <em>sourceTimeZone</em> parameter, as the following table shows.</p>\n<p>DateTime.Kind value</p>\n<p>sourceTimeZone value</p>\n<p>Method behavior</p>\n<p>You can also convert to or from Coordinated Universal Time (UTC) by calling the <xref href=\"System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"Overload:System.TimeZoneInfo.ConvertTimeToUtc\"></see> methods.</p>\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value is set as shown in the following table.</p>\n<p>Condition</p>\n<p>Returned Kind property value</p>\n<table><tbody><tr><td>\n<p>The <em>destinationTimeZone</em> argument is <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td><td>\n<p>\n<xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>The <em>destinationTimeZone</em> argument is <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td><td>\n<p>\n<xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>All other date and time values, source time zones, and destination time zones.</p>\n</td><td>\n<p>\n<xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n<p>If the value of the <em>dateTime</em> parameter is an ambiguous time in the source time zone, it is interpreted as a standard time. If the <em>dateTime</em> parameter is an invalid time in the source time zone, this method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the conversion of <em>dateTime</em> results in a date and time value that is earlier than <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or later than <xref href=\"System.DateTime.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, this method returns <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.DateTime.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, respectively.</p>\n<p>The <xref href=\"System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> exception if the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> argument is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> but the <em>sourceTimeZone</em> argument is not <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref>. To determine whether the source time zone is the local time zone or the universal time zone, the method tests for reference equality instead of testing for value equality with the <xref href=\"System.TimeZoneInfo.Equals(System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method. Note that <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the local time zone and that are retrieved by calling the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method do not have referential equality with <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref>. Furthermore, <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the local or universal time zone and that are retrieved by iterating the collection returned by the <xref href=\"System.TimeZoneInfo.GetSystemTimeZones\" data-throw-if-not-resolved=\"false\"></xref> method do not have referential equality with <xref href=\"System.TimeZoneInfo.Local\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref>. As an alternative, you can call the <xref href=\"System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method to convert from Hawaiian Standard Time to local time.</p>System.TimeZone2.Concepts#9"
  syntax:
    content: public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone)
    content.vb: Public Shared Function ConvertTime(dateTime As Date, sourceTimeZone As TimeZoneInfo, destinationTimeZone As TimeZoneInfo) As Date
    parameters:
    - id: dateTime
      type: System.DateTime
    - id: sourceTimeZone
      type: System.TimeZoneInfo
    - id: destinationTimeZone
      type: System.TimeZoneInfo
    return:
      type: System.DateTime
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>, but the <em>sourceTimeZone</em> parameter does not equal <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the Remarks section. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter is <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>, but the <em>sourceTimeZone</em> parameter does not equal <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The <em>dateTime</em> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>sourceTimeZone</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  id: ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ConvertTime(DateTimeOffset, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset, System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConvertTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 736
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts a time to the time in a particular time zone.</p>\n"
  remarks: "\n<p>When performing the conversion, the <xref href=\"System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method applies any adjustment rules in effect in the <em>destinationTimeZone</em> time zone.</p>\n<p>This overload differs from the other overloads of the <see cref=\"Overload:System.TimeZoneInfo.ConvertTime\"></see> method by accepting a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value as its first parameter. This identifies the date and time as an offset from Coordinated Universal Time (UTC) rather than as the date and time in a particular time zone. As a result, the <em>dateTimeOffset</em> parameter cannot represent either an ambiguous time or an invalid time.</p>\n<p>In converting the <em>dateTimeOffset</em> value to the time in the destination time zone, this method takes into account any adjustment rules in effect in the destination time zone.    </p>\n<p>If the conversion of <em>dateTimeOffset</em> results in a date and time value that is earlier than <xref href=\"System.DateTimeOffset.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or later than <xref href=\"System.DateTimeOffset.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, this method returns <xref href=\"System.DateTimeOffset.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.DateTimeOffset.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, respectively.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> values to times in the Eastern Time zone of the U.S. and Canada. It illustrates that the <see cref=\"Overload:System.TimeZoneInfo.ConvertTime\"></see> method takes time zone adjustments into account, because a time zone adjustment occurs in both the source and destination time zones at 2:00 A.M. on November 7, 2010.</p>System.TimeZoneInfo.ConvertTime#2"
  syntax:
    content: public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone)
    content.vb: Public Shared Function ConvertTime(dateTimeOffset As DateTimeOffset, destinationTimeZone As TimeZoneInfo) As DateTimeOffset
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
    - id: destinationTimeZone
      type: System.TimeZoneInfo
    return:
      type: System.DateTimeOffset
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  id: Equals(System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Equals(TimeZoneInfo)
  fullName: System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 904
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object and another <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object are equal.</p>\n"
  remarks: "\n<p>Equality is based on a comparison of values. Two <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects are considered to be equal under the following conditions:</p>\n<ul><li>\n<p>The value of their <xref href=\"System.TimeZoneInfo.Id\" data-throw-if-not-resolved=\"false\"></xref> property is the same.</p>\n</li><li>\n<p>They have the same adjustment rules.</p>\n</li></ul>\n<p>\n<xref href=\"System.TimeZoneInfo.Equals(System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> returns the Boolean value that results from evaluating the following expression:</p>\n<p>[C#]</p>\n<p>\n<code>other.Id == this.Id && HasSameRules(other);</code>\n</p>\n<p>[Visual Basic]</p>\n<p>\n<code>other.Id = me.Id AndAlso HasSameRules(other)</code>\n</p>\n<p>If the <em>other</em> parameter is an uninitialized <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object, this method returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.TimeZoneInfo.Equals(System.TimeZoneInfo)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the local time zone is Pacific Time or Eastern Time.</p>System.TimeZone2.Class#7"
  syntax:
    content: public bool Equals(TimeZoneInfo other)
    content.vb: Public Function Equals(other As TimeZoneInfo) As Boolean
    parameters:
    - id: other
      type: System.TimeZoneInfo
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  commentId: M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  id: FindSystemTimeZoneById(System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: FindSystemTimeZoneById(String)
  fullName: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindSystemTimeZoneById
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 2574
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object from the registry based on its identifier.</p>\n"
  remarks: "\n<p>The <em>id</em> parameter must correspond exactly to the time zone's registry key in length, but not in case, for a successful match to occur; that is, the comparison of <em>id</em> with time zone identifiers is case-insensitive. If you want to retrieve time zone objects based on partial matches, you can write custom procedures that work with the read-only collection of <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects returned by the <xref href=\"System.TimeZoneInfo.GetSystemTimeZones\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>\n<xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> tries to match <em>id</em> to the subkey names of the HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones branch of the registry under Windows XP and Windows Vista. This branch does not necessarily contain a comprehensive list of time zone identifiers. If required by an application, you can create a particular time zone either by calling one of the overloads of the <see cref=\"Overload:System.TimeZoneInfo.CreateCustomTimeZone\"></see> method or by calling <xref href=\"System.TimeZoneInfo.FromSerializedString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to deserialize a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the required time zone. However, time zones created by these method calls are not included in the registry and cannot be retrieved using the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. These custom time zones can be accessed only through the object reference returned by the <see cref=\"Overload:System.TimeZoneInfo.CreateCustomTimeZone\"></see> or <xref href=\"System.TimeZoneInfo.FromSerializedString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method call.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the Tokyo Standard Time zone. This <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object is then used to convert the local time to the time in Tokyo and to determine whether it is Tokyo Standard Time or Tokyo Daylight Time.</p>System.TimeZone2.Conversions#2"
  syntax:
    content: public static TimeZoneInfo FindSystemTimeZoneById(string id)
    content.vb: Public Shared Function FindSystemTimeZoneById(id As String) As TimeZoneInfo
    parameters:
    - id: id
      type: System.String
    return:
      type: System.TimeZoneInfo
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The system does not have enough memory to hold information about the time zone.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>id</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.TimeZoneNotFoundException
    commentId: T:System.TimeZoneNotFoundException
    description: "\n<p>The time zone identifier specified by <em>id</em> was not found. This means that a registry key whose name matches <em>id</em> does not exist, or that the key exists but does not contain any time zone data.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The process does not have the permissions required to read from the registry key that contains the time zone information.</p>\n"
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: "\n<p>The time zone identifier was found, but the registry data is corrupted.</p>\n"
  seealso:
  - type: System.TimeZoneInfo.Id
    commentId: P:System.TimeZoneInfo.Id
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  id: GetAmbiguousTimeOffsets(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetAmbiguousTimeOffsets(DateTime)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAmbiguousTimeOffsets
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 380
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</p>\n"
  remarks: "\n<p>The precise behavior of this method depends on the relationship between the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object, as the following table shows.</p>\n<p>TimeZoneInfo object type</p>\n<p>Kind property value</p>\n<p>Behavior</p>\n<p>The order of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> objects in the array returned by this method is undefined. However, you can determine which element represents an offset from the time zone's standard time by comparing its value with the time zone's <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property. To map an ambiguous time to a time zone's standard time, see How to: Resolve Ambiguous Times.</p>\n"
  example:
  - "\n<p>The following example defines a method named <code>ShowPossibleUtcTimes</code> that uses the <xref href=\"System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method to map an ambiguous time to its possible corresponding Coordinated Universal Time (UTC) times.</p>System.TimeZone2.GetAmbiguousTimeOffsets#1<p>The method can then be called using code such as the following:</p>System.TimeZone2.GetAmbiguousTimeOffsets#2"
  syntax:
    content: public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime)
    content.vb: Public Function GetAmbiguousTimeOffsets(dateTime As Date) As TimeSpan()
    parameters:
    - id: dateTime
      type: System.DateTime
    return:
      type: System.TimeSpan[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dateTime</em> is not an ambiguous time.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  id: GetAmbiguousTimeOffsets(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetAmbiguousTimeOffsets(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAmbiguousTimeOffsets
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 343
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</p>\n"
  remarks: "\n<p>The precise behavior of this method depends on the relationship between the <xref href=\"System.DateTimeOffset.Offset\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTimeOffset</em> parameter and the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object. If the value of the <xref href=\"System.DateTimeOffset.Offset\" data-throw-if-not-resolved=\"false\"></xref> property corresponds to the current time zone's possible offsets from Coordinated Universal Time (UTC) for that date and time, the method returns the possible offsets. Otherwise, it converts <em>dateTimeOffset</em> to the time in the current time zone, and then returns the possible offsets of that date and time. </p>\n<p>The order of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> objects in the array returned by this method is undefined. However, you can determine which element represents an offset from the time zone's standard time by comparing its value with the time zone's <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property. To map an ambiguous time to a time zone's standard time, see How to: Resolve Ambiguous Times.</p>\n"
  example:
  - 
  syntax:
    content: public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset)
    content.vb: Public Function GetAmbiguousTimeOffsets(dateTimeOffset As DateTimeOffset) As TimeSpan()
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
    return:
      type: System.TimeSpan[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dateTimeOffset</em> is not an ambiguous time.</p>\n"
  seealso:
  - type: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.GetHashCode
  commentId: M:System.TimeZoneInfo.GetHashCode
  id: GetHashCode
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.TimeZoneInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 935
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\n"
  remarks: "\n<p>For additional detail about the <xref href=\"System.TimeZoneInfo.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method, see <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.TimeZoneInfo.GetSystemTimeZones
  commentId: M:System.TimeZoneInfo.GetSystemTimeZones
  id: GetSystemTimeZones
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetSystemTimeZones()
  fullName: System.TimeZoneInfo.GetSystemTimeZones()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSystemTimeZones
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 952
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a sorted collection of all the time zones about which information is available on the local system.</p>\n"
  remarks: "\n<p>The <xref href=\"System.TimeZoneInfo.GetSystemTimeZones\" data-throw-if-not-resolved=\"false\"></xref> method retrieves all available time zone information from the subkeys of the registry's HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones key. If it is unable to successfully retrieve and parse values for particular string properties of individual <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects, this method sets their value to an empty string (\"\").</p>\n<p>The <xref href=\"System.TimeZoneInfo.GetSystemTimeZones\" data-throw-if-not-resolved=\"false\"></xref> method returns a collection of <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects only for time zones defined in the registry. It does not include time zones created using the overloads of the <see cref=\"Overload:System.TimeZoneInfo.CreateCustomTimeZone\"></see> method. These are accessible only through the object reference returned by the time zone creation method.</p>\n<p>The collection returned by this method is sorted by UTC offset and, for time zones that have the same UTC offset, by the display name using the current culture. For information about the display name, see <xref href=\"System.TimeZoneInfo.DisplayName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method supports the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, which means that it can be iterated using the <strong>foreach</strong> (in C#) or <strong>For Each…Next</strong> (in Visual Basic) statements. Each iteration of the loop provides the next <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object in the collection.</p>\n<p>The collection of <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects represents time zones defined on the local computer; it does not necessarily provide complete information for all time zones during all time periods. If your application requires time zones not found on the local computer, you can create custom time zones using the overloads of the <see cref=\"Overload:System.TimeZoneInfo.CreateCustomTimeZone\"></see> method. For more information, see How to: Create Time Zones Without Adjustment Rules and How to: Create Time Zones with Adjustment Rules.</p>\n<p>You can also determine whether an individual time zone is defined on the local computer by calling the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and providing the identifier of the time zone you want to retrieve as a parameter.</p>\n"
  example:
  - "\n<p>The following example retrieves a collection of time zone objects that represent the time zones defined on a computer and writes information about them to a text file.</p>System.TimeZone2.Class#6"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetSystemTimeZones As ReadOnlyCollection(Of TimeZoneInfo)
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to store all time zone information.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to read from the registry keys that contain time zone information.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetUtcOffset(DateTime)
  fullName: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUtcOffset
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 471
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</p>\n"
  remarks: "\n<p>The returned time span includes any differences due to the application of adjustment rules to the current time zone. It differs from the <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property, which returns the difference between Coordinated Universal Time (UTC) and the time zone's standard time and, therefore, does not take adjustment rules into account.</p>\n<p>If the <em>dateTime</em> parameter's <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property does not correspond to the time zone object, this method performs the necessary conversion before returning a result. For example, this can occur if the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> but the time zone object is not the local time zone. If <em>dateTime</em> is ambiguous, or if the converted time is ambiguous, this method interprets the ambiguous time as a standard time. If <em>dateTime</em> is invalid, this method returns a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> object that reflects the difference between UTC and the time zone's standard time. </p>\n<p>The <xref href=\"System.TimeZoneInfo.GetUtcOffset(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method is similar in operation to the <xref href=\"System.TimeZone.GetUtcOffset(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.TimeZone\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.TimeZoneInfo.GetUtcOffset(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method with different time zones and with date values that have different <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property values.</p>System.TimeZone2.GetUtcOffset#1"
  syntax:
    content: public TimeSpan GetUtcOffset(DateTime dateTime)
    content.vb: Public Function GetUtcOffset(dateTime As Date) As TimeSpan
    parameters:
    - id: dateTime
      type: System.DateTime
    return:
      type: System.TimeSpan
  seealso:
  - type: System.TimeZoneInfo.BaseUtcOffset
    commentId: P:System.TimeZoneInfo.BaseUtcOffset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  id: GetUtcOffset(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetUtcOffset(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUtcOffset
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 466
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</p>\n"
  remarks: "\n<p>The returned time span includes any differences due to the application of adjustment rules to the current time zone. It differs from the <xref href=\"System.TimeZoneInfo.BaseUtcOffset\" data-throw-if-not-resolved=\"false\"></xref> property, which returns the difference between Coordinated Universal Time (UTC) and the time zone's standard time and, therefore, does not take adjustment rules into account.</p>\n"
  example:
  - 
  syntax:
    content: public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset)
    content.vb: Public Function GetUtcOffset(dateTimeOffset As DateTimeOffset) As TimeSpan
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  id: IsAmbiguousTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsAmbiguousTime(DateTime)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAmbiguousTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 542
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</p>\n"
  remarks: "\n<p>An ambiguous time falls within a range of times for the current time zone. This means it can be either a standard time or a time that results from the application of an adjustment rule. Typically, ambiguous times result when the clock is set to return to standard time from daylight saving time. See the Example section for an illustration. </p>\n<p>Coordinated Universal Time (UTC) has no ambiguous times; neither do time zones that do not support daylight saving time. Therefore, these time zones have no adjustment rules and calls to the <xref href=\"System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method always return <strong>false</strong>. </p>\n<p>For time zones that do observe daylight saving time, the precise behavior of this method depends on the relationship between the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object, as the following table shows.</p>\n<p>TimeZoneInfo object type</p>\n<p>Kind property value</p>\n<p>Behavior</p>\n"
  example:
  - "\n<p>In the Pacific Time zone, daylight saving time ends at 2:00 A.M. on November 4, 2007. The following example passes the time at one-minute intervals from 12:59 A.M. on November 4, 2007, to 2:01 A.M. on November 4, 2007, to the <xref href=\"System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Pacific Time zone. The console output indicates that all times from 1:00 A.M. on November 4, 2007, to 1:59 A.M. on November 4, 2007, are ambiguous.</p>System.TimeZone2.Class#8"
  syntax:
    content: public bool IsAmbiguousTime(DateTime dateTime)
    content.vb: Public Function IsAmbiguousTime(dateTime As Date) As Boolean
    parameters:
    - id: dateTime
      type: System.DateTime
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> value is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> and <em>dateTime</em> is an invalid time.</p>\n"
  seealso:
  - type: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  id: IsAmbiguousTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsAmbiguousTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAmbiguousTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 532
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</p>\n"
  remarks: "\n<p>An ambiguous time falls within a range of times for the current time zone. This means that it can be either a standard time or a time that results from the application of an adjustment rule. Typically, ambiguous times result when the clock is set to return to standard time from daylight saving time. Coordinated Universal Time (UTC) has no ambiguous times; neither do time zones that do not support daylight saving time. </p>\n<p>The precise behavior of the method depends on the relationship between the <xref href=\"System.DateTimeOffset.Offset\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTimeOffset</em> parameter and the current time zone. If the value of the <xref href=\"System.DateTimeOffset.Offset\" data-throw-if-not-resolved=\"false\"></xref> property is a possible offset from the UTC of the current time zone, the method determines whether that date and time is ambiguous. Otherwise, it converts <em>dateTimeOffset</em> to the time in the current time zone, and then determines whether that date and time is ambiguous.  </p>\n"
  example:
  - 
  syntax:
    content: public bool IsAmbiguousTime(DateTimeOffset dateTimeOffset)
    content.vb: Public Function IsAmbiguousTime(dateTimeOffset As DateTimeOffset) As Boolean
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsDaylightSavingTime(DateTime)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDaylightSavingTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 587
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The return value of <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> is affected by the relationship between the time zone represented by the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object and the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter, as the following table shows.</p>\n<p>TimeZoneInfo object</p>\n<p>DateTime.Kind property</p>\n<p>Result</p>\n<p>If the time zone represented by the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not support daylight saving time, the method always returns <strong>false</strong>. A number of time zones, including <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref>, do not observe daylight saving time.  To determine whether a time zone supports daylight saving time, retrieve the value of its <xref href=\"System.TimeZoneInfo.SupportsDaylightSavingTime\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>If the <em>dateTime</em> parameter specifies an ambiguous time in the current object's time zone, the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method interprets <em>dateTime</em> as standard time and returns <strong>false</strong> if its <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>. If the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>, this method will select the correct ambiguous time and indicate whether it is a daylight saving time.</p>\n<p>Because the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method can return <strong>false</strong> for a date and time that is ambiguous (that is, a date and time that can represent either a standard time or a daylight saving time in a particular time zone), the <xref href=\"System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method can be paired with the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a time may be a daylight saving time. Because an ambiguous time is one that can be both a daylight saving time and a standard time, the <xref href=\"System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method can be called first to determine whether a date and time may be a daylight saving time. If the method returns <strong>false</strong>, the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method can be called to determine whether the <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value is a daylight saving time. The following example illustrates this technique.</p>System.TimeZone2.IsDaylightSavingTime#2<p>If the <em>dateTime</em> parameter specifies an invalid time, the method call throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if the value of the <em>dateTime</em> parameter's <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, the method returns <strong>false</strong>.</p><p>Call the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether to use a time zone's <xref href=\"System.TimeZoneInfo.StandardName\" data-throw-if-not-resolved=\"false\"></xref> value or its <xref href=\"System.TimeZoneInfo.DaylightName\" data-throw-if-not-resolved=\"false\"></xref> value when displaying the time zone name. See the Example section for an illustration.</p>"
  example:
  - "\n<p>The following example defines a method named <code>DisplayDateWithTimeZoneName</code> that uses the <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether to display a time zone's standard time name or daylight saving time name.</p>System.TimeZone2.IsDaylightSavingTime#1"
  syntax:
    content: public bool IsDaylightSavingTime(DateTime dateTime)
    content.vb: Public Function IsDaylightSavingTime(dateTime As Date) As Boolean
    parameters:
    - id: dateTime
      type: System.DateTime
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> value is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> and <em>dateTime</em> is an invalid time.</p>\n"
  seealso:
  - type: System.TimeZoneInfo.SupportsDaylightSavingTime
    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  id: IsDaylightSavingTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsDaylightSavingTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDaylightSavingTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 580
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The return value of <xref href=\"System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> is affected by the relationship between the time zone represented by the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object and the <xref href=\"System.DateTimeOffset.Offset\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTimeOffset</em> parameter. If <em>dateTimeOffset</em> does not correspond to the current time zone's offset from Coordinated Universal Time (UTC), the method converts that time to the time in the current time zone. It then determines whether that date and time is a daylight saving time.</p>\n<p>If the time zone represented by the <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not support daylight saving time, the method always returns <strong>false</strong>. To determine whether a time zone supports daylight saving time, retrieve the value of its <xref href=\"System.TimeZoneInfo.SupportsDaylightSavingTime\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - 
  syntax:
    content: public bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset)
    content.vb: Public Function IsDaylightSavingTime(dateTimeOffset As DateTimeOffset) As Boolean
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
    return:
      type: System.Boolean
  seealso:
  - type: System.TimeZoneInfo.SupportsDaylightSavingTime
    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  id: IsInvalidTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsInvalidTime(DateTime)
  fullName: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsInvalidTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 658
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a particular date and time is invalid.</p>\n"
  remarks: "\n<p>An invalid time falls within a range of times for the current time zone that cannot be mapped to Coordinated Universal Time (UTC) due to the application of an adjustment rule. Typically, invalid times occur when the time moves ahead for daylight saving time. See the Example section for an illustration.</p>\n<p>The value of the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter affects whether <em>dateTime</em> represents an invalid time, as the following table shows.</p>\n<p>DateTime.Kind property</p>\n<p>TimeZoneInfo object (if applicable)</p>\n<p>Behavior</p>\n"
  example:
  - "\n<p>In the Pacific Time zone, daylight saving time begins at 2:00 A.M. on April 2, 2006. The following code passes the time at one-minute intervals from 1:59 A.M. on April 2, 2006, to 3:01 A.M. on April 2, 2006, to the <xref href=\"System.TimeZoneInfo.IsInvalidTime(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Pacific Time zone. The console output indicates that all times from 2:00 A.M. on April 2, 2006, to 2:59 A.M. on April 2, 2006, are invalid.</p>System.TimeZone2.Class#9"
  syntax:
    content: public bool IsInvalidTime(DateTime dateTime)
    content.vb: Public Function IsInvalidTime(dateTime As Date) As Boolean
    parameters:
    - id: dateTime
      type: System.DateTime
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.ToString
  commentId: M:System.TimeZoneInfo.ToString
  id: ToString
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.TimeZoneInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 1105
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object's display name.</p>\n"
  remarks: "\n<p>When assigning a collection that contains <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to a list control such as the <xref href=\"System.Windows.Forms.ListBox\" data-throw-if-not-resolved=\"false\"></xref> control, the control automatically calls the <xref href=\"System.TimeZoneInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to extract a string that describes each object to be represented in the list. As a result, you do not need to store a meaningful description of the object as a string, and the user does not need to use that string to extract the object from the collection. See How to: Enumerate Time Zones Present on a Computer for more detail.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IEquatable{System.TimeZoneInfo}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TimeZoneInfo>
  fullName: System.IEquatable<System.TimeZoneInfo>
  fullname.vb: System.IEquatable(Of System.TimeZoneInfo)
  name.vb: IEquatable(Of TimeZoneInfo)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.TimeZoneInfo
  parent: System
  isExternal: false
  name: TimeZoneInfo
  fullName: System.TimeZoneInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)
  parent: System.IEquatable{System.TimeZoneInfo}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TimeZoneInfo)
  fullName: System.IEquatable<System.TimeZoneInfo>.Equals(System.TimeZoneInfo)
  fullname.vb: System.IEquatable(Of System.TimeZoneInfo).Equals(System.TimeZoneInfo)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.TimeZoneInfo>.Equals
  - name: (
    fullName: (
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.TimeZoneInfo).Equals
  - name: (
    fullName: (
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.TimeSpan[]
  isExternal: false
  name: TimeSpan[]
  fullName: System.TimeSpan[]
  fullname.vb: System.TimeSpan()
  name.vb: TimeSpan()
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
  - name: ()
    fullName: ()
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<TimeZoneInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.TimeZoneInfo)
  name.vb: ReadOnlyCollection(Of TimeZoneInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.TimeZoneNotFoundException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.InvalidTimeZoneException
  isExternal: false
  name: InvalidTimeZoneException
  fullName: System.InvalidTimeZoneException
