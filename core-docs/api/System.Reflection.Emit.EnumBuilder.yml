items:
- uid: System.Reflection.Emit.EnumBuilder
  commentId: T:System.Reflection.Emit.EnumBuilder
  id: EnumBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.EnumBuilder.Assembly
  - System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  - System.Reflection.Emit.EnumBuilder.Attributes
  - System.Reflection.Emit.EnumBuilder.BaseType
  - System.Reflection.Emit.EnumBuilder.ContainsGenericParameters
  - System.Reflection.Emit.EnumBuilder.CreateTypeInfo
  - System.Reflection.Emit.EnumBuilder.DeclaringMethod
  - System.Reflection.Emit.EnumBuilder.DeclaringType
  - System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
  - System.Reflection.Emit.EnumBuilder.FullName
  - System.Reflection.Emit.EnumBuilder.GenericParameterAttributes
  - System.Reflection.Emit.EnumBuilder.GenericParameterPosition
  - System.Reflection.Emit.EnumBuilder.GenericTypeArguments
  - System.Reflection.Emit.EnumBuilder.GetArrayRank
  - System.Reflection.Emit.EnumBuilder.GetElementType
  - System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints
  - System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition
  - System.Reflection.Emit.EnumBuilder.GUID
  - System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.Emit.EnumBuilder.IsEnum
  - System.Reflection.Emit.EnumBuilder.IsGenericParameter
  - System.Reflection.Emit.EnumBuilder.IsGenericType
  - System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition
  - System.Reflection.Emit.EnumBuilder.IsSerializable
  - System.Reflection.Emit.EnumBuilder.MakeArrayType
  - System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  - System.Reflection.Emit.EnumBuilder.MakeByRefType
  - System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])
  - System.Reflection.Emit.EnumBuilder.MakePointerType
  - System.Reflection.Emit.EnumBuilder.Module
  - System.Reflection.Emit.EnumBuilder.Name
  - System.Reflection.Emit.EnumBuilder.Namespace
  - System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.EnumBuilder.UnderlyingField
  langs:
  - csharp
  - vb
  name: EnumBuilder
  fullName: System.Reflection.Emit.EnumBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumBuilder
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 46
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Describes and represents an enumeration type.</p>\n"
  remarks: "\n<p>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> because <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> emits enumerations whose elements are of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> instead of the enumeration type. In the .NET Framework version 2.0, <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> emits enumerations whose elements have the correct type.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <strong>EnumBuilder</strong>. The example defines an enumeration named <code>Elevation</code>, with an underlying type of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and creates two elements: <code>Low</code>, with a value of 0, and <code>High</code>, with a value of 1. After the type has been created, the assembly is saved with the name <code>TempAssembly.dll</code>. You can use the Ildasm.exe (IL Disassembler) to examine the contents of this assembly.</p>\n<p>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</p>ModuleBuilder_DefineEnum#1"
  syntax:
    content: 'public sealed class EnumBuilder : TypeInfo, TypeInfo'
    content.vb: >-
      Public NotInheritable Class EnumBuilder
          Inherits TypeInfo
          Implements TypeInfo
  inheritance:
  - System.Object
  implements:
  - System.Reflection.TypeInfo
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  commentId: P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  fullName: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyQualifiedName
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 54
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the full path of this enum qualified by the display name of the parent assembly.</p>\n"
  remarks: "\n<p>The format of the returned string is: </p>\n<p><FullTypeName>, <AssemblyDisplayName> </p>\n<p>See <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> for a description of the format of the display name of an assembly.</p>\n"
  example:
  - <p>The following code sample demonstrates the use of the <strong>AssemblyQualifiedName</strong> property to reference the qualified parent assembly name of the current <strong>EnumBuilder</strong>.</p>EnumBuilder_Properties_5#2
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    content.vb: Public Overrides ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Read-only. The full path of this enum qualified by the display name of the parent assembly.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.FullName
  commentId: P:System.Reflection.Emit.EnumBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Reflection.Emit.EnumBuilder.FullName
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 55
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the full path of this enum.</p>\n"
  remarks: "\n<p>The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.</p>\n"
  syntax:
    content: public override string FullName { get; }
    content.vb: Public Overrides ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Read-only. The full path of this enum.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.Name
  commentId: P:System.Reflection.Emit.EnumBuilder.Name
  id: Name
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.EnumBuilder.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 56
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the name of this enum.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of the <strong>Name</strong> property to reference the name of the current <strong>EnumBuilder</strong>.</p>EnumBuilder_Properties_5#4"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Read-only. The name of this enum.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.UnderlyingField
  commentId: P:System.Reflection.Emit.EnumBuilder.UnderlyingField
  id: UnderlyingField
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: UnderlyingField
  fullName: System.Reflection.Emit.EnumBuilder.UnderlyingField
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnderlyingField
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 57
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the underlying field for this enum.</p>\n"
  syntax:
    content: public FieldBuilder UnderlyingField { get; }
    content.vb: Public ReadOnly Property UnderlyingField As FieldBuilder
    parameters: []
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: "\n<p>Read-only. The underlying field for this enum.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.CreateTypeInfo
  commentId: M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo
  id: CreateTypeInfo
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: CreateTypeInfo()
  fullName: System.Reflection.Emit.EnumBuilder.CreateTypeInfo()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateTypeInfo
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 58
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a <xref href=\"System.Reflection.TypeInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents this enumeration.</p>\n"
  syntax:
    content: public TypeInfo CreateTypeInfo()
    content.vb: Public Function CreateTypeInfo As TypeInfo
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>An object that represents this enumeration.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
  commentId: M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
  id: DefineLiteral(System.String,System.Object)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: DefineLiteral(String, Object)
  fullName: System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineLiteral
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 59
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines the named static field in an enumeration type with the specified constant value.</p>\n"
  remarks: "\n<p>The defined field will have the field attributes <xref href=\"System.Reflection.FieldAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.FieldAttributes.Literal\" data-throw-if-not-resolved=\"false\"></xref> set.</p>\n<p>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> because <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> emits enumerations whose elements are of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> instead of the enumeration type. In the .NET Framework version 2.0, <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> emits enumerations whose elements have the correct type.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <strong>EnumBuilder</strong>. The example defines an enumeration named <code>Elevation</code>, with an underlying type of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and creates two elements: <code>Low</code>, with a value of 0, and <code>High</code>, with a value of 1. After the type has been created, the assembly is saved with the name <code>TempAssembly.dll</code>. You can use the Ildasm.exe (IL Disassembler) to examine the contents of this assembly.</p>\n<p>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</p>ModuleBuilder_DefineEnum#1"
  syntax:
    content: public FieldBuilder DefineLiteral(string literalName, object literalValue)
    content.vb: Public Function DefineLiteral(literalName As String, literalValue As Object) As FieldBuilder
    parameters:
    - id: literalName
      type: System.String
      description: "\n<p>The name of the static field. </p>\n"
    - id: literalValue
      type: System.Object
      description: "\n<p>The constant value of the literal. </p>\n"
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: "\n<p>The defined field.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAssignableFrom
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 60
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\" data-throw-if-not-resolved=\"false\"></xref> object can be assigned to this object.</p>\n"
  syntax:
    content: public override bool IsAssignableFrom(TypeInfo typeInfo)
    content.vb: Public Overrides Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: "\n<p>The object to test.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>typeInfo</em> can be assigned to this object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType
  commentId: M:System.Reflection.Emit.EnumBuilder.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: MakeArrayType()
  fullName: System.Reflection.Emit.EnumBuilder.MakeArrayType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 61
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\n"
  example:
  - 
  syntax:
    content: public override Type MakeArrayType()
    content.vb: Public Overrides Function MakeArrayType As Type
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\n"
  seealso:
  - type: System.Type.MakeArrayType
    commentId: M:System.Type.MakeArrayType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  commentId: M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: MakeArrayType(Int32)
  fullName: System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 62
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing an array of the current type, with the specified number of dimensions.</p>\n"
  example:
  - 
  syntax:
    content: public override Type MakeArrayType(int rank)
    content.vb: Public Overrides Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
      description: "\n<p>The number of dimensions for the array. This number must be less than or equal to 32.</p>\n"
    return:
      type: System.Type
      description: "\n<p>An object representing an array of the current type, with the specified number of dimensions.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>rank</em> is less than 1.</p>\n"
  seealso:
  - type: System.Type.MakeArrayType
    commentId: M:System.Type.MakeArrayType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.MakeByRefType
  commentId: M:System.Reflection.Emit.EnumBuilder.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: MakeByRefType()
  fullName: System.Reflection.Emit.EnumBuilder.MakeByRefType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeByRefType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 63
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</p>\n"
  example:
  - 
  syntax:
    content: public override Type MakeByRefType()
    content.vb: Public Overrides Function MakeByRefType As Type
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</p>\n"
  seealso:
  - type: System.Type.MakeByRefType
    commentId: M:System.Type.MakeByRefType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.MakePointerType
  commentId: M:System.Reflection.Emit.EnumBuilder.MakePointerType
  id: MakePointerType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: MakePointerType()
  fullName: System.Reflection.Emit.EnumBuilder.MakePointerType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakePointerType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 64
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a pointer to the current type.</p>\n"
  example:
  - 
  syntax:
    content: public override Type MakePointerType()
    content.vb: Public Overrides Function MakePointerType As Type
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a pointer to the current type.</p>\n"
  seealso:
  - type: System.Type.MakePointerType
    commentId: M:System.Type.MakePointerType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 65
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a specified custom attribute blob.</p>\n"
  remarks: "\n<p>See the metadata specification in the ECMA Partition II documentation for details on how to format <em>binaryAttribute</em>. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>SetCustomAttribute</strong> in the context of <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref>, passing a byte blob.</p>EnumBuilder_SetCustomAttribute2#2"
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte blob representing the attributes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 66
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a custom attribute builder.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>SetCustomAttribute</strong> in the context of <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref>, passing a <xref href=\"System.Reflection.Emit.CustomAttributeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>EnumBuilder_SetCustomAttribute2#2"
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class to define the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.EnumBuilder.Attributes
  commentId: P:System.Reflection.Emit.EnumBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.EnumBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 49
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override TypeAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.Assembly
  commentId: P:System.Reflection.Emit.EnumBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.Emit.EnumBuilder.Assembly
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 50
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the dynamic assembly that contains this enum definition.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of the <strong>Assembly</strong> property to reference the parent assembly of the current <strong>EnumBuilder</strong>.</p>EnumBuilder_Properties_5#1"
  syntax:
    content: public override Assembly Assembly { get; }
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: Assembly
      description: "\n<p>Read-only. The dynamic assembly that contains this enum definition.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.BaseType
  commentId: P:System.Reflection.Emit.EnumBuilder.BaseType
  id: BaseType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: BaseType
  fullName: System.Reflection.Emit.EnumBuilder.BaseType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 51
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the parent <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of this type which is always <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Type BaseType { get; }
    content.vb: Public Overrides ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: Type
      description: "\n<p>Read-only. The parent <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of this type.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.Module
  commentId: P:System.Reflection.Emit.EnumBuilder.Module
  id: Module
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: Module
  fullName: System.Reflection.Emit.EnumBuilder.Module
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Module
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 52
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> definition.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of the <strong>Module</strong> property to reference the parent module of the current <strong>EnumBuilder</strong>.</p>EnumBuilder_Properties_5#3"
  syntax:
    content: public override Module Module { get; }
    content.vb: 'Public Overrides ReadOnly Property Module As '
    parameters: []
    return:
      type: Module
      description: "\n<p>Read-only. The dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref> definition.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.GetArrayRank
  commentId: M:System.Reflection.Emit.EnumBuilder.GetArrayRank
  id: GetArrayRank
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GetArrayRank()
  fullName: System.Reflection.Emit.EnumBuilder.GetArrayRank()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetArrayRank
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 54
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override int GetArrayRank()
    content.vb: Public Overrides Function GetArrayRank As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.GetElementType
  commentId: M:System.Reflection.Emit.EnumBuilder.GetElementType
  id: GetElementType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GetElementType()
  fullName: System.Reflection.Emit.EnumBuilder.GetElementType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 55
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Calling this method always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Type GetElementType()
    content.vb: Public Overrides Function GetElementType As Type
    return:
      type: Type
      description: "\n<p>This method is not supported. No value is returned.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not currently supported. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints
  commentId: M:System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GetGenericParameterConstraints()
  fullName: System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericParameterConstraints
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 56
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GetGenericParameterConstraints()
    content.vb: Public Overrides Function GetGenericParameterConstraints As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.GenericTypeArguments
  commentId: P:System.Reflection.Emit.EnumBuilder.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GenericTypeArguments
  fullName: System.Reflection.Emit.EnumBuilder.GenericTypeArguments
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericTypeArguments
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 57
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GenericTypeArguments { get; }
    content.vb: Public Overrides ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition
  commentId: M:System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition()
  fullName: System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericTypeDefinition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 58
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type GetGenericTypeDefinition()
    content.vb: Public Overrides Function GetGenericTypeDefinition As Type
    return:
      type: Type
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.EnumBuilder.ContainsGenericParameters
  commentId: P:System.Reflection.Emit.EnumBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  fullName: System.Reflection.Emit.EnumBuilder.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsGenericParameters
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 59
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    content.vb: Public Overrides ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.DeclaringMethod
  commentId: P:System.Reflection.Emit.EnumBuilder.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: DeclaringMethod
  fullName: System.Reflection.Emit.EnumBuilder.DeclaringMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 60
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override MethodBase DeclaringMethod { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: MethodBase
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.GenericParameterAttributes
  commentId: P:System.Reflection.Emit.EnumBuilder.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GenericParameterAttributes
  fullName: System.Reflection.Emit.EnumBuilder.GenericParameterAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterAttributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 61
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: GenericParameterAttributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.GenericParameterPosition
  commentId: P:System.Reflection.Emit.EnumBuilder.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GenericParameterPosition
  fullName: System.Reflection.Emit.EnumBuilder.GenericParameterPosition
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterPosition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 62
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override int GenericParameterPosition { get; }
    content.vb: Public Overrides ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.GUID
  commentId: P:System.Reflection.Emit.EnumBuilder.GUID
  id: GUID
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: GUID
  fullName: System.Reflection.Emit.EnumBuilder.GUID
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GUID
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 63
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the GUID of this enum.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of the <strong>GUID</strong> property to reference the associated <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of the current <strong>EnumBuilder</strong>.</p>EnumBuilder_Properties_4.cs#4"
  syntax:
    content: public override Guid GUID { get; }
    content.vb: Public Overrides ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: Guid
      description: "\n<p>Read-only. The GUID of this enum.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not currently supported in types that are not complete. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.IsEnum
  commentId: P:System.Reflection.Emit.EnumBuilder.IsEnum
  id: IsEnum
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: IsEnum
  fullName: System.Reflection.Emit.EnumBuilder.IsEnum
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnum
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 64
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsEnum { get; }
    content.vb: Public Overrides ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.IsGenericParameter
  commentId: P:System.Reflection.Emit.EnumBuilder.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: IsGenericParameter
  fullName: System.Reflection.Emit.EnumBuilder.IsGenericParameter
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericParameter
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 65
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsGenericParameter { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.IsGenericType
  commentId: P:System.Reflection.Emit.EnumBuilder.IsGenericType
  id: IsGenericType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: IsGenericType
  fullName: System.Reflection.Emit.EnumBuilder.IsGenericType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 66
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsGenericType { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition
  commentId: P:System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: IsGenericTypeDefinition
  fullName: System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericTypeDefinition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 67
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsGenericTypeDefinition { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.IsSerializable
  commentId: P:System.Reflection.Emit.EnumBuilder.IsSerializable
  id: IsSerializable
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: IsSerializable
  fullName: System.Reflection.Emit.EnumBuilder.IsSerializable
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSerializable
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 68
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsSerializable { get; }
    content.vb: Public Overrides ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.Namespace
  commentId: P:System.Reflection.Emit.EnumBuilder.Namespace
  id: Namespace
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Reflection.Emit.EnumBuilder.Namespace
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 69
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the namespace of this enum.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of the <strong>Namespace</strong> property to reference the associated namespace of the current <strong>EnumBuilder</strong>.</p>EnumBuilder_Properties_5#5"
  syntax:
    content: public override string Namespace { get; }
    content.vb: Public Overrides ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Read-only. The namespace of this enum.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])
  commentId: M:System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: MakeGenericType(Type[])
  fullName: System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGenericType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 70
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public Overrides Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
    return:
      type: Type
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type())
  name.vb: MakeGenericType(Type())
- uid: System.Reflection.Emit.EnumBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.EnumBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.EnumBuilder.DeclaringType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 72
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: Type
      description: "\n<p>Read-only. The type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: Assembly
  isExternal: true
  name: Assembly
  fullName: Assembly
- uid: Type
  isExternal: true
  name: Type
  fullName: Type
- uid: Module
  isExternal: true
  name: Module
  fullName: Module
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: MethodBase
  isExternal: true
  name: MethodBase
  fullName: MethodBase
- uid: GenericParameterAttributes
  isExternal: true
  name: GenericParameterAttributes
  fullName: GenericParameterAttributes
- uid: Guid
  isExternal: true
  name: Guid
  fullName: Guid
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
