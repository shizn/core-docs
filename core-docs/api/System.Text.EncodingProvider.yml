items:
- uid: System.Text.EncodingProvider
  commentId: T:System.Text.EncodingProvider
  id: EncodingProvider
  parent: System.Text
  children:
  - System.Text.EncodingProvider.#ctor
  - System.Text.EncodingProvider.GetEncoding(System.Int32)
  - System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.EncodingProvider.GetEncoding(System.String)
  - System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  langs:
  - csharp
  - vb
  name: EncodingProvider
  fullName: System.Text.EncodingProvider
  type: Class
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EncodingProvider
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 187
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Provides the base class for an encoding provider, which supplies encodings that are unavailable on a particular platform. </p>\n"
  remarks: "\n<p>An encoding provider supplies encodings that are not otherwise available on a particular target platform. </p>\n<p>The .NET Framework on the Windows desktop supports a large number of character encodings and code pages. You can get a complete list of encodings available in the .NET Framework on the Windows desktop by calling the <xref href=\"System.Text.Encoding.GetEncodings\" data-throw-if-not-resolved=\"false\"></xref> method. .NET Core, on the other hand, by default supports only the following encodings: </p>\n<ul><li>\n<p>ASCII (code page 20127), which is returned by the <xref href=\"System.Text.Encoding.ASCII\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>ISO-8859-1 (code page 28591). </p>\n</li><li>\n<p>UTF-7 (code page 65000), which is returned by the <xref href=\"System.Text.Encoding.UTF7\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>UTF-8 (code page 65001), which is returned by the <xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>UTF-16 and UTF-16LE (code page 1200), which is returned by the <xref href=\"System.Text.Encoding.Unicode\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>UTF-16BE (code page 1201), which is instantiated by calling the <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a <em>bigEndian</em> value of <strong>true</strong>. </p>\n</li><li>\n<p>UTF-32 and UTF-32LE (code page 12000), which is returned by the <xref href=\"System.Text.Encoding.UTF32\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>UTF-32BE (code page 12001), which is instantiated by calling an <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> constructor that has a <em>bigEndian</em> parameter and providing a value of <strong>true</strong> in the method call. </p>\n</li></ul>\n<p>In .NET Framework 4.6, <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> is the base class that makes otherwise unavailable encodings available to the .NET Framework. This involves the following steps: </p>\n<ol><li>\n<p>Define a subclass of <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> that overrides the two abstract <xref href=\"System.Text.EncodingProvider.GetEncoding(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overloads, <xref href=\"System.Text.EncodingProvider.GetEncoding(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.EncodingProvider.GetEncoding(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. These overloads return the otherwise unsupported encoding by code page identifier and by name. </p>\n</li><li>\n<p>Optionally, you can override the virtual <xref href=\"System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\" data-throw-if-not-resolved=\"false\"></xref> methods. In most cases, this is not necessary, since the base class provides a default implementation. </p>\n</li><li>\n<p>Pass the <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> instance to the <xref href=\"System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to make the encodings supplied by the <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> object available to the common language runtime. </p>\n</li><li>\n<p>Call an <xref href=\"System.Text.Encoding.GetEncoding(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overload to retrieve the encoding. The <xref href=\"System.Text.Encoding.GetEncoding(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method will call the corresponding <xref href=\"System.Text.EncodingProvider.GetEncoding(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether it can supply the requested encoding. </p>\n</li></ol>\n<p>The .NET Framework Class Library provides one static property, <xref href=\"System.Text.CodePagesEncodingProvider.Instance\" data-throw-if-not-resolved=\"false\"></xref>, that returns an <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> object that makes the full set of encodings available on the desktop .NET Framework Class Library available to .NET Core applications. In addition, you can derive from the <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> class to make your own encodings available. </p>\n"
  syntax:
    content: 'public abstract class EncodingProvider : object'
    content.vb: >-
      Public MustInherit Class EncodingProvider
          Inherits Object
  seealso:
  - type: System.Text.Encoding.GetEncoding(System.String)
    commentId: M:System.Text.Encoding.GetEncoding(System.String)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Text.EncodingProvider.#ctor
  commentId: M:System.Text.EncodingProvider.#ctor
  id: '#ctor'
  parent: System.Text.EncodingProvider
  langs:
  - csharp
  - vb
  name: EncodingProvider()
  fullName: System.Text.EncodingProvider.EncodingProvider()
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 189
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public EncodingProvider()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.EncodingProvider.GetEncoding(System.Int32)
  commentId: M:System.Text.EncodingProvider.GetEncoding(System.Int32)
  id: GetEncoding(System.Int32)
  parent: System.Text.EncodingProvider
  langs:
  - csharp
  - vb
  name: GetEncoding(Int32)
  fullName: System.Text.EncodingProvider.GetEncoding(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEncoding
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 190
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified code page identifier. </p>\n"
  syntax:
    content: public abstract Encoding GetEncoding(int codepage)
    content.vb: Public MustOverride Function GetEncoding(codepage As Integer) As Encoding
    parameters:
    - id: codepage
      type: System.Int32
      description: "\n<p>The code page identifier of the requested encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified code page, or <strong>null</strong> if this <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> cannot return a valid encoding that corresponds to <em>codepage</em>. </p>\n"
  seealso:
  - type: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.EncodingProvider
  langs:
  - csharp
  - vb
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: System.Text.EncodingProvider.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEncoding
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 191
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded. </p>\n"
  remarks: "\n<p>The <em>encoderFallback</em> and <em>decoderFallback</em> parameters are objects that define the fallback strategy used in the event that an encoder cannot convert a character to a sequence of bytes or a decoder cannot convert a sequence of bytes to a character. The .NET Framework provides the following fallback mechanisms:</p>\n<ul><li>\n<p>Exception fallback. If the <em>encoderFallback</em> argument is an instance of <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>, or the <em>decoderExceptionFallback</em> argument is an instance of <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>, the encoding method throws an exception if characters cannot be encoded, and the decoding method throws an exception if a byte sequence cannot be decoded.  </p>\n</li><li>\n<p>Replacement fallback. If the <em>encoderFallback</em> argument is an instance of <xref href=\"System.Text.EncoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref>, or the <em>decoderExceptionFallback</em> argument is an instance of <xref href=\"System.Text.DecoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref>, the encoding and decoding methods substitute a replacement string for characters that cannot be encoded and byte sequences cannot be decoded. If you instantiated the replacement fallback object by calling the default constructor, the replacement character is a \"?\". If you call the <xref href=\"System.Text.EncoderReplacementFallback.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.DecoderReplacementFallback.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, you can specify the replacement string. </p>\n</li><li>\n<p>Best-fit fallback. You can derive from the <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> class to implement a best-fit replacement mechanism. </p>\n</li></ul>\n"
  syntax:
    content: public virtual Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback)
    content.vb: Public Overridable Function GetEncoding(codepage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding
    parameters:
    - id: codepage
      type: System.Int32
      description: "\n<p>The code page identifier of the requested encoding. </p>\n"
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a character cannot be encoded with this encoding. </p>\n"
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with this encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified code page, or <strong>null</strong> if this <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> cannot return a valid encoding that corresponds to <em>codepage</em>. </p>\n"
  seealso:
  - type: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.EncodingProvider.GetEncoding(System.String)
  commentId: M:System.Text.EncodingProvider.GetEncoding(System.String)
  id: GetEncoding(System.String)
  parent: System.Text.EncodingProvider
  langs:
  - csharp
  - vb
  name: GetEncoding(String)
  fullName: System.Text.EncodingProvider.GetEncoding(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEncoding
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 192
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding with the specified name. </p>\n"
  syntax:
    content: public abstract Encoding GetEncoding(string name)
    content.vb: Public MustOverride Function GetEncoding(name As String) As Encoding
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the requested encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified name, or <strong>null</strong> if this <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> cannot return a valid encoding that corresponds to <em>name</em>.</p>\n"
  seealso:
  - type: System.Text.Encoding.GetEncoding(System.String)
    commentId: M:System.Text.Encoding.GetEncoding(System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.EncodingProvider
  langs:
  - csharp
  - vb
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: System.Text.EncodingProvider.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEncoding
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 193
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded. </p>\n"
  remarks: "\n<p>The <em>encoderFallback</em> and <em>decoderFallback</em> parameters are objects that define the fallback strategy used in the event that an encoder cannot convert a character to a sequence of bytes or a decoder cannot convert a sequence of bytes to a character. The .NET Framework provides the following fallback mechanisms:</p>\n<ul><li>\n<p>Exception fallback. If the <em>encoderFallback</em> argument is an instance of <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>, or the <em>decoderExceptionFallback</em> argument is an instance of <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>, the encoding method throws an exception if characters cannot be encoded, and the decoding method throws an exception if a byte sequence cannot be decoded.  </p>\n</li><li>\n<p>Replacement fallback. If the <em>encoderFallback</em> argument is an instance of <xref href=\"System.Text.EncoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref>, or the <em>decoderExceptionFallback</em> argument is an instance of <xref href=\"System.Text.DecoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref>, the encoding and decoding methods substitute a replacement string for characters that cannot be encoded and byte sequences cannot be decoded. If you instantiated the replacement fallback object by calling the default constructor, the replacement character is a \"?\". If you call the <xref href=\"System.Text.EncoderReplacementFallback.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.DecoderReplacementFallback.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, you can specify the replacement string. </p>\n</li><li>\n<p>Best-fit fallback. You can derive from the <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> class to implement a best-fit replacement mechanism. </p>\n</li></ul>\n"
  syntax:
    content: public virtual Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback)
    content.vb: Public Overridable Function GetEncoding(name As String, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the preferred encoding. </p>\n"
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a character cannot be encoded with this encoding. </p>\n"
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified name, or <strong>null</strong> if this <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> cannot return a valid encoding that corresponds to <em>name</em>. </p>\n"
  seealso:
  - type: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
    commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Text.Encoding
  fullName: System.Text.Encoding
- uid: System.Text.EncoderFallback
  parent: System.Text
  isExternal: false
  name: EncoderFallback
  fullName: System.Text.EncoderFallback
- uid: System.Text.DecoderFallback
  parent: System.Text
  isExternal: false
  name: DecoderFallback
  fullName: System.Text.DecoderFallback
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
