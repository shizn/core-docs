items:
- uid: System.Reflection.MethodAttributes
  commentId: T:System.Reflection.MethodAttributes
  id: MethodAttributes
  parent: System.Reflection
  children:
  - System.Reflection.MethodAttributes.Abstract
  - System.Reflection.MethodAttributes.Assembly
  - System.Reflection.MethodAttributes.CheckAccessOnOverride
  - System.Reflection.MethodAttributes.FamANDAssem
  - System.Reflection.MethodAttributes.Family
  - System.Reflection.MethodAttributes.FamORAssem
  - System.Reflection.MethodAttributes.Final
  - System.Reflection.MethodAttributes.HasSecurity
  - System.Reflection.MethodAttributes.HideBySig
  - System.Reflection.MethodAttributes.MemberAccessMask
  - System.Reflection.MethodAttributes.NewSlot
  - System.Reflection.MethodAttributes.PinvokeImpl
  - System.Reflection.MethodAttributes.Private
  - System.Reflection.MethodAttributes.PrivateScope
  - System.Reflection.MethodAttributes.Public
  - System.Reflection.MethodAttributes.RequireSecObject
  - System.Reflection.MethodAttributes.ReuseSlot
  - System.Reflection.MethodAttributes.RTSpecialName
  - System.Reflection.MethodAttributes.SpecialName
  - System.Reflection.MethodAttributes.Static
  - System.Reflection.MethodAttributes.UnmanagedExport
  - System.Reflection.MethodAttributes.Virtual
  - System.Reflection.MethodAttributes.VtableLayoutMask
  langs:
  - csharp
  - vb
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MethodAttributes
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 10
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies flags for method attributes. These flags are defined in the corhdr.h file.</p>\n"
  example:
  - "\n<p>The following example displays the attributes of the specified method.</p>Classic MethodAttributes Example#1"
  syntax:
    content: >-
      [Serializable]

      [Flags]

      [ComVisible(true)]

      public enum MethodAttributes
    content.vb: >-
      <Serializable>

      <Flags>

      <ComVisible(True)>

      Public Enum MethodAttributes
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Reflection.MethodAttributes.Abstract
  commentId: F:System.Reflection.MethodAttributes.Abstract
  id: Abstract
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Abstract
  fullName: System.Reflection.MethodAttributes.Abstract
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abstract
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 42
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the class does not provide an implementation of this method.</p>\n"
  syntax:
    content: Abstract = 1024
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Assembly
  commentId: F:System.Reflection.MethodAttributes.Assembly
  id: Assembly
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.MethodAttributes.Assembly
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 22
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is accessible to any class of this assembly.</p>\n"
  syntax:
    content: Assembly = 3
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.CheckAccessOnOverride
  commentId: F:System.Reflection.MethodAttributes.CheckAccessOnOverride
  id: CheckAccessOnOverride
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: CheckAccessOnOverride
  fullName: System.Reflection.MethodAttributes.CheckAccessOnOverride
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CheckAccessOnOverride
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 33
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method can only be overridden when it is also accessible.</p>\n"
  syntax:
    content: CheckAccessOnOverride = 512
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.FamANDAssem
  commentId: F:System.Reflection.MethodAttributes.FamANDAssem
  id: FamANDAssem
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: FamANDAssem
  fullName: System.Reflection.MethodAttributes.FamANDAssem
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FamANDAssem
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 21
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is accessible to members of this type and its derived types that are in this assembly only.</p>\n"
  syntax:
    content: FamANDAssem = 2
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Family
  commentId: F:System.Reflection.MethodAttributes.Family
  id: Family
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Family
  fullName: System.Reflection.MethodAttributes.Family
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Family
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 23
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is accessible only to members of this class and its derived classes.</p>\n"
  syntax:
    content: Family = 4
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.FamORAssem
  commentId: F:System.Reflection.MethodAttributes.FamORAssem
  id: FamORAssem
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: FamORAssem
  fullName: System.Reflection.MethodAttributes.FamORAssem
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FamORAssem
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 24
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is accessible to derived classes anywhere, as well as to any class in the assembly.</p>\n"
  syntax:
    content: FamORAssem = 5
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Final
  commentId: F:System.Reflection.MethodAttributes.Final
  id: Final
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Final
  fullName: System.Reflection.MethodAttributes.Final
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Final
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 30
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method cannot be overridden.</p>\n"
  syntax:
    content: Final = 32
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.HasSecurity
  commentId: F:System.Reflection.MethodAttributes.HasSecurity
  id: HasSecurity
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: HasSecurity
  fullName: System.Reflection.MethodAttributes.HasSecurity
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasSecurity
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 52
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method has security associated with it. Reserved flag for runtime use only.</p>\n"
  syntax:
    content: HasSecurity = 16384
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.HideBySig
  commentId: F:System.Reflection.MethodAttributes.HideBySig
  id: HideBySig
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: HideBySig
  fullName: System.Reflection.MethodAttributes.HideBySig
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HideBySig
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 32
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method hides by name and signature; otherwise, by name only.</p>\n"
  syntax:
    content: HideBySig = 128
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.MemberAccessMask
  commentId: F:System.Reflection.MethodAttributes.MemberAccessMask
  id: MemberAccessMask
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: MemberAccessMask
  fullName: System.Reflection.MethodAttributes.MemberAccessMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberAccessMask
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 18
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Retrieves accessibility information.</p>\n"
  syntax:
    content: MemberAccessMask = 7
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.NewSlot
  commentId: F:System.Reflection.MethodAttributes.NewSlot
  id: NewSlot
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: NewSlot
  fullName: System.Reflection.MethodAttributes.NewSlot
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NewSlot
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 38
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method always gets a new slot in the vtable.</p>\n"
  syntax:
    content: NewSlot = 256
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.PinvokeImpl
  commentId: F:System.Reflection.MethodAttributes.PinvokeImpl
  id: PinvokeImpl
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: PinvokeImpl
  fullName: System.Reflection.MethodAttributes.PinvokeImpl
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PinvokeImpl
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 46
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method implementation is forwarded through PInvoke (Platform Invocation Services).</p>\n"
  syntax:
    content: PinvokeImpl = 8192
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Private
  commentId: F:System.Reflection.MethodAttributes.Private
  id: Private
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Private
  fullName: System.Reflection.MethodAttributes.Private
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Private
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 20
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is accessible only to the current class.</p>\n"
  syntax:
    content: Private = 1
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.PrivateScope
  commentId: F:System.Reflection.MethodAttributes.PrivateScope
  id: PrivateScope
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: PrivateScope
  fullName: System.Reflection.MethodAttributes.PrivateScope
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PrivateScope
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 19
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the member cannot be referenced.</p>\n"
  syntax:
    content: PrivateScope = 0
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Public
  commentId: F:System.Reflection.MethodAttributes.Public
  id: Public
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Public
  fullName: System.Reflection.MethodAttributes.Public
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Public
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 25
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is accessible to any object for which this object is in scope.</p>\n"
  syntax:
    content: Public = 6
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.RequireSecObject
  commentId: F:System.Reflection.MethodAttributes.RequireSecObject
  id: RequireSecObject
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: RequireSecObject
  fullName: System.Reflection.MethodAttributes.RequireSecObject
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RequireSecObject
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 53
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method calls another method containing security code. Reserved flag for runtime use only.</p>\n"
  syntax:
    content: RequireSecObject = 32768
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.ReuseSlot
  commentId: F:System.Reflection.MethodAttributes.ReuseSlot
  id: ReuseSlot
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: ReuseSlot
  fullName: System.Reflection.MethodAttributes.ReuseSlot
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReuseSlot
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 37
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method will reuse an existing slot in the vtable. This is the default behavior.</p>\n"
  syntax:
    content: ReuseSlot = 0
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.RTSpecialName
  commentId: F:System.Reflection.MethodAttributes.RTSpecialName
  id: RTSpecialName
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: RTSpecialName
  fullName: System.Reflection.MethodAttributes.RTSpecialName
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RTSpecialName
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 48
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the common language runtime checks the name encoding.</p>\n"
  syntax:
    content: RTSpecialName = 4096
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.SpecialName
  commentId: F:System.Reflection.MethodAttributes.SpecialName
  id: SpecialName
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: SpecialName
  fullName: System.Reflection.MethodAttributes.SpecialName
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpecialName
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 43
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is special. The name describes how this method is special.</p>\n"
  syntax:
    content: SpecialName = 2048
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Static
  commentId: F:System.Reflection.MethodAttributes.Static
  id: Static
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Static
  fullName: System.Reflection.MethodAttributes.Static
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Static
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 29
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is defined on the type; otherwise, it is defined per instance.</p>\n"
  syntax:
    content: Static = 16
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.UnmanagedExport
  commentId: F:System.Reflection.MethodAttributes.UnmanagedExport
  id: UnmanagedExport
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: UnmanagedExport
  fullName: System.Reflection.MethodAttributes.UnmanagedExport
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UnmanagedExport
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 47
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the managed method is exported by thunk to unmanaged code.</p>\n"
  syntax:
    content: UnmanagedExport = 8
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.Virtual
  commentId: F:System.Reflection.MethodAttributes.Virtual
  id: Virtual
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: Virtual
  fullName: System.Reflection.MethodAttributes.Virtual
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Virtual
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 31
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Indicates that the method is virtual.</p>\n"
  syntax:
    content: Virtual = 64
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.MethodAttributes.VtableLayoutMask
  commentId: F:System.Reflection.MethodAttributes.VtableLayoutMask
  id: VtableLayoutMask
  parent: System.Reflection.MethodAttributes
  langs:
  - csharp
  - vb
  name: VtableLayoutMask
  fullName: System.Reflection.MethodAttributes.VtableLayoutMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: VtableLayoutMask
    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs
    startLine: 36
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Retrieves vtable attributes.</p>\n"
  syntax:
    content: VtableLayoutMask = 256
    return:
      type: System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
