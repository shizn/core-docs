items:
- uid: System.Security.Cryptography.HashAlgorithmName
  commentId: T:System.Security.Cryptography.HashAlgorithmName
  id: HashAlgorithmName
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)
  - System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  - System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.HashAlgorithmName.GetHashCode
  - System.Security.Cryptography.HashAlgorithmName.MD5
  - System.Security.Cryptography.HashAlgorithmName.Name
  - System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.HashAlgorithmName.SHA1
  - System.Security.Cryptography.HashAlgorithmName.SHA256
  - System.Security.Cryptography.HashAlgorithmName.SHA384
  - System.Security.Cryptography.HashAlgorithmName.SHA512
  - System.Security.Cryptography.HashAlgorithmName.ToString
  langs:
  - csharp
  - vb
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
  type: Struct
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashAlgorithmName
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 72
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the name of a cryptographic hash algorithm. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> structure includes some static properties that return predefined hash algorithm names, as well as a <xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> property that can represent a custom hash algorithm name as a strongly-typed string. Hash algorithm names are case-sensitive. </p>\n<p>Asymmetric algorithms implemented using Microsoft's CNG (Cryptographic Next Generation) API interpret the underlying string value as a <see href=\"https://msdn.microsoft.com/library/windows/desktop/aa375534.aspx\">CNG algorithm identifier</see>. </p>\n<p>Asymmetric algorithms implemented using other technologies: </p>\n<ul><li>\n<p>Must recognize at least \"MD5\", \"SHA1\", \"SHA256\", \"SHA384\", and \"SHA512\". </p>\n</li><li>\n<p>Should recognize additional CNG identifiers for any additional hash algorithms that they support. </p>\n</li></ul>\n"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct HashAlgorithmName : IEquatable<HashAlgorithmName>
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure HashAlgorithmName
          Implements IEquatable(Of HashAlgorithmName)
  implements:
  - System.IEquatable{System.Security.Cryptography.HashAlgorithmName}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: HashAlgorithmName(String)
  fullName: System.Security.Cryptography.HashAlgorithmName.HashAlgorithmName(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 75
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> structure with a custom name. </p>\n"
  remarks: "\n<p>The constructor performs no validation on <em>name</em>. </p>\n"
  syntax:
    content: public HashAlgorithmName(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The custom hash algorithm name. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithmName.MD5
  commentId: P:System.Security.Cryptography.HashAlgorithmName.MD5
  id: MD5
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: MD5
  fullName: System.Security.Cryptography.HashAlgorithmName.MD5
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MD5
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 76
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a hash algorithm name that represents \"MD5\".</p>\n"
  syntax:
    content: public static HashAlgorithmName MD5 { get; }
    content.vb: Public Shared ReadOnly Property MD5 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>A hash algorithm name that represents \"MD5\". </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.Name
  commentId: P:System.Security.Cryptography.HashAlgorithmName.Name
  id: Name
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Security.Cryptography.HashAlgorithmName.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 77
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the underlying string representation of the algorithm name. </p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The string representation of the algorithm name, or <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if no hash algorithm is available. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA1
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA1
  id: SHA1
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA1
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA1
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA1
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 78
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a hash algorithm name that represents \"SHA1\".</p>\n"
  syntax:
    content: public static HashAlgorithmName SHA1 { get; }
    content.vb: Public Shared ReadOnly Property SHA1 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>A hash algorithm name that represents \"SHA1\". </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA256
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA256
  id: SHA256
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA256
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA256
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA256
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 79
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a hash algorithm name that represents \"SHA256\".</p>\n"
  syntax:
    content: public static HashAlgorithmName SHA256 { get; }
    content.vb: Public Shared ReadOnly Property SHA256 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>A hash algorithm name that represents \"SHA256\". </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA384
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA384
  id: SHA384
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA384
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA384
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA384
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 80
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a hash algorithm name that represents \"SHA384\".</p>\n"
  syntax:
    content: public static HashAlgorithmName SHA384 { get; }
    content.vb: Public Shared ReadOnly Property SHA384 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>A hash algorithm name that represents \"SHA384\". </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA512
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA512
  id: SHA512
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA512
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA512
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA512
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 81
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a hash algorithm name that represents \"SHA512\".</p>\n"
  syntax:
    content: public static HashAlgorithmName SHA512 { get; }
    content.vb: Public Shared ReadOnly Property SHA512 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>A hash algorithm name that represents \"SHA512\". </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 82
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Returns a value that indicates whether the current instance and a specified object are equal. </p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is a <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> object and its <xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> property is equal to that of the current instance. The comparison is ordinal and case-sensitive. </p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  id: Equals(System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Equals(HashAlgorithmName)
  fullName: System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> instances are equal. </p>\n"
  syntax:
    content: public bool Equals(HashAlgorithmName other)
    content.vb: Public Function Equals(other As HashAlgorithmName) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The object to compare with the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> property of <em>other</em> is equal to that of the current instance. The comparison is ordinal and case-sensitive. </p>\n"
  implements:
  - System.IEquatable{System.Security.Cryptography.HashAlgorithmName}.Equals(System.Security.Cryptography.HashAlgorithmName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithmName.GetHashCode
  commentId: M:System.Security.Cryptography.HashAlgorithmName.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Cryptography.HashAlgorithmName.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 84
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Returns the hash code for the current instance. </p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code for the current instance, or 0 if no <em>name</em> value was supplied to the <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  id: op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Equality(HashAlgorithmName, HashAlgorithmName)
  fullName: System.Security.Cryptography.HashAlgorithmName.Equality(System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.HashAlgorithmName)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 85
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two specified <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> objects are equal. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  syntax:
    content: public static bool operator ==(HashAlgorithmName left, HashAlgorithmName right)
    content.vb: Public Shared Operator =(left As HashAlgorithmName, right As HashAlgorithmName) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The first object to compare. </p>\n"
    - id: right
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The second object to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if both <em>left</em> and <em>right</em> have the same <xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> value; otherwise, <strong>false</strong>.  </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  id: op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Inequality(HashAlgorithmName, HashAlgorithmName)
  fullName: System.Security.Cryptography.HashAlgorithmName.Inequality(System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.HashAlgorithmName)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 86
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two specified <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> objects are not equal. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  syntax:
    content: public static bool operator !=(HashAlgorithmName left, HashAlgorithmName right)
    content.vb: Public Shared Operator <>(left As HashAlgorithmName, right As HashAlgorithmName) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The first object to compare. </p>\n"
    - id: right
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The second object to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if both <em>left</em> and <em>right</em> do not have the same <xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> value; otherwise, <strong>false</strong>.  </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.HashAlgorithmName.ToString
  commentId: M:System.Security.Cryptography.HashAlgorithmName.ToString
  id: ToString
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.HashAlgorithmName.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 87
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Returns the string representation of the current <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.HashAlgorithmName.ToString\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> property, if it has been assigned. Otherwise, it returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the current <xref href=\"System.Security.Cryptography.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<HashAlgorithmName>
  fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName)
  name.vb: IEquatable(Of HashAlgorithmName)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}.Equals(System.Security.Cryptography.HashAlgorithmName)
  parent: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(HashAlgorithmName)
  fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>.Equals(System.Security.Cryptography.HashAlgorithmName)
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName).Equals(System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
