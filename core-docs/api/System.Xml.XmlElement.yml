items:
- uid: System.Xml.XmlElement
  commentId: T:System.Xml.XmlElement
  id: XmlElement
  parent: System.Xml
  children:
  - System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  - System.Xml.XmlElement.Attributes
  - System.Xml.XmlElement.CloneNode(System.Boolean)
  - System.Xml.XmlElement.GetAttribute(System.String)
  - System.Xml.XmlElement.GetAttribute(System.String,System.String)
  - System.Xml.XmlElement.GetAttributeNode(System.String)
  - System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.GetElementsByTagName(System.String)
  - System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlElement.HasAttribute(System.String)
  - System.Xml.XmlElement.HasAttribute(System.String,System.String)
  - System.Xml.XmlElement.HasAttributes
  - System.Xml.XmlElement.InnerText
  - System.Xml.XmlElement.InnerXml
  - System.Xml.XmlElement.IsEmpty
  - System.Xml.XmlElement.LocalName
  - System.Xml.XmlElement.Name
  - System.Xml.XmlElement.NamespaceURI
  - System.Xml.XmlElement.NextSibling
  - System.Xml.XmlElement.NodeType
  - System.Xml.XmlElement.OwnerDocument
  - System.Xml.XmlElement.ParentNode
  - System.Xml.XmlElement.Prefix
  - System.Xml.XmlElement.RemoveAll
  - System.Xml.XmlElement.RemoveAllAttributes
  - System.Xml.XmlElement.RemoveAttribute(System.String)
  - System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  - System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  - System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  - System.Xml.XmlElement.SetAttribute(System.String,System.String)
  - System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  - System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  - System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: XmlElement
  fullName: System.Xml.XmlElement
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlElement
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 177
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Represents an element.</p>\n"
  remarks: "\n<p>Elements are one of the most common nodes in the W3C Document Object Model (DOM). Elements can have attributes associated with them. The <strong>XmlElement</strong> class has many methods for accessing attributes (<xref href=\"System.Xml.XmlElement.GetAttribute(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlElement.SetAttribute(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlElement.RemoveAttribute(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlElement.GetAttributeNode(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, and so on). You can also use the <xref href=\"System.Xml.XmlElement.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property which returns an <xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> enabling you to access attributes by name or index from the collection.</p>\n"
  syntax:
    content: 'public class XmlElement : XmlLinkedNode, IEnumerable'
    content.vb: >-
      Public Class XmlElement
          Inherits XmlLinkedNode
          Implements IEnumerable
  seealso:
  - type: System.Xml.XmlDocument.CreateElement(System.String)
    commentId: M:System.Xml.XmlDocument.CreateElement(System.String)
  - type: System.Xml.XmlAttribute
    commentId: T:System.Xml.XmlAttribute
  - type: System.Xml.XmlDocument
    commentId: T:System.Xml.XmlDocument
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlLinkedNode
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Xml.XmlLinkedNode.PreviousSibling
  - System.Xml.XmlNode.BaseURI
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.IsReadOnly
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.Value
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  commentId: M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: XmlElement(String, String, String, XmlDocument)
  fullName: System.Xml.XmlElement.XmlElement(System.String, System.String, System.String, System.Xml.XmlDocument)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 179
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Do not instantiate an <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> directly; instead, use methods such as <see cref=\"Overload:System.Xml.XmlDocument.CreateElement\"></see>.</p>\n"
  example:
  - 
  syntax:
    content: protected XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc)
    content.vb: Protected Sub New(prefix As String, localName As String, namespaceURI As String, doc As XmlDocument)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix; see the <xref href=\"System.Xml.XmlElement.Prefix\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name; see the <xref href=\"System.Xml.XmlElement.LocalName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI; see the <xref href=\"System.Xml.XmlElement.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
    - id: doc
      type: System.Xml.XmlDocument
      description: "\n<p>The parent XML document.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Xml.XmlElement.Attributes
  commentId: P:System.Xml.XmlElement.Attributes
  id: Attributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Xml.XmlElement.Attributes
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 180
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets an <xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the list of attributes for this node.</p>\n"
  example:
  - "\n<p>The following example uses changes the value of the first attribute.</p>Classic WebData XmlElement.Attributes Example#1"
  syntax:
    content: public override XmlAttributeCollection Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As XmlAttributeCollection
    parameters: []
    return:
      type: System.Xml.XmlAttributeCollection
      description: "\n<p>\n<xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the list of attributes for this node.</p>\n"
  overridden: System.Xml.XmlNode.Attributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.HasAttributes
  commentId: P:System.Xml.XmlElement.HasAttributes
  id: HasAttributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: HasAttributes
  fullName: System.Xml.XmlElement.HasAttributes
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasAttributes
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 181
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets a <strong>boolean</strong> value indicating whether the current node has any attributes.</p>\n"
  remarks: "\n<p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example removes all attributes from the root element.</p>Classic WebData XmlElement.HasAttributes Example#1"
  syntax:
    content: public virtual bool HasAttributes { get; }
    content.vb: Public Overridable ReadOnly Property HasAttributes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node has attributes; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlElement.InnerText
  commentId: P:System.Xml.XmlElement.InnerText
  id: InnerText
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: InnerText
  fullName: System.Xml.XmlElement.InnerText
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerText
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 182
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets or sets the concatenated values of the node and all its children.</p>\n"
  remarks: "\n<p>Setting this property replaces all the children with the parsed contents of the given string.</p>\n<p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example compares the <strong>InnerText</strong> and <xref href=\"System.Xml.XmlElement.InnerXml\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>Classic WebData XmlElement.InnerXml Example#1"
  syntax:
    content: public override string InnerText { get; set; }
    content.vb: Public Overrides Property InnerText As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The concatenated values of the node and all its children.</p>\n"
  overridden: System.Xml.XmlNode.InnerText
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlElement.InnerXml
  commentId: P:System.Xml.XmlElement.InnerXml
  id: InnerXml
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: InnerXml
  fullName: System.Xml.XmlElement.InnerXml
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerXml
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 183
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets or sets the markup representing just the children of this node.</p>\n"
  remarks: "\n<p>Setting this property replaces the children of the node with the parsed contents of the given string. The parsing is done in the current namespace context.</p>\n<p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example compares the <xref href=\"System.Xml.XmlElement.InnerText\" data-throw-if-not-resolved=\"false\"></xref> and <strong>InnerXml</strong> properties.</p>Classic WebData XmlElement.InnerXml Example#1"
  syntax:
    content: public override string InnerXml { get; set; }
    content.vb: Public Overrides Property InnerXml As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The markup of the children of this node.</p>\n"
  overridden: System.Xml.XmlNode.InnerXml
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML specified when setting this property is not well-formed. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlElement.IsEmpty
  commentId: P:System.Xml.XmlElement.IsEmpty
  id: IsEmpty
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: IsEmpty
  fullName: System.Xml.XmlElement.IsEmpty
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEmpty
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 184
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets or sets the tag format of the element.</p>\n"
  remarks: "\n<p>This property is a Microsoft extension of the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example adds content to an empty element.</p>Classic WebData XmlElement.IsEmpty Example#1"
  syntax:
    content: public bool IsEmpty { get; set; }
    content.vb: Public Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the element is to be serialized in the short tag format \"<item/>\"; <strong>false</strong> for the long format \"<item></item>\".</p>\n<p>When setting this property, if set to <strong>true</strong>, the children of the element are removed and the element is serialized in the short tag format. If set to <strong>false</strong>, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.</p>\n<p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlElement.LocalName
  commentId: P:System.Xml.XmlElement.LocalName
  id: LocalName
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: LocalName
  fullName: System.Xml.XmlElement.LocalName
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalName
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 185
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the local name of the current node.</p>\n"
  remarks: "\n<p>If the node does not have a prefix, <strong>LocalName</strong> is the same as <xref href=\"System.Xml.XmlElement.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example displays information on the ISBN element.</p>Classic WebData XmlElement.LocalName Example#1"
  syntax:
    content: public override string LocalName { get; }
    content.vb: Public Overrides ReadOnly Property LocalName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the current node with the prefix removed. For example, <strong>LocalName</strong> is book for the element <bk:book>.</p>\n"
  overridden: System.Xml.XmlNode.LocalName
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.Name
  commentId: P:System.Xml.XmlElement.Name
  id: Name
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Xml.XmlElement.Name
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 186
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the qualified name of the node.</p>\n"
  example:
  - "\n<p>The following example displays information on the ISBN element.</p>Classic WebData XmlElement.Name Example#1"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The qualified name of the node. For <strong>XmlElement</strong> nodes, this is the tag name of the element.</p>\n"
  overridden: System.Xml.XmlNode.Name
  seealso:
  - type: System.Xml.XmlElement.LocalName
    commentId: P:System.Xml.XmlElement.LocalName
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.NamespaceURI
  commentId: P:System.Xml.XmlElement.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: NamespaceURI
  fullName: System.Xml.XmlElement.NamespaceURI
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceURI
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 187
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the namespace URI of this node.</p>\n"
  remarks: "\n<p>This is the namespace URI specified at creation time. For example, <strong>NamespaceURI</strong> is urn:samples for the element <bk:book xmlns:bk= \"urn:samples\"> </p>\n"
  example:
  - "\n<p>The following example displays information on the ISBN element.</p>Classic WebData XmlElement.LocalName Example#1"
  syntax:
    content: public override string NamespaceURI { get; }
    content.vb: Public Overrides ReadOnly Property NamespaceURI As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</p>\n"
  overridden: System.Xml.XmlNode.NamespaceURI
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.NextSibling
  commentId: P:System.Xml.XmlElement.NextSibling
  id: NextSibling
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: NextSibling
  fullName: System.Xml.XmlElement.NextSibling
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextSibling
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 188
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> immediately following this element.</p>\n"
  syntax:
    content: public override XmlNode NextSibling { get; }
    content.vb: Public Overrides ReadOnly Property NextSibling As XmlNode
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The <strong>XmlNode</strong> immediately following this element.</p>\n"
  overridden: System.Xml.XmlLinkedNode.NextSibling
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.NodeType
  commentId: P:System.Xml.XmlElement.NodeType
  id: NodeType
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Xml.XmlElement.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 189
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the type of the current node.</p>\n"
  example:
  - 
  syntax:
    content: public override XmlNodeType NodeType { get; }
    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The node type. For <strong>XmlElement</strong> nodes, this value is XmlNodeType.Element.</p>\n"
  overridden: System.Xml.XmlNode.NodeType
  seealso:
  - type: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.OwnerDocument
  commentId: P:System.Xml.XmlElement.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: OwnerDocument
  fullName: System.Xml.XmlElement.OwnerDocument
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OwnerDocument
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 190
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> to which this node belongs.</p>\n"
  remarks: "\n<p>When adding nodes to the current node, use the <strong>XmlDocument</strong> returned by the <strong>OwnerDocument</strong> property to create the node.</p>\n"
  example:
  - "\n<p>The following example inserts a new element into an XML document.</p>Classic WebData XmlElement.OwnerDocument Example#1"
  syntax:
    content: public override XmlDocument OwnerDocument { get; }
    content.vb: Public Overrides ReadOnly Property OwnerDocument As XmlDocument
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: "\n<p>The <strong>XmlDocument</strong> to which this element belongs.</p>\n"
  overridden: System.Xml.XmlNode.OwnerDocument
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.ParentNode
  commentId: P:System.Xml.XmlElement.ParentNode
  id: ParentNode
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: ParentNode
  fullName: System.Xml.XmlElement.ParentNode
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParentNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 191
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the parent of this node (for nodes that can have parents).</p>\n"
  example:
  - 
  syntax:
    content: public override XmlNode ParentNode { get; }
    content.vb: Public Overrides ReadOnly Property ParentNode As XmlNode
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The <strong>XmlNode</strong> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <strong>null</strong>. For all other nodes, the value returned depends on the <xref href=\"System.Xml.XmlNode.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the node. The following table describes the possible return values for the <strong>ParentNode</strong> property.</p>\n"
  overridden: System.Xml.XmlNode.ParentNode
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.XmlElement.Prefix
  commentId: P:System.Xml.XmlElement.Prefix
  id: Prefix
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: Prefix
  fullName: System.Xml.XmlElement.Prefix
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prefix
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 192
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets or sets the namespace prefix of this node.</p>\n"
  remarks: "\n<p>Setting this property changes the <xref href=\"System.Xml.XmlElement.Name\" data-throw-if-not-resolved=\"false\"></xref> property, which holds the qualified name for an <strong>XmlElement</strong>. However, changing the prefix does not change the namespace URI of the element.</p>\n"
  example:
  - "\n<p>The following example displays information on the ISBN element.</p>Classic WebData XmlElement.LocalName Example#1"
  syntax:
    content: public override string Prefix { get; set; }
    content.vb: Public Overrides Property Prefix As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</p>\n"
  overridden: System.Xml.XmlNode.Prefix
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>This node is read-only </p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The specified prefix contains an invalid character.</p>\n<p>The specified prefix is malformed.</p>\n<p>The namespaceURI of this node is <strong>null</strong>.</p>\n<p>The specified prefix is \"xml\" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlElement.CloneNode(System.Boolean)
  commentId: M:System.Xml.XmlElement.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: CloneNode(Boolean)
  fullName: System.Xml.XmlElement.CloneNode(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloneNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 193
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates a duplicate of this node.</p>\n"
  remarks: "\n<p>This method serves as a copy constructor for nodes. The duplicate node has no parent (<xref href=\"System.Xml.XmlNode.ParentNode\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>null</strong>).</p>\n"
  example:
  - "\n<p>The following example creates a new element, clones it, and then adds both elements into an XML document.</p>Classic WebData XmlElement.CloneNode Example#1"
  syntax:
    content: public override XmlNode CloneNode(bool deep)
    content.vb: Public Overrides Function CloneNode(deep As Boolean) As XmlNode
    parameters:
    - id: deep
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself (and its attributes if the node is an <strong>XmlElement</strong>). </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The cloned node.</p>\n"
  overridden: System.Xml.XmlNode.CloneNode(System.Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlElement.GetAttribute(System.String)
  commentId: M:System.Xml.XmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: GetAttribute(String)
  fullName: System.Xml.XmlElement.GetAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 194
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns the value for the attribute with the specified name.</p>\n"
  example:
  - "\n<p>The following example checks to see if the element has the specified attribute.</p>Classic WebData XmlElement.HasAttribute Example#1"
  syntax:
    content: public virtual string GetAttribute(string name)
    content.vb: Public Overridable Function GetAttribute(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the attribute to retrieve. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.GetAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlElement.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: GetAttribute(String, String)
  fullName: System.Xml.XmlElement.GetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 195
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns the value for the attribute with the specified local name and namespace URI.</p>\n"
  syntax:
    content: public virtual string GetAttribute(string localName, string namespaceURI)
    content.vb: Public Overridable Function GetAttribute(localName As String, namespaceURI As String) As String
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute to retrieve. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute to retrieve. </p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.GetAttributeNode(System.String)
  commentId: M:System.Xml.XmlElement.GetAttributeNode(System.String)
  id: GetAttributeNode(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: GetAttributeNode(String)
  fullName: System.Xml.XmlElement.GetAttributeNode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttributeNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 196
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns the <strong>XmlAttribute</strong> with the specified name.</p>\n"
  example:
  - "\n<p>The following example checks to see if the element has the specified attribute.</p>Classic WebData XmlElement.GetAttributeNode Example#1"
  syntax:
    content: public virtual XmlAttribute GetAttributeNode(string name)
    content.vb: Public Overridable Function GetAttributeNode(name As String) As XmlAttribute
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the attribute to retrieve. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The specified <strong>XmlAttribute</strong> or <strong>null</strong> if a matching attribute was not found.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  commentId: M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  id: GetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: GetAttributeNode(String, String)
  fullName: System.Xml.XmlElement.GetAttributeNode(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttributeNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 197
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns the <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the specified local name and namespace URI.</p>\n"
  example:
  - 
  syntax:
    content: public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI)
    content.vb: Public Overridable Function GetAttributeNode(localName As String, namespaceURI As String) As XmlAttribute
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The specified <strong>XmlAttribute</strong> or <strong>null</strong> if a matching attribute was not found.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String)
  commentId: M:System.Xml.XmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: GetElementsByTagName(String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementsByTagName
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 198
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns an <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all descendant elements that match the specified <xref href=\"System.Xml.XmlElement.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The nodes are placed in the order in which they would be encountered in a preorder traversal of the <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> tree.</p>\n<p>It is recommended that you use the <see cref=\"Overload:System.Xml.XmlNode.SelectNodes\"></see> or <see cref=\"Overload:System.Xml.XmlNode.SelectSingleNode\"></see> method instead of the <xref href=\"System.Xml.XmlElement.GetElementsByTagName(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example gets and displays all the book titles.</p>Classic WebData XmlElement.GetElementsByTagName Example#1<p>The example uses the file, <strong>2books.xml</strong>, as input.</p>Classic WebData XmlElement.GetElementsByTagName Example#2"
  syntax:
    content: public virtual XmlNodeList GetElementsByTagName(string name)
    content.vb: Public Overridable Function GetElementsByTagName(name As String) As XmlNodeList
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name tag to match. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. The asterisk (*) is a special value that matches all tags. </p>\n"
    return:
      type: System.Xml.XmlNodeList
      description: "\n<p>An <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all matching nodes. The list is empty if there are no matching nodes.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  commentId: M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: GetElementsByTagName(String, String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementsByTagName
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 199
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns an <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all descendant elements that match the specified <xref href=\"System.Xml.XmlElement.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlElement.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The nodes are placed in the order in which they would be encountered in a preorder traversal of the <strong>XmlElement</strong> tree.</p>\n<p>It is recommended that you use the <see cref=\"Overload:System.Xml.XmlNode.SelectNodes\"></see> or <see cref=\"Overload:System.Xml.XmlNode.SelectSingleNode\"></see> method instead of the <xref href=\"System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI)
    content.vb: Public Overridable Function GetElementsByTagName(localName As String, namespaceURI As String) As XmlNodeList
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name to match. The asterisk (*) is a special value that matches all tags. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI to match. </p>\n"
    return:
      type: System.Xml.XmlNodeList
      description: "\n<p>An <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all matching nodes. The list is empty if there are no matching nodes.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.HasAttribute(System.String)
  commentId: M:System.Xml.XmlElement.HasAttribute(System.String)
  id: HasAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: HasAttribute(String)
  fullName: System.Xml.XmlElement.HasAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 200
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Determines whether the current node has an attribute with the specified name.</p>\n"
  example:
  - "\n<p>The following example checks to see if the element has the specified attribute.</p>Classic WebData XmlElement.HasAttribute Example#1"
  syntax:
    content: public virtual bool HasAttribute(string name)
    content.vb: Public Overridable Function HasAttribute(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the attribute to find. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node has the specified attribute; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.HasAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlElement.HasAttribute(System.String,System.String)
  id: HasAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: HasAttribute(String, String)
  fullName: System.Xml.XmlElement.HasAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 201
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Determines whether the current node has an attribute with the specified local name and namespace URI.</p>\n"
  syntax:
    content: public virtual bool HasAttribute(string localName, string namespaceURI)
    content.vb: Public Overridable Function HasAttribute(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute to find. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute to find. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node has the specified attribute; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.RemoveAll
  commentId: M:System.Xml.XmlElement.RemoveAll
  id: RemoveAll
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAll()
  fullName: System.Xml.XmlElement.RemoveAll()
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAll
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 202
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes all specified attributes and children of the current node. Default attributes are not removed.</p>\n"
  example:
  - "\n<p>The following example removes all attributes and child nodes from the root element.</p>Classic WebData XmlElement.RemoveAll Example#1"
  syntax:
    content: public override void RemoveAll()
    content.vb: Public Overrides Sub RemoveAll
  overridden: System.Xml.XmlNode.RemoveAll
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlElement.RemoveAllAttributes
  commentId: M:System.Xml.XmlElement.RemoveAllAttributes
  id: RemoveAllAttributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAllAttributes()
  fullName: System.Xml.XmlElement.RemoveAllAttributes()
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAllAttributes
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 203
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes all specified attributes from the element. Default attributes are not removed.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example removes all attributes from the root element.</p>Classic WebData XmlElement.RemoveAllAttributes Example#1"
  syntax:
    content: public virtual void RemoveAllAttributes()
    content.vb: Public Overridable Sub RemoveAllAttributes
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.RemoveAttribute(System.String)
  commentId: M:System.Xml.XmlElement.RemoveAttribute(System.String)
  id: RemoveAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAttribute(String)
  fullName: System.Xml.XmlElement.RemoveAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 204
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes an attribute by name.</p>\n"
  remarks: "\n<p>If the removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix.</p>\n"
  example:
  - "\n<p>The following example removes an attribute from an element.</p>Classic WebData XmlElement.RemoveAttribute Example#1"
  syntax:
    content: public virtual void RemoveAttribute(string name)
    content.vb: Public Overridable Sub RemoveAttribute(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the attribute to remove.This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The node is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  id: RemoveAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAttribute(String, String)
  fullName: System.Xml.XmlElement.RemoveAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 205
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\n"
  remarks: "\n<p>If the removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix.</p>\n"
  example:
  - "\n<p>The following example removes an attribute from an element.</p>Classic WebData XmlElement.RemoveAttribute1 Example#1"
  syntax:
    content: public virtual void RemoveAttribute(string localName, string namespaceURI)
    content.vb: Public Overridable Sub RemoveAttribute(localName As String, namespaceURI As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute to remove. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute to remove. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The node is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  commentId: M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  id: RemoveAttributeAt(System.Int32)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAttributeAt(Int32)
  fullName: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAttributeAt
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 206
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example removes an attribute from an element.</p>Classic WebData XmlElement.RemoveAttributeAt Example#1"
  syntax:
    content: public virtual XmlNode RemoveAttributeAt(int i)
    content.vb: Public Overridable Function RemoveAttributeAt(i As Integer) As XmlNode
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the node to remove. The first node has index 0. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The attribute node removed or <strong>null</strong> if there is no node at the given index.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  commentId: M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  id: RemoveAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAttributeNode(String, String)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAttributeNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 207
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes the <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\n"
  example:
  - "\n<p>The following example removes an attribute from an element.</p>Classic WebData XmlElement.RemoveAttributeNode1 Example#1"
  syntax:
    content: public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI)
    content.vb: Public Overridable Function RemoveAttributeNode(localName As String, namespaceURI As String) As XmlAttribute
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The removed <strong>XmlAttribute</strong> or <strong>null</strong> if the <strong>XmlElement</strong> does not have a matching attribute node.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>This node is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  id: RemoveAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: RemoveAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAttributeNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 208
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes the specified <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr)
    content.vb: Public Overridable Function RemoveAttributeNode(oldAttr As XmlAttribute) As XmlAttribute
    parameters:
    - id: oldAttr
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> node to remove. If the removed attribute has a default value, it is immediately replaced. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The removed <strong>XmlAttribute</strong> or <strong>null</strong> if <em>oldAttr</em> is not an attribute node of the <strong>XmlElement</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>This node is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: SetAttribute(String, String)
  fullName: System.Xml.XmlElement.SetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 209
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Sets the value of the attribute with the specified name.</p>\n"
  remarks: "\n<p>If an attribute with the same name is already present in the element, its value is changed to that of <em>value</em>. <em>value</em> is a simple string. It is not parsed as it is being set. Any markup, such as syntax to be recognized as an entity reference, is treated as literal text and needs to be properly escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> node plus any <xref href=\"System.Xml.XmlText\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlEntityReference\" data-throw-if-not-resolved=\"false\"></xref> nodes, build the appropriate subtree and use <xref href=\"System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)\" data-throw-if-not-resolved=\"false\"></xref> to assign it as the value of an attribute.</p>\n"
  syntax:
    content: public virtual void SetAttribute(string name, string value)
    content.vb: Public Overridable Sub SetAttribute(name As String, value As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value to set for the attribute. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The specified name contains an invalid character. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The node is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  id: SetAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: SetAttribute(String, String, String)
  fullName: System.Xml.XmlElement.SetAttribute(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 210
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Sets the value of the attribute with the specified local name and namespace URI.</p>\n"
  syntax:
    content: public virtual string SetAttribute(string localName, string namespaceURI, string value)
    content.vb: Public Overridable Function SetAttribute(localName As String, namespaceURI As String, value As String) As String
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value to set for the attribute. </p>\n"
    return:
      type: System.String
      description: "\n<p>The attribute value.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  commentId: M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  id: SetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: SetAttributeNode(String, String)
  fullName: System.Xml.XmlElement.SetAttributeNode(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAttributeNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 211
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Adds the specified <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>XmlAttribute</strong> does not have any children. Use <xref href=\"System.Xml.XmlAttribute.Value\" data-throw-if-not-resolved=\"false\"></xref> to assign a text value to the attribute or use <xref href=\"System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\" data-throw-if-not-resolved=\"false\"></xref> (or a similar method) to add children to the attribute.</p>\n"
  example:
  - "\n<p>The following example adds an attribute to an element.</p>Classic WebData XmlElement.SetAttributeNode1 Example#1"
  syntax:
    content: public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI)
    content.vb: Public Overridable Function SetAttributeNode(localName As String, namespaceURI As String) As XmlAttribute
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> to add.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  id: SetAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: SetAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAttributeNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 212
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Adds the specified <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If an attribute with that name is already present in the element, it is replaced by the new one.</p>\n"
  syntax:
    content: public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr)
    content.vb: Public Overridable Function SetAttributeNode(newAttr As XmlAttribute) As XmlAttribute
    parameters:
    - id: newAttr
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> node to add to the attribute collection for this element. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>If the attribute replaces an existing attribute with the same name, the old <strong>XmlAttribute</strong> is returned; otherwise, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>newAttr</em> was created from a different document than the one that created this node. Or this node is read-only. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>newAttr</em> is already an attribute of another <strong>XmlElement</strong> object. You must explicitly clone <strong>XmlAttribute</strong> nodes to re-use them in other <strong>XmlElement</strong> objects. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  commentId: M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteContentTo
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 213
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves all the children of the node to the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example displays the contents of the element to the console.</p>Classic WebData XmlElement.WriteContentTo Example#1"
  syntax:
    content: public override void WriteContentTo(XmlWriter w)
    content.vb: Public Overrides Sub WriteContentTo(w As XmlWriter)
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\n"
  overridden: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  seealso:
  - type: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  commentId: M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  - vb
  name: WriteTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 214
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves the current node to the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example adds an attribute to an element and then displays the modified element.</p>Classic WebData XmlElement.WriteTo Example#1"
  syntax:
    content: public override void WriteTo(XmlWriter w)
    content.vb: Public Overrides Sub WriteTo(w As XmlWriter)
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\n"
  overridden: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml.XmlLinkedNode
  parent: System.Xml
  isExternal: false
  name: XmlLinkedNode
  fullName: System.Xml.XmlLinkedNode
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Xml.XmlLinkedNode.PreviousSibling
  parent: System.Xml.XmlLinkedNode
  isExternal: false
  name: PreviousSibling
  fullName: System.Xml.XmlLinkedNode.PreviousSibling
- uid: System.Xml.XmlNode.BaseURI
  parent: System.Xml.XmlNode
  isExternal: false
  name: BaseURI
  fullName: System.Xml.XmlNode.BaseURI
- uid: System.Xml.XmlNode.ChildNodes
  parent: System.Xml.XmlNode
  isExternal: false
  name: ChildNodes
  fullName: System.Xml.XmlNode.ChildNodes
- uid: System.Xml.XmlNode.FirstChild
  parent: System.Xml.XmlNode
  isExternal: false
  name: FirstChild
  fullName: System.Xml.XmlNode.FirstChild
- uid: System.Xml.XmlNode.HasChildNodes
  parent: System.Xml.XmlNode
  isExternal: false
  name: HasChildNodes
  fullName: System.Xml.XmlNode.HasChildNodes
- uid: System.Xml.XmlNode.IsReadOnly
  parent: System.Xml.XmlNode
  isExternal: false
  name: IsReadOnly
  fullName: System.Xml.XmlNode.IsReadOnly
- uid: System.Xml.XmlNode.Item(System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: Item[String]
  fullName: System.Xml.XmlNode.Item[System.String]
  fullname.vb: System.Xml.XmlNode.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Xml.XmlNode.Item(System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: '['
    fullName: '['
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Xml.XmlNode.Item(System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.Item(System.String,System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: Item[String, String]
  fullName: System.Xml.XmlNode.Item[System.String, System.String]
  fullname.vb: System.Xml.XmlNode.Item(System.String, System.String)
  name.vb: Item(String, String)
  spec.csharp:
  - uid: System.Xml.XmlNode.Item(System.String,System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: '['
    fullName: '['
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Xml.XmlNode.Item(System.String,System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.LastChild
  parent: System.Xml.XmlNode
  isExternal: false
  name: LastChild
  fullName: System.Xml.XmlNode.LastChild
- uid: System.Xml.XmlNode.OuterXml
  parent: System.Xml.XmlNode
  isExternal: false
  name: OuterXml
  fullName: System.Xml.XmlNode.OuterXml
- uid: System.Xml.XmlNode.PreviousText
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousText
  fullName: System.Xml.XmlNode.PreviousText
- uid: System.Xml.XmlNode.Value
  parent: System.Xml.XmlNode
  isExternal: false
  name: Value
  fullName: System.Xml.XmlNode.Value
- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: AppendChild(XmlNode)
  fullName: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
    name: AppendChild
    fullName: System.Xml.XmlNode.AppendChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
    name: AppendChild
    fullName: System.Xml.XmlNode.AppendChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.GetEnumerator
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetEnumerator()
  fullName: System.Xml.XmlNode.GetEnumerator()
  spec.csharp:
  - uid: System.Xml.XmlNode.GetEnumerator
    name: GetEnumerator
    fullName: System.Xml.XmlNode.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.GetEnumerator
    name: GetEnumerator
    fullName: System.Xml.XmlNode.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: GetNamespaceOfPrefix(String)
  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
    name: GetNamespaceOfPrefix
    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
    name: GetNamespaceOfPrefix
    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: GetPrefixOfNamespace(String)
  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
    name: GetPrefixOfNamespace
    fullName: System.Xml.XmlNode.GetPrefixOfNamespace
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
    name: GetPrefixOfNamespace
    fullName: System.Xml.XmlNode.GetPrefixOfNamespace
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertAfter(XmlNode, XmlNode)
  fullName: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertAfter
    fullName: System.Xml.XmlNode.InsertAfter
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertAfter
    fullName: System.Xml.XmlNode.InsertAfter
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertBefore(XmlNode, XmlNode)
  fullName: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertBefore
    fullName: System.Xml.XmlNode.InsertBefore
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertBefore
    fullName: System.Xml.XmlNode.InsertBefore
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.Normalize
  parent: System.Xml.XmlNode
  isExternal: false
  name: Normalize()
  fullName: System.Xml.XmlNode.Normalize()
  spec.csharp:
  - uid: System.Xml.XmlNode.Normalize
    name: Normalize
    fullName: System.Xml.XmlNode.Normalize
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.Normalize
    name: Normalize
    fullName: System.Xml.XmlNode.Normalize
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: PrependChild(XmlNode)
  fullName: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
    name: PrependChild
    fullName: System.Xml.XmlNode.PrependChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
    name: PrependChild
    fullName: System.Xml.XmlNode.PrependChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveChild(XmlNode)
  fullName: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
    name: RemoveChild
    fullName: System.Xml.XmlNode.RemoveChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
    name: RemoveChild
    fullName: System.Xml.XmlNode.RemoveChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: ReplaceChild(XmlNode, XmlNode)
  fullName: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
    name: ReplaceChild
    fullName: System.Xml.XmlNode.ReplaceChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
    name: ReplaceChild
    fullName: System.Xml.XmlNode.ReplaceChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.Supports(System.String,System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: Supports(String, String)
  fullName: System.Xml.XmlNode.Supports(System.String, System.String)
  spec.csharp:
  - uid: System.Xml.XmlNode.Supports(System.String,System.String)
    name: Supports
    fullName: System.Xml.XmlNode.Supports
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.Supports(System.String,System.String)
    name: Supports
    fullName: System.Xml.XmlNode.Supports
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  parent: System.Xml.XmlNode
  isExternal: false
  name: IEnumerable.GetEnumerator()
  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlNode.Attributes
  parent: System.Xml.XmlNode
  isExternal: false
  name: Attributes
  fullName: System.Xml.XmlNode.Attributes
- uid: System.Xml.XmlAttributeCollection
  parent: System.Xml
  isExternal: false
  name: XmlAttributeCollection
  fullName: System.Xml.XmlAttributeCollection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlNode.InnerText
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerText
  fullName: System.Xml.XmlNode.InnerText
- uid: System.Xml.XmlNode.InnerXml
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerXml
  fullName: System.Xml.XmlNode.InnerXml
- uid: System.Xml.XmlNode.LocalName
  parent: System.Xml.XmlNode
  isExternal: false
  name: LocalName
  fullName: System.Xml.XmlNode.LocalName
- uid: System.Xml.XmlNode.Name
  parent: System.Xml.XmlNode
  isExternal: false
  name: Name
  fullName: System.Xml.XmlNode.Name
- uid: System.Xml.XmlNode.NamespaceURI
  parent: System.Xml.XmlNode
  isExternal: false
  name: NamespaceURI
  fullName: System.Xml.XmlNode.NamespaceURI
- uid: System.Xml.XmlLinkedNode.NextSibling
  parent: System.Xml.XmlLinkedNode
  isExternal: false
  name: NextSibling
  fullName: System.Xml.XmlLinkedNode.NextSibling
- uid: System.Xml.XmlNode.NodeType
  parent: System.Xml.XmlNode
  isExternal: false
  name: NodeType
  fullName: System.Xml.XmlNode.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlNode.OwnerDocument
  parent: System.Xml.XmlNode
  isExternal: false
  name: OwnerDocument
  fullName: System.Xml.XmlNode.OwnerDocument
- uid: System.Xml.XmlNode.ParentNode
  parent: System.Xml.XmlNode
  isExternal: false
  name: ParentNode
  fullName: System.Xml.XmlNode.ParentNode
- uid: System.Xml.XmlNode.Prefix
  parent: System.Xml.XmlNode
  isExternal: false
  name: Prefix
  fullName: System.Xml.XmlNode.Prefix
- uid: System.Xml.XmlNode.CloneNode(System.Boolean)
  parent: System.Xml.XmlNode
  isExternal: true
  name: CloneNode(Boolean)
  fullName: System.Xml.XmlNode.CloneNode(System.Boolean)
  spec.csharp:
  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)
    name: CloneNode
    fullName: System.Xml.XmlNode.CloneNode
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)
    name: CloneNode
    fullName: System.Xml.XmlNode.CloneNode
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlNode.RemoveAll
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveAll()
  fullName: System.Xml.XmlNode.RemoveAll()
  spec.csharp:
  - uid: System.Xml.XmlNode.RemoveAll
    name: RemoveAll
    fullName: System.Xml.XmlNode.RemoveAll
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.RemoveAll
    name: RemoveAll
    fullName: System.Xml.XmlNode.RemoveAll
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  isExternal: true
  name: WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
    name: WriteContentTo
    fullName: System.Xml.XmlNode.WriteContentTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
    name: WriteContentTo
    fullName: System.Xml.XmlNode.WriteContentTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  isExternal: true
  name: WriteTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.XmlNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.XmlNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlException
  isExternal: false
  name: XmlException
  fullName: System.Xml.XmlException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
