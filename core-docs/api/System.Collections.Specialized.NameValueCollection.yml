items:
- uid: System.Collections.Specialized.NameValueCollection
  commentId: T:System.Collections.Specialized.NameValueCollection
  id: NameValueCollection
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.NameValueCollection.#ctor
  - System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)
  - System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)
  - System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)
  - System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
  - System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)
  - System.Collections.Specialized.NameValueCollection.AllKeys
  - System.Collections.Specialized.NameValueCollection.Clear
  - System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.NameValueCollection.Get(System.Int32)
  - System.Collections.Specialized.NameValueCollection.Get(System.String)
  - System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
  - System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)
  - System.Collections.Specialized.NameValueCollection.GetValues(System.String)
  - System.Collections.Specialized.NameValueCollection.HasKeys
  - System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
  - System.Collections.Specialized.NameValueCollection.Item(System.Int32)
  - System.Collections.Specialized.NameValueCollection.Item(System.String)
  - System.Collections.Specialized.NameValueCollection.Remove(System.String)
  - System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)
  langs:
  - csharp
  - vb
  name: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameValueCollection
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 18
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Represents a collection of associated <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> values that can be accessed either with the key or with the index.</p>\n"
  remarks: "\n<p>This collection is based on the <xref href=\"System.Collections.Specialized.NameObjectCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class. However, unlike the <xref href=\"System.Collections.Specialized.NameObjectCollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, this class stores multiple string values under a single key.</p>\n<p>This class can be used for headers, query strings and form data.</p>\n<p>Each element is a key/value pair.</p>\n<p>Collections of this type do not preserve the ordering of element, and no particular ordering is guaranteed when enumerating the collection.</p>\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. The default comparer is the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In .NET Framework version 1.0, this class uses culture-sensitive string comparisons. However, in .NET Framework version 1.1 and later, this class uses <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> when comparing strings. For more information about how culture affects comparisons and sorting, see Performing Culture-Insensitive String Operations.</p>\n<p>\n<strong>null</strong> is allowed as a key or as a value.</p>\n<p>The <xref href=\"System.Collections.Specialized.NameValueCollection.Get(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method does not distinguish between <strong>null</strong> which is returned because the specified key is not found and <strong>null</strong> which is returned because the value associated with the key is <strong>null</strong>.</p>\n"
  example:
  - System.Collections.Specialized.NameValueCollection2#1
  syntax:
    content: 'public class NameValueCollection : NameObjectCollectionBase, ICollection, IEnumerable'
    content.vb: >-
      Public Class NameValueCollection
          Inherits NameObjectCollectionBase
          Implements ICollection, IEnumerable
  seealso:
  - type: System.Collections.Specialized.NameObjectCollectionBase
    commentId: T:System.Collections.Specialized.NameObjectCollectionBase
  inheritance:
  - System.Object
  - System.Collections.Specialized.NameObjectCollectionBase
  implements:
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Specialized.NameObjectCollectionBase.Count
  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  - System.Collections.Specialized.NameObjectCollectionBase.Keys
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.NameValueCollection.#ctor
  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: NameValueCollection()
  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 32
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. The default comparer is the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public NameValueCollection()
    content.vb: Public Sub New
  seealso:
  - type: System.Collections.CaseInsensitiveHashCodeProvider
    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider
  - type: System.Collections.CaseInsensitiveComparer
    commentId: T:System.Collections.CaseInsensitiveComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: NameValueCollection(IEqualityComparer)
  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 56
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object combines the comparer and the hash code provider.  The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.  The comparer determines whether two keys are equal.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public NameValueCollection(IEqualityComparer equalityComparer)
    content.vb: Public Sub New(equalityComparer As IEqualityComparer)
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)
  id: '#ctor(System.Collections.Specialized.NameValueCollection)'
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: NameValueCollection(NameValueCollection)
  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.Specialized.NameValueCollection)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 41
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the entries from the specified <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> to a new <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> with the same initial capacity as the number of entries copied and using the same hash code provider and the same comparer as the source collection.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. The default comparer is the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the new <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order as the source <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>col</em>.</p>\n"
  syntax:
    content: public NameValueCollection(NameValueCollection col)
    content.vb: Public Sub New(col As NameValueCollection)
    parameters:
    - id: col
      type: System.Collections.Specialized.NameValueCollection
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>col</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.CaseInsensitiveHashCodeProvider
    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider
  - type: System.Collections.CaseInsensitiveComparer
    commentId: T:System.Collections.CaseInsensitiveComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)
  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: NameValueCollection(Int32)
  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 52
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. The default comparer is the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: public NameValueCollection(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  seealso:
  - type: System.Collections.CaseInsensitiveHashCodeProvider
    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider
  - type: System.Collections.CaseInsensitiveComparer
    commentId: T:System.Collections.CaseInsensitiveComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: NameValueCollection(Int32, IEqualityComparer)
  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Int32, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 60
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object combines the comparer and the hash code provider.  The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.  The comparer determines whether two keys are equal.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the <em>capacity</em> parameter.</p>\n"
  syntax:
    content: public NameValueCollection(int capacity, IEqualityComparer equalityComparer)
    content.vb: Public Sub New(capacity As Integer, equalityComparer As IEqualityComparer)
    parameters:
    - id: capacity
      type: System.Int32
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)
  id: '#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)'
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: NameValueCollection(Int32, NameValueCollection)
  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Int32, System.Collections.Specialized.NameValueCollection)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 71
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the entries from the specified <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> to a new <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> with the specified initial capacity or the same initial capacity as the number of entries copied, whichever is greater, and using the default case-insensitive hash code provider and the default case-insensitive comparer.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. The default comparer is the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.  If the number of elements in <em>col</em> is greater than <em>capacity</em>, this constructor becomes an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is <em>capacity</em> and <em>m</em> is the number of elements in <em>col</em>.</p>\n"
  syntax:
    content: public NameValueCollection(int capacity, NameValueCollection col)
    content.vb: Public Sub New(capacity As Integer, col As NameValueCollection)
    parameters:
    - id: capacity
      type: System.Int32
    - id: col
      type: System.Collections.Specialized.NameValueCollection
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>col</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.CaseInsensitiveHashCodeProvider
    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider
  - type: System.Collections.CaseInsensitiveComparer
    commentId: T:System.Collections.CaseInsensitiveComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.AllKeys
  commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  id: AllKeys
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: AllKeys
  fullName: System.Collections.Specialized.NameValueCollection.AllKeys
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AllKeys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 381
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets all the keys in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the collection is empty, this method returns an empty <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> array, not <strong>null</strong>.</p>\n<p>The arrays returned by <xref href=\"System.Collections.Specialized.NameValueCollection.AllKeys\" data-throw-if-not-resolved=\"false\"></xref> are cached for better performance and are automatically refreshed when the collection changes. A derived class can invalidate the cached version by calling <xref href=\"System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\" data-throw-if-not-resolved=\"false\"></xref>, thereby forcing the arrays to be recreated.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual string[] AllKeys { get; }
    content.vb: Public Overridable ReadOnly Property AllKeys As String()
    parameters: []
    return:
      type: System.String[]
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
    commentId: M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
  - type: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
    commentId: M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Specialized.NameValueCollection.Item(System.Int32)
  commentId: P:System.Collections.Specialized.NameValueCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Specialized.NameValueCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 366
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the entry at the specified index of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>This property cannot be set. To set the value at a specified index, use <code>Item[GetKey(index)]</code>.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.NameValueCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.NameValueCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the values at the specified index is an O(<em>n</em>) operation, where <em>n</em> is the number of values.</p>\n"
  syntax:
    content: public string this[int index] { get; }
    content.vb: Public ReadOnly Property Item(index As Integer) As String
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the valid range of indexes for the collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Specialized.NameValueCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Specialized.NameValueCollection.Item(System.String)
  commentId: P:System.Collections.Specialized.NameValueCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: System.Collections.Specialized.NameValueCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 318
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the entry with the specified key in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[name]</code>.</p>\n<p>If the specified key already exists in the collection, setting this property overwrites the existing list of values with the specified value. To append the new value to the existing list of values, use the <xref href=\"System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the specified key does not exist in the collection, setting this property creates a new entry using the specified key and the specified value.</p>\n<p>This property returns <strong>null</strong> in the following cases: 1) if the specified key is not found; and 2) if the specified key is found and its associated value is <strong>null</strong>. This property does not distinguish between the two cases.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.NameValueCollection.Item(System.String)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.NameValueCollection.Item(System.String)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving or setting the values associated with the specified key is an O(<em>n</em>) operation, where <em>n</em> is the number of values.</p>\n"
  syntax:
    content: public string this[string name] { get; set; }
    content.vb: Public Property Item(name As String) As String
    parameters:
    - id: name
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only and the operation attempts to modify the collection. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.NameValueCollection.Item(System.String)
  name.vb: Item(String)
- uid: System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
  id: Add(System.Collections.Specialized.NameValueCollection)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Add(NameValueCollection)
  fullName: System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 140
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the entries in the specified <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> to the current <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If a key in <em>c</em> already exists in the target <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> instance, the associated value in <em>c</em> is added to the existing comma-separated list of values associated with the same key in the target <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>If <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Add(NameValueCollection c)
    content.vb: Public Sub Add(c As NameValueCollection)
    parameters:
    - id: c
      type: System.Collections.Specialized.NameValueCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)
    commentId: M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)
  commentId: M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Add(String, String)
  fullName: System.Collections.Specialized.NameValueCollection.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 247
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Adds an entry with the specified name and value to the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the specified key already exists in the target <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> instance, the specified value is added to the existing comma-separated list of values in the form <code>\"value1,value2,value3\"</code>. The values are associated with the same key in the target <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>If <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Add(string name, string value)
    content.vb: Public Overridable Sub Add(name As String, value As String)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.Clear
  commentId: M:System.Collections.Specialized.NameValueCollection.Clear
  id: Clear
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Specialized.NameValueCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 172
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Invalidates the cached arrays and removes all entries from the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
    commentId: M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Specialized.NameValueCollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 181
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>The specified array must be of a compatible type.</p>\n<p>This method uses <xref href=\"System.Array.Copy(System.Array,System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to copy the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void CopyTo(Array dest, int index)
    content.vb: Public Sub CopyTo(dest As Array, index As Integer)
    parameters:
    - id: dest
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dest</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dest</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>dest</em>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>dest</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.Get(System.Int32)
  commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Get(Int32)
  fullName: System.Collections.Specialized.NameValueCollection.Get(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 340
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the values at the specified index of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> combined into one comma-separated list.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of values at the specified index.</p>\n"
  syntax:
    content: public virtual string Get(int index)
    content.vb: Public Overridable Function Get(index As Integer) As String
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the valid range of indexes for the collection.</p>\n"
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.GetValues(System.String)
    commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)
  - type: System.Collections.Specialized.NameValueCollection.AllKeys
    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.Get(System.String)
  commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.String)
  id: Get(System.String)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Get(String)
  fullName: System.Collections.Specialized.NameValueCollection.Get(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 275
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the values associated with the specified key from the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> combined into one comma-separated list.</p>\n"
  remarks: "\n<p>This method returns <strong>null</strong> in the following cases: 1) if the specified key is not found; and 2) if the specified key is found and its associated value is <strong>null</strong>. This method does not distinguish between the two cases.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of values associated with the specified key.</p>\n"
  syntax:
    content: public virtual string Get(string name)
    content.vb: Public Overridable Function Get(name As String) As String
    parameters:
    - id: name
      type: System.String
    return:
      type: System.String
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.GetValues(System.String)
    commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)
  - type: System.Collections.Specialized.NameValueCollection.AllKeys
    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
  commentId: M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: GetKey(Int32)
  fullName: System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetKey
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 358
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the key at the specified index of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual string GetKey(int index)
    content.vb: Public Overridable Function GetKey(index As Integer) As String
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the valid range of indexes for the collection. </p>\n"
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.AllKeys
    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)
  commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)
  id: GetValues(System.Int32)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: GetValues(Int32)
  fullName: System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValues
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 349
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the values at the specified index of the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of values at the specified index.</p>\n"
  syntax:
    content: public virtual string[] GetValues(int index)
    content.vb: Public Overridable Function GetValues(index As Integer) As String()
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String[]
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the valid range of indexes for the collection. </p>\n"
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.Get(System.String)
    commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.String)
  - type: System.Collections.Specialized.NameValueCollection.AllKeys
    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.GetValues(System.String)
  commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)
  id: GetValues(System.String)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: GetValues(String)
  fullName: System.Collections.Specialized.NameValueCollection.GetValues(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValues
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 284
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the values associated with the specified key from the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method returns <strong>null</strong> in the following cases: 1) if the specified key is not found; and 2) if the specified key is found and its associated value is <strong>null</strong>. This method does not distinguish between the two cases.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of values associated with the specified key.</p>\n"
  syntax:
    content: public virtual string[] GetValues(string name)
    content.vb: Public Overridable Function GetValues(name As String) As String()
    parameters:
    - id: name
      type: System.String
    return:
      type: System.String[]
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.Get(System.String)
    commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.String)
  - type: System.Collections.Specialized.NameValueCollection.AllKeys
    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.HasKeys
  commentId: M:System.Collections.Specialized.NameValueCollection.HasKeys
  id: HasKeys
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: HasKeys()
  fullName: System.Collections.Specialized.NameValueCollection.HasKeys()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasKeys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 226
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> contains keys that are not <strong>null</strong>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public bool HasKeys()
    content.vb: Public Function HasKeys As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
  commentId: M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays
  id: InvalidateCachedArrays
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: InvalidateCachedArrays()
  fullName: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InvalidateCachedArrays
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 90
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Resets the cached arrays of the collection to <strong>null</strong>.</p>\n"
  remarks: "\n<p>The arrays returned by <xref href=\"System.Collections.Specialized.NameValueCollection.AllKeys\" data-throw-if-not-resolved=\"false\"></xref> are cached for better performance and are automatically refreshed when the collection changes. A derived class can invalidate the cached version by calling <xref href=\"System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\" data-throw-if-not-resolved=\"false\"></xref>, thereby forcing the arrays to be recreated.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: protected void InvalidateCachedArrays()
    content.vb: Protected Sub InvalidateCachedArrays
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.AllKeys
    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.Specialized.NameValueCollection.Remove(System.String)
  commentId: M:System.Collections.Specialized.NameValueCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Remove(String)
  fullName: System.Collections.Specialized.NameValueCollection.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 308
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entries with the specified key from the <xref href=\"System.Collections.Specialized.NameObjectCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> does not contain an element with the specified key, the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Remove(string name)
    content.vb: Public Overridable Sub Remove(name As String)
    parameters:
    - id: name
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)
  commentId: M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)
  id: Set(System.String,System.String)
  parent: System.Collections.Specialized.NameValueCollection
  langs:
  - csharp
  - vb
  name: Set(String, String)
  fullName: System.Collections.Specialized.NameValueCollection.Set(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Set
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs
    startLine: 293
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Sets the value of an entry in the <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the specified key already exists in the collection, this method overwrites the existing list of values with the specified value. To append the new value to the existing list of values, use the <xref href=\"System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the specified key does not exist in the collection, this method creates a new entry using the specified key and the specified value.</p>\n<p>This method is an O(1) operation. </p>\n"
  syntax:
    content: public virtual void Set(string name, string value)
    content.vb: Public Overridable Sub Set(name As String, value As String)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  seealso:
  - type: System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
    commentId: M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Specialized.NameObjectCollectionBase
  parent: System.Collections.Specialized
  isExternal: false
  name: NameObjectCollectionBase
  fullName: System.Collections.Specialized.NameObjectCollectionBase
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Count
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Keys
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: ICollection.IsSynchronized
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: ICollection.SyncRoot
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseAdd(String, Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
    name: BaseAdd
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
    name: BaseAdd
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseClear()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
    name: BaseClear
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
    name: BaseClear
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseGet(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
    name: BaseGet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
    name: BaseGet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseGet(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
    name: BaseGet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
    name: BaseGet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
    name: BaseGetAllKeys
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
    name: BaseGetAllKeys
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
    name: BaseGetAllValues
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
    name: BaseGetAllValues
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseGetAllValues(Type)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
    name: BaseGetAllValues
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
    name: BaseGetAllValues
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseGetKey(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
    name: BaseGetKey
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
    name: BaseGetKey
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseHasKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
    name: BaseHasKeys
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
    name: BaseHasKeys
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseRemove(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
    name: BaseRemove
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
    name: BaseRemove
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseRemoveAt(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
    name: BaseRemoveAt
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
    name: BaseRemoveAt
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseSet(Int32, Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
    name: BaseSet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
    name: BaseSet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: BaseSet(String, Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
    name: BaseSet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
    name: BaseSet
    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
