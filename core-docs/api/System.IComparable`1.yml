items:
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  id: IComparable`1
  parent: System
  children:
  - System.IComparable`1.CompareTo(`0)
  langs:
  - csharp
  - vb
  name: IComparable<T>
  fullName: System.IComparable<T>
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IComparable
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 960
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</p>\n"
  remarks: "\n<p>This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>Typically, types that provide an <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation also implement the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface. The <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface defines the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method, which determines the equality of instances of the implementing type. </p>\n<p>The implementation of the <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> method must return an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that has one of three values, as shown in the following table.</p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This object precedes the object specified by the <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> method in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This current instance occurs in the same position in the sort order as the object specified by the <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> method argument.  </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This current instance follows the object specified by the <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> method argument in the sort order. </p>\n</td></tr></tbody></table>\n<p>All numeric types (such as <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>) implement <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref>, as do <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. Custom types should also provide their own implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to enable object instances to be ordered or sorted. </p>\n"
  example:
  - "\n<p>The following code example illustrates the implementation of  <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> for a simple <code>Temperature</code> object. The example creates a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection of strings with <code>Temperature</code> object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection uses the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to sort the list entries, which are then displayed in order of increasing temperature. </p>IComparable`1 Example#1"
  syntax:
    content: public interface IComparable<in T>
    content.vb: Public Interface IComparable(Of In T)
    typeParameters:
    - id: T
      description: "\n<p>The type of object to compare. </p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  id: CompareTo(`0)
  parent: System.IComparable`1
  langs:
  - csharp
  - vb
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 962
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> provides a strongly typed comparison method for ordering members of a generic collection object. Because of this, it is usually not called directly from developer code. Instead, it is called automatically by methods such as <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Values section (\"precedes\", \"occurs in the same position as\", and \"follows) depends on the particular implementation. </p>\n<p>By definition, any object compares greater than <strong>null</strong>, and two null references compare equal to each other.</p>\n"
  example:
  - "\n<p>The following code example illustrates the implementation of <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> for a simple <code>Temperature</code> object. The example creates a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection of strings with <code>Temperature</code> object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection uses the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to sort the list entries, which are then displayed in order of increasing temperature. </p>IComparable`1 Example#1"
  syntax:
    content: int CompareTo(T other)
    content.vb: Function CompareTo(other As T) As Integer
    parameters:
    - id: other
      type: '{T}'
      description: "\n<p>An object to compare with this instance. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A value that indicates the relative order of the objects being compared. The return value has these meanings: </p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance precedes <em>other</em> in the sort order.  </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance occurs in the same position in the sort order as <em>other</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance follows <em>other</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.IComparable
    commentId: T:System.IComparable
  fullName.vb: System.IComparable(Of T).CompareTo(T)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
