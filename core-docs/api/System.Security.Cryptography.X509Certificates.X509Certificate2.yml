items:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  id: X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  children:
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  langs:
  - csharp
  - vb
  name: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: X509Certificate2
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 126
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Represents an X.509 certificate.  </p>\n"
  remarks: "\n<p>The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, \"<see href=\"http://go.microsoft.com/fwlink/?LinkId=45286\">Certificate and Certificate Revocation List (CRL) Profile</see>.\"</p>\n<p>Starting with the .NET Framework 4.6, this type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>For apps that target the .NET Framework 4.5.2 and earlier versions, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class does not implement the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface and therefore does not have a <strong>Dispose</strong> method. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to use an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object to encrypt and decrypt a file.</p>X509Certificate2#1"
  - "\n<p>The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: 'public class X509Certificate2 : X509Certificate, IDisposable'
    content.vb: >-
      Public Class X509Certificate2
          Inherits X509Certificate
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Security.Cryptography.X509Certificates.X509Certificate
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 128
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor creates an empty <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.</p>\n"
  example:
  - "\n<p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.</p>CertSelect#1"
  syntax:
    content: public X509Certificate2()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 129
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using information from a byte array.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>rawData</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate2(byte[] rawData)
    content.vb: Public Sub New(rawData As Byte())
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "\n<p>A byte array containing data from an X.509 certificate. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte())
  name.vb: X509Certificate2(Byte())
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(Byte[], String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte[], System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 130
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using a byte array and a password.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.</p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe. </p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>rawData</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate2(byte[] rawData, string password)
    content.vb: Public Sub New(rawData As Byte(), password As String)
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "\n<p>A byte array containing data from an X.509 certificate. </p>\n"
    - id: password
      type: System.String
      description: "\n<p>The password required to access the X.509 certificate data. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte(), System.String)
  name.vb: X509Certificate2(Byte(), String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(Byte[], String, X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 131
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using a byte array, a password, and a key storage flag.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).</p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe. </p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>rawData</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate2(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags)
    content.vb: Public Sub New(rawData As Byte(), password As String, keyStorageFlags As X509KeyStorageFlags)
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "\n<p>A byte array containing data from an X.509 certificate. </p>\n"
    - id: password
      type: System.String
      description: "\n<p>The password required to access the X.509 certificate data. </p>\n"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte(), System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  name.vb: X509Certificate2(Byte(), String, X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.IntPtr)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 132
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using an unmanaged handle.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using a handle for the Microsoft Cryptographic API certificate context, <strong>PCCERT_CONTEXT</strong>. Note that the immediate caller of this constructor requires unmanaged code permission.</p>\n<p>The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current <strong>PCCERT_CONTEXT</strong> structure from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.Handle\" data-throw-if-not-resolved=\"false\"></xref> property, but it is valid only during the lifetime of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p></p>\n"
  syntax:
    content: public X509Certificate2(IntPtr handle)
    content.vb: Public Sub New(handle As IntPtr)
    parameters:
    - id: handle
      type: System.IntPtr
      description: "\n<p>A pointer to a certificate context in unmanaged code. The C structure is called <strong>PCCERT_CONTEXT</strong>.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 133
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using a certificate file name.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>fileName</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate2(string fileName)
    content.vb: Public Sub New(fileName As String)
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The name of a certificate file. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(String, String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 134
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using a certificate file name and a password used to access the certificate.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.</p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe. </p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>fileName</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate2(string fileName, string password)
    content.vb: Public Sub New(fileName As String, password As String)
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The name of a certificate file. </p>\n"
    - id: password
      type: System.String
      description: "\n<p>The password required to access the X.509 certificate data. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: X509Certificate2(String, String, X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 135
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class using a certificate file name, a password used to access the certificate, and a key storage flag.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object using a certificate file name, a password needed to access the certificate, and a key storage flag.</p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe. </p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>fileName</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate2(string fileName, string password, X509KeyStorageFlags keyStorageFlags)
    content.vb: Public Sub New(fileName As String, password As String, keyStorageFlags As X509KeyStorageFlags)
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The name of a certificate file. </p>\n"
    - id: password
      type: System.String
      description: "\n<p>The password required to access the X.509 certificate data. </p>\n"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  id: Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Archived
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 136
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets or sets a value indicating that an X.509 certificate is archived.</p>\n"
  remarks: "\n<p>This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.</p>\n<p>In an X.509 store, archived certificates are not included in the returned <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\" data-throw-if-not-resolved=\"false\"></xref> object unless the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong>. No physical archival activity occurs when the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\" data-throw-if-not-resolved=\"false\"></xref> value is set or unset.</p>\n"
  example:
  - "\n<p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.</p>CertSelect#1"
  syntax:
    content: public bool Archived { get; set; }
    content.vb: Public Property Archived As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the certificate is archived, <strong>false</strong> if the certificate is not archived.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  id: Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Extensions
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 137
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets a collection of <xref href=\"System.Security.Cryptography.X509Certificates.X509Extension\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, \"<see href=\"http://go.microsoft.com/fwlink/?LinkId=45286\">Certificate and Certificate Revocation List (CRL) Profile</see>.\" Common extensions include information regarding key usage (<xref href=\"System.Security.Cryptography.X509Certificates.X509KeyUsageExtension\" data-throw-if-not-resolved=\"false\"></xref>), key identifiers (<xref href=\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\" data-throw-if-not-resolved=\"false\"></xref>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.</p>\n"
  example:
  - "\n<p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.</p>CertSelect#1"
  syntax:
    content: public X509ExtensionCollection Extensions { get; }
    content.vb: Public ReadOnly Property Extensions As X509ExtensionCollection
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X509ExtensionCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  id: FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FriendlyName
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 138
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets or sets the associated alias for a certificate.</p>\n"
  remarks: "\n<p>Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.</p>\n<p>If no friendly name exists for the certificate, an empty string (\"\") is returned.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public string FriendlyName { get; set; }
    content.vb: Public Property FriendlyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The certificate's friendly name.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  id: HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasPrivateKey
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 139
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets a value that indicates whether an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object contains a private key. </p>\n"
  syntax:
    content: public bool HasPrivateKey { get; }
    content.vb: Public ReadOnly Property HasPrivateKey As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object contains a private key; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  id: IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IssuerName
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 140
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the distinguished name of the certificate issuer.</p>\n"
  remarks: "\n<p>This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, \"CN=MyName, OU=MyOrgUnit, C=US\").</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public X500DistinguishedName IssuerName { get; }
    content.vb: Public ReadOnly Property IssuerName As X500DistinguishedName
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\" data-throw-if-not-resolved=\"false\"></xref> object that contains the name of the certificate issuer.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  id: NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotAfter
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 141
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the date in local time after which a certificate is no longer valid.</p>\n"
  remarks: "\n<p>This property indicates an expiration date on which the certificate becomes invalid.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public DateTime NotAfter { get; }
    content.vb: Public ReadOnly Property NotAfter As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>A <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object that represents the expiration date for the certificate.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  id: NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotBefore
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 142
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the date in local time on which a certificate becomes valid.</p>\n"
  remarks: "\n<p>This property indicates the date on which the certificate becomes valid.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public DateTime NotBefore { get; }
    content.vb: Public ReadOnly Property NotBefore As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>A <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object that represents the effective date of the certificate.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PublicKey
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 143
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\" data-throw-if-not-resolved=\"false\"></xref> object associated with a certificate.</p>\n"
  remarks: "\n<p>This property returns a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\" data-throw-if-not-resolved=\"false\"></xref> object, which contains the object identifier (<xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.</p>\n<p>You can also obtain the key as an <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object by referencing the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\" data-throw-if-not-resolved=\"false\"></xref> property. This property supports only RSA or DSA keys, so it returns either an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> or a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object that represents the public key.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertSelect#1"
  syntax:
    content: public PublicKey PublicKey { get; }
    content.vb: Public ReadOnly Property PublicKey As PublicKey
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.PublicKey
      description: "\n<p>A <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The key value is not an RSA or DSA key, or the key is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  id: RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RawData
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 144
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the raw data of a certificate.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertSelect#1"
  syntax:
    content: public byte[] RawData { get; }
    content.vb: Public ReadOnly Property RawData As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>The raw data of the certificate as a byte array.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  id: SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SerialNumber
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 145
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the serial number of a certificate.</p>\n"
  remarks: "\n<p>The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public string SerialNumber { get; }
    content.vb: Public ReadOnly Property SerialNumber As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The serial number of the certificate.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignatureAlgorithm
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 146
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the algorithm used to create the signature of a certificate.</p>\n"
  remarks: "\n<p>The object identifier (<xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref>) identifies the type of signature algorithm used by the certificate.</p>\n"
  example:
  - "\n<p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.</p>CertSelect#1"
  syntax:
    content: public Oid SignatureAlgorithm { get; }
    content.vb: Public ReadOnly Property SignatureAlgorithm As Oid
    parameters: []
    return:
      type: System.Security.Cryptography.Oid
      description: "\n<p>Returns the object identifier (<xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref>) of the signature algorithm.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  id: SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubjectName
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 147
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the subject distinguished name from a certificate.</p>\n"
  remarks: "\n<p>The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, \"CN=MyName, OU=MyOrgUnit, C=US\".</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public X500DistinguishedName SubjectName { get; }
    content.vb: Public ReadOnly Property SubjectName As X500DistinguishedName
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\" data-throw-if-not-resolved=\"false\"></xref> object that represents the name of the certificate subject.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  id: Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Thumbprint
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 148
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the thumbprint of a certificate.</p>\n"
  remarks: "\n<p>The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public string Thumbprint { get; }
    content.vb: Public ReadOnly Property Thumbprint As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The thumbprint of the certificate.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  id: Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Version
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 149
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the X.509 format version of a certificate.</p>\n"
  remarks: "\n<p>There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, \"3\" is returned for a version 3 certificate.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public int Version { get; }
    content.vb: Public ReadOnly Property Version As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The certificate format.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate is unreadable. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  id: GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCertContentType
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 150
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Indicates the type of certificate contained in a byte array.</p>\n"
  remarks: "\n<p>This method enables you to discover the type of certificate in a file.</p>\n"
  example:
  - "\n<p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.</p>CertSelect#1"
  syntax:
    content: public static X509ContentType GetCertContentType(byte[] rawData)
    content.vb: Public Shared Function GetCertContentType(rawData As Byte()) As X509ContentType
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "\n<p>A byte array containing data from an X.509 certificate. </p>\n"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>rawData</em> has a zero length or is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte())
  name.vb: GetCertContentType(Byte())
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  id: GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCertContentType
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 151
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Indicates the type of certificate contained in a file.</p>\n"
  remarks: "\n<p>This method enables you to discover the type of certificate in a file.</p>\n"
  syntax:
    content: public static X509ContentType GetCertContentType(string fileName)
    content.vb: Public Shared Function GetCertContentType(fileName As String) As X509ContentType
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The name of a certificate file. </p>\n"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>fileName</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: GetNameInfo(X509NameType, Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNameInfo
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 152
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the subject and issuer names from a certificate.</p>\n"
  remarks: "\n<p>This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.</p>\n"
  example:
  - "\n<p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.</p>CertSelect#1"
  syntax:
    content: public string GetNameInfo(X509NameType nameType, bool forIssuer)
    content.vb: Public Function GetNameInfo(nameType As X509NameType, forIssuer As Boolean) As String
    parameters:
    - id: nameType
      type: System.Security.Cryptography.X509Certificates.X509NameType
      description: "\n<p>The <xref href=\"System.Security.Cryptography.X509Certificates.X509NameType\" data-throw-if-not-resolved=\"false\"></xref> value for the subject. </p>\n"
    - id: forIssuer
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to include the issuer name; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The name of the certificate.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  id: ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 153
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Displays an X.509 certificate in text format.</p>\n"
  remarks: "\n<p>As with all <strong>ToString</strong> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object to obtain precise information about the content or use the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to obtain information about the certificate.</p>\n<p>This method displays the certificate in text format.</p>\n"
  example:
  - "\n<p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The certificate information.</p>\n"
  overridden: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  - vb
  name: ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 154
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Displays an X.509 certificate in text format.</p>\n"
  remarks: "\n<p>As with all <strong>ToString</strong> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object to obtain precise information.</p>\n<p>This method displays the certificate in text format. If the <em>verbose</em> parameter is set to <strong>true</strong>, the text display includes the public key, private key, and extensions. If <em>verbose</em> is set to <strong>false</strong>, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.</p>\n"
  example:
  - "\n<p>The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.</p>CertInfo#1"
  syntax:
    content: public override string ToString(bool verbose)
    content.vb: Public Overrides Function ToString(verbose As Boolean) As String
    parameters:
    - id: verbose
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to display the public key, private key, extensions, and so forth; <strong>false</strong> to display information that is similar to the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class, including thumbprint, serial number, subject and issuer names, and so on. </p>\n"
    return:
      type: System.String
      description: "\n<p>The certificate information.</p>\n"
  overridden: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: Handle
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Handle
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: Issuer
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: Subject
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Subject
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: Dispose()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
    name: Equals
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
    name: Equals
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: Equals(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
    name: Equals
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate
    name: X509Certificate
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
    name: Equals
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate
    name: X509Certificate
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: Export(X509ContentType)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
    name: Export
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.X509Certificates.X509ContentType
    name: X509ContentType
    fullName: System.Security.Cryptography.X509Certificates.X509ContentType
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
    name: Export
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.X509Certificates.X509ContentType
    name: X509ContentType
    fullName: System.Security.Cryptography.X509Certificates.X509ContentType
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: true
  name: Export(X509ContentType, String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType, System.String)
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
    name: Export
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.X509Certificates.X509ContentType
    name: X509ContentType
    fullName: System.Security.Cryptography.X509Certificates.X509ContentType
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
    name: Export
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.X509Certificates.X509ContentType
    name: X509ContentType
    fullName: System.Security.Cryptography.X509Certificates.X509ContentType
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetCertHash()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
    name: GetCertHash
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
    name: GetCertHash
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetFormat()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
    name: GetFormat
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
    name: GetFormat
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
    name: GetHashCode
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
    name: GetHashCode
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetKeyAlgorithm()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
    name: GetKeyAlgorithm
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
    name: GetKeyAlgorithm
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetKeyAlgorithmParameters()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
    name: GetKeyAlgorithmParameters
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
    name: GetKeyAlgorithmParameters
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetKeyAlgorithmParametersString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
    name: GetKeyAlgorithmParametersString
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
    name: GetKeyAlgorithmParametersString
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetPublicKey()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
    name: GetPublicKey
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
    name: GetPublicKey
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: GetSerialNumber()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
    name: GetSerialNumber
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
    name: GetSerialNumber
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509KeyStorageFlags
  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ExtensionCollection
  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X500DistinguishedName
  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.Security.Cryptography.X509Certificates.PublicKey
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: PublicKey
  fullName: System.Security.Cryptography.X509Certificates.PublicKey
- uid: System.Security.Cryptography.Oid
  parent: System.Security.Cryptography
  isExternal: false
  name: Oid
  fullName: System.Security.Cryptography.Oid
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.X509Certificates.X509ContentType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ContentType
  fullName: System.Security.Cryptography.X509Certificates.X509ContentType
- uid: System.Security.Cryptography.X509Certificates.X509NameType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509NameType
  fullName: System.Security.Cryptography.X509Certificates.X509NameType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
    name: ToString
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
    name: ToString
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: true
  name: ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
    name: ToString
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
    name: ToString
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
