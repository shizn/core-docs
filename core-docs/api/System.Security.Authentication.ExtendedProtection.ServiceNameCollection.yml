items:
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  commentId: T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  id: ServiceNameCollection
  parent: System.Security.Authentication.ExtendedProtection
  children:
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.#ctor(System.Collections.ICollection)
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Contains(System.String)
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Count
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.GetEnumerator
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.Collections.IEnumerable)
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.String)
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#IsSynchronized
  - System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  - vb
  name: ServiceNameCollection
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  type: Class
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ServiceNameCollection
    path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
    startLine: 10
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  summary: "\n<p>The <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> class is a read-only collection of service principal names. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> class is used in an <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\" data-throw-if-not-resolved=\"false\"></xref> when validating against a custom list of service provider names (SPNs).</p>\n"
  example:
  - 
  syntax:
    content: 'public class ServiceNameCollection : ICollection, IEnumerable'
    content.vb: >-
      Public Class ServiceNameCollection
          Implements ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.#ctor(System.Collections.ICollection)
  commentId: M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: ServiceNameCollection(ICollection)
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.ServiceNameCollection(System.Collections.ICollection)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 156
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  summary: "\n<p>Initializes a new read-only instance of the <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> class based on an existing <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is initialized contains the specified values passed in the <em>items</em> parameter.</p>\n"
  example:
  - 
  syntax:
    content: public ServiceNameCollection(ICollection items)
    content.vb: Public Sub New(items As ICollection)
    parameters:
    - id: items
      type: System.Collections.ICollection
      description: "\n<p>An instance of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> class that contains the specified values of service names to be used to initialize the class.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>item </em>is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>item</em> is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Contains(System.String)
  commentId: M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: Contains(String)
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 157
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  summary: "\n<p>Returns a value indicating whether the specified string occurs within this <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public bool Contains(string searchServiceName)
    content.vb: Public Function Contains(searchServiceName As String) As Boolean
    parameters:
    - id: searchServiceName
      type: System.String
      description: "\n<p>The string to seek.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the <em>searchServiceName</em> parameter occurs within this <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> instance; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.Collections.IEnumerable)
  commentId: M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.Collections.IEnumerable)
  id: Merge(System.Collections.IEnumerable)
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: Merge(IEnumerable)
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Merge
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 158
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  summary: "\n<p>Merges the current <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> with the specified values to create a new <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the union.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is initialized contains the specified values passed in the <em>items</em> parameter.</p>\n"
  example:
  - 
  syntax:
    content: public ServiceNameCollection Merge(IEnumerable serviceNames)
    content.vb: Public Function Merge(serviceNames As IEnumerable) As ServiceNameCollection
    parameters:
    - id: serviceNames
      type: System.Collections.IEnumerable
      description: "\n<p>An instance of the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> class that contains the specified values of service names to be merged.</p>\n"
    return:
      type: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
      description: "\n<p>A new <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the union of the existing <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> instance merged with the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>serviceNames </em>is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>serviceNames</em> is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.String)
  commentId: M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.String)
  id: Merge(System.String)
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: Merge(String)
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Merge
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 159
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  summary: "\n<p>Merges the current <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> with the specified values to create a new <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the union.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> class that is initialized contains the specified values passed in the <em>items</em> parameter.</p>\n"
  example:
  - 
  syntax:
    content: public ServiceNameCollection Merge(string serviceName)
    content.vb: Public Function Merge(serviceName As String) As ServiceNameCollection
    parameters:
    - id: serviceName
      type: System.String
      description: "\n<p>A string that contains the specified values of service names to be used to initialize the class.</p>\n"
    return:
      type: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
      description: "\n<p>A new <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the union of the existing <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\" data-throw-if-not-resolved=\"false\"></xref> instance merged with the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>serviceNames </em>is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>serviceNames</em> is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Count
  commentId: P:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Count
  id: Count
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
    startLine: 12
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
    startLine: 13
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
    startLine: 14
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
    startLine: 15
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.GetEnumerator
  commentId: M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Net.Security/ref/System.Net.Security.Manual.cs
    startLine: 16
  assemblies:
  - System.Net.Security
  namespace: System.Security.Authentication.ExtendedProtection
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: System.Security.Authentication.ExtendedProtection
  fullName: System.Security.Authentication.ExtendedProtection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ServiceNameCollection
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
