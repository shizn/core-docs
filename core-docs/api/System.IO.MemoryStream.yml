items:
- uid: System.IO.MemoryStream
  commentId: T:System.IO.MemoryStream
  id: MemoryStream
  parent: System.IO
  children:
  - System.IO.MemoryStream.#ctor
  - System.IO.MemoryStream.#ctor(System.Byte[])
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  - System.IO.MemoryStream.#ctor(System.Int32)
  - System.IO.MemoryStream.CanRead
  - System.IO.MemoryStream.CanSeek
  - System.IO.MemoryStream.CanWrite
  - System.IO.MemoryStream.Capacity
  - System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.MemoryStream.Dispose(System.Boolean)
  - System.IO.MemoryStream.Flush
  - System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.MemoryStream.Length
  - System.IO.MemoryStream.Position
  - System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.MemoryStream.ReadByte
  - System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.MemoryStream.SetLength(System.Int64)
  - System.IO.MemoryStream.ToArray
  - System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  - System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.MemoryStream.WriteByte(System.Byte)
  - System.IO.MemoryStream.WriteTo(System.IO.Stream)
  langs:
  - csharp
  - vb
  name: MemoryStream
  fullName: System.IO.MemoryStream
  type: Class
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemoryStream
    path: src/System.IO/ref/System.IO.cs
    startLine: 115
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Creates a stream whose backing store is memory.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The current position of a stream is the position at which the next read or write operation could take place. The current position can be retrieved or set through the <xref href=\"System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> method. When a new instance of <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> is created, the current position is set to zero.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>Memory streams created with an unsigned byte array provide a non-resizable stream of the data. When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor. Empty memory streams are resizable, and can be written to and read from.</p>\n<p>If a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> object is added to a ResX file or a .resources file, call the <xref href=\"System.Resources.ResourceManager.GetStream(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method at runtime to retrieve it.</p>\n<p>If a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> object is serialized to a resource file it will actually be serialized as an <xref href=\"System.IO.UnmanagedMemoryStream\" data-throw-if-not-resolved=\"false\"></xref>. This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write data using memory as a backing store.</p>System.IO.MemoryStream#1"
  syntax:
    content: 'public class MemoryStream : Stream'
    content.vb: >-
      Public Class MemoryStream
          Inherits Stream
  inheritance:
  - System.Object
  - System.IO.Stream
  inheritedMembers:
  - System.IO.Stream.Null
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.WriteTimeout
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.Dispose
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.MemoryStream.#ctor
  commentId: M:System.IO.MemoryStream.#ctor
  id: '#ctor'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream()
  fullName: System.IO.MemoryStream.MemoryStream()
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 117
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class with an expandable capacity initialized to zero.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> properties are all set to <strong>true</strong>.</p>\n<p>The capacity of the current stream automatically increases when you use the <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to set the length to a value larger than the capacity of the current stream.</p>\n<p>This constructor exposes the underlying stream, which <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> returns.</p>\n"
  syntax:
    content: public MemoryStream()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryStream.#ctor(System.Byte[])
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream(Byte[])
  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 118
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> properties are all set to <strong>true</strong>. <xref href=\"System.IO.MemoryStream.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to the length of the specified byte array. The new stream can be written to, but is not resizable.</p>\n<p>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>This constructor does not expose the underlying stream. <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> throws <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MemoryStream(byte[] buffer)
    content.vb: Public Sub New(buffer As Byte())
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The array of unsigned bytes from which to create the current stream. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte())
  name.vb: MemoryStream(Byte())
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream(Byte[], Boolean)
  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 119
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified byte array with the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property set as specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> properties are both set to <strong>true</strong>. <xref href=\"System.IO.MemoryStream.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to the length of the specified byte array.</p>\n<p>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>This constructor does not expose the underlying stream. <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> throws <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MemoryStream(byte[] buffer, bool writable)
    content.vb: Public Sub New(buffer As Byte(), writable As Boolean)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The array of unsigned bytes from which to create this stream. </p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property, which determines whether the stream supports writing. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Boolean)
  name.vb: MemoryStream(Byte(), Boolean)
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  id: '#ctor(System.Byte[],System.Int32,System.Int32)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream(Byte[], Int32, Int32)
  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 120
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified region (index) of a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> properties are all set to <strong>true</strong>, but the capacity cannot be changed. <xref href=\"System.IO.MemoryStream.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to <em>count</em>.</p>\n<p>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>This constructor does not expose the underlying stream. <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> throws <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref>. However, you can write to the stream.</p>\n"
  syntax:
    content: public MemoryStream(byte[] buffer, int index, int count)
    content.vb: Public Sub New(buffer As Byte(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The array of unsigned bytes from which to create this stream. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index into <em>buffer</em> at which the stream begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the stream in bytes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Int32, System.Int32)
  name.vb: MemoryStream(Byte(), Int32, Int32)
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream(Byte[], Int32, Int32, Boolean)
  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Int32, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 121
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property set as specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> properties are both set to <strong>true</strong>. <xref href=\"System.IO.MemoryStream.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to <em>count</em>.</p>\n<p>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>This constructor does not expose the underlying stream. <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> throws <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref>. However, you can write to the stream if <em>writable</em> is <strong>true</strong>.</p>\n"
  syntax:
    content: public MemoryStream(byte[] buffer, int index, int count, bool writable)
    content.vb: Public Sub New(buffer As Byte(), index As Integer, count As Integer, writable As Boolean)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The array of unsigned bytes from which to create this stream. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index in <em>buffer</em> at which the stream begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the stream in bytes. </p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property, which determines whether the stream supports writing. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> are negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Int32, System.Int32, System.Boolean)
  name.vb: MemoryStream(Byte(), Int32, Int32, Boolean)
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Int32, System.Int32, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 122
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property set as specified, and the ability to call <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> set as specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> properties are both set to <strong>true</strong>. <xref href=\"System.IO.MemoryStream.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to <em>count</em>.</p>\n<p>The new stream instance can be written to, but the <xref href=\"System.IO.MemoryStream.Capacity\" data-throw-if-not-resolved=\"false\"></xref> of the underlying byte array cannot be changed. The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  syntax:
    content: public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible)
    content.vb: Public Sub New(buffer As Byte(), index As Integer, count As Integer, writable As Boolean, publiclyVisible As Boolean)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The array of unsigned bytes from which to create this stream. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index into <em>buffer</em> at which the stream begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the stream in bytes. </p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property, which determines whether the stream supports writing. </p>\n"
    - id: publiclyVisible
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to enable <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref>, which returns the unsigned byte array from which the stream was created; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Int32, System.Int32, System.Boolean, System.Boolean)
  name.vb: MemoryStream(Byte(), Int32, Int32, Boolean, Boolean)
- uid: System.IO.MemoryStream.#ctor(System.Int32)
  commentId: M:System.IO.MemoryStream.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: MemoryStream(Int32)
  fullName: System.IO.MemoryStream.MemoryStream(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 123
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class with an expandable capacity initialized as specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.MemoryStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.MemoryStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> properties are all set to <strong>true</strong>.</p>\n<p>The capacity automatically increases when you use the <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to set the length to a value larger than the capacity of the current stream. Except for a <strong>MemoryStream</strong> constructed with a byte[] parameter, write operations at the end of a <strong>MemoryStream</strong> expand the <strong>MemoryStream</strong>.</p>\n<p>This constructor exposes the underlying stream that <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> returns.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#2"
  syntax:
    content: public MemoryStream(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial size of the internal array in bytes. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is negative. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryStream.CanRead
  commentId: P:System.IO.MemoryStream.CanRead
  id: CanRead
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.MemoryStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.IO/ref/System.IO.cs
    startLine: 124
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the current stream supports reading.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support reading, calls to the <xref href=\"System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.MemoryStream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref> methods throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream is open.</p>\n"
  overridden: System.IO.Stream.CanRead
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.MemoryStream.CanSeek
  commentId: P:System.IO.MemoryStream.CanSeek
  id: CanSeek
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.MemoryStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.IO/ref/System.IO.cs
    startLine: 125
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the current stream supports seeking.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support seeking, calls to <xref href=\"System.IO.MemoryStream.Length\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.MemoryStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.MemoryStream.Position\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream is open.</p>\n"
  overridden: System.IO.Stream.CanSeek
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.MemoryStream.CanWrite
  commentId: P:System.IO.MemoryStream.CanWrite
  id: CanWrite
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.MemoryStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.IO/ref/System.IO.cs
    startLine: 126
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the current stream supports writing.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support writing, a call to <xref href=\"System.IO.Stream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.Stream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream supports writing; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.IO.Stream.CanWrite
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.MemoryStream.Capacity
  commentId: P:System.IO.MemoryStream.Capacity
  id: Capacity
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.IO.MemoryStream.Capacity
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.IO/ref/System.IO.cs
    startLine: 127
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets or sets the number of bytes allocated for this stream.</p>\n"
  remarks: "\n<p>\n<strong>Capacity</strong> is the buffer length for system-provided byte arrays. <strong>Capacity</strong> cannot be set to a value less than the current length of the stream.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#5"
  syntax:
    content: public virtual int Capacity { get; set; }
    content.vb: Public Overridable Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length of the usable portion of the buffer for the stream.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>A capacity is set that is negative or less than the current length of the stream. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<strong>set</strong> is invoked on a stream whose capacity cannot be modified. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.MemoryStream.Length
  commentId: P:System.IO.MemoryStream.Length
  id: Length
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.MemoryStream.Length
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO/ref/System.IO.cs
    startLine: 128
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets the length of the stream in bytes.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#5"
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The length of the stream in bytes.</p>\n"
  overridden: System.IO.Stream.Length
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.MemoryStream.Position
  commentId: P:System.IO.MemoryStream.Position
  id: Position
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.MemoryStream.Position
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.IO/ref/System.IO.cs
    startLine: 129
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets or sets the current position within the stream.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#5"
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The current position within the stream.</p>\n"
  overridden: System.IO.Stream.Position
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The position is set to a negative value or a value greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: CopyToAsync(Stream, Int32, Threading.CancellationToken)
  fullName: System.IO.MemoryStream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyToAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 130
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function CopyToAsync(destination As Stream, bufferSize As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: destination
      type: System.IO.Stream
      description: "\n<p>The stream to which the contents of the current stream will be copied.</p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>The size, in bytes, of the buffer. This value must be greater than zero.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous copy operation.</p>\n"
  overridden: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>buffersize</em> is negative or zero.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Either the current stream or the destination stream is disposed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.Dispose(System.Boolean)
  commentId: M:System.IO.MemoryStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.MemoryStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 131
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.MemoryStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.MemoryStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n"
  example:
  - 
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  overridden: System.IO.Stream.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.MemoryStream.Flush
  commentId: M:System.IO.MemoryStream.Flush
  id: Flush
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.MemoryStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO/ref/System.IO.cs
    startLine: 132
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Overrides the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method so that no action is performed.</p>\n"
  remarks: "\n<p>This method overrides the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Because any data written to a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> object is written into RAM, this method is redundant.</p>\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overridden: System.IO.Stream.Flush
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 133
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously clears all buffers for this stream, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>Because any data written to a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> object is written into RAM, this method is redundant.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>You can create a cancellation token by creating an instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class and passing the <xref href=\"System.Threading.CancellationTokenSource.Token\" data-throw-if-not-resolved=\"false\"></xref> property as the <em>cancellationToken</em> parameter.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous flush operation.</p>\n"
  overridden: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.MemoryStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO/ref/System.IO.cs
    startLine: 134
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a block of bytes from the current stream and writes the data to a buffer.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <em>offset</em> parameter gives the offset of the first byte in <em>buffer</em> to which data from the current stream is written. The <em>count</em> parameter gives the maximum number of bytes to read from the current stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</p>\n<p>If the read operation is successful, the current position within the stream advances by the number of bytes read. If an exception occurs, the current position within the stream remains unchanged.</p>\n<p>The <strong>Read</strong> method will return zero only if the end of the stream is reached. In all other cases, <strong>Read</strong> always reads at least one byte from the stream before returning. By definition, if no data is available from the stream upon a call to <strong>Read</strong>, the <strong>Read</strong> method returns zero (the end of the stream is reached automatically). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</p>\n<p>Use <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> for reading primitive data types.</p>\n<p>If the byte array specified in the <em>buffer</em> parameter is the underlying buffer returned by the <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> method, the array contents are overwritten, and no exception is thrown.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#7"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>When this method returns, contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the characters read from the current stream. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> at which to begin storing data from the current stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</p>\n"
  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>offset</em> subtracted from the buffer length is less than <em>count</em>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream instance is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.MemoryStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.MemoryStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 135
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>You can create a cancellation token by creating an instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class and passing the <xref href=\"System.Threading.CancellationTokenSource.Token\" data-throw-if-not-resolved=\"false\"></xref> property as the <em>cancellationToken</em> parameter.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write the data into.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\n"
  overridden: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.MemoryStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.MemoryStream.ReadByte
  commentId: M:System.IO.MemoryStream.ReadByte
  id: ReadByte
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.MemoryStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadByte
    path: src/System.IO/ref/System.IO.cs
    startLine: 136
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a byte from the current stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the read operation is successful, the current position within the stream is advanced by one byte. If an exception occurs, the current position within the stream is unchanged.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#8"
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
      description: "\n<p>The byte cast to a <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, or -1 if the end of the stream has been reached.</p>\n"
  overridden: System.IO.Stream.ReadByte
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream instance is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.MemoryStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO/ref/System.IO.cs
    startLine: 137
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Sets the position within the current stream to the specified value.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Seeking to any location beyond the length of the stream is supported.</p>\n<p>Do not use the <xref href=\"System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the new position in the stream if the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> was initialized with a non-zero offset. If you do, <xref href=\"System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> will return an inaccurate value. Instead, use the <xref href=\"System.IO.MemoryStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property to get the new position of the stream.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#6"
  syntax:
    content: public override long Seek(long offset, SeekOrigin loc)
    content.vb: Public Overrides Function Seek(offset As Long, loc As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>The new position within the stream. This is relative to the <em>loc</em> parameter, and can be positive or negative. </p>\n"
    - id: loc
      type: System.IO.SeekOrigin
      description: "\n<p>A value of type <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref>, which acts as the seek reference point. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new position within the stream, calculated by combining the initial reference point and the offset.</p>\n"
  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Seeking is attempted before the beginning of the stream. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There is an invalid <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>\n<em>offset</em> caused an arithmetic overflow.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream instance is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.SetLength(System.Int64)
  commentId: M:System.IO.MemoryStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.MemoryStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.IO/ref/System.IO.cs
    startLine: 138
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Sets the length of the current stream to the specified value.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the specified value is less than the current length of the stream, the stream is truncated. If after the truncation the current position within the stream is past the end of the stream, the <xref href=\"System.IO.MemoryStream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref> method returns -1, the <xref href=\"System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method reads zero bytes into the provided byte array, and <xref href=\"System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.MemoryStream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> methods append specified bytes at the end of the stream, increasing its length. If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged. If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.</p>\n<p>A <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> instance must support writing for this method to work. Use the <xref href=\"System.IO.MemoryStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing. For additional information, see <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value at which to set the length. </p>\n"
  overridden: System.IO.Stream.SetLength(System.Int64)
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream is not resizable and <em>value</em> is larger than the current capacity.</p>\n<p>-or- </p>\n<p>The current stream does not support writing. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is negative or is greater than the maximum length of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>, where the maximum length is(<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> - origin), and origin is the index into the underlying buffer at which the stream starts. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.ToArray
  commentId: M:System.IO.MemoryStream.ToArray
  id: ToArray
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.IO.MemoryStream.ToArray()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.IO/ref/System.IO.cs
    startLine: 139
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the stream contents to a byte array, regardless of the <xref href=\"System.IO.MemoryStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>This method omits unused bytes in <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> from the array. To get the entire buffer, use the <xref href=\"System.IO.MemoryStream.GetBuffer\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method returns a copy of the contents of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> as a byte array. If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned. See the <xref href=\"System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  constructor for details.</p>\n<p>This method works when the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n"
  syntax:
    content: public virtual byte[] ToArray()
    content.vb: Public Overridable Function ToArray As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A new byte array.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  commentId: M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  id: TryGetBuffer(System.ArraySegment{System.Byte}@)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: TryGetBuffer(out ArraySegment<Byte>)
  fullName: System.IO.MemoryStream.TryGetBuffer(out System.ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetBuffer
    path: src/System.IO/ref/System.IO.cs
    startLine: 140
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.</p>\n"
  syntax:
    content: public virtual bool TryGetBuffer(out ArraySegment<byte> buffer)
    content.vb: Public Overridable Function TryGetBuffer(ByRef buffer As ArraySegment(Of Byte)) As Boolean
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "\n<p>The byte array segment from which this stream was created.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the conversion was successful; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.MemoryStream.TryGetBuffer(ByRef System.ArraySegment(Of System.Byte))
  name.vb: TryGetBuffer(ByRef ArraySegment(Of Byte))
- uid: System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.MemoryStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 141
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a block of bytes to the current stream using data read from a buffer.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <em>offset</em> parameter gives the offset of the first byte in <em>buffer</em> to write from, and the <em>count</em> parameter gives the number of bytes to write. If the write operation is successful, the current position within the stream is advanced by the number of bytes written. If an exception occurs, the current position within the stream is unchanged.</p>\n<p>Except for a <strong>MemoryStream</strong> constructed with a byte[] parameter, write operations at the end of a <strong>MemoryStream</strong> expand the <strong>MemoryStream</strong>.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#3"
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write data from. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write. </p>\n"
  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The current position is closer than <em>count</em> bytes to the end of the stream, and the capacity cannot be modified. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>offset</em> subtracted from the buffer length is less than <em>count</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> are negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream instance is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.MemoryStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.MemoryStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 142
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>You can create a cancellation token by creating an instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class and passing the <xref href=\"System.Threading.CancellationTokenSource.Token\" data-throw-if-not-resolved=\"false\"></xref> property as the <em>cancellationToken</em> parameter.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write data from.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  overridden: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.MemoryStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.MemoryStream.WriteByte(System.Byte)
  commentId: M:System.IO.MemoryStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.MemoryStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteByte
    path: src/System.IO/ref/System.IO.cs
    startLine: 143
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a byte to the current stream at the current position.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Except for a <strong>MemoryStream</strong> constructed with a byte[] parameter, write operations at the end of a <strong>MemoryStream</strong> expand the <strong>MemoryStream</strong>.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.MemoryStream#4"
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The byte to write. </p>\n"
  overridden: System.IO.Stream.WriteByte(System.Byte)
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The current position is at the end of the stream, and the capacity cannot be modified. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.MemoryStream.WriteTo(System.IO.Stream)
  commentId: M:System.IO.MemoryStream.WriteTo(System.IO.Stream)
  id: WriteTo(System.IO.Stream)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  - vb
  name: WriteTo(Stream)
  fullName: System.IO.MemoryStream.WriteTo(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.IO/ref/System.IO.cs
    startLine: 144
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the entire contents of this memory stream to another stream.</p>\n"
  remarks: "\n<p>When the current stream is open, this method is equivalent to calling <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> on the underlying buffer of this stream.</p>\n"
  syntax:
    content: public virtual void WriteTo(Stream stream)
    content.vb: Public Overridable Sub WriteTo(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to write this memory stream to. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current or target stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: false
  fullName: System.IO.Stream.Null
- uid: System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: false
  name: CanTimeout
  fullName: System.IO.Stream.CanTimeout
- uid: System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: false
  name: ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
- uid: System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: false
  name: WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: false
  name: Dispose()
  fullName: System.IO.Stream.Dispose()
  spec.csharp:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: false
  name: FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.Stream.CanRead
  parent: System.IO.Stream
  isExternal: false
  name: CanRead
  fullName: System.IO.Stream.CanRead
- uid: System.IO.Stream.CanSeek
  parent: System.IO.Stream
  isExternal: false
  name: CanSeek
  fullName: System.IO.Stream.CanSeek
- uid: System.IO.Stream.CanWrite
  parent: System.IO.Stream
  isExternal: false
  name: CanWrite
  fullName: System.IO.Stream.CanWrite
- uid: System.IO.Stream.Length
  parent: System.IO.Stream
  isExternal: false
  name: Length
  fullName: System.IO.Stream.Length
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IO.Stream.Position
  parent: System.IO.Stream
  isExternal: false
  name: Position
  fullName: System.IO.Stream.Position
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32, Threading.CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Flush
  parent: System.IO.Stream
  isExternal: false
  name: Flush()
  fullName: System.IO.Stream.Flush()
  spec.csharp:
  - uid: System.IO.Stream.Flush
    name: Flush
    fullName: System.IO.Stream.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Flush
    name: Flush
    fullName: System.IO.Stream.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.Stream.Read
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.Stream.Read
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: false
  name: ReadByte()
  fullName: System.IO.Stream.ReadByte()
  spec.csharp:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    fullName: System.IO.Stream.ReadByte
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    fullName: System.IO.Stream.ReadByte
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    fullName: System.IO.Stream.Seek
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    fullName: System.IO.SeekOrigin
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    fullName: System.IO.Stream.Seek
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    fullName: System.IO.SeekOrigin
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.Stream.SetLength(System.Int64)
  parent: System.IO.Stream
  isExternal: true
  name: SetLength(Int64)
  fullName: System.IO.Stream.SetLength(System.Int64)
  spec.csharp:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    fullName: System.IO.Stream.SetLength
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    fullName: System.IO.Stream.SetLength
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArraySegment{System.Byte}
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  fullname.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<>
  fullName: System.ArraySegment<>
  fullname.vb: System.ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.Stream.Write
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.Stream.Write
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: true
  name: WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    fullName: System.IO.Stream.WriteByte
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    fullName: System.IO.Stream.WriteByte
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
