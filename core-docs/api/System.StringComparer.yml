items:
- uid: System.StringComparer
  commentId: T:System.StringComparer
  id: StringComparer
  parent: System
  children:
  - System.StringComparer.#ctor
  - System.StringComparer.Compare(System.String,System.String)
  - System.StringComparer.CurrentCulture
  - System.StringComparer.CurrentCultureIgnoreCase
  - System.StringComparer.Equals(System.String,System.String)
  - System.StringComparer.GetHashCode(System.String)
  - System.StringComparer.Ordinal
  - System.StringComparer.OrdinalIgnoreCase
  langs:
  - csharp
  - vb
  name: StringComparer
  fullName: System.StringComparer
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StringComparer
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 555
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</p>\n"
  remarks: "\n<p>An object derived from the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> use the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class for sorting purposes. </p>\n<p>A comparison operation that is represented by the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - <p>The following example demonstrates the properties and the <xref href="System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" data-throw-if-not-resolved="false"></xref> method of the <xref href="System.StringComparer" data-throw-if-not-resolved="false"></xref> class. The example illustrates how different <xref href="System.StringComparer" data-throw-if-not-resolved="false"></xref> objects sort three versions of the Latin letter I.</p>System.StringComparer#1
  syntax:
    content: 'public abstract class StringComparer : Collections.Generic.IComparer<string>, Collections.Generic.IEqualityComparer<string>, Collections.IComparer, Collections.IEqualityComparer'
    content.vb: >-
      Public MustInherit Class StringComparer
          Inherits Collections.Generic.IComparer(Of String)
          Implements Collections.Generic.IEqualityComparer(Of String), Collections.IComparer, Collections.IEqualityComparer
  seealso:
  - type: System.String
    commentId: T:System.String
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEqualityComparer{System.String}
  - System.Collections.IComparer
  - System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.StringComparer.#ctor
  commentId: M:System.StringComparer.#ctor
  id: '#ctor'
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: StringComparer()
  fullName: System.StringComparer.StringComparer()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 557
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  example:
  - 
  syntax:
    content: protected StringComparer()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.StringComparer.CurrentCulture
  commentId: P:System.StringComparer.CurrentCulture
  id: CurrentCulture
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: CurrentCulture
  fullName: System.StringComparer.CurrentCulture
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentCulture
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 558
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</p>\n"
  remarks: "\n<p>The<xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.StringComparer.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</p>\n<p>The current culture is the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the current thread.</p>\n<p>The <xref href=\"System.StringComparer.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property actually returns an instance of an anonymous class derived from the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Each call to the <xref href=\"System.StringComparer.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property <strong>get</strong> accessor returns a new <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object, as the following code shows.</p>System.StringComparer.CurrentCulture#1<p>To improve performance, you can store the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object in a local variable rather than retrieve the value of the <xref href=\"System.StringComparer.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property multiple times. </p>"
  example:
  - "\n<p>The following code example demonstrates the properties and the <xref href=\"System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class. The example illustrates how different <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> objects sort three versions of the Latin letter I.</p>System.StringComparer#1"
  syntax:
    content: public static StringComparer CurrentCulture { get; }
    content.vb: Public Shared ReadOnly Property CurrentCulture As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A new <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.StringComparer.CurrentCultureIgnoreCase
  commentId: P:System.StringComparer.CurrentCultureIgnoreCase
  id: CurrentCultureIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: CurrentCultureIgnoreCase
  fullName: System.StringComparer.CurrentCultureIgnoreCase
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentCultureIgnoreCase
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 559
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</p>\n"
  remarks: "\n<p>The current culture is the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the current thread.</p>\n<p>The<xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.StringComparer.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</p>\n<p>The <xref href=\"System.StringComparer.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> property actually returns an instance of an anonymous class derived from the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Each call to the <xref href=\"System.StringComparer.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> property <strong>get</strong> accessor returns a new <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object, as the following code shows.</p>System.StringComparer.CurrentCulture#2<p>To improve performance, you can store the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object in a local variable rather than retrieve the value of the <xref href=\"System.StringComparer.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> property multiple times. </p>"
  example:
  - 
  syntax:
    content: public static StringComparer CurrentCultureIgnoreCase { get; }
    content.vb: Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A new <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.StringComparer.Ordinal
  commentId: P:System.StringComparer.Ordinal
  id: Ordinal
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: Ordinal
  fullName: System.StringComparer.Ordinal
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ordinal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 560
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs a case-sensitive ordinal string comparison.</p>\n"
  remarks: "\n<p>The <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.StringComparer.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords. </p>\n<p>The <xref href=\"System.StringComparer.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> property actually returns an instance of an anonymous class derived from the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the properties and the <xref href=\"System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class. The example illustrates how different <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> objects sort three versions of the Latin letter I.</p>System.StringComparer#1"
  syntax:
    content: public static StringComparer Ordinal { get; }
    content.vb: Public Shared ReadOnly Property Ordinal As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.StringComparer.OrdinalIgnoreCase
  commentId: P:System.StringComparer.OrdinalIgnoreCase
  id: OrdinalIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: OrdinalIgnoreCase
  fullName: System.StringComparer.OrdinalIgnoreCase
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrdinalIgnoreCase
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 561
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs a case-insensitive ordinal string comparison.</p>\n"
  remarks: "\n<p>The<xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.StringComparer.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames. </p>\n<p>The <xref href=\"System.StringComparer.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> property actually returns an instance of an anonymous class derived from the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the properties and the <xref href=\"System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class. The example illustrates how different <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> objects sort three versions of the Latin letter I.</p>System.StringComparer#1"
  syntax:
    content: public static StringComparer OrdinalIgnoreCase { get; }
    content.vb: Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.StringComparer.Compare(System.String,System.String)
  commentId: M:System.StringComparer.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  fullName: System.StringComparer.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 562
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</p>\n"
  remarks: "\n<p>The <xref href=\"System.StringComparer.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is slightly more efficient than the <xref href=\"System.StringComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because no conversion of the <em>x</em> and <em>y</em> arguments is needed to perform the comparison.</p>\n"
  example:
  - 
  syntax:
    content: public abstract int Compare(string x, string y)
    content.vb: Public MustOverride Function Compare(x As String, y As String) As Integer
    parameters:
    - id: x
      type: System.String
      description: "\n<p>A string to compare to <em>y</em>.</p>\n"
    - id: y
      type: System.String
      description: "\n<p>A string to compare to <em>x</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\n<p>Value</p>\n<p>Meaning</p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>\n<em>x</em> precedes <em>y</em> in the sort order.</p>\n<p>-or-</p>\n<p>\n<em>x</em> is <strong>null</strong> and <em>y</em> is not <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>\n<em>x</em> is equal to <em>y</em>.</p>\n<p>-or-</p>\n<p>\n<em>x</em> and <em>y</em> are both <strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>\n<em>x</em> follows <em>y</em> in the sort order.</p>\n<p>-or-</p>\n<p>\n<em>y</em> is <strong>null</strong> and <em>x</em> is not <strong>null</strong>. </p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.StringComparer.Equals(System.String,System.String)
  commentId: M:System.StringComparer.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: Equals(String, String)
  fullName: System.StringComparer.Equals(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 563
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When overridden in a derived class, indicates whether two strings are equal.</p>\n"
  remarks: "\n<p>Because the runtime does not have to unbox <em>x</em> or <em>y</em> if they are value types or attempt to downcast <em>x</em> or <em>y</em> to strings if they are reference types, the <xref href=\"System.StringComparer.Equals(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method may be slightly more efficient than the <xref href=\"System.StringComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - 
  syntax:
    content: public abstract bool Equals(string x, string y)
    content.vb: Public MustOverride Function Equals(x As String, y As String) As Boolean
    parameters:
    - id: x
      type: System.String
      description: "\n<p>A string to compare to <em>y</em>.</p>\n"
    - id: y
      type: System.String
      description: "\n<p>A string to compare to <em>x</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>x</em> and <em>y</em> refer to the same object, or <em>x</em> and <em>y</em> are equal, or <em>x</em> and <em>y</em> are <strong>null</strong>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.StringComparer.GetHashCode(System.String)
  commentId: M:System.StringComparer.GetHashCode(System.String)
  id: GetHashCode(System.String)
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: GetHashCode(String)
  fullName: System.StringComparer.GetHashCode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 564
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When overridden in a derived class, gets the hash code for the specified string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.StringComparer.GetHashCode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is more efficient than the <xref href=\"System.StringComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because the <em>obj</em> parameter does not have to be unboxed to perform the operation.</p>\n<p>The <xref href=\"System.StringComparer.GetHashCode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method allocates an amount of memory that is proportional to the size of <em>obj</em> to calculate the hash code of <em>obj</em>. In the case of large strings, trying to retrieve the hash code can throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the <NetFx45_CultureAwareComparerGetHashCode_LongStrings> element to the <runtime> section of your application's configuration file.</p>\n"
  syntax:
    content: public abstract int GetHashCode(string obj)
    content.vb: Public MustOverride Function GetHashCode(obj As String) As Integer
    parameters:
    - id: obj
      type: System.String
      description: "\n<p>A string.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed hash code calculated from the value of the <em>obj</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Not enough memory is available to allocate the buffer that is required to compute the hash code.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>obj</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEqualityComparer{System.String}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<String>
  fullName: System.Collections.Generic.IEqualityComparer<System.String>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String)
  name.vb: Collections.Generic.IEqualityComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Collections.Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Collections.Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.StringComparer
  parent: System
  isExternal: false
  name: StringComparer
  fullName: System.StringComparer
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
