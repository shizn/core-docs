items:
- uid: System.Security.Principal.NTAccount
  commentId: T:System.Security.Principal.NTAccount
  id: NTAccount
  parent: System.Security.Principal
  children:
  - System.Security.Principal.NTAccount.#ctor(System.String)
  - System.Security.Principal.NTAccount.#ctor(System.String,System.String)
  - System.Security.Principal.NTAccount.Equals(System.Object)
  - System.Security.Principal.NTAccount.GetHashCode
  - System.Security.Principal.NTAccount.IsValidTargetType(System.Type)
  - System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  - System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  - System.Security.Principal.NTAccount.ToString
  - System.Security.Principal.NTAccount.Translate(System.Type)
  - System.Security.Principal.NTAccount.Value
  langs:
  - csharp
  - vb
  name: NTAccount
  fullName: System.Security.Principal.NTAccount
  type: Class
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NTAccount
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 58
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Represents a user or group account.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class NTAccount : IdentityReference'
    content.vb: >-
      Public NotInheritable Class NTAccount
          Inherits IdentityReference
  inheritance:
  - System.Object
  - System.Security.Principal.IdentityReference
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Principal.NTAccount.#ctor(System.String)
  commentId: M:System.Security.Principal.NTAccount.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: NTAccount(String)
  fullName: System.Security.Principal.NTAccount.NTAccount(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 60
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified name.</p>\n"
  remarks: "\n<p>The specified name is not required to correspond to an existing account or group, but translation into other <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>-derived types will not be possible unless the account or group does exist.</p>\n"
  example:
  - 
  syntax:
    content: public NTAccount(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name used to create the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object. This parameter cannot be <strong>null</strong> or an empty string.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is an empty string.</p>\n<p>-or-</p>\n<p>\n<em>name</em> is too long.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.NTAccount.#ctor(System.String,System.String)
  commentId: M:System.Security.Principal.NTAccount.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: NTAccount(String, String)
  fullName: System.Security.Principal.NTAccount.NTAccount(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 61
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified domain name and account name. </p>\n"
  remarks: "\n<p>The specified domain and account names are not required to correspond to an existing account or group, but translation into other <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>-derived types will not be possible unless the account or group does exist.</p>\n"
  example:
  - 
  syntax:
    content: public NTAccount(string domainName, string accountName)
    content.vb: Public Sub New(domainName As String, accountName As String)
    parameters:
    - id: domainName
      type: System.String
      description: "\n<p>The name of the domain. This parameter can be <strong>null</strong> or an empty string. Domain names that are null values are treated like an empty string.</p>\n"
    - id: accountName
      type: System.String
      description: "\n<p>The name of the account. This parameter cannot be <strong>null</strong> or an empty string.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>accountName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>accountName</em> is an empty string.</p>\n<p>-or-</p>\n<p>\n<em>accountName</em> is too long.</p>\n<p>-or-</p>\n<p>\n<em>domainName</em> is too long.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.NTAccount.Value
  commentId: P:System.Security.Principal.NTAccount.Value
  id: Value
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Security.Principal.NTAccount.Value
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 62
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns an uppercase string representation of this <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override string Value { get; }
    content.vb: Public Overrides ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The uppercase string representation of this <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.Principal.IdentityReference.Value
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.NTAccount.Equals(System.Object)
  commentId: M:System.Security.Principal.NTAccount.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Principal.NTAccount.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 63
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a value that indicates whether this <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>An object to compare with this <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>o</em> is an object with the same underlying type and value as this <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Security.Principal.IdentityReference.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.NTAccount.GetHashCode
  commentId: M:System.Security.Principal.NTAccount.GetHashCode
  id: GetHashCode
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Principal.NTAccount.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 64
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Security.Principal.NTAccount.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method is suitable for hashing algorithms and data structures like a hash table.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash value for the current <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.Principal.IdentityReference.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.NTAccount.IsValidTargetType(System.Type)
  commentId: M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)
  id: IsValidTargetType(System.Type)
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: IsValidTargetType(Type)
  fullName: System.Security.Principal.NTAccount.IsValidTargetType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValidTargetType
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 65
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a value that indicates whether the specified type is a valid translation type for the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public override bool IsValidTargetType(Type targetType)
    content.vb: Public Overrides Function IsValidTargetType(targetType As Type) As Boolean
    parameters:
    - id: targetType
      type: System.Type
      description: "\n<p>The type being queried for validity to serve as a conversion from <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref>. The following target types are valid:</p>\n<p>- <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>- <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>targetType</em> is a valid translation type for the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> class; otherwise <strong>false</strong>.</p>\n"
  overridden: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  commentId: M:System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  id: op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: Equality(NTAccount, NTAccount)
  fullName: System.Security.Principal.NTAccount.Equality(System.Security.Principal.NTAccount, System.Security.Principal.NTAccount)
  type: Operator
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 66
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Compares two <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <xref href=\"System.Security.Principal.NTAccount.Value\" data-throw-if-not-resolved=\"false\"></xref> property or if they are both <strong>null</strong>. </p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(NTAccount left, NTAccount right)
    content.vb: Public Shared Operator =(left As NTAccount, right As NTAccount) As Boolean
    parameters:
    - id: left
      type: System.Security.Principal.NTAccount
      description: "\n<p>The left operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\n"
    - id: right
      type: System.Security.Principal.NTAccount
      description: "\n<p>The right operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  commentId: M:System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  id: op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: Inequality(NTAccount, NTAccount)
  fullName: System.Security.Principal.NTAccount.Inequality(System.Security.Principal.NTAccount, System.Security.Principal.NTAccount)
  type: Operator
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 67
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Compares two <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <xref href=\"System.Security.Principal.NTAccount.Value\" data-throw-if-not-resolved=\"false\"></xref> property or if one of the objects is <strong>null</strong> and the other is not.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(NTAccount left, NTAccount right)
    content.vb: Public Shared Operator <>(left As NTAccount, right As NTAccount) As Boolean
    parameters:
    - id: left
      type: System.Security.Principal.NTAccount
      description: "\n<p>The left operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\n"
    - id: right
      type: System.Security.Principal.NTAccount
      description: "\n<p>The right operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.NTAccount.ToString
  commentId: M:System.Security.Principal.NTAccount.ToString
  id: ToString
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Principal.NTAccount.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 68
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns the account name, in Domain\\Account format, for the account represented by the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The account name, in Domain\\Account format.</p>\n"
  overridden: System.Security.Principal.IdentityReference.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.NTAccount.Translate(System.Type)
  commentId: M:System.Security.Principal.NTAccount.Translate(System.Type)
  id: Translate(System.Type)
  parent: System.Security.Principal.NTAccount
  langs:
  - csharp
  - vb
  name: Translate(Type)
  fullName: System.Security.Principal.NTAccount.Translate(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Translate
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 69
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Translates the account name represented by the <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object into another <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>-derived type.</p>\n"
  example:
  - 
  syntax:
    content: public override IdentityReference Translate(Type targetType)
    content.vb: Public Overrides Function Translate(targetType As Type) As IdentityReference
    parameters:
    - id: targetType
      type: System.Type
      description: "\n<p>The target type for the conversion from <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref>. The target type must be a type that is considered valid by the <xref href=\"System.Security.Principal.NTAccount.IsValidTargetType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
    return:
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The converted identity.</p>\n"
  overridden: System.Security.Principal.IdentityReference.Translate(System.Type)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>targetType </em>is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>targetType </em>is not an <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref>  type.</p>\n"
  - type: System.Security.Principal.IdentityNotMappedException
    commentId: T:System.Security.Principal.IdentityNotMappedException
    description: "\n<p>Some or all identity references could not be translated.</p>\n"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "\n<p>The source account name is too long.</p>\n<p>-or-</p>\n<p>A Win32 error code was returned.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Principal.IdentityReference.Value
  parent: System.Security.Principal.IdentityReference
  isExternal: false
  name: Value
  fullName: System.Security.Principal.IdentityReference.Value
- uid: System.Security.Principal.IdentityReference.Equals(System.Object)
  parent: System.Security.Principal.IdentityReference
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.Principal.IdentityReference.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.Principal.IdentityReference.Equals(System.Object)
    name: Equals
    fullName: System.Security.Principal.IdentityReference.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IdentityReference.Equals(System.Object)
    name: Equals
    fullName: System.Security.Principal.IdentityReference.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.IdentityReference.GetHashCode
  parent: System.Security.Principal.IdentityReference
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.Principal.IdentityReference.GetHashCode()
  spec.csharp:
  - uid: System.Security.Principal.IdentityReference.GetHashCode
    name: GetHashCode
    fullName: System.Security.Principal.IdentityReference.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IdentityReference.GetHashCode
    name: GetHashCode
    fullName: System.Security.Principal.IdentityReference.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)
  parent: System.Security.Principal.IdentityReference
  isExternal: true
  name: IsValidTargetType(Type)
  fullName: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)
  spec.csharp:
  - uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)
    name: IsValidTargetType
    fullName: System.Security.Principal.IdentityReference.IsValidTargetType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)
    name: IsValidTargetType
    fullName: System.Security.Principal.IdentityReference.IsValidTargetType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.NTAccount
  parent: System.Security.Principal
  isExternal: false
  name: NTAccount
  fullName: System.Security.Principal.NTAccount
- uid: System.Security.Principal.IdentityReference.ToString
  parent: System.Security.Principal.IdentityReference
  isExternal: false
  name: ToString()
  fullName: System.Security.Principal.IdentityReference.ToString()
  spec.csharp:
  - uid: System.Security.Principal.IdentityReference.ToString
    name: ToString
    fullName: System.Security.Principal.IdentityReference.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IdentityReference.ToString
    name: ToString
    fullName: System.Security.Principal.IdentityReference.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Principal.IdentityReference.Translate(System.Type)
  parent: System.Security.Principal.IdentityReference
  isExternal: true
  name: Translate(Type)
  fullName: System.Security.Principal.IdentityReference.Translate(System.Type)
  spec.csharp:
  - uid: System.Security.Principal.IdentityReference.Translate(System.Type)
    name: Translate
    fullName: System.Security.Principal.IdentityReference.Translate
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IdentityReference.Translate(System.Type)
    name: Translate
    fullName: System.Security.Principal.IdentityReference.Translate
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.Principal.IdentityNotMappedException
  isExternal: false
  name: IdentityNotMappedException
  fullName: System.Security.Principal.IdentityNotMappedException
- uid: System.SystemException
  parent: System
  isExternal: true
  name: SystemException
  fullName: System.SystemException
