items:
- uid: System.Reflection.CustomAttributeData
  commentId: T:System.Reflection.CustomAttributeData
  id: CustomAttributeData
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeData.AttributeType
  - System.Reflection.CustomAttributeData.ConstructorArguments
  - System.Reflection.CustomAttributeData.NamedArguments
  langs:
  - csharp
  - vb
  name: CustomAttributeData
  fullName: System.Reflection.CustomAttributeData
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAttributeData
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</p>\n"
  remarks: "\n<p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>, <see cref=\"Overload:System.Reflection.MemberInfo.GetCustomAttributes\"></see>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> property to get a list of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures that represent the positional arguments, and use the <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> property to get a list of <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures that represent the named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref href=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\" data-throw-if-not-resolved=\"false\"></xref> property to obtain a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n<p>When you have a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure for an argument, whether named or positional, use the <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> property to get the type and the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property to get the value. </p>\n<p>For an array argument, the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property returns a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects. Each <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> object in the collection represents the corresponding element of the array. </p>\n<p>\n<xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class is different from using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>:</p>\n<ul><li>\n<p>The properties and methods of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</p>\n</li><li>\n<p>The properties and methods of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> do not allow you to retrieve the custom attributes inherited from base classes. </p>\n</li></ul>\n<p>To create instances of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class, use the <strong>static</strong> (<strong>Shared</strong> in Visual Basic) <see cref=\"Overload:System.Reflection.CustomAttributeData.GetCustomAttributes\"></see> factory methods.</p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers. </p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains. </p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>CustomAttributeData#1"
  syntax:
    content: 'public class CustomAttributeData : object'
    content.vb: >-
      Public Class CustomAttributeData
          Inherits Object
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.CustomAttributeData.AttributeType
  commentId: P:System.Reflection.CustomAttributeData.AttributeType
  id: AttributeType
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: AttributeType
  fullName: System.Reflection.CustomAttributeData.AttributeType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AttributeType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 71
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the attribute.</p>\n"
  syntax:
    content: public virtual Type AttributeType { get; }
    content.vb: Public Overridable ReadOnly Property AttributeType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the attribute.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.CustomAttributeData.ConstructorArguments
  commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments
  id: ConstructorArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: ConstructorArguments
  fullName: System.Reflection.CustomAttributeData.ConstructorArguments
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConstructorArguments
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 72
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the list of positional arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.</p>\n<p>Use the <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> method to get the named arguments specified for the attribute instance.</p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers. </p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> property is used in the <code>ShowAttributeData</code> method that displays custom attribute data. In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute. </p>CustomAttributeData#1"
  syntax:
    content: public virtual Collections.Generic.IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
    content.vb: Public Overridable ReadOnly Property ConstructorArguments As Collections.Generic.IList(Of CustomAttributeTypedArgument)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
      description: "\n<p>A collection of structures that represent the positional arguments specified for the custom attribute instance.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeData.NamedArguments
    commentId: P:System.Reflection.CustomAttributeData.NamedArguments
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.CustomAttributeData.NamedArguments
  commentId: P:System.Reflection.CustomAttributeData.NamedArguments
  id: NamedArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: NamedArguments
  fullName: System.Reflection.CustomAttributeData.NamedArguments
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamedArguments
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 73
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the list of named arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context. </p>\n<p>The list that is returned contains only the named arguments that were specified for the attribute instance.</p>\n<p>Use the <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> method to get the positional arguments that were specified for the attribute instance. </p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers. </p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> property is used in the <code>ShowAttributeData</code> method that displays custom attribute data. In this code example, this property is used to display the list of named arguments specified for the attribute. </p>CustomAttributeData#1"
  syntax:
    content: public virtual Collections.Generic.IList<CustomAttributeNamedArgument> NamedArguments { get; }
    content.vb: Public Overridable ReadOnly Property NamedArguments As Collections.Generic.IList(Of CustomAttributeNamedArgument)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
      description: "\n<p>A collection of structures that represent the named arguments specified for the custom attribute instance.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeData.ConstructorArguments
    commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
  definition: System.Collections.Generic.IList`1
  name: Collections.Generic.IList<CustomAttributeTypedArgument>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument>
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeTypedArgument)
  name.vb: Collections.Generic.IList(Of CustomAttributeTypedArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeTypedArgument
    name: CustomAttributeTypedArgument
    fullName: System.Reflection.CustomAttributeTypedArgument
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeTypedArgument
    name: CustomAttributeTypedArgument
    fullName: System.Reflection.CustomAttributeTypedArgument
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
  definition: System.Collections.Generic.IList`1
  name: Collections.Generic.IList<CustomAttributeNamedArgument>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument>
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeNamedArgument)
  name.vb: Collections.Generic.IList(Of CustomAttributeNamedArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeNamedArgument
    name: CustomAttributeNamedArgument
    fullName: System.Reflection.CustomAttributeNamedArgument
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeNamedArgument
    name: CustomAttributeNamedArgument
    fullName: System.Reflection.CustomAttributeNamedArgument
  - name: )
    fullName: )
