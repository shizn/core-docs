items:
- uid: System.Net.WebRequest
  commentId: T:System.Net.WebRequest
  id: WebRequest
  parent: System.Net
  children:
  - System.Net.WebRequest.#ctor
  - System.Net.WebRequest.Abort
  - System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  - System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  - System.Net.WebRequest.ContentType
  - System.Net.WebRequest.Create(System.String)
  - System.Net.WebRequest.Create(System.Uri)
  - System.Net.WebRequest.CreateHttp(System.String)
  - System.Net.WebRequest.CreateHttp(System.Uri)
  - System.Net.WebRequest.Credentials
  - System.Net.WebRequest.DefaultWebProxy
  - System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  - System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  - System.Net.WebRequest.GetRequestStreamAsync
  - System.Net.WebRequest.GetResponseAsync
  - System.Net.WebRequest.Headers
  - System.Net.WebRequest.Method
  - System.Net.WebRequest.Proxy
  - System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  - System.Net.WebRequest.RequestUri
  - System.Net.WebRequest.UseDefaultCredentials
  langs:
  - csharp
  - vb
  name: WebRequest
  fullName: System.Net.WebRequest
  type: Class
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WebRequest
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 89
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Makes a request to a Uniform Resource Identifier (URI). This is an <strong>abstract</strong> class.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> is the <strong>abstract</strong> base class for the .NET Framework's request/response model for accessing data from the Internet. An application that uses the request/response model can request data from the Internet in a protocol-agnostic manner, in which the application works with instances of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class while protocol-specific descendant classes carry out the details of the request.</p>\n<p>Requests are sent from an application to a particular URI, such as a Web page on a server. The URI determines the proper descendant class to create from a list of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants registered for the application. <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants are typically registered to handle a specific protocol, such as HTTP or FTP, but can be registered to handle a request to a specific server or path on a server.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class throws a <xref href=\"System.Net.WebException\" data-throw-if-not-resolved=\"false\"></xref> when errors occur while accessing an Internet resource. The <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> property is one of the <xref href=\"System.Net.WebExceptionStatus\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the source of the error. When <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.WebExceptionStatus.ProtocolError\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Net.WebException.Response\" data-throw-if-not-resolved=\"false\"></xref> property contains the <xref href=\"System.Net.WebResponse\" data-throw-if-not-resolved=\"false\"></xref> received from the Internet resource.</p>\n<p>Because the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class, the actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method to initialize new <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances. Do not use the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>If the application that creates the WebRequest object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so.</p>\n"
  example:
  - "\n<p>The following example shows how to create a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance and return the response.</p>NclWebRequestSimple#1"
  syntax:
    content: public abstract class WebRequest
    content.vb: Public MustInherit Class WebRequest
  seealso:
  - type: System.Net.HttpWebRequest
    commentId: T:System.Net.HttpWebRequest
  see:
  - type: System.Net.WebPermission
    commentId: T:System.Net.WebPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.WebRequest.#ctor
  commentId: M:System.Net.WebRequest.#ctor
  id: '#ctor'
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: WebRequest()
  fullName: System.Net.WebRequest.WebRequest()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 91
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method to initialize new <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances. Do not use the constructor.</p>\n"
  example:
  - "\n<p>The following example shows how to create a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance by calling the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method on the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Classic WebRequest.WebRequest Example#1"
  syntax:
    content: protected WebRequest()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.WebRequest.ContentType
  commentId: P:System.Net.WebRequest.ContentType
  id: ContentType
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: ContentType
  fullName: System.Net.WebRequest.ContentType
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContentType
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 92
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets or sets the content type of the request data being sent.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property contains the media type of the request. This is typically the MIME encoding of the content.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example sets the <xref href=\"System.Net.WebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property to the appropriate media type.</p>WebRequest_ContentType#4"
  syntax:
    content: public abstract string ContentType { get; set; }
    content.vb: Public MustOverride Property ContentType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The content type of the request data.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.HttpWebRequest.ContentType
    commentId: P:System.Net.HttpWebRequest.ContentType
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.Credentials
  commentId: P:System.Net.WebRequest.Credentials
  id: Credentials
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Credentials
  fullName: System.Net.WebRequest.Credentials
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Credentials
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 93
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets or sets the network credentials used for authenticating the request with the Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property contains the authentication credentials required to access the Internet resource.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example sets the <xref href=\"System.Net.WebRequest.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property using the default credentials of the current user. When the request is made, credentials stored in this property are used to validate the client. This is identical to setting the <xref href=\"System.Net.WebRequest.UseDefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>.</p>NclWebRequestSimple#2"
  syntax:
    content: public virtual ICredentials Credentials { get; set; }
    content.vb: Public Overridable Property Credentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
      description: "\n<p>An <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref> containing the authentication credentials associated with the request. The default is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.NetworkCredential
    commentId: T:System.Net.NetworkCredential
  - type: System.Net.CredentialCache
    commentId: T:System.Net.CredentialCache
  - type: System.Net.HttpWebRequest.Credentials
    commentId: P:System.Net.HttpWebRequest.Credentials
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.WebRequest.DefaultWebProxy
  commentId: P:System.Net.WebRequest.DefaultWebProxy
  id: DefaultWebProxy
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: DefaultWebProxy
  fullName: System.Net.WebRequest.DefaultWebProxy
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultWebProxy
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 94
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets the global HTTP proxy.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.DefaultWebProxy\" data-throw-if-not-resolved=\"false\"></xref> property gets or sets the global proxy. The <xref href=\"System.Net.WebRequest.DefaultWebProxy\" data-throw-if-not-resolved=\"false\"></xref> property determines the default proxy that all <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances use if the request supports proxies and no proxy is set explicitly using the <xref href=\"System.Net.HttpWebRequest.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property. Proxies are currently supported by <xref href=\"System.Net.FtpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Net.WebRequest.DefaultWebProxy\" data-throw-if-not-resolved=\"false\"></xref> property reads proxy settings from the app.config file. If there is no config file, the current user's Internet Explorer (IE) proxy settings are used.</p>\n<p>If the <xref href=\"System.Net.WebRequest.DefaultWebProxy\" data-throw-if-not-resolved=\"false\"></xref> property is set to null, all subsequent instances of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class created by the <xref href=\"System.Net.WebRequest.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.WebRequest.CreateDefault(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> methods do not have a proxy.</p>\n"
  example:
  - 
  syntax:
    content: public static IWebProxy DefaultWebProxy { get; set; }
    content.vb: Public Shared Property DefaultWebProxy As IWebProxy
    parameters: []
    return:
      type: System.Net.IWebProxy
      description: "\n<p>An <xref href=\"System.Net.IWebProxy\" data-throw-if-not-resolved=\"false\"></xref> used by every call to instances of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  see:
  - type: System.Net.WebPermission
    commentId: T:System.Net.WebPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebRequest.Headers
  commentId: P:System.Net.WebRequest.Headers
  id: Headers
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Headers
  fullName: System.Net.WebRequest.Headers
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Headers
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 95
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.Headers\" data-throw-if-not-resolved=\"false\"></xref> property contains a <xref href=\"System.Net.WebHeaderCollection\" data-throw-if-not-resolved=\"false\"></xref> instance containing the header information to send to the Internet resource.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example displays the header name/value pairs associated with this request.</p>WebRequest_Headers#1"
  syntax:
    content: public abstract WebHeaderCollection Headers { get; set; }
    content.vb: Public MustOverride Property Headers As WebHeaderCollection
    parameters: []
    return:
      type: System.Net.WebHeaderCollection
      description: "\n<p>A <xref href=\"System.Net.WebHeaderCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the header name/value pairs associated with this request.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.WebHeaderCollection
    commentId: T:System.Net.WebHeaderCollection
  - type: System.Net.HttpWebRequest.Headers
    commentId: P:System.Net.HttpWebRequest.Headers
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.Method
  commentId: P:System.Net.WebRequest.Method
  id: Method
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Method
  fullName: System.Net.WebRequest.Method
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Method
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 96
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets or sets the protocol method to use in this request.</p>\n"
  remarks: "\n<p>When overridden in a descendant class, the <xref href=\"System.Net.WebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> property contains the request method to use in this request.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example sets the <xref href=\"System.Net.WebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> property to POST to indicate that the request will post data to the target host.</p>WebRequest_BeginGetRequest#3"
  syntax:
    content: public abstract string Method { get; set; }
    content.vb: Public MustOverride Property Method As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The protocol method to use in this request.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>If the property is not overridden in a descendant class, any attempt is made to get or set the property. </p>\n"
  seealso:
  - type: System.Net.HttpWebRequest.Method
    commentId: P:System.Net.HttpWebRequest.Method
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.Proxy
  commentId: P:System.Net.WebRequest.Proxy
  id: Proxy
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Proxy
  fullName: System.Net.WebRequest.Proxy
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Proxy
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 97
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets or sets the network proxy to use to access this Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property identifies the network proxy that the request uses to access the Internet resource. The request is made through the proxy server rather than directly to the Internet resource.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example displays the current network proxy address and allows the user to assign a new network proxy address and port number.</p>WebRequest_Proxy#1"
  syntax:
    content: public virtual IWebProxy Proxy { get; set; }
    content.vb: Public Overridable Property Proxy As IWebProxy
    parameters: []
    return:
      type: System.Net.IWebProxy
      description: "\n<p>The <xref href=\"System.Net.IWebProxy\" data-throw-if-not-resolved=\"false\"></xref> to use to access the Internet resource.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.IWebProxy
    commentId: T:System.Net.IWebProxy
  - type: System.Net.WebProxy
    commentId: T:System.Net.WebProxy
  - type: System.Net.HttpWebRequest.Proxy
    commentId: P:System.Net.HttpWebRequest.Proxy
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.WebRequest.RequestUri
  commentId: P:System.Net.WebRequest.RequestUri
  id: RequestUri
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: RequestUri
  fullName: System.Net.WebRequest.RequestUri
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RequestUri
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 98
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets the URI of the Internet resource associated with the request.</p>\n"
  remarks: "\n<p>When overridden in a descendant class, the <xref href=\"System.Net.WebRequest.RequestUri\" data-throw-if-not-resolved=\"false\"></xref> property contains the <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> instance that <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method uses to create the request.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example checks the <xref href=\"System.Net.WebRequest.RequestUri\" data-throw-if-not-resolved=\"false\"></xref> property to determine the site originally requested.</p>WebRequest_RequestUri1#1"
  syntax:
    content: public abstract Uri RequestUri { get; }
    content.vb: Public MustOverride ReadOnly Property RequestUri As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> representing the resource associated with the request </p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.HttpWebRequest.RequestUri
    commentId: P:System.Net.HttpWebRequest.RequestUri
  - type: System.Net.HttpWebRequest.Address
    commentId: P:System.Net.HttpWebRequest.Address
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.WebRequest.UseDefaultCredentials
  commentId: P:System.Net.WebRequest.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: UseDefaultCredentials
  fullName: System.Net.WebRequest.UseDefaultCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseDefaultCredentials
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 99
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that controls whether <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> are sent with requests.</p>\n"
  remarks: "\n<p>Set this property to <strong>true</strong> when requests made by this <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> object should, if requested by the server, be authenticated using the credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref href=\"System.Net.WebRequest.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property to the credentials of the client on whose behalf the request is made.</p>\n"
  syntax:
    content: public virtual bool UseDefaultCredentials { get; set; }
    content.vb: Public Overridable Property UseDefaultCredentials As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the default credentials are used; otherwise <strong>false</strong>. The default value is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>You attempted to set this property after the request was sent.</p>\n"
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to access the property, when the property is not overridden in a descendant class. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.WebRequest.Abort
  commentId: M:System.Net.WebRequest.Abort
  id: Abort
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Abort()
  fullName: System.Net.WebRequest.Abort()
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abort
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 100
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Aborts the Request </p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> method cancels asynchronous requests to Internet resources started with the <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void Abort()
    content.vb: Public MustOverride Sub Abort
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to access the method, when the method is not overridden in a descendant class. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  commentId: M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  id: BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: BeginGetRequestStream(AsyncCallback, Object)
  fullName: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginGetRequestStream
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 101
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, provides an asynchronous version of the <xref href=\"System.Net.WebRequest.GetRequestStream\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method starts an asynchronous request for a stream used to send data to an Internet resource. The callback method that implements the <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate uses the <xref href=\"System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method to return the request stream.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to asynchronously obtain the request stream.</p>WebRequest_BeginGetRequest#3"
  syntax:
    content: public abstract IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state)
    content.vb: Public MustOverride Function BeginGetRequestStream(callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing state information for this asynchronous request. </p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>An <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous request.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to access the method, when the method is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
    commentId: M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  commentId: M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  id: BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: BeginGetResponse(AsyncCallback, Object)
  fullName: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginGetResponse
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 102
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, begins an asynchronous request for an Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method starts an asynchronous request for a response. The callback method that implements the <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate uses the <xref href=\"System.Net.WebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method to return the <xref href=\"System.Net.WebResponse\" data-throw-if-not-resolved=\"false\"></xref> from the Internet resource.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a WebException is thrown, use the <xref href=\"System.Net.WebException.Response\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> properties of the exception to determine the response from the server.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to asynchronously request the target resource. When the resource has been obtained, the specified callback method will be executed.</p>WebRequest_BeginGetResponse#2"
  syntax:
    content: public abstract IAsyncResult BeginGetResponse(AsyncCallback callback, object state)
    content.vb: Public MustOverride Function BeginGetResponse(callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing state information for this asynchronous request. </p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>An <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous request.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to access the method, when the method is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
    commentId: M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  - type: System.Net.WebRequest.GetResponse
    commentId: M:System.Net.WebRequest.GetResponse
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.Create(System.String)
  commentId: M:System.Net.WebRequest.Create(System.String)
  id: Create(System.String)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Create(String)
  fullName: System.Net.WebRequest.Create(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 103
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Initializes a new <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance for the specified URI scheme.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method returns a descendant of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class determined at run time as the closest registered match for <em>requestUri</em>.</p>\n<p>For example, when a URI beginning with <code>http://</code> or <code>https://</code> is passed in <em>requestUri</em>, an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> is returned by <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>. If a URI beginning with <code>ftp://</code> is passed instead, the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method will return a <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance. If a URI beginning with <code>file://</code> is passed instead, the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method will return a <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>The pre-registered reserve types already registered include the following:</p>\n<ul><li>\n<p>\n<code>http://</code>\n</p>\n</li><li>\n<p>\n<code>https://</code>\n</p>\n</li><li>\n<p>\n<code>ftp://</code>\n</p>\n</li><li>\n<p>\n<code>file://</code>\n</p>\n</li></ul>\n<p>The .NET Framework includes support for the <code>http://</code>, <code>https://</code>, <code>ftp://</code>, and <code>file://</code> URI schemes. Custom <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants to handle other requests are registered with the <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <em>requestUriString</em> parameter to create a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> instance that it passes to the new <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> to instantiate an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance. A string representing the target URL is used as the constructor parameter.</p>WebResponse_ResponseUri#1"
  syntax:
    content: public static WebRequest Create(string requestUriString)
    content.vb: Public Shared Function Create(requestUriString As String) As WebRequest
    parameters:
    - id: requestUriString
      type: System.String
      description: "\n<p>The URI that identifies the Internet resource. </p>\n"
    return:
      type: System.Net.WebRequest
      description: "\n<p>A <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant for the specific URI scheme.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The request scheme specified in <em>requestUriString</em> has not been registered. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>requestUriString</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The URI specified in <em>requestUriString</em> is not a valid URI. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebRequest.Create(System.Uri)
  commentId: M:System.Net.WebRequest.Create(System.Uri)
  id: Create(System.Uri)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: Create(Uri)
  fullName: System.Net.WebRequest.Create(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 104
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Initializes a new <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance for the specified URI scheme.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method returns a descendant of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class determined at run time as the closest registered match for <em>requestUri</em>.</p>\n<p>For example, if you create a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant, Handler1, to handle requests to <code>http://www.contoso.com/text/</code> and another named Handler2 to handle requests to <code>http://www.contoso.com/code/</code>, you can use <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method to return the WebRequest descendant associated with either specified URI.</p>\n<p>To return a descendant of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class based on only the scheme portion of a URI, use the <xref href=\"System.Net.WebRequest.CreateDefault(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For example, when a URI beginning with <code>http://</code> or <code>https://</code> is passed in <em>requestUri</em>, an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> is returned by <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>. If a URI beginning with <code>ftp://</code> is passed instead, the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method will return a <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance. If a URI beginning with <code>file://</code> is passed instead, the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method will return a <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>The pre-registered reserve types already registered include the following:</p>\n<ul><li>\n<p>\n<code>http://</code>\n</p>\n</li><li>\n<p>\n<code>https://</code>\n</p>\n</li><li>\n<p>\n<code>ftp://</code>\n</p>\n</li><li>\n<p>\n<code>file://</code>\n</p>\n</li></ul>\n<p>The .NET Framework includes support for the <code>http://</code>, <code>https://</code>, <code>ftp://</code>, and <code>file://</code> URI schemes. Custom <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants to handle other requests are registered with the <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> to instantiate an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance. A Uri representing the target URL is used as the constructor parameter.</p>WebRequest_Create#1"
  syntax:
    content: public static WebRequest Create(Uri requestUri)
    content.vb: Public Shared Function Create(requestUri As Uri) As WebRequest
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> containing the URI of the requested resource. </p>\n"
    return:
      type: System.Net.WebRequest
      description: "\n<p>A <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant for the specified URI scheme.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The request scheme specified in <em>requestUri</em> is not registered. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>requestUri</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebRequest.CreateHttp(System.String)
  commentId: M:System.Net.WebRequest.CreateHttp(System.String)
  id: CreateHttp(System.String)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: CreateHttp(String)
  fullName: System.Net.WebRequest.CreateHttp(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateHttp
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 105
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Initializes a new <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance for the specified URI string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.CreateHttp(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns an instance of the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class for the <em>requestUriString</em>.</p>\n<p>When a URI that begins with <code>http://</code> or <code>http://</code> is passed in the <em>requestUriString</em> parameter, a <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> is returned by <xref href=\"System.Net.WebRequest.CreateHttp(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. Another other scheme will throw an <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.Net.WebRequest.CreateHttp(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <em>requestUriString</em> parameter to create a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> instance that it passes to the new <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>. If the method is successful, the <xref href=\"System.Net.HttpWebRequest.AllowReadStreamBuffering\" data-throw-if-not-resolved=\"false\"></xref> property on the returned <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance is set to <strong>false</strong>.</p>\n<p>The .NET Framework includes support for the <code>http://</code> and  <code>https://</code> URI schemes. Custom <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants to handle other requests are registered with the <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Net.WebRequest.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method can be used to create a descendant of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class for other schemes.</p>\n"
  syntax:
    content: public static HttpWebRequest CreateHttp(string requestUriString)
    content.vb: Public Shared Function CreateHttp(requestUriString As String) As HttpWebRequest
    parameters:
    - id: requestUriString
      type: System.String
      description: "\n<p>A URI string that identifies the Internet resource. </p>\n"
    return:
      type: System.Net.HttpWebRequest
      description: "\n<p>Returns <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>  instance for the specific URI string.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The request scheme specified in <em>requestUriString</em> is the http or https scheme. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>requestUriString</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>The URI specified in <em>requestUriString</em> is not a valid URI. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebRequest.CreateHttp(System.Uri)
  commentId: M:System.Net.WebRequest.CreateHttp(System.Uri)
  id: CreateHttp(System.Uri)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: CreateHttp(Uri)
  fullName: System.Net.WebRequest.CreateHttp(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateHttp
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 106
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Initializes a new <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance for the specified URI.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.CreateHttp(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method returns an instance of the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class for the <em>requestUri</em>.</p>\n<p>When a URI that begins with <code>http://</code> or <code>http://</code> is passed in the <em>requestUri</em> parameter, an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> is returned by <xref href=\"System.Net.WebRequest.CreateHttp(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>. Another other scheme will throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.Net.WebRequest.CreateHttp(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <em>requestUri</em> parameter to create a new <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance. If the method is successful, the <xref href=\"System.Net.HttpWebRequest.AllowReadStreamBuffering\" data-throw-if-not-resolved=\"false\"></xref> property on the returned <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance is set to <strong>false</strong>.</p>\n<p>The .NET Framework includes support for the <code>http://</code> and  <code>https://</code> URI schemes. Custom <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants to handle other requests are registered with the <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method can be used to create a descendant of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class for other schemes.</p>\n"
  syntax:
    content: public static HttpWebRequest CreateHttp(Uri requestUri)
    content.vb: Public Shared Function CreateHttp(requestUri As Uri) As HttpWebRequest
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>A URI that identifies the Internet resource.</p>\n"
    return:
      type: System.Net.HttpWebRequest
      description: "\n<p>Returns <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance for the specific URI string.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The request scheme specified in <em>requestUri</em> is the http or https scheme. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>requestUri</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>The URI specified in <em>requestUri</em> is not a valid URI. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  commentId: M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  id: EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: EndGetRequestStream(IAsyncResult)
  fullName: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndGetRequestStream
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 107
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, returns a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> for writing data to the Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method completes an asynchronous stream request that was started by the <xref href=\"System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To avoid timing issues with garbage collection, be sure to close the response stream by calling the <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method on the stream returned by <xref href=\"System.Net.WebResponse.GetResponseStream\" data-throw-if-not-resolved=\"false\"></xref> after calling <xref href=\"System.Net.WebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example obtains and uses the request stream by calling the <xref href=\"System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method completes the asynchronous call to <xref href=\"System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>WebRequest_BeginGetRequest#3"
  syntax:
    content: public abstract Stream EndGetRequestStream(IAsyncResult asyncResult)
    content.vb: Public MustOverride Function EndGetRequestStream(asyncResult As IAsyncResult) As Stream
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>An <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references a pending request for a stream. </p>\n"
    return:
      type: System.IO.Stream
      description: "\n<p>A <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> to write data to.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to access the method, when the method is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    commentId: M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  commentId: M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  id: EndGetResponse(System.IAsyncResult)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: EndGetResponse(IAsyncResult)
  fullName: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndGetResponse
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 108
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, returns a <xref href=\"System.Net.WebResponse\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method completes an asynchronous request for an Internet resource that was started with the <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is an <strong>abstract</strong> class. The actual behavior of <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> instances at run time is determined by the descendant class returned by the <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information about default values and exceptions, see the documentation for the descendant classes, such as <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Net.WebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the target resource.</p>WebRequest_BeginGetResponse#1"
  syntax:
    content: public abstract WebResponse EndGetResponse(IAsyncResult asyncResult)
    content.vb: Public MustOverride Function EndGetResponse(asyncResult As IAsyncResult) As WebResponse
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>An <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references a pending request for a response. </p>\n"
    return:
      type: System.Net.WebResponse
      description: "\n<p>A <xref href=\"System.Net.WebResponse\" data-throw-if-not-resolved=\"false\"></xref> that contains a response to the Internet request.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>Any attempt is made to access the method, when the method is not overridden in a descendant class. </p>\n"
  seealso:
  - type: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    commentId: M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebRequest.GetRequestStreamAsync
  commentId: M:System.Net.WebRequest.GetRequestStreamAsync
  id: GetRequestStreamAsync
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: GetRequestStreamAsync()
  fullName: System.Net.WebRequest.GetRequestStreamAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRequestStreamAsync
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 109
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, returns a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> for writing data to the Internet resource as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>object will complete when the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> for writing data to the Internet resource is available.</p>\n<p>After you call <xref href=\"System.Net.WebRequest.GetRequestStreamAsync\" data-throw-if-not-resolved=\"false\"></xref>, make sure you close the request stream before you call <xref href=\"System.Net.WebRequest.GetResponseAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Task<Stream> GetRequestStreamAsync()
    content.vb: Public Overridable Function GetRequestStreamAsync As Task(Of Stream)
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.WebRequest.GetResponseAsync
  commentId: M:System.Net.WebRequest.GetResponseAsync
  id: GetResponseAsync
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: GetResponseAsync()
  fullName: System.Net.WebRequest.GetResponseAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetResponseAsync
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 110
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>When overridden in a descendant class, returns a response to an Internet request as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after a response to an Internet request is available.</p>\n"
  syntax:
    content: public virtual Task<WebResponse> GetResponseAsync()
    content.vb: Public Overridable Function GetResponseAsync As Task(Of WebResponse)
    return:
      type: System.Threading.Tasks.Task{System.Net.WebResponse}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  commentId: M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  id: RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  parent: System.Net.WebRequest
  langs:
  - csharp
  - vb
  name: RegisterPrefix(String, IWebRequestCreate)
  fullName: System.Net.WebRequest.RegisterPrefix(System.String, System.Net.IWebRequestCreate)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegisterPrefix
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 111
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Registers a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant for the specified URI.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> method registers <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants to service requests. <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendants are typically registered to handle a specific protocol, such HTTP or FTP, but can be registered to handle a request to a specific server or path on a server.</p>\n<p>The pre-registered reserve types already registered include the following:</p>\n<ul><li>\n<p>\n<code>http://</code>\n</p>\n</li><li>\n<p>\n<code>https://</code>\n</p>\n</li><li>\n<p>\n<code>ftp://</code>\n</p>\n</li><li>\n<p>\n<code>file://</code>\n</p>\n</li></ul>\n<p>For more information, see the <xref href=\"System.Net.WebRequest.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.WebRequest.Create(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Duplicate prefixes are not allowed. <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> if an attempt is made to register a duplicate prefix.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is registered to service requests for HTTP and HTTPS schemes by default. Attempts to register a different <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant for these schemes will fail.</p>\n"
  syntax:
    content: public static bool RegisterPrefix(string prefix, IWebRequestCreate creator)
    content.vb: Public Shared Function RegisterPrefix(prefix As String, creator As IWebRequestCreate) As Boolean
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The complete URI or URI prefix that the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant services. </p>\n"
    - id: creator
      type: System.Net.IWebRequestCreate
      description: "\n<p>The create method that the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> calls to create the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> descendant. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if registration is successful; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>prefix</em> is <strong>null</strong></p>\n<p>-or- </p>\n<p>\n<em>creator</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.IWebProxy
  isExternal: false
  name: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.WebHeaderCollection
  isExternal: false
  name: WebHeaderCollection
  fullName: System.Net.WebHeaderCollection
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: false
  name: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Net.HttpWebRequest
  parent: System.Net
  isExternal: false
  name: HttpWebRequest
  fullName: System.Net.HttpWebRequest
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: false
  name: WebResponse
  fullName: System.Net.WebResponse
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Net.WebResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WebResponse>
  fullName: System.Threading.Tasks.Task<System.Net.WebResponse>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.WebResponse)
  name.vb: Task(Of WebResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.WebResponse
    name: WebResponse
    fullName: System.Net.WebResponse
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebResponse
    name: WebResponse
    fullName: System.Net.WebResponse
  - name: )
    fullName: )
- uid: System.Net.IWebRequestCreate
  parent: System.Net
  isExternal: false
  name: IWebRequestCreate
  fullName: System.Net.IWebRequestCreate
- uid: System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.UriFormatException
  isExternal: false
  name: UriFormatException
  fullName: System.UriFormatException
