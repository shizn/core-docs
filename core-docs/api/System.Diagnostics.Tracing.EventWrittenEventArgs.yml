items:
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs
  commentId: T:System.Diagnostics.Tracing.EventWrittenEventArgs
  id: EventWrittenEventArgs
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Channel
  - System.Diagnostics.Tracing.EventWrittenEventArgs.EventId
  - System.Diagnostics.Tracing.EventWrittenEventArgs.EventName
  - System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Level
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Message
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Payload
  - System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames
  - System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Tags
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Task
  - System.Diagnostics.Tracing.EventWrittenEventArgs.Version
  langs:
  - csharp
  - vb
  name: EventWrittenEventArgs
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventWrittenEventArgs
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 260
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Provides data for the <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> callback.</p>\n"
  syntax:
    content: 'public class EventWrittenEventArgs : EventArgs'
    content.vb: >-
      Public Class EventWrittenEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId
  id: ActivityId
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: ActivityId
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ActivityId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 263
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets the activity ID on the thread that the event was written to. </p>\n"
  remarks: "\n<p>Retrieving the value of the <xref href=\"System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\" data-throw-if-not-resolved=\"false\"></xref> property accesses thread local storage. This has the following implications: </p>\n<ul><li>\n<p>The <xref href=\"System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\" data-throw-if-not-resolved=\"false\"></xref> field is valid only for the duration of the <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> callback. </p>\n</li><li>\n<p>If the activity ID is changed during the callback, the activity ID returned by the <xref href=\"System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\" data-throw-if-not-resolved=\"false\"></xref> property is invalid. </p>\n</li></ul>\n"
  syntax:
    content: public Guid ActivityId { get; }
    content.vb: Public ReadOnly Property ActivityId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>The activity ID on the thread that the event was written to. </p>\n"
  seealso:
  - type: System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId
    commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId
  - type: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
    commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Channel
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Channel
  id: Channel
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Channel
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Channel
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Channel
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 264
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the channel for the event.</p>\n"
  syntax:
    content: public EventChannel Channel { get; }
    content.vb: Public ReadOnly Property Channel As EventChannel
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventChannel
      description: "\n<p>The channel for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.EventId
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventId
  id: EventId
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: EventId
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.EventId
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 265
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the event identifier.</p>\n"
  syntax:
    content: public int EventId { get; }
    content.vb: Public ReadOnly Property EventId As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The event identifier.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.EventName
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventName
  id: EventName
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: EventName
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.EventName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventName
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 266
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the name of the event.</p>\n"
  syntax:
    content: public string EventName { get; }
    content.vb: Public ReadOnly Property EventName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource
  id: EventSource
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventSource
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 267
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the event source object.</p>\n"
  syntax:
    content: public EventSource EventSource { get; }
    content.vb: Public ReadOnly Property EventSource As EventSource
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords
  id: Keywords
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Keywords
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keywords
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 268
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the keywords for the event.</p>\n"
  syntax:
    content: public EventKeywords Keywords { get; }
    content.vb: Public ReadOnly Property Keywords As EventKeywords
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keywords for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Level
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Level
  id: Level
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Level
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Level
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Level
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 269
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the level of the event.</p>\n"
  syntax:
    content: public EventLevel Level { get; }
    content.vb: Public ReadOnly Property Level As EventLevel
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Message
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Message
  id: Message
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Message
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 270
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the message for the event.</p>\n"
  syntax:
    content: public string Message { get; }
    content.vb: Public ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The message for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode
  id: Opcode
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Opcode
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Opcode
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 271
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the operation code for the event.</p>\n"
  syntax:
    content: public EventOpcode Opcode { get; }
    content.vb: Public ReadOnly Property Opcode As EventOpcode
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventOpcode
      description: "\n<p>The operation code for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Payload
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Payload
  id: Payload
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Payload
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Payload
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Payload
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 272
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the payload for the event.</p>\n"
  syntax:
    content: public Collections.ObjectModel.ReadOnlyCollection<object> Payload { get; }
    content.vb: Public ReadOnly Property Payload As Collections.ObjectModel.ReadOnlyCollection(Of Object)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Object}
      description: "\n<p>The payload for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames
  id: PayloadNames
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: PayloadNames
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PayloadNames
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 273
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Returns a list of strings that represent the property names of the event.</p>\n"
  syntax:
    content: public Collections.ObjectModel.ReadOnlyCollection<string> PayloadNames { get; }
    content.vb: Public ReadOnly Property PayloadNames As Collections.ObjectModel.ReadOnlyCollection(Of String)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "\n<p>Returns <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId
  id: RelatedActivityId
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: RelatedActivityId
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RelatedActivityId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 274
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets the identifier of an activity that is related to the activity represented by the current instance. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\" data-throw-if-not-resolved=\"false\"></xref> is a child of the <xref href=\"System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\" data-throw-if-not-resolved=\"false\"></xref> property. An activity ID can be associated with multiple related activity IDs. </p>\n"
  syntax:
    content: public Guid RelatedActivityId { get; }
    content.vb: Public ReadOnly Property RelatedActivityId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>The identifier of the related activity, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> if there is no related activity.</p>\n"
  seealso:
  - type: System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId
    commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId
  - type: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
    commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Tags
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Tags
  id: Tags
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Tags
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Tags
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tags
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 275
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Returns the tags specified in the call to the <xref href=\"System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public EventTags Tags { get; }
    content.vb: Public ReadOnly Property Tags As EventTags
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventTags
      description: "\n<p>Returns <xref href=\"System.Diagnostics.Tracing.EventTags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Task
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Task
  id: Task
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Task
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Task
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Task
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 276
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the task for the event.</p>\n"
  syntax:
    content: public EventTask Task { get; }
    content.vb: Public ReadOnly Property Task As EventTask
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventTask
      description: "\n<p>The task for the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Version
  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Version
  id: Version
  parent: System.Diagnostics.Tracing.EventWrittenEventArgs
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Version
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Version
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 277
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the version of the event.</p>\n"
  syntax:
    content: public byte Version { get; }
    content.vb: Public ReadOnly Property Version As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>The version of the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Diagnostics.Tracing.EventChannel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventChannel
  fullName: System.Diagnostics.Tracing.EventChannel
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventOpcode
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventOpcode
  fullName: System.Diagnostics.Tracing.EventOpcode
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Object}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<Object>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Object>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Object)
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Diagnostics.Tracing.EventTags
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventTags
  fullName: System.Diagnostics.Tracing.EventTags
- uid: System.Diagnostics.Tracing.EventTask
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventTask
  fullName: System.Diagnostics.Tracing.EventTask
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
