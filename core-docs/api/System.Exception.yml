items:
- uid: System.Exception
  commentId: T:System.Exception
  id: Exception
  parent: System
  children:
  - System.Exception.#ctor
  - System.Exception.#ctor(System.String)
  - System.Exception.#ctor(System.String,System.Exception)
  - System.Exception.Data
  - System.Exception.GetBaseException
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.ToString
  langs:
  - csharp
  - vb
  name: Exception
  fullName: System.Exception
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exception
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 836
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents errors that occur during application execution.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p></p>\n<p>This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error. After an exception is thrown, it is handled by the application or by the default exception handler.</p>\n<p>In this section:</p>\n<p>Errors and exceptionsTry/catch blocksException type featuresException class propertiesPerformance considerationsRe-throwing an exceptionChoosing standard exceptionsImplementing custom exceptions</p>\n"
  example:
  - <p>The following example demonstrates a <strong>catch</strong> block that is defined to handle <xref href="System.ArithmeticException" data-throw-if-not-resolved="false"></xref> errors. This <strong>catch</strong> block also catches <xref href="System.DivideByZeroException" data-throw-if-not-resolved="false"></xref> errors, because <xref href="System.DivideByZeroException" data-throw-if-not-resolved="false"></xref> derives from <xref href="System.ArithmeticException" data-throw-if-not-resolved="false"></xref> and there is no <strong>catch</strong> block explicitly defined for <xref href="System.DivideByZeroException" data-throw-if-not-resolved="false"></xref> errors.</p>CatchException#1
  syntax:
    content: public class Exception
    content.vb: Public Class Exception
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Exception.#ctor
  commentId: M:System.Exception.#ctor
  id: '#ctor'
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: Exception()
  fullName: System.Exception.Exception()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 838
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</p>\n<p>All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A system-supplied localized description. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example derives an <strong>Exception</strong> that uses a predefined message. The code demonstrates the use of the parameterless constructor for the derived class and the base <strong>Exception</strong> class.</p>System.Exception.Ctor#1"
  syntax:
    content: public Exception()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Exception.#ctor(System.String)
  commentId: M:System.Exception.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: Exception(String)
  fullName: System.Exception.Exception(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 839
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance by using the <em>message</em> parameter. If the <em>message</em> parameter is <strong>null</strong>, this is the same as calling the <xref href=\"System.Exception.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example derives an <strong>Exception</strong> for a specific condition. The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base <strong>Exception</strong> class.</p>System.Exception.Ctor#2"
  syntax:
    content: public Exception(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that describes the error. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Exception.#ctor(System.String,System.Exception)
  commentId: M:System.Exception.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: Exception(String, Exception)
  fullName: System.Exception.Exception(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 840
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or a null reference (<strong>Nothing</strong> in Visual Basic) if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example derives an <strong>Exception</strong> for a specific condition. The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base <strong>Exception</strong> class.</p>System.Exception.Ctor#3"
  syntax:
    content: public Exception(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception, or a null reference (<strong>Nothing</strong> in Visual Basic) if no inner exception is specified. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Exception.Data
  commentId: P:System.Exception.Data
  id: Data
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: Data
  fullName: System.Exception.Data
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Data
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 841
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Exception.Data\" data-throw-if-not-resolved=\"false\"></xref> property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object. </p>\n"
  example:
  - <p>The following example demonstrates how to add and retrieve information using the <xref href="System.Exception.Data" data-throw-if-not-resolved="false"></xref> property.</p>exception.data#1
  syntax:
    content: public virtual IDictionary Data { get; }
    content.vb: Public Overridable ReadOnly Property Data As IDictionary
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: "\n<p>An object that implements the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</p>\n"
  seealso:
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Exception.HelpLink
  commentId: P:System.Exception.HelpLink
  id: HelpLink
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: HelpLink
  fullName: System.Exception.HelpLink
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HelpLink
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 842
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets a link to the help file associated with this exception.</p>\n"
  remarks: "\n<p>The return value, which represents a help file, is a URN or URL. For example, the <strong>HelpLink</strong> value could be: </p>\n<p>\"file:///C:/Applications/Bazzal/help.html#ErrorNum42\" </p>\n"
  example:
  - "\n<p>The following code example throws an <strong>Exception</strong> that sets the <strong>HelpLink</strong> property in its constructor and then catches the exception and displays <strong>HelpLink</strong>.</p>System.Exception.Properties#1"
  syntax:
    content: public virtual string HelpLink { get; set; }
    content.vb: Public Overridable Property HelpLink As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Exception.HResult
  commentId: P:System.Exception.HResult
  id: HResult
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: HResult
  fullName: System.Exception.HResult
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HResult
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 843
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</p>\n"
  remarks: "\n<p>HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code. The severity code indicates whether the return value represents information, warning, or error. The facility code identifies the area of the system responsible for the error. The error code is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to the COM client. When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime. For information about HRESULT values and their corresponding .NET Framework exceptions, see How to: Map HRESULTs and Exceptions. See <see href=\"http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx\">Common HRESULT Values</see> in the Windows documentation for a list of the values you are most likely to encounter. </p>\n<p>Starting with the .NET Framework 4.5, the <xref href=\"System.Exception.HResult\" data-throw-if-not-resolved=\"false\"></xref> property's setter is protected, whereas its getter is public.  In previous versions of the .NET Framework, both getter and setter are protected. </p>\n"
  example:
  - "\n<p>The following code example defines a derived <strong>Exception</strong> class that sets the <strong>HResult</strong> property to a custom value in its constructor.</p>System.Exception.HResult#1"
  syntax:
    content: public int HResult { get; protected set; }
    content.vb: Public Property HResult As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The HRESULT value.</p>\n"
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: System.Exception.InnerException
  commentId: P:System.Exception.InnerException
  id: InnerException
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: InnerException
  fullName: System.Exception.InnerException
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerException
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 844
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instance that caused the current exception.</p>\n"
  remarks: "\n<p>When an exception <em>X</em> is thrown as a direct result of a previous exception <em>Y</em>, the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property of <em>X</em> should contain a reference to <em>Y</em>.</p>\n<p>Use the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the set of exceptions that led to the current exception.</p>\n<p>You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</p>\n<p>Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. The function catches the <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> and throws a <xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> could be saved in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>, enabling the code that catches the <xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> to examine the cause of the initial error.</p>\n<p>The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</p>\n"
  example:
  - "\n<p>The following example demonstrates throwing and catching an exception that references an inner exception.</p>InnerEx#1"
  syntax:
    content: public Exception InnerException { get; }
    content.vb: Public ReadOnly Property InnerException As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>An object that describes the error that caused the current exception. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value as was passed into the <xref href=\"System.Exception.#ctor(System.String,System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> constructor, or <strong>null</strong> if the inner exception value was not supplied to the constructor. This property is read-only.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Exception.Message
  commentId: P:System.Exception.Message
  id: Message
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.Exception.Message
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 845
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a message that describes the current exception.</p>\n"
  remarks: "\n<p>Error messages target the developer who is handling the exception. The text of the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property should completely describe the error and, when possible, should also explain how to correct the error. Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period. Do not use question marks or exclamation points. If your application uses localized exception messages, you should ensure that they are accurately translated. </p>\n<p>Do not disclose sensitive information in exception messages without checking for the appropriate permissions. </p>\n<p>The value of the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property is included in the information returned by <xref href=\"System.Exception.ToString\" data-throw-if-not-resolved=\"false\"></xref>.The <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property is set only when creating an <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</p>\n"
  example:
  - <p>The following code example throws and then catches an <xref href="System.Exception" data-throw-if-not-resolved="false"></xref>Exception and displays the exception's text message using the <xref href="System.Exception.Message" data-throw-if-not-resolved="false"></xref> property.</p>System.Exception.Properties#1
  syntax:
    content: public virtual string Message { get; }
    content.vb: Public Overridable ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception, or an empty string (\"\").</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Exception.Source
  commentId: P:System.Exception.Source
  id: Source
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: Source
  fullName: System.Exception.Source
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Source
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 846
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets the name of the application or the object that causes the error.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Exception.Source\" data-throw-if-not-resolved=\"false\"></xref> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</p>\n"
  example:
  - "\n<p>The following example throws an <strong>Exception</strong> that sets the <strong>Source</strong> property in its constructor and then catches the exception and displays <strong>Source</strong>.</p>System.Exception.Properties#1"
  syntax:
    content: public virtual string Source { get; set; }
    content.vb: Public Overridable Property Source As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the application or the object that causes the error.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The object must be a runtime <xref href=\"System.Reflection\" data-throw-if-not-resolved=\"false\"></xref> object</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Exception.StackTrace
  commentId: P:System.Exception.StackTrace
  id: StackTrace
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: StackTrace
  fullName: System.Exception.StackTrace
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StackTrace
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 847
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a string representation of the immediate frames on the call stack.</p>\n"
  remarks: "\n<p>The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</p>\n<p>The <xref href=\"System.Exception.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> property returns the frames of the call stack that originate at the location where the exception was thrown. You can obtain information about additional frames in the call stack by creating a new instance of the <xref href=\"System.Diagnostics.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> class and using its <xref href=\"System.Diagnostics.StackTrace.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the <strong>throw</strong> keyword). If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown. If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</p>\n<p>The <xref href=\"System.Exception.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</p>\n"
  example:
  - "\n<p>The following code example throws an <strong>Exception</strong> and then catches it and displays a stack trace using the <strong>StackTrace</strong> property.</p>System.Exception.Properties#1"
  syntax:
    content: public virtual string StackTrace { get; }
    content.vb: Public Overridable ReadOnly Property StackTrace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string that describes the immediate frames of the call stack.</p>\n"
  seealso:
  - type: System.Environment.StackTrace
    commentId: P:System.Environment.StackTrace
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Exception.GetBaseException
  commentId: M:System.Exception.GetBaseException
  id: GetBaseException
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBaseException
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 848
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>When overridden in a derived class, returns the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> that is the root cause of one or more subsequent exceptions.</p>\n"
  remarks: "\n<p>A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its <strong>InnerException</strong> property. For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain. This exception is called the base exception and its <strong>InnerException</strong> property always contains a null reference.</p>\n<p>For all exceptions in a chain of exceptions, the <strong>GetBaseException</strong> method must return the same object (the base exception).</p>\n<p>Use the <strong>GetBaseException</strong> method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</p>\n"
  example:
  - "\n<p>The following code example defines two derived <strong>Exception</strong> classes. It forces an exception and then throws it again with each of the derived classes. The code shows the use of the <strong>GetBaseException</strong> method to retrieve the original exception.</p>System.Exception.GetBaseException#1"
  syntax:
    content: public virtual Exception GetBaseException()
    content.vb: Public Overridable Function GetBaseException As Exception
    return:
      type: System.Exception
      description: "\n<p>The first exception thrown in a chain of exceptions. If the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property of the current exception is a null reference (<strong>Nothing</strong> in Visual Basic), this property returns the current exception.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Exception.ToString
  commentId: M:System.Exception.ToString
  id: ToString
  parent: System.Exception
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Exception.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 849
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates and returns a string representation of the current exception.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Exception.ToString\" data-throw-if-not-resolved=\"false\"></xref> returns a representation of the current exception that is intended to be understood by humans. Where the exception contains culture-sensitive data, the string representation returned by <strong>ToString</strong> is required to take into account the current system culture. Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</p>\n<p>The default implementation of <xref href=\"System.Exception.ToString\" data-throw-if-not-resolved=\"false\"></xref> obtains the name of the class that threw the current exception, the message, the result of calling <xref href=\"System.Exception.ToString\" data-throw-if-not-resolved=\"false\"></xref> on the inner exception, and the result of calling <xref href=\"System.Environment.StackTrace\" data-throw-if-not-resolved=\"false\"></xref>. If any of these members is <strong>null</strong>, its value is not included in the returned string.</p>\n<p>If there is no error message or if it is an empty string (\"\"), then no error message is returned. The name of the inner exception and the stack trace are returned only if they are not <strong>null</strong>.</p>\n<p>This method overrides <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example causes an exception and displays the result of calling <xref href=\"System.Exception.ToString\" data-throw-if-not-resolved=\"false\"></xref> on that exception. Note that the <xref href=\"System.Exception.ToString\" data-throw-if-not-resolved=\"false\"></xref> method is called implicitly when the Exception class instance appears in the argument list of the <xref href=\"System.Console.WriteLine(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Exception.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string representation of the current exception.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
