items:
- uid: System.Collections.ReadOnlyCollectionBase
  commentId: T:System.Collections.ReadOnlyCollectionBase
  id: ReadOnlyCollectionBase
  parent: System.Collections
  children:
  - System.Collections.ReadOnlyCollectionBase.#ctor
  - System.Collections.ReadOnlyCollectionBase.Count
  - System.Collections.ReadOnlyCollectionBase.GetEnumerator
  - System.Collections.ReadOnlyCollectionBase.InnerList
  langs:
  - csharp
  - vb
  name: ReadOnlyCollectionBase
  fullName: System.Collections.ReadOnlyCollectionBase
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOnlyCollectionBase
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 17
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Provides the <strong>abstract</strong> base class for a strongly typed non-generic read-only collection.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance is always read-only. See <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> for a modifiable version of this class.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.ReadOnlyCollectionBase#1"
  syntax:
    content: 'public abstract class ReadOnlyCollectionBase : ICollection'
    content.vb: >-
      Public MustInherit Class ReadOnlyCollectionBase
          Inherits ICollection
  seealso:
  - type: System.Collections.ArrayList
    commentId: T:System.Collections.ArrayList
  - type: System.Collections.CollectionBase
    commentId: T:System.Collections.CollectionBase
  - type: System.Collections.Generic
    commentId: N:System.Collections.Generic
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  commentId: M:System.Collections.ReadOnlyCollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  - vb
  name: ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 201
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: protected ReadOnlyCollectionBase()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.ReadOnlyCollectionBase.Count
  commentId: P:System.Collections.ReadOnlyCollectionBase.Count
  id: Count
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 31
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.ReadOnlyCollectionBase#1"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  commentId: P:System.Collections.ReadOnlyCollectionBase.InnerList
  id: InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  - vb
  name: InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerList
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 21
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the list of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.ReadOnlyCollectionBase#1"
  syntax:
    content: protected ArrayList InnerList { get; }
    content.vb: Protected ReadOnly Property InnerList As ArrayList
    parameters: []
    return:
      type: System.Collections.ArrayList
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  commentId: M:System.Collections.ReadOnlyCollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 51
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.ReadOnlyCollectionBase#1"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
