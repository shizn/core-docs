items:
- uid: System.Net.NetworkInformation.IPAddressCollection
  commentId: T:System.Net.NetworkInformation.IPAddressCollection
  id: IPAddressCollection
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.IPAddressCollection.#ctor
  - System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)
  - System.Net.NetworkInformation.IPAddressCollection.Clear
  - System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)
  - System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)
  - System.Net.NetworkInformation.IPAddressCollection.Count
  - System.Net.NetworkInformation.IPAddressCollection.GetEnumerator
  - System.Net.NetworkInformation.IPAddressCollection.IsReadOnly
  - System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)
  - System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)
  - System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: IPAddressCollection
  fullName: System.Net.NetworkInformation.IPAddressCollection
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPAddressCollection
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 259
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Stores a set of <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> types.</p>\n"
  syntax:
    content: 'public class IPAddressCollection : ICollection<IPAddress>, IEnumerable<IPAddress>, IEnumerable'
    content.vb: >-
      Public Class IPAddressCollection
          Implements ICollection(Of IPAddress), IEnumerable(Of IPAddress), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}
  - System.Collections.Generic.IEnumerable{System.Net.IPAddress}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.NetworkInformation.IPAddressCollection.#ctor
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: IPAddressCollection()
  fullName: System.Net.NetworkInformation.IPAddressCollection.IPAddressCollection()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 261
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected IPAddressCollection()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.IPAddressCollection.Count
  commentId: P:System.Net.NetworkInformation.IPAddressCollection.Count
  id: Count
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Net.NetworkInformation.IPAddressCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 262
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> types in this collection.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value that contains the number of <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> types in this collection.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.NetworkInformation.IPAddressCollection.IsReadOnly
  commentId: P:System.Net.NetworkInformation.IPAddressCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Net.NetworkInformation.IPAddressCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 263
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that indicates whether access to this collection is read-only.</p>\n"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> in all cases.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)
  commentId: P:System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Net.NetworkInformation.IPAddressCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 264
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> at the specific index of the collection.</p>\n"
  example:
  - 
  syntax:
    content: public virtual IPAddress this[int index] { get; }
    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As IPAddress
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of interest.</p>\n"
    return:
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> at the specific index in the collection.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)
  id: Add(System.Net.IPAddress)
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: Add(IPAddress)
  fullName: System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 265
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> because this operation is not supported for this collection.</p>\n"
  syntax:
    content: public virtual void Add(IPAddress address)
    content.vb: Public Overridable Sub Add(address As IPAddress)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>The object to be added to the collection.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.Add(System.Net.IPAddress)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.NetworkInformation.IPAddressCollection.Clear
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.Clear
  id: Clear
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Net.NetworkInformation.IPAddressCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 266
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> because this operation is not supported for this collection.</p>\n"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.Clear
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)
  id: Contains(System.Net.IPAddress)
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: Contains(IPAddress)
  fullName: System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 267
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Checks whether the collection contains the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual bool Contains(IPAddress address)
    content.vb: Public Overridable Function Contains(address As IPAddress) As Boolean
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object to be searched in the collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object exists in the collection; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.Contains(System.Net.IPAddress)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)
  id: CopyTo(System.Net.IPAddress[],System.Int32)
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: CopyTo(IPAddress[], Int32)
  fullName: System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 268
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Copies the elements in this collection to a one-dimensional array of type <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The array parameter must be one-dimensional with zero-based indexing.</p>\n"
  syntax:
    content: public virtual void CopyTo(IPAddress[] array, int offset)
    content.vb: Public Overridable Sub CopyTo(array As IPAddress(), offset As Integer)
    parameters:
    - id: array
      type: System.Net.IPAddress[]
      description: "\n<p>A one-dimensional array that receives a copy of the collection.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which the copy begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<ul><li>\n<p>\n<em>array</em> is multidimensional.</p>\n</li></ul>\n<p>-or- </p>\n<p>The number of elements in this <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>offset</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The elements in this <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.CopyTo(System.Net.IPAddress[],System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress(), System.Int32)
  name.vb: CopyTo(IPAddress(), Int32)
- uid: System.Net.NetworkInformation.IPAddressCollection.GetEnumerator
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Net.NetworkInformation.IPAddressCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 269
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns an object that can be used to iterate through this collection.</p>\n"
  remarks: "\n<p>The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method before you can access the first element. To access the element at the current position, call the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> causes an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a detailed description of enumerators, see the documentation for the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class and the <xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual IEnumerator<IPAddress> GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator(Of IPAddress)
    return:
      type: System.Collections.Generic.IEnumerator{System.Net.IPAddress}
      description: "\n<p>An object that implements the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface and provides access to the <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> types in this collection.</p>\n"
  implements:
  - System.Collections.Generic.IEnumerable{System.Net.IPAddress}.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)
  id: Remove(System.Net.IPAddress)
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: Remove(IPAddress)
  fullName: System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 270
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> because this operation is not supported for this collection.</p>\n"
  syntax:
    content: public virtual bool Remove(IPAddress address)
    content.vb: Public Overridable Function Remove(address As IPAddress) As Boolean
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>The object to be removed.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Net.IPAddress}.Remove(System.Net.IPAddress)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Net.NetworkInformation.IPAddressCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Net.NetworkInformation.IPAddressCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 271
  assemblies:
  - System.Net.Primitives
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns an object that can be used to iterate through this collection.</p>\n"
  remarks: "\n<p>The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method before you can access the first element. To access the element at the current position, call the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> causes an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a detailed description of enumerators, see the documentation for the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class and the <xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An object that implements the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface and provides access to the <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> types in this collection.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IPAddress>
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress)
  name.vb: ICollection(Of IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Net.IPAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IPAddress>
  fullName: System.Collections.Generic.IEnumerable<System.Net.IPAddress>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Net.IPAddress)
  name.vb: IEnumerable(Of IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.Count
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.Add(System.Net.IPAddress)
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(IPAddress)
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Add(System.Net.IPAddress)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Add(System.Net.IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.Clear
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.Contains(System.Net.IPAddress)
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(IPAddress)
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Contains(System.Net.IPAddress)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Contains(System.Net.IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.CopyTo(System.Net.IPAddress[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(IPAddress[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.CopyTo(System.Net.IPAddress[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).CopyTo(System.Net.IPAddress(), System.Int32)
  name.vb: CopyTo(IPAddress(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.CopyTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Net.IPAddress).CopyTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.IPAddress[]
  isExternal: false
  name: IPAddress[]
  fullName: System.Net.IPAddress[]
  fullname.vb: System.Net.IPAddress()
  name.vb: IPAddress()
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Net.IPAddress}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Net.IPAddress}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Net.IPAddress>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Net.IPAddress).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Net.IPAddress>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Net.IPAddress).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Net.IPAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<IPAddress>
  fullName: System.Collections.Generic.IEnumerator<System.Net.IPAddress>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Net.IPAddress)
  name.vb: IEnumerator(Of IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Net.IPAddress}.Remove(System.Net.IPAddress)
  parent: System.Collections.Generic.ICollection{System.Net.IPAddress}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(IPAddress)
  fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Remove(System.Net.IPAddress)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Remove(System.Net.IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<System.Net.IPAddress>.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of System.Net.IPAddress).Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
