items:
- uid: System.Enum
  commentId: T:System.Enum
  id: Enum
  parent: System
  children:
  - System.Enum.#ctor
  - System.Enum.CompareTo(System.Object)
  - System.Enum.Equals(System.Object)
  - System.Enum.Format(System.Type,System.Object,System.String)
  - System.Enum.GetHashCode
  - System.Enum.GetName(System.Type,System.Object)
  - System.Enum.GetNames(System.Type)
  - System.Enum.GetUnderlyingType(System.Type)
  - System.Enum.GetValues(System.Type)
  - System.Enum.HasFlag(System.Enum)
  - System.Enum.IsDefined(System.Type,System.Object)
  - System.Enum.Parse(System.Type,System.String)
  - System.Enum.Parse(System.Type,System.String,System.Boolean)
  - System.Enum.System#IConvertible#GetTypeCode
  - System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToString(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Enum.ToObject(System.Type,System.Object)
  - System.Enum.ToString
  - System.Enum.ToString(System.String)
  - System.Enum.TryParse``1(System.String,``0@)
  - System.Enum.TryParse``1(System.String,System.Boolean,``0@)
  langs:
  - csharp
  - vb
  name: Enum
  fullName: System.Enum
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Enum
    path: src/mscorlib/src/System/Enum.cs
    startLine: 15
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides the base class for enumerations.</p>\n"
  remarks: "\n<p>An enumeration is a set of named constants whose underlying type is any integral type. If no underlying type is explicitly declared, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> is used. <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> is the base class for all enumerations in the .NET Framework. Enumeration types are defined by the <strong>enum</strong> keyword in C# and the <strong>Enum</strong>...<strong>End Enum</strong> construct in Visual Basic. </p>\n<p>\n<xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</p>\n<p>You can also treat an enumeration as a bit field. For more information, see the Non-Exclusive Members and the Flags Attribute section and the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> topic.</p>\n"
  example:
  - <p>The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields. </p>enummain#1
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class Enum : ValueType, IComparable, IFormattable, IConvertible
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class Enum
          Inherits ValueType
          Implements IComparable, IFormattable, IConvertible
  seealso:
  - type: System.ValueType
    commentId: T:System.ValueType
  - type: System.FlagsAttribute
    commentId: T:System.FlagsAttribute
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IConvertible
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Enum.#ctor
  commentId: M:System.Enum.#ctor
  id: '#ctor'
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: Enum()
  fullName: System.Enum.Enum()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 790
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  example:
  - 
  syntax:
    content: protected Enum()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Enum.CompareTo(System.Object)
  commentId: M:System.Enum.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  fullName: System.Enum.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Enum.cs
    startLine: 809
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>CompareTo</strong> in the context of <strong>Enum</strong>. </p>enumcompareto#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int CompareTo(object target)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function CompareTo(target As Object) As Integer
    parameters:
    - id: target
      type: System.Object
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>target</em> and this instance are not the same type. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This instance is not type <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.Equals(System.Object)
    commentId: M:System.Enum.Equals(System.Object)
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Enum.Equals(System.Object)
  commentId: M:System.Enum.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Enum.Equals(System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Enum.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method overrides <xref href=\"System.ValueType.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to define how enumeration members are evaluated for equality. </p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Enum.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>enumequals#1"
  - "\n<p>The following example defines two enumeration types, <code>SledDog</code> and <code>WorkDog</code>. The <code>SledDog</code> enumeration has two members, <code>SledDog.AlaskanMalamute</code> and <code>SledDog.Malamute</code>, that have the same underlying value. The call to the <xref href=\"System.Enum.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method indicates that these values are equal because their underlying values are the same. The <code>SledDog.Malamute</code> and <code>WorkDog.Newfoundland</code> members have the same underlying value, although they represent different enumeration types. A call to the <xref href=\"System.Enum.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method indicates that these values are not equal. </p>System.Enum.Equals#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public override bool Equals(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - type: System.Enum.CompareTo(System.Object)
    commentId: M:System.Enum.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Enum.Format(System.Type,System.Object,System.String)
  commentId: M:System.Enum.Format(System.Type,System.Object,System.String)
  id: Format(System.Type,System.Object,System.String)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: Format(Type, Object, String)
  fullName: System.Enum.Format(System.Type, System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/Enum.cs
    startLine: 602
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</p>\n"
  remarks: "\n<p>The following table shows the valid values for the <em>format</em> parameter. </p>\n<p>Format </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>\"G\" or \"g\" </p>\n</td><td>\n<p>If <em>value</em> is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of <em>value</em> is returned.</p>\n<p>For example, suppose the only enumerated constant is named Red, and its value is 1. If <em>value</em> is specified as 1, this format returns \"Red\". However, if <em>value</em> is specified as 2, this format returns \"2\".</p>\n<p>-or- </p>\n<p>If the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> custom attribute is applied to the enumeration, <em>value</em> is treated as a bit field that contains one or more flags that consist of one or more bits.</p>\n<p>If <em>value</em> is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned. <em>value</em> is searched for flags, going from the flag with the largest value to the smallest value. For each flag that corresponds to a bit field in <em>value</em>, the name of the constant is concatenated to the delimiter-separated list. The value of that flag is then excluded from further consideration, and the search continues for the next flag.</p>\n<p>If <em>value</em> is not equal to a combination of named enumerated constants, the decimal equivalent of <em>value</em> is returned. </p>\n</td></tr><tr><td>\n<p>\"X\" or \"x\" </p>\n</td><td>\n<p>Represents <em>value</em> in hexadecimal format without a leading \"0x\". </p>\n</td></tr><tr><td>\n<p>\"D\" or \"d\" </p>\n</td><td>\n<p>Represents <em>value</em> in decimal form. </p>\n</td></tr><tr><td>\n<p>\"F\" or \"f\" </p>\n</td><td>\n<p>Behaves identically to \"G\" or \"g\", except that the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> is not required to be present on the <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> declaration. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>Format</strong> in the context of <strong>Enum</strong>. </p>enumformat#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static string Format(Type enumType, object value, string format)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Format(enumType As Type, value As Object, format As String) As String
    parameters:
    - id: enumType
      type: System.Type
    - id: value
      type: System.Object
    - id: format
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>enumType</em>, <em>value</em>, or <em>format</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>enumType</em> parameter is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n<p>-or- </p>\n<p>The <em>value</em> is from an enumeration that differs in type from <em>enumType</em>.</p>\n<p>-or- </p>\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The <em>format</em> parameter contains an invalid value. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>format</em> equals \"X\", but the enumeration type is unknown.</p>\n"
  seealso:
  - type: System.Enum.ToString(System.String)
    commentId: M:System.Enum.ToString(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.GetHashCode
  commentId: M:System.Enum.GetHashCode
  id: GetHashCode
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Enum.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Enum.cs
    startLine: 744
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for the value of this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Enum.GetName(System.Type,System.Object)
  commentId: M:System.Enum.GetName(System.Type,System.Object)
  id: GetName(System.Type,System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: GetName(Type, Object)
  fullName: System.Enum.GetName(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetName
    path: src/mscorlib/src/System/Enum.cs
    startLine: 516
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the name of the constant in the specified enumeration that has the specified value.</p>\n"
  remarks: "\n<p>If multiple enumeration members have the same underlying value, the <xref href=\"System.Enum.GetName(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method guarantees that it will return the name of one of those enumeration members. However, it does not guarantee that it will always return the name of the same enumeration member. As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>GetName</strong>. </p>enumgetname#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static string GetName(Type enumType, object value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetName(enumType As Type, value As Object) As String
    parameters:
    - id: enumType
      type: System.Type
    - id: value
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is neither of type <em>enumType</em> nor does it have the same underlying type as <em>enumType</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.GetNames(System.Type)
  commentId: M:System.Enum.GetNames(System.Type)
  id: GetNames(System.Type)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: GetNames(Type)
  fullName: System.Enum.GetNames(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNames
    path: src/mscorlib/src/System/Enum.cs
    startLine: 526
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves an array of the names of the constants in a specified enumeration.</p>\n"
  remarks: "\n<p>The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude). The following example provides displays information about the array returned by the <xref href=\"System.Enum.GetNames(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method for an enumeration that includes a negative, zero, and a positive value. </p>System.Enum.GetNames#1<p>If there are enumerated constants with same value, the order of their corresponding names is unspecified.</p>"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Enum.GetNames(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>enumgetnames#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static string[] GetNames(Type enumType)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetNames(enumType As Type) As String()
    parameters:
    - id: enumType
      type: System.Type
    return:
      type: System.String[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> parameter is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.GetUnderlyingType(System.Type)
  commentId: M:System.Enum.GetUnderlyingType(System.Type)
  id: GetUnderlyingType(System.Type)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: GetUnderlyingType(Type)
  fullName: System.Enum.GetUnderlyingType(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnderlyingType
    path: src/mscorlib/src/System/Enum.cs
    startLine: 488
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the underlying type of the specified enumeration.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> structure enables values to be represented as named constants. The data type of the enumeration's values is known as its underlying type. For example, the underlying type of the <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> enumeration, which consists of constants that represent each day of the week (<xref href=\"System.DayOfWeek.Monday\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.DayOfWeek.Tuesday\" data-throw-if-not-resolved=\"false\"></xref>, and so on), is <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Enum.GetUnderlyingType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to display the underlying type of some enumeration members.</p>System.Enum.GetUnderlyingType#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static Type GetUnderlyingType(Type enumType)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetUnderlyingType(enumType As Type) As Type
    parameters:
    - id: enumType
      type: System.Type
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.GetTypeCode
    commentId: M:System.Enum.GetTypeCode
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.GetValues(System.Type)
  commentId: M:System.Enum.GetValues(System.Type)
  id: GetValues(System.Type)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: GetValues(Type)
  fullName: System.Enum.GetValues(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValues
    path: src/mscorlib/src/System/Enum.cs
    startLine: 499
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves an array of the values of the constants in a specified enumeration.</p>\n"
  remarks: "\n<p>The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude). The following example displays information about the array returned by the <xref href=\"System.Enum.GetValues(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method for an enumeration that includes a negative value, zero, and a positive value.</p>System.Enum.GetValues#1<p>The <xref href=\"System.Enum.GetValues(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns an array that contains a value for each member of the <em>enumType</em> enumeration. If multiple members have the same value, the returned array includes duplicate values. In this case, calling the <xref href=\"System.Enum.GetName(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values. To retrieve all the names of enumeration members successfully, call the <xref href=\"System.Enum.GetNames(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. </p><p>The<xref href=\"System.Enum.GetValues(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method cannot be invoked by using reflection in a reflection-only context. Instead, you can retrieve the value of all enumeration members by using the <xref href=\"System.Type.GetFields\" data-throw-if-not-resolved=\"false\"></xref> method to get an array of <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent enumeration members and then call the <xref href=\"System.Reflection.FieldInfo.GetRawConstantValue\" data-throw-if-not-resolved=\"false\"></xref> method on each element of the array. The following example illustrates this technique. It requires that you define the following enumeration in an assembly named Enumerations.dll:</p>System.Enum.GetValues#2<p>The assembly is loaded in a reflection-only context, a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <code>Pets</code> enumeration is instantiated, an array of <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects is retrieved, and the field values are displayed to the console.</p>System.Enum.GetValues#3"
  example:
  - "\n<p>The following example illustrates the use of <xref href=\"System.Enum.GetValues(System.Type)\" data-throw-if-not-resolved=\"false\"></xref>. </p>enumgetvalues#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static Array GetValues(Type enumType)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetValues(enumType As Type) As Array
    parameters:
    - id: enumType
      type: System.Type
    return:
      type: System.Array
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method is invoked by reflection in a reflection-only context, </p>\n<p>-or-</p>\n<p>\n<em>enumType</em> is a type from an assembly loaded in a reflection-only context.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.HasFlag(System.Enum)
  commentId: M:System.Enum.HasFlag(System.Enum)
  id: HasFlag(System.Enum)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: HasFlag(Enum)
  fullName: System.Enum.HasFlag(System.Enum)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasFlag
    path: src/mscorlib/src/System/Enum.cs
    startLine: 870
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether one or more bit fields are set in the current instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Enum.HasFlag(System.Enum)\" data-throw-if-not-resolved=\"false\"></xref> method returns the result of the following Boolean expression.</p>\n<pre><code>thisInstance And flag = flag </code></pre>\n<p>If the underlying value of <em>flag</em> is zero, the method returns <strong>true</strong>. If this behavior is not desirable, you can use the <xref href=\"System.Enum.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to test for equality with zero and call <xref href=\"System.Enum.HasFlag(System.Enum)\" data-throw-if-not-resolved=\"false\"></xref> only if the underlying value of <em>flag</em> is non-zero, as the following example illustrates.</p>System.Enum.HasFlag#1<p>The <xref href=\"System.Enum.HasFlag(System.Enum)\" data-throw-if-not-resolved=\"false\"></xref> method is designed to be used with enumeration types that are marked with the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute and can be used to determine whether multiple bit fields are set. For enumeration types that are not marked with the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute, call either the <xref href=\"System.Enum.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Enum.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>"
  example:
  - "\n<p>The following example defines an <code>ItemsOrdered</code> enumeration that reflects categories of items that a customer can order in a restaurant. The example tests whether the customer has ordered both an entrée and a beverage.</p>System.Enum.HasFlag#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public bool HasFlag(Enum flag)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function HasFlag(flag As  Enum) As Boolean
    parameters:
    - id: flag
      type: System.Enum
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>flag</em> is a different type than the current instance.</p>\n"
  seealso:
  - type: System.FlagsAttribute
    commentId: T:System.FlagsAttribute
  - type: System.Enum.Equals(System.Object)
    commentId: M:System.Enum.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Enum.IsDefined(System.Type,System.Object)
  commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  id: IsDefined(System.Type,System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IsDefined(Type, Object)
  fullName: System.Enum.IsDefined(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDefined
    path: src/mscorlib/src/System/Enum.cs
    startLine: 591
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an indication whether a constant with a specified value exists in a specified enumeration.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter can be any of the following:</p>\n<ul><li>\n<p>Any member of type <em>enumType</em>.</p>\n</li><li>\n<p>A variable whose value is an enumeration member of type <em>enumType</em>.</p>\n</li><li>\n<p>The string representation of the name of an enumeration member. The characters in the string must have the same case as the enumeration member name.</p>\n</li><li>\n<p>A value of the underlying type of <em>enumType</em>.</p>\n</li></ul>\n<p>If the constants in <em>enumType</em> define a set of bit fields and <em>value</em> contains the values, names, or underlying values of multiple bit fields, the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong>. In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration. To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute, you can call the <xref href=\"System.Enum.HasFlag(System.Enum)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example defines an enumeration named <code>PetType</code> that consists of individual bit fields. It then calls the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</p>System.Enum.IsDefined#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static bool IsDefined(Type enumType, object value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function IsDefined(enumType As Type, value As Object) As Boolean
    parameters:
    - id: enumType
      type: System.Type
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <strong>Enum</strong>.</p>\n<p>-or- </p>\n<p>The type of <em>value</em> is an enumeration, but it is not an enumeration of type <em>enumType</em>.</p>\n<p>-or- </p>\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>value</em> is not type <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.GetName(System.Type,System.Object)
    commentId: M:System.Enum.GetName(System.Type,System.Object)
  - type: System.Enum.GetNames(System.Type)
    commentId: M:System.Enum.GetNames(System.Type)
  - type: System.Enum.GetValues(System.Type)
    commentId: M:System.Enum.GetValues(System.Type)
  - type: System.Enum.HasFlag(System.Enum)
    commentId: M:System.Enum.HasFlag(System.Enum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.Parse(System.Type,System.String)
  commentId: M:System.Enum.Parse(System.Type,System.String)
  id: Parse(System.Type,System.String)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: Parse(Type, String)
  fullName: System.Enum.Parse(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 338
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank spaces can precede or follow each value, name, or comma in <em>value</em>. If <em>value</em> is a list, the return value is the value of the specified names combined with a bitwise <strong>OR</strong> operation.</p>\n<p>If <em>value</em> is a name that does not correspond to a named constant of <em>enumType</em>, the method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is the string representation of an integer that does not represent an underlying value of the <em>enumType</em> enumeration, the method returns an enumeration member whose underlying value is <em>value</em> converted to an integral type. If this behavior is undesirable, call the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that a particular string representation of an integer is actually a member of <em>enumType</em>. The following example defines a <code>Colors</code> enumeration, calls the <xref href=\"System.Enum.Parse(System.Type,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert strings to their corresponding enumeration values, and calls the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration.</p>System.Enum.Parse#1<p>This operation is case-sensitive.</p>"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Enum.Parse(System.Type,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to parse an array of strings that are created by calling the <xref href=\"System.Enum.GetNames(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. It also uses the <xref href=\"System.Enum.Parse(System.Type,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to parse an enumeration value that consists of a bit field.</p>enumparse#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public static object Parse(Type enumType, string value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Parse(enumType As Type, value As String) As Object
    parameters:
    - id: enumType
      type: System.Type
    - id: value
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is either an empty string or only contains white space.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is a name, but not one of the named constants defined for the enumeration. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\n"
  seealso:
  - type: System.Enum.IsDefined(System.Type,System.Object)
    commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.Parse(System.Type,System.String,System.Boolean)
  commentId: M:System.Enum.Parse(System.Type,System.String,System.Boolean)
  id: Parse(System.Type,System.String,System.Boolean)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: Parse(Type, String, Boolean)
  fullName: System.Enum.Parse(System.Type, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 344
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank spaces can precede or follow each value, name, or comma in <em>value</em>. If <em>value</em> is a list, the return value is the value of the specified names combined with a bitwise <strong>OR</strong> operation.</p>\n<p>If <em>value</em> is a name that does not correspond to a named constant of <em>enumType</em>, the method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is the string representation of an integer that does not represent an underlying value of the <em>enumType</em> enumeration, the method returns an enumeration member whose underlying value is <em>value</em> converted to an integral type. If this behavior is undesirable, call the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that a particular string representation of an integer is actually a member of <em>enumType</em>. The following example defines a <code>Colors</code> enumeration, calls the <xref href=\"System.Enum.Parse(System.Type,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to convert strings to their corresponding enumeration values, and calls the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration.</p>System.Enum.Parse#2<p>The <em>ignoreCase</em> parameter specifies whether this operation is case-sensitive.</p>"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Enum.Parse(System.Type,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to parse an array of strings that are created by calling the <xref href=\"System.Enum.GetNames(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. It also uses the <xref href=\"System.Enum.Parse(System.Type,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to parse an enumeration value that consists of a bit field. </p>System.Enum.Parse#2"
  syntax:
    content: >-
      [ComVisible(true)]

      public static object Parse(Type enumType, string value, bool ignoreCase)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Parse(enumType As Type, value As String, ignoreCase As Boolean) As Object
    parameters:
    - id: enumType
      type: System.Type
    - id: value
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is either an empty string (\"\") or only contains white space.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is a name, but not one of the named constants defined for the enumeration. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\n"
  seealso:
  - type: System.Enum.IsDefined(System.Type,System.Object)
    commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.System#IConvertible#GetTypeCode
  commentId: M:System.Enum.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.GetTypeCode()
  fullName: System.Enum.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 803
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
- uid: System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToBoolean
    path: src/mscorlib/src/System/Enum.cs
    startLine: 946
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a Boolean value based on the underlying type.</p>\n"
  remarks: "\n<p>Currently not implemented. Always throws an exception.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Boolean
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToByte(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToByte
    path: src/mscorlib/src/System/Enum.cs
    startLine: 964
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to an 8-bit unsigned integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Byte
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToChar(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToChar
    path: src/mscorlib/src/System/Enum.cs
    startLine: 952
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a Unicode character based on the underlying type.</p>\n"
  remarks: "\n<p>Currently not implemented. Always throws an exception.</p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Char
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDateTime
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1024
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> based on the underlying type.</p>\n"
  remarks: "\n<p>Currently not implemented. Always throws an exception.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.DateTime
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDecimal
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1018
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> based on the underlying type.</p>\n"
  remarks: "\n<p>Currently not implemented. Always throws an exception.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Decimal
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToDouble(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDouble
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1012
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a double-precision floating point number based on the underlying type.</p>\n"
  remarks: "\n<p>Currently not implemented. Always throws an exception.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Double
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt16(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt16
    path: src/mscorlib/src/System/Enum.cs
    startLine: 970
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 16-bit signed integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Int16
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt32(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt32
    path: src/mscorlib/src/System/Enum.cs
    startLine: 982
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 32-bit signed integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Int32
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt64(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt64
    path: src/mscorlib/src/System/Enum.cs
    startLine: 994
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 64-bit signed integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Int64
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToSByte(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSByte
    path: src/mscorlib/src/System/Enum.cs
    startLine: 958
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to an 8-bit signed integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.SByte
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToSingle(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSingle
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1006
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a single-precision floating-point number based on the underlying type.</p>\n"
  remarks: "\n<p>Currently not implemented. Always throws an exception.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Single
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToString(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)
  id: System#IConvertible#ToString(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToString(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 815
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [Obsolete("The provider argument is not used. Please use ToString().")]

      string IConvertible.ToString(IFormatProvider provider)
    content.vb: >-
      <Obsolete("The provider argument is not used. Please use ToString().")>

      Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The provider argument is not used. Please use ToString().
  name.vb: System.IConvertible.ToString(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToType(Type, IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToType
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1030
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a specified type based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.Object
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt16
    path: src/mscorlib/src/System/Enum.cs
    startLine: 976
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 16-bit unsigned integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.UInt16
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt32
    path: src/mscorlib/src/System/Enum.cs
    startLine: 988
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 32-bit unsigned integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.UInt32
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Enum.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt64
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1000
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 64-bit unsigned integer based on the underlying type.</p>\n"
  remarks: "\n<p>Uses <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> to perform the conversion.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.UInt64
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)
  commentId: M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: IFormattable.ToString(String, IFormatProvider)
  fullName: System.Enum.System.IFormattable.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IFormattable.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 821
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [Obsolete("The provider argument is not used. Please use ToString(String).")]

      string IFormattable.ToString(string format, IFormatProvider provider)
    content.vb: >-
      <Obsolete("The provider argument is not used. Please use ToString(String).")>

      Function System.IFormattable.ToString(format As String, provider As IFormatProvider) As String Implements IFormattable.ToString
    parameters:
    - id: format
      type: System.String
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The provider argument is not used. Please use ToString(String).
  name.vb: System.IFormattable.ToString(String, IFormatProvider)
- uid: System.Enum.ToObject(System.Type,System.Object)
  commentId: M:System.Enum.ToObject(System.Type,System.Object)
  id: ToObject(System.Type,System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: ToObject(Type, Object)
  fullName: System.Enum.ToObject(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToObject
    path: src/mscorlib/src/System/Enum.cs
    startLine: 543
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified object with an integer value to an enumeration member.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Enum.ToObject(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method converts the integral value <em>value</em> to an enumeration member whose underlying value is <em>value</em>. Note that the conversion succeeds even if value is outside the bounds of <em>enumType</em> members. To ensure that <em>value</em> is a valid underlying value of the <em>enumType</em> enumeration, pass it to the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This conversion method returns a value of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. You can then cast it or convert it to an object of type <em>enumType</em>.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static object ToObject(Type enumType, object value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function ToObject(enumType As Type, value As Object) As Object
    parameters:
    - id: enumType
      type: System.Type
    - id: value
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is not type <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.IsDefined(System.Type,System.Object)
    commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Enum.ToString
  commentId: M:System.Enum.ToString
  id: ToString
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Enum.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Enum.cs
    startLine: 789
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to its equivalent string representation.</p>\n"
  remarks: "\n<p>The return value is formatted with the general format specifier (\"G\"). That is, if the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant. If the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants. Otherwise, the return value is the string representation of the numeric value of this instance. For more information about formatting enumeration values, see Enumeration Format Strings. For more information about formatting in general, see Formatting Types in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following example demonstrates converting an enumerated value to a string.</p>Classic Enum.ToString2 Example#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  seealso:
  - type: System.Enum.Format(System.Type,System.Object,System.String)
    commentId: M:System.Enum.Format(System.Type,System.Object,System.String)
  - type: System.Enum.Parse(System.Type,System.String)
    commentId: M:System.Enum.Parse(System.Type,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Enum.ToString(System.String)
  commentId: M:System.Enum.ToString(System.String)
  id: ToString(System.String)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Enum.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Enum.cs
    startLine: 845
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to its equivalent string representation using the specified format.</p>\n"
  remarks: "\n<p>The <em>format</em> parameter can contain the \"G\" or \"g\", \"D\" or \"d\", \"X\" or \"x\", and \"F\" or \"f\" format strings (the format string is not case-sensitive). If <em>format</em> is <strong>null</strong> or an empty string (\"\"), the general format specifier (\"G\") is used. For more information about the enumeration format strings and formatting enumeration values, see Enumeration Format Strings. For more information about formatting in general, see Formatting Types in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to convert an enumerated value to a string.</p>enum.tostring#1"
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> contains an invalid specification. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>format</em> equals \"X\", but the enumeration type is unknown.</p>\n"
  seealso:
  - type: System.Enum.Format(System.Type,System.Object,System.String)
    commentId: M:System.Enum.Format(System.Type,System.Object,System.String)
  - type: System.Enum.Parse(System.Type,System.String)
    commentId: M:System.Enum.Parse(System.Type,System.String)
  - type: System.IFormattable.ToString(System.String,System.IFormatProvider)
    commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Enum.TryParse``1(System.String,``0@)
  commentId: M:System.Enum.TryParse``1(System.String,``0@)
  id: TryParse``1(System.String,``0@)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: TryParse<TEnum>(String, out TEnum)
  fullName: System.Enum.TryParse<TEnum>(System.String, out TEnum)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 322
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Enum.TryParse``1(System.String,``0@)\" data-throw-if-not-resolved=\"false\"></xref> is identical to the <xref href=\"System.Enum.Parse(System.Type,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except that instead of throwing an exception, it returns <strong>false</strong> if the conversion fails. It eliminates the need for exception handling when parsing the string representation of an enumeration value. </p>\n<p>The <em>value</em> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,). If <em>value</em> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <em>value</em>. If <em>value</em> is a list, <em>result</em> reflects the value of the specified names or underlying values combined with a bitwise <strong>OR</strong> operation. If <em>value</em> is the string representation of the name of an enumeration value, the comparison of <em>value</em> with enumeration names is case-sensitive.</p>\n<p>If <em>value</em> is a name that does not correspond to a named constant of <em>TEnum</em>, the method returns <strong>false</strong>. If <em>value</em> is the string representation of an integer that does not represent an underlying value of the <em>TEnum</em> enumeration, the method returns an enumeration member whose underlying value is <em>value</em> converted to an integral type. If this behavior is undesirable, call the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that a particular string representation of an integer is actually a member of <em>TEnum</em>.</p>\n"
  example:
  - "\n<p>The following example defines a <code>Colors</code> enumeration, calls the <xref href=\"System.Enum.TryParse``1(System.String,``0@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert strings to their corresponding enumeration values, and calls the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration.</p>System.Enum.TryParse#1"
  syntax:
    content: 'public static bool TryParse<TEnum>(string value, out TEnum result)where TEnum : struct'
    content.vb: Public Shared Function TryParse(Of TEnum As Structure)(value As String, ByRef result As TEnum) As Boolean
    parameters:
    - id: value
      type: System.String
    - id: result
      type: '{TEnum}'
    typeParameters:
    - id: TEnum
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>TEnum</em> is not an enumeration type.</p>\n"
  seealso:
  - type: System.Enum.Parse(System.Type,System.String)
    commentId: M:System.Enum.Parse(System.Type,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Enum.TryParse(Of TEnum)(System.String, ByRef TEnum)
  name.vb: TryParse(Of TEnum)(String, ByRef TEnum)
- uid: System.Enum.TryParse``1(System.String,System.Boolean,``0@)
  commentId: M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)
  id: TryParse``1(System.String,System.Boolean,``0@)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: TryParse<TEnum>(String, Boolean, out TEnum)
  fullName: System.Enum.TryParse<TEnum>(System.String, System.Boolean, out TEnum)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 327
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Enum.TryParse``1(System.String,System.Boolean,``0@)\" data-throw-if-not-resolved=\"false\"></xref> is identical to the <xref href=\"System.Enum.Parse(System.Type,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method, except that instead of throwing an exception, it returns <strong>false</strong> if the conversion fails. It eliminates the need for exception handling when parsing the string representation of an enumeration value. </p>\n<p>The <em>value</em> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,). If <em>value</em> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <em>value</em>. If <em>value</em> is a list, <em>result</em> reflects the value of the specified names or underlying values combined with a bitwise <strong>OR</strong> operation. If <em>value</em> is the string representation of the name of an enumeration value, the comparison of <em>value</em> with enumeration names depends on the <em>ignoreCase</em> parameter. If <strong>true</strong>, the comparison is case-insensitive; if <strong>false</strong>, it is case-sensitive.</p>\n<p>If <em>value</em> is a name that does not correspond to a named constant of <em>TEnum</em>, the method returns <strong>false</strong>. If <em>value</em> is the string representation of an integer that does not represent an underlying value of the <em>TEnum</em> enumeration, the method returns an enumeration member whose underlying value is <em>value</em> converted to an integral type. If this behavior is undesirable, call the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that a particular string representation of an integer is actually a member of <em>TEnum</em>.</p>\n"
  example:
  - "\n<p>The following example defines a <code>Colors</code> enumeration, calls the <xref href=\"System.Enum.TryParse``1(System.String,System.Boolean,``0@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert strings to their corresponding enumeration values, and calls the <xref href=\"System.Enum.IsDefined(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration. The <xref href=\"System.Enum.TryParse``1(System.String,System.Boolean,``0@)\" data-throw-if-not-resolved=\"false\"></xref> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</p>System.Enum.TryParse#2"
  syntax:
    content: 'public static bool TryParse<TEnum>(string value, bool ignoreCase, out TEnum result)where TEnum : struct'
    content.vb: Public Shared Function TryParse(Of TEnum As Structure)(value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean
    parameters:
    - id: value
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    - id: result
      type: '{TEnum}'
    typeParameters:
    - id: TEnum
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>TEnum</em> is not an enumeration type.</p>\n"
  seealso:
  - type: System.Enum.Parse(System.Type,System.String,System.Boolean)
    commentId: M:System.Enum.Parse(System.Type,System.String,System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Enum.TryParse(Of TEnum)(System.String, System.Boolean, ByRef TEnum)
  name.vb: TryParse(Of TEnum)(String, Boolean, ByRef TEnum)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: IConvertible
  fullName: System.IConvertible
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Enum
  parent: System
  isExternal: false
  name: Enum
  fullName: System.Enum
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: GetTypeCode()
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToBoolean(IFormatProvider)
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToByte(IFormatProvider)
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToChar(IFormatProvider)
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDateTime(IFormatProvider)
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDecimal(IFormatProvider)
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDouble(IFormatProvider)
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt16(IFormatProvider)
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt32(IFormatProvider)
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt64(IFormatProvider)
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSByte(IFormatProvider)
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSingle(IFormatProvider)
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToString(IFormatProvider)
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToType(Type, IFormatProvider)
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt16(IFormatProvider)
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt32(IFormatProvider)
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt64(IFormatProvider)
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: '{TEnum}'
  isExternal: false
  name: TEnum
  fullName: TEnum
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
