items:
- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  commentId: T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  id: UnobservedTaskExceptionEventArgs
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)
  - System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception
  - System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed
  - System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved
  langs:
  - csharp
  - vb
  name: UnobservedTaskExceptionEventArgs
  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  type: Class
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnobservedTaskExceptionEventArgs
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 562
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides data for the event that is raised when a faulted <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>'s exception goes unobserved.</p>\n"
  remarks: "\n<p>The Exception property is used to examine the exception without marking it as observed, whereas the <xref href=\"System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved\" data-throw-if-not-resolved=\"false\"></xref> method is used to mark the exception as observed. Marking the exception as observed prevents it from triggering exception escalation policy which, by default, terminates the process.</p>\n"
  example:
  - 
  syntax:
    content: 'public class UnobservedTaskExceptionEventArgs : EventArgs'
    content.vb: >-
      Public Class UnobservedTaskExceptionEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)
  commentId: M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)
  id: '#ctor(System.AggregateException)'
  parent: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  langs:
  - csharp
  - vb
  name: UnobservedTaskExceptionEventArgs(AggregateException)
  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.UnobservedTaskExceptionEventArgs(System.AggregateException)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 564
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Tasks.UnobservedTaskExceptionEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class with the unobserved exception.</p>\n"
  example:
  - 
  syntax:
    content: public UnobservedTaskExceptionEventArgs(AggregateException exception)
    content.vb: Public Sub New(exception As AggregateException)
    parameters:
    - id: exception
      type: System.AggregateException
      description: "\n<p>The Exception that has gone unobserved.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception
  commentId: P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception
  id: Exception
  parent: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  langs:
  - csharp
  - vb
  name: Exception
  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exception
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 565
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>The Exception that went unobserved.</p>\n"
  example:
  - 
  syntax:
    content: public AggregateException Exception { get; }
    content.vb: Public ReadOnly Property Exception As AggregateException
    parameters: []
    return:
      type: System.AggregateException
      description: "\n<p>The Exception that went unobserved.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed
  commentId: P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed
  id: Observed
  parent: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  langs:
  - csharp
  - vb
  name: Observed
  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Observed
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 566
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether this exception has been marked as \"observed.\"</p>\n"
  example:
  - 
  syntax:
    content: public bool Observed { get; }
    content.vb: Public ReadOnly Property Observed As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if this exception has been marked as \"observed\"; otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved
  commentId: M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved
  id: SetObserved
  parent: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  langs:
  - csharp
  - vb
  name: SetObserved()
  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetObserved
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 567
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Marks the <xref href=\"System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception\" data-throw-if-not-resolved=\"false\"></xref> as \"observed,\" thus preventing it from triggering exception escalation policy which, by default, terminates the process.</p>\n"
  example:
  - 
  syntax:
    content: public void SetObserved()
    content.vb: Public Sub SetObserved
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
