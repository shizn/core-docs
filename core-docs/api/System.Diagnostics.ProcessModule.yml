items:
- uid: System.Diagnostics.ProcessModule
  commentId: T:System.Diagnostics.ProcessModule
  id: ProcessModule
  parent: System.Diagnostics
  children:
  - System.Diagnostics.ProcessModule.BaseAddress
  - System.Diagnostics.ProcessModule.EntryPointAddress
  - System.Diagnostics.ProcessModule.FileName
  - System.Diagnostics.ProcessModule.ModuleMemorySize
  - System.Diagnostics.ProcessModule.ModuleName
  - System.Diagnostics.ProcessModule.ToString
  langs:
  - csharp
  - vb
  name: ProcessModule
  fullName: System.Diagnostics.ProcessModule
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessModule
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 13
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Represents a.dll or .exe file that is loaded into a particular process.</p>\n"
  remarks: "\n<p>A module is an executable file or a dynamic link library (DLL). Each process consists of one or more modules. You can use this class to get information about the module.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates how to use the <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> class to get and display information about all the modules that are used by the Notepad.exe application.</p>ProcessModule#1"
  syntax:
    content: public class ProcessModule
    content.vb: Public Class ProcessModule
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.ProcessModule.BaseAddress
  commentId: P:System.Diagnostics.ProcessModule.BaseAddress
  id: BaseAddress
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  - vb
  name: BaseAddress
  fullName: System.Diagnostics.ProcessModule.BaseAddress
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseAddress
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 54
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the memory address where the module was loaded.</p>\n"
  example:
  - "\n<p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref href=\"System.Diagnostics.ProcessModuleCollection\" data-throw-if-not-resolved=\"false\"></xref> class to obtain a <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> object for each module in the collection. The <xref href=\"System.Diagnostics.ProcessModule.ModuleName\" data-throw-if-not-resolved=\"false\"></xref> and  <xref href=\"System.Diagnostics.ProcessModule.BaseAddress\" data-throw-if-not-resolved=\"false\"></xref> properties are used to display the module name and the memory address where each module was loaded. </p>ProcessModule_BaseAddress#1"
  syntax:
    content: public IntPtr BaseAddress { get; }
    content.vb: Public ReadOnly Property BaseAddress As IntPtr
    parameters: []
    return:
      type: System.IntPtr
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessModule.EntryPointAddress
  commentId: P:System.Diagnostics.ProcessModule.EntryPointAddress
  id: EntryPointAddress
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  - vb
  name: EntryPointAddress
  fullName: System.Diagnostics.ProcessModule.EntryPointAddress
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EntryPointAddress
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 80
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the memory address for the function that runs when the system loads and runs the module.</p>\n"
  remarks: "\n<p>The module's entry point is the location of the function that is called during process startup, thread startup, process shutdown, and thread shutdown. While the entry point is not the address of the DllMain function, it should be close enough for most purposes.</p>\n<p>Due to changes in the way that Windows loads assemblies, <xref href=\"System.Diagnostics.ProcessModule.EntryPointAddress\" data-throw-if-not-resolved=\"false\"></xref> will always return 0 on Windows 8 or Windows 8.1 and should not be relied on for those platforms.</p>\n"
  example:
  - "\n<p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref href=\"System.Diagnostics.ProcessModuleCollection\" data-throw-if-not-resolved=\"false\"></xref> class to obtain a <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> object for each module in the collection. The <xref href=\"System.Diagnostics.ProcessModule.ModuleName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.ProcessModule.EntryPointAddress\" data-throw-if-not-resolved=\"false\"></xref> properties are used to display the name and the entry point address for each module.</p>ProcessModule_EntryPoint#1"
  syntax:
    content: public IntPtr EntryPointAddress { get; }
    content.vb: Public ReadOnly Property EntryPointAddress As IntPtr
    parameters: []
    return:
      type: System.IntPtr
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessModule.FileName
  commentId: P:System.Diagnostics.ProcessModule.FileName
  id: FileName
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  - vb
  name: FileName
  fullName: System.Diagnostics.ProcessModule.FileName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 43
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the full path to the module.</p>\n"
  remarks: "\n<p>If the file name is longer than the maximum number of characters allowed, the file name is truncated.</p>\n"
  example:
  - "\n<p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref href=\"System.Diagnostics.ProcessModuleCollection\" data-throw-if-not-resolved=\"false\"></xref> class to obtain a <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> object for each module in the collection. The <xref href=\"System.Diagnostics.ProcessModule.ModuleName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.ProcessModule.FileName\" data-throw-if-not-resolved=\"false\"></xref> properties are used to display the module name and the full path information for each module.</p>ProcessModule_FileName#1"
  syntax:
    content: public string FileName { get; }
    content.vb: Public ReadOnly Property FileName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize
  commentId: P:System.Diagnostics.ProcessModule.ModuleMemorySize
  id: ModuleMemorySize
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  - vb
  name: ModuleMemorySize
  fullName: System.Diagnostics.ProcessModule.ModuleMemorySize
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuleMemorySize
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 68
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of memory that is required to load the module.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Diagnostics.ProcessModule.ModuleMemorySize\" data-throw-if-not-resolved=\"false\"></xref> does not include any additional memory allocations that the module makes once it is running; it includes only the size of the static code and data in the module file.</p>\n"
  example:
  - "\n<p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref href=\"System.Diagnostics.ProcessModuleCollection\" data-throw-if-not-resolved=\"false\"></xref> class to obtain a <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> object for each module in the collection. The <xref href=\"System.Diagnostics.ProcessModule.ModuleName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.ProcessModule.ModuleMemorySize\" data-throw-if-not-resolved=\"false\"></xref> properties are used to display the module name and the amount of memory needed for each module.</p>ProcessModule_ModuleMemorySize#1"
  syntax:
    content: public int ModuleMemorySize { get; }
    content.vb: Public ReadOnly Property ModuleMemorySize As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessModule.ModuleName
  commentId: P:System.Diagnostics.ProcessModule.ModuleName
  id: ModuleName
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  - vb
  name: ModuleName
  fullName: System.Diagnostics.ProcessModule.ModuleName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuleName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 32
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name of the process module.</p>\n"
  remarks: "\n<p>If the name is longer than the maximum number of characters allowed, it is truncated. </p>\n"
  example:
  - "\n<p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref href=\"System.Diagnostics.ProcessModuleCollection\" data-throw-if-not-resolved=\"false\"></xref> class to obtain a <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> object for each module in the collection. The <xref href=\"System.Diagnostics.ProcessModule.ModuleName\" data-throw-if-not-resolved=\"false\"></xref> property is used to display the name of each module.</p>ProcessModule_ModuleName#1"
  syntax:
    content: public string ModuleName { get; }
    content.vb: Public ReadOnly Property ModuleName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessModule.ToString
  commentId: M:System.Diagnostics.ProcessModule.ToString
  id: ToString
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Diagnostics.ProcessModule.ToString()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs
    startLine: 105
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Converts the name of the module to a string.</p>\n"
  example:
  - "\n<p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref href=\"System.Diagnostics.ProcessModuleCollection\" data-throw-if-not-resolved=\"false\"></xref> class to obtain a <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> object for each module in the collection. The <xref href=\"System.Diagnostics.ProcessModule.ToString\" data-throw-if-not-resolved=\"false\"></xref> method is used to display the name for each module.</p>ProcessModule_ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
