items:
- uid: System.FlagsAttribute
  commentId: T:System.FlagsAttribute
  id: FlagsAttribute
  parent: System
  children:
  - System.FlagsAttribute.#ctor
  langs:
  - csharp
  - vb
  name: FlagsAttribute
  fullName: System.FlagsAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlagsAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 857
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</p>\n"
  remarks: "\n<p>Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements. Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not. Languages vary in their use of bit fields compared to enumeration constants.</p>\n"
  example:
  - <p>The following example illustrates the use of the <strong>FlagsAttribute</strong> attribute and shows the effect on the <xref href="System.Enum.ToString(System.String)" data-throw-if-not-resolved="false"></xref> method of using <strong>FlagsAttribute</strong> on an <xref href="System.Enum" data-throw-if-not-resolved="false"></xref> declaration.</p>System.FlagsAttribute#1
  - <p>The following example defines two color-related enumerations, <code>SingleHue</code> and <code>MultiHue</code>. The latter has the <strong>FlagsAttribute</strong> attribute; the former does not. The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.   For example, note that 3 cannot be represented as a <code>SingleHue</code> value because 3 is not the underlying value of any <code>SingleHue</code> member, whereas the <strong>FlagsAttribute</strong> attribute makes it possible to represent 3 as a <code>MultiHue</code> value of <strong>Black, Red</strong>. </p>System.FlagsAttribute#2
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Enum, Inherited = false)]

      public class FlagsAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Enum, Inherited:=False)>

      Public Class FlagsAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 16
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.FlagsAttribute.#ctor
  commentId: M:System.FlagsAttribute.#ctor
  id: '#ctor'
  parent: System.FlagsAttribute
  langs:
  - csharp
  - vb
  name: FlagsAttribute()
  fullName: System.FlagsAttribute.FlagsAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 860
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example defines a <code>PhoneService</code> enumeration that represents forms of communication provided by a telephone company. It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service. Finally, it implicitly calls the <xref href=\"System.Enum.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to display the types of service provided to each household. </p>System.FlagsAttribute#2"
  - "\n<p>The following example illustrates the use of the <strong>FlagsAttribute</strong> attribute and shows the effect on the <xref href=\"System.Enum.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method of using <strong>FlagsAttribute</strong> on an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> declaration.</p>System.FlagsAttribute#1"
  syntax:
    content: public FlagsAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
