items:
- uid: System.Linq.Expressions.SwitchCase
  commentId: T:System.Linq.Expressions.SwitchCase
  id: SwitchCase
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.SwitchCase.Body
  - System.Linq.Expressions.SwitchCase.TestValues
  - System.Linq.Expressions.SwitchCase.ToString
  - System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
  type: Class
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 778
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Represents one case of a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that represents a switch statement without a default case by using the <xref href=\"System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Linq.Expressions.ExpressionDev10#34"
  syntax:
    content: public sealed class SwitchCase
    content.vb: Public NotInheritable Class SwitchCase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Linq.Expressions.SwitchCase.Body
  commentId: P:System.Linq.Expressions.SwitchCase.Body
  id: Body
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: Body
  fullName: System.Linq.Expressions.SwitchCase.Body
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Body
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 781
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the body of this case.</p>\n"
  example:
  - 
  syntax:
    content: public Expression Body { get; }
    content.vb: Public ReadOnly Property Body As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> object that represents the body of the case block.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.SwitchCase.TestValues
  commentId: P:System.Linq.Expressions.SwitchCase.TestValues
  id: TestValues
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: TestValues
  fullName: System.Linq.Expressions.SwitchCase.TestValues
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TestValues
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 782
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the values of this case. This case is selected for execution when the <xref href=\"System.Linq.Expressions.SwitchExpression.SwitchValue\" data-throw-if-not-resolved=\"false\"></xref> matches any of these values.</p>\n"
  example:
  - 
  syntax:
    content: public ReadOnlyCollection<Expression> TestValues { get; }
    content.vb: Public ReadOnly Property TestValues As ReadOnlyCollection(Of Expression)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
      description: "\n<p>The read-only collection of the values for this case block.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.SwitchCase.ToString
  commentId: M:System.Linq.Expressions.SwitchCase.ToString
  id: ToString
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Linq.Expressions.SwitchCase.ToString()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 783
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: Update(IEnumerable<Expression>, Expression)
  fullName: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Update
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 784
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</p>\n"
  example:
  - 
  syntax:
    content: public SwitchCase Update(IEnumerable<Expression> testValues, Expression body)
    content.vb: Public Function Update(testValues As IEnumerable(Of Expression), body As Expression) As SwitchCase
    parameters:
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The <xref href=\"System.Linq.Expressions.SwitchCase.TestValues\" data-throw-if-not-resolved=\"false\"></xref> property of the result.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.SwitchCase.Body\" data-throw-if-not-resolved=\"false\"></xref> property of the result.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchCase
      description: "\n<p>This expression if no children are changed or an expression with the updated children.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Linq.Expressions.Expression)
  name.vb: Update(IEnumerable(Of Expression), Expression)
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Expression>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)
  name.vb: ReadOnlyCollection(Of Expression)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
