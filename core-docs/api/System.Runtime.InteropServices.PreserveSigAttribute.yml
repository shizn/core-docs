items:
- uid: System.Runtime.InteropServices.PreserveSigAttribute
  commentId: T:System.Runtime.InteropServices.PreserveSigAttribute
  id: PreserveSigAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.PreserveSigAttribute.#ctor
  langs:
  - csharp
  - vb
  name: PreserveSigAttribute
  fullName: System.Runtime.InteropServices.PreserveSigAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreserveSigAttribute
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 682
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates that the HRESULT or <strong>retval</strong> signature transformation that takes place during COM interop calls should be suppressed.</p>\n"
  remarks: "\n<p>You can apply this attribute to methods.</p>\n<p>By default, the Tlbexp.exe (Type Library Exporter) ensures that a call that returns an HRESULT of S_OK is transformed such that the [out, retval] parameter is used as the function return value. The S_OK HRESULT is discarded. For HRESULTs other than S_OK, the runtime throws an exception and discards the [out, retval] parameter. When you apply the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a managed method signature, the managed and unmanaged signatures of the attributed method are identical.</p>\n<p>Preserving the original method signature is necessary if the member returns more than one success HRESULT value and you want to detect the different values. Since most COM member return an HRESULT, by applying the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref>, you can retrieve an integer representing the success or failure HRESULT. Tlbexp.exe preserves any [out, retavl] parameters as out parameters in the managed signature.</p>\n<p>The Tlbimp.exe (Type Library Importer) also applies this attribute; it applies the attribute to dispinterfaces when it imports a type library.</p>\n<p>Return types of <xref href=\"System.Runtime.InteropServices.UnmanagedType.Currency\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> are not supported by the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> class when interoperation occurs from COM to managed code and the managed code is marked with the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.  When you attempt to use one of these return types with the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> class during these conditions, a <xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.   </p>\n"
  example:
  - "\n<p>The following example shows how Tlbexp.exe converts a C# method without <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> when exporting an assembly to a COM type library.</p>\n<p>Managed signature: </p>\n<pre><code>int DoSomething (long l);</code></pre>\n<p>Unmanaged signature: </p>\n<pre><code>HRESULT DoSomething ([in] long l, [out, retval] int * i);</code></pre>\n<p>When you apply <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the same C# method and export the assembly, the method conversion differs from the previous example. Notice that Tlbexp.exe removes the HRESULT and the [out, retval] parameter modifier.</p>\n<p>Managed signature: </p>\n<pre><code>[PreserveSig] int DoSomething (long l);</code></pre>\n<p>Unmanaged signature: </p>\n<pre><code>int DoSomething ([in] long l);</code></pre>\n"
  syntax:
    content: 'public sealed class PreserveSigAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class PreserveSigAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.PreserveSigAttribute.#ctor
  commentId: M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.InteropServices.PreserveSigAttribute
  langs:
  - csharp
  - vb
  name: PreserveSigAttribute()
  fullName: System.Runtime.InteropServices.PreserveSigAttribute.PreserveSigAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 685
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.PreserveSigAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public PreserveSigAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
