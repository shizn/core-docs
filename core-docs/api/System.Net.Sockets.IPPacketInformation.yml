items:
- uid: System.Net.Sockets.IPPacketInformation
  commentId: T:System.Net.Sockets.IPPacketInformation
  id: IPPacketInformation
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.IPPacketInformation.Address
  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  - System.Net.Sockets.IPPacketInformation.GetHashCode
  - System.Net.Sockets.IPPacketInformation.Interface
  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  langs:
  - csharp
  - vb
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
  type: Struct
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPPacketInformation
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 47
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Presents the packet information from a call to <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct IPPacketInformation
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure IPPacketInformation
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Net.Sockets.IPPacketInformation.Address
  commentId: P:System.Net.Sockets.IPPacketInformation.Address
  id: Address
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Address
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 50
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the origin information of the packet that was received as a result of calling the <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref> method or <xref href=\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public IPAddress Address { get; }
    content.vb: Public ReadOnly Property Address As IPAddress
    parameters: []
    return:
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> that indicates the origin information of the packet that was received as a result of calling the <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref> method or <xref href=\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref> method. For packets that were sent from a unicast address, the <xref href=\"System.Net.Sockets.IPPacketInformation.Address\" data-throw-if-not-resolved=\"false\"></xref> property will return the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the sender; for multicast or broadcast packets, the <xref href=\"System.Net.Sockets.IPPacketInformation.Address\" data-throw-if-not-resolved=\"false\"></xref> property will return the multicast or broadcast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.IPPacketInformation.Interface
  commentId: P:System.Net.Sockets.IPPacketInformation.Interface
  id: Interface
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Interface
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 51
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the network interface information that is associated with a call to <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public int Interface { get; }
    content.vb: Public ReadOnly Property Interface As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value, which represents the index of the network interface. You can use this index with <xref href=\"System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\" data-throw-if-not-resolved=\"false\"></xref> to get more information about the relevant interface.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  commentId: M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 52
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>comparand</em> is an instance of <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> and equals the value of the instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  commentId: M:System.Net.Sockets.IPPacketInformation.GetHashCode
  id: GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 53
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  remarks: "\n<p>The hash code is constructed from the values of the <xref href=\"System.Net.Sockets.IPPacketInformation.Address\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.IPPacketInformation.Interface\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An Int32 hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  commentId: M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Equality(IPPacketInformation, IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.Equality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)
  type: Operator
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 54
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Tests whether two specified <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instances are equivalent.</p>\n"
  remarks: "\n<p>This operator tests both the <xref href=\"System.Net.Sockets.IPPacketInformation.Address\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.IPPacketInformation.Interface\" data-throw-if-not-resolved=\"false\"></xref> values for both arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)
    content.vb: Public Shared Operator =(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>The <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the left of the equality operator.</p>\n"
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>The <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the right of the equality operator.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>packetInformation1</em> and <em>packetInformation2</em> are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  commentId: M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Inequality(IPPacketInformation, IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.Inequality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)
  type: Operator
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 55
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Tests whether two specified <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.</p>\n"
  remarks: "\n<p>This operator tests both the <xref href=\"System.Net.Sockets.IPPacketInformation.Address\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.IPPacketInformation.Interface\" data-throw-if-not-resolved=\"false\"></xref> values for both arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)
    content.vb: Public Shared Operator <>(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>The <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the left of the inequality operator.</p>\n"
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>The <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the right of the inequality operator.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>packetInformation1</em> and <em>packetInformation2</em> are unequal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
