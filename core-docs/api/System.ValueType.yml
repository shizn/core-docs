items:
- uid: System.ValueType
  commentId: T:System.ValueType
  id: ValueType
  parent: System
  children:
  - System.ValueType.#ctor
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  langs:
  - csharp
  - vb
  name: ValueType
  fullName: System.ValueType
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueType
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2226
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides the base class for value types.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref> overrides the virtual methods from <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> with more appropriate implementations for value types. See also <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>, which inherits from <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Data types are separated into value types and reference types. Value types are either stack-allocated or allocated inline in a structure. Reference types are heap-allocated. Both reference and value types are derived from the ultimate base class <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it. The wrapper is marked so the system knows that it contains a value type. This process is known as boxing, and the reverse process is known as unboxing. Boxing and unboxing allow any type to be treated as an object.</p>\n<p>Although <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref> is the implicit base class for value types, you cannot create a class that inherits from <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref> directly. Instead, individual compilers provide a language keyword or construct (such as <strong>struct</strong> in C# and <strong>Structure</strong>â€¦<strong>End Structure</strong> in Visual Basic) to support the creation of value types.</p>\n<p>Aside from serving as the base class for value types in the .NET Framework, the <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref> structure is generally not used directly in code. However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types. The following example illustrates how <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref> prevents reference types from being passed to methods. It defines a class named <code>Utility</code> that contains four methods: <code>IsNumeric</code>, which indicates whether its argument is a number; <code>IsInteger</code>, which indicates whether its argument is an integer; <code>IsFloat</code>, which indicates whether its argument is a floating-point number; and <code>Compare</code>, which indicates the relationship between two numeric values. In each case, the method parameters are of type <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref>, and reference types are prevented from being passed to the methods.</p>System.ValueType.Structure#1<p>The following example illustrates calls to the methods of the <code>Utility</code> class.</p>System.ValueType.Structure#2"
  syntax:
    content: public abstract class ValueType
    content.vb: Public MustInherit Class ValueType
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Enum
    commentId: T:System.Enum
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.ValueType.#ctor
  commentId: M:System.ValueType.#ctor
  id: '#ctor'
  parent: System.ValueType
  langs:
  - csharp
  - vb
  name: ValueType()
  fullName: System.ValueType.ValueType()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2228
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  example:
  - 
  syntax:
    content: protected ValueType()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ValueType
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2229
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether this instance and a specified object are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ValueType.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method overrides <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and provides the default implementation of value equality for all value types in the .NET Framework. </p>\n<p>If none of the fields of the current instance and <em>obj</em> are reference types, the <xref href=\"System.ValueType.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method performs a byte-by-byte comparison of the two objects in memory. Otherwise, it uses reflection to compare the corresponding fields of <em>obj</em> and this instance. </p>\n<p>Particularly if your value type contains fields that are reference types, you should override the <xref href=\"System.ValueType.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This can improve performance and enable you to more closely represent the meaning of equality for the type. </p>\n"
  example:
  - <p>The following example demonstrates how the <xref href="System.ValueType.Equals(System.Object)" data-throw-if-not-resolved="false"></xref> method can be overridden by a derived value type.</p>ValueType.Equals Example#1
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> and this instance are the same type and represent the same value; otherwise, <strong>false</strong>. </p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  id: GetHashCode
  parent: System.ValueType
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2230
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ValueType.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method applies to types derived from <xref href=\"System.ValueType\" data-throw-if-not-resolved=\"false\"></xref>. One or more fields of the derived type is used to calculate the return value. If you call the derived type's <strong>GetHashCode</strong>method, the return value is not likely to be suitable for use as a key in a hash table. Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table. In either case, consider writing your own implementation of the <xref href=\"System.ValueType.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method that more closely represents the concept of a hash code for the type. </p>\n<p>For more information, see <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - <p>The following example demonstrates how the <xref href="System.ValueType.GetHashCode" data-throw-if-not-resolved="false"></xref> method can be overridden by a derived value type.</p>ValueType.Equals Example#1
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  id: ToString
  parent: System.ValueType
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.ValueType.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2231
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the fully qualified type name of this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ValueType.ToString\" data-throw-if-not-resolved=\"false\"></xref> method overrides the <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method and provides the default implementation of the <strong>ToString</strong> method for value types. (Value types are types defined by the <strong>struct</strong> keyword in C#, and by the <strong>Structure</strong>...<strong>End Structure</strong> construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>: the method returns the fully qualified type name.</p>\n<p>Value types defined by the <strong>struct</strong> keyword in C# and the <strong>Structure</strong>...<strong>End Structure</strong> construct in Visual Basic typically override the <xref href=\"System.ValueType.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to provide a more meaningful string representation of the value type. The following example illustrates the difference. It defines two value types, <code>EmployeeA</code> and <code>EmployeeB</code>, creates an instance of each, and calls its <strong>ToString</strong> method. Because the <code>EmployeeA</code> structure does not override the <xref href=\"System.ValueType.ToString\" data-throw-if-not-resolved=\"false\"></xref> method, it displays only the fully qualified type name. The <code>EmployeeB.ToString</code> method, on the other hand, provides meaningful information about the object. </p>System.ValueType.ToString#1<p>Note that, although enumeration types are also value types, they derive from the <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> class, which overrides  <xref href=\"System.ValueType.ToString\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The fully qualified type name.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
