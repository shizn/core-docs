items:
- uid: System.Globalization.CharUnicodeInfo
  commentId: T:System.Globalization.CharUnicodeInfo
  id: CharUnicodeInfo
  parent: System.Globalization
  children:
  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: CharUnicodeInfo
  fullName: System.Globalization.CharUnicodeInfo
  type: Class
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CharUnicodeInfo
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 61
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Retrieves information about a Unicode character. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a number of Unicode character categories. For example, a character might be categorized as an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a paragraph separator, a math symbol, or a currency symbol. Your application can use the character category to govern string-based operations, such as parsing or extracting substring with regular expressions. The <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> enumeration defines the possible character categories. </p>\n<p>You use the <xref href=\"System.Globalization.CharUnicodeInfo\" data-throw-if-not-resolved=\"false\"></xref> class to obtain the <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value for a specific character. The <xref href=\"System.Globalization.CharUnicodeInfo\" data-throw-if-not-resolved=\"false\"></xref> class defines methods that return the following Unicode character values:</p>\n<ul><li>\n<p>The specific category to which a character or surrogate pair belongs. The value returned is a member of the <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>\n</li><li>\n<p>Numeric value. Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. </p>\n</li><li>\n<p>Digit value. Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system. </p>\n</li><li>\n<p>Decimal digit value. Applies only to characters that represent decimal digits in the decimal (base 10) system. A decimal digit can be one of ten digits, from zero through nine. These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.DecimalDigitNumber\" data-throw-if-not-resolved=\"false\"></xref> category. </p>\n</li></ul>\n<p>In addition, the <xref href=\"System.Globalization.CharUnicodeInfo\" data-throw-if-not-resolved=\"false\"></xref> class is used internally by a number of other .NET Framework types and methods that rely on character classification. These include: </p>\n<ul><li>\n<p>The <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class, which works with textual elements instead of single characters in a string. </p>\n</li><li>\n<p>The overloads of the <xref href=\"System.Char.GetUnicodeCategory(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, which determine the category to which a character or surrogate pair belongs.</p>\n</li><li>\n<p>The character classes  recognized by <xref href=\"System.Text.RegularExpressions.Regex\" data-throw-if-not-resolved=\"false\"></xref>, the .NET Framework's regular expression engine.</p>\n</li></ul>\n<p>When using this class in your applications, keep in mind the following programming considerations for using the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> type. The type can be difficult to use, and strings are generally preferable for representing linguistic content.</p>\n<ul><li>\n<p>A <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object does not always correspond to a single character. Although the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units. For more information, see \"Char Objects and Unicode Characters\" in the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>The notion of a \"character\" is also flexible. A character is often thought of as a glyph, but many glyphs require multiple code points. For example, ä can be represented either by two code points (\"a\" plus U+0308, which is the combining diaeresis), or by a single code point (\"ä\" or U+00A4). Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation. For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter. Uppercasing such a value simply retrieves the original value.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example shows the values returned by each method for different types of characters.</p>System.Globalization.CharUnicodeInfo_Char#1"
  syntax:
    content: 'public class CharUnicodeInfo : object'
    content.vb: >-
      Public Class CharUnicodeInfo
          Inherits Object
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  - type: System.Text
    commentId: N:System.Text
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  id: GetNumericValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: GetNumericValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNumericValue
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 63
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the numeric value associated with the specified character.</p>\n"
  remarks: "\n<p>Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see>.</p>\n<p>The <xref href=\"System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>ch</em> corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref href=\"System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</p>System.Globalization.CharUnicodeInfo.GetNumericValue#2"
  example:
  - "\n<p>The following code example shows the values returned by each method for different types of characters.</p>System.Globalization.CharUnicodeInfo_Char#1"
  syntax:
    content: public static double GetNumericValue(char ch)
    content.vb: Public Shared Function GetNumericValue(ch As Char) As Double
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The Unicode character for which to get the numeric value. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The numeric value associated with the specified character.</p>\n<p>-or- </p>\n<p>-1, if the specified character is not a numeric character.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  id: GetNumericValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: GetNumericValue(String, Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNumericValue
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 64
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the numeric value associated with the character at the specified index of the specified string.</p>\n"
  remarks: "\n<p>Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see>.</p>\n<p>If the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at position <em>index</em> is the first character of a valid surrogate pair, the <xref href=\"System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents each Aegean number. As the output from the example shows, the <xref href=\"System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</p>System.Globalization.CharUnicodeInfo.GetNumericValue#3"
  example:
  - "\n<p>The following code example shows the values returned by each method for different types of characters.</p>System.Globalization.CharUnicodeInfo_String#1"
  syntax:
    content: public static double GetNumericValue(string s, int index)
    content.vb: Public Shared Function GetNumericValue(s As String, index As Integer) As Double
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the Unicode character for which to get the numeric value. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the Unicode character for which to get the numeric value. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The numeric value associated with the character at the specified index of the specified string.</p>\n<p>-or- </p>\n<p>-1, if the character at the specified index of the specified string is not a numeric character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes in <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  id: GetUnicodeCategory(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: GetUnicodeCategory(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetUnicodeCategory
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 65
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the Unicode category of the specified character.</p>\n"
  remarks: "\n<p>The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> class returns the category of a Unicode character. For more information on Unicode characters, see the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see>.</p>\n<p>The <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>ch</em> corresponds to a single linguistic character and returns its category. This means that, for surrogate pairs, it returns <xref href=\"System.Globalization.UnicodeCategory.Surrogate\" data-throw-if-not-resolved=\"false\"></xref> instead of the category to which the surrogate belongs. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong> if it is passed either the high surrogate or the low surrogate of this character.</p>System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1<p>Note that <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> does not always return the same <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value as the <xref href=\"System.Char.GetUnicodeCategory(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method when passed a particular character as a parameter. The <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref href=\"System.Char.GetUnicodeCategory(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.</p>"
  example:
  - "\n<p>The following code example shows the values returned by each method for different types of characters.</p>System.Globalization.CharUnicodeInfo_Char#1"
  syntax:
    content: public static UnicodeCategory GetUnicodeCategory(char ch)
    content.vb: Public Shared Function GetUnicodeCategory(ch As Char) As UnicodeCategory
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The Unicode character for which to get the Unicode category. </p>\n"
    return:
      type: System.Globalization.UnicodeCategory
      description: "\n<p>A <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value indicating the category of the specified character.</p>\n"
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  id: GetUnicodeCategory(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: GetUnicodeCategory(String, Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetUnicodeCategory
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 66
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the Unicode category of the character at the specified index of the specified string.</p>\n"
  remarks: "\n<p>The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> class returns the category of a Unicode character. For more information on Unicode characters, see the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see>.</p>\n<p>If the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at position <em>index</em> is the first character of a valid surrogate pair, the <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns the Unicode category of the surrogate pair instead of returning <xref href=\"System.Globalization.UnicodeCategory.Surrogate\" data-throw-if-not-resolved=\"false\"></xref>. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns <xref href=\"System.Globalization.UnicodeCategory.OtherLetter\" data-throw-if-not-resolved=\"false\"></xref> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <xref href=\"System.Globalization.UnicodeCategory.Surrogate\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2<p>Note that <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not always return the same <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value as the <xref href=\"System.Char.GetUnicodeCategory(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method when passed a particular character as a parameter. The <xref href=\"System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref href=\"System.Char.GetUnicodeCategory(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.</p>"
  example:
  - "\n<p>The following code example shows the values returned by each method for different types of characters.</p>System.Globalization.CharUnicodeInfo_String#1"
  syntax:
    content: public static UnicodeCategory GetUnicodeCategory(string s, int index)
    content.vb: Public Shared Function GetUnicodeCategory(s As String, index As Integer) As UnicodeCategory
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the Unicode character for which to get the Unicode category. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the Unicode character for which to get the Unicode category. </p>\n"
    return:
      type: System.Globalization.UnicodeCategory
      description: "\n<p>A <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value indicating the category of the character at the specified index of the specified string.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes in <em>s</em>. </p>\n"
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Globalization.UnicodeCategory
  parent: System.Globalization
  isExternal: false
  name: UnicodeCategory
  fullName: System.Globalization.UnicodeCategory
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
