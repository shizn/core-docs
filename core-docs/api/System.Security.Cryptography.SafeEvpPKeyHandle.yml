items:
- uid: System.Security.Cryptography.SafeEvpPKeyHandle
  commentId: T:System.Security.Cryptography.SafeEvpPKeyHandle
  id: SafeEvpPKeyHandle
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.SafeEvpPKeyHandle.#ctor(System.IntPtr,System.Boolean)
  - System.Security.Cryptography.SafeEvpPKeyHandle.DuplicateHandle
  - System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid
  - System.Security.Cryptography.SafeEvpPKeyHandle.ReleaseHandle
  langs:
  - csharp
  - vb
  name: SafeEvpPKeyHandle
  fullName: System.Security.Cryptography.SafeEvpPKeyHandle
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeEvpPKeyHandle
    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.OpenSsl
  namespace: System.Security.Cryptography
  syntax:
    content: 'public sealed class SafeEvpPKeyHandle : SafeHandle, IDisposable'
    content.vb: >-
      Public NotInheritable Class SafeEvpPKeyHandle
          Inherits SafeHandle
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - System.Runtime.InteropServices.SafeHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.SafeEvpPKeyHandle.#ctor(System.IntPtr,System.Boolean)
  commentId: M:System.Security.Cryptography.SafeEvpPKeyHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: System.Security.Cryptography.SafeEvpPKeyHandle
  langs:
  - csharp
  - vb
  name: SafeEvpPKeyHandle(IntPtr, Boolean)
  fullName: System.Security.Cryptography.SafeEvpPKeyHandle.SafeEvpPKeyHandle(System.IntPtr, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
    startLine: 51
  assemblies:
  - System.Security.Cryptography.OpenSsl
  namespace: System.Security.Cryptography
  syntax:
    content: public SafeEvpPKeyHandle(IntPtr handle, bool ownsHandle)
    content.vb: Public Sub New(handle As IntPtr, ownsHandle As Boolean)
    parameters:
    - id: handle
      type: System.IntPtr
    - id: ownsHandle
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid
  commentId: P:System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid
  id: IsInvalid
  parent: System.Security.Cryptography.SafeEvpPKeyHandle
  langs:
  - csharp
  - vb
  name: IsInvalid
  fullName: System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.OpenSsl
  namespace: System.Security.Cryptography
  syntax:
    content: public override bool IsInvalid { get; }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.SafeEvpPKeyHandle.DuplicateHandle
  commentId: M:System.Security.Cryptography.SafeEvpPKeyHandle.DuplicateHandle
  id: DuplicateHandle
  parent: System.Security.Cryptography.SafeEvpPKeyHandle
  langs:
  - csharp
  - vb
  name: DuplicateHandle()
  fullName: System.Security.Cryptography.SafeEvpPKeyHandle.DuplicateHandle()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DuplicateHandle
    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
    startLine: 53
  assemblies:
  - System.Security.Cryptography.OpenSsl
  namespace: System.Security.Cryptography
  syntax:
    content: public SafeEvpPKeyHandle DuplicateHandle()
    content.vb: Public Function DuplicateHandle As SafeEvpPKeyHandle
    return:
      type: System.Security.Cryptography.SafeEvpPKeyHandle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.SafeEvpPKeyHandle.ReleaseHandle
  commentId: M:System.Security.Cryptography.SafeEvpPKeyHandle.ReleaseHandle
  id: ReleaseHandle
  parent: System.Security.Cryptography.SafeEvpPKeyHandle
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  fullName: System.Security.Cryptography.SafeEvpPKeyHandle.ReleaseHandle()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReleaseHandle
    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs
    startLine: 54
  assemblies:
  - System.Security.Cryptography.OpenSsl
  namespace: System.Security.Cryptography
  syntax:
    content: protected override bool ReleaseHandle()
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  parent: System.Runtime.ConstrainedExecution
  isExternal: true
  name: CriticalFinalizerObject
  fullName: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Close()
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Runtime.ConstrainedExecution
  isExternal: false
  name: System.Runtime.ConstrainedExecution
  fullName: System.Runtime.ConstrainedExecution
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
- uid: System.Security.Cryptography.SafeEvpPKeyHandle
  parent: System.Security.Cryptography
  isExternal: false
  name: SafeEvpPKeyHandle
  fullName: System.Security.Cryptography.SafeEvpPKeyHandle
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
