items:
- uid: System.Threading.Tasks.Parallel
  commentId: T:System.Threading.Tasks.Parallel
  id: Parallel
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  langs:
  - csharp
  - vb
  name: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parallel
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 144
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides support for parallel loops and regions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</p>\n"
  example:
  - "\n<p>This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</p>System.Threading.Tasks.Parallel#07"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public class Parallel
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Class Parallel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, Action<Int32, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 588
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with two arguments: </p>\n<ul><li>\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value that represents the iteration count. </p>\n</li><li>\n<p>A <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used to break out of the loop prematurely. The <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> object is created by the compiler; it cannot be instantiated in user code. </p>\n</li></ul>\n<p>Calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method informs the <strong>for</strong> operation that iterations after the current one don't have to execute. However, all iterations before the current one will still have to be executed if they haven't already.</p>\n<p>Therefore, calling <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> is similar to using a break operation within a conventional <strong>for</strong> loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute. </p>\n<p>If executing all iterations before the current one is not necessary, use the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method instead of using <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref>. Calling <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> informs the <strong>for</strong> loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref>, there are no guarantees regarding which other iterations will not execute.</p>\n<p>If a loop is ended prematurely, the <xref href=\"System.Threading.Tasks.ParallelLoopResult\" data-throw-if-not-resolved=\"false\"></xref> structure that is returned will contain relevant information about the loop's completion.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, the method returns immediately without performing any iterations.</p>\n"
  example:
  - "\n<p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called. As the output from the example shows, no iterations whose index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value start after the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Threading.Tasks.ParallelLoopState#2<p>Because iterations of the loop are still likely to be executing when the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called, each iteration calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. If  the property value is <strong>true</strong>, the iteration checks the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property and, if it is greater than the current iteration's index value, returns immediately. </p>"
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState
    commentId: T:System.Threading.Tasks.ParallelLoopState
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int32, Int32, Action(Of Int32, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 421
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the iteration count (<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>) as a parameter.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, the method returns immediately without performing any iterations.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method for 100 invocations of a delegate that generates random byte values and computes their sum. </p>System.Threading.Tasks.Parallel.For#1"
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32))
  name.vb: For(Int32, Int32, Action(Of Int32))
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 659
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>), and a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, the method returns immediately without performing any iterations.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, ParallelOptions, Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 489
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the iteration count (<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>) as a parameter.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n"
  example:
  - "\n<p>The following example shows how to cancel a parallel loop:</p>System.Threading.Tasks.Parallel#05"
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32))
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, Action<Int64, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 618
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>), and a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely.</p>\n<p>Calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method informs the <strong>for</strong> operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.</p>\n<p> Therefore, calling Break is similar to using a break operation within a conventional <strong>for</strong> loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</p>\n<p>If executing all iterations before the current one is not necessary, use the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method instead of using <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref>. Calling <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> informs the <strong>for</strong> loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref>, there are no guarantees regarding which other iterations will not execute.</p>\n<p>If a loop is ended prematurely, the <xref href=\"System.Threading.Tasks.ParallelLoopResult\" data-throw-if-not-resolved=\"false\"></xref> structure that is returned will contain relevant information about the loop's completion.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int64, Int64, Action(Of Int64, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 450
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the iteration count (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>) as a parameter.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, the method returns immediately without performing any iterations.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64))
  name.vb: For(Int64, Int64, Action(Of Int64))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 704
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>), and a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, the method returns immediately without performing any iterations.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\" data-throw-if-not-resolved=\"false\"></xref> method with a <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> object:</p>System.Threading.Tasks.Parallel#03"
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, ParallelOptions, Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 532
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong>  (<strong>For</strong> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</p>\n"
  remarks: "\n<p>Supports 64-bit indexes. The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the iteration count (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>) as a parameter.</p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n"
  example:
  - "\n<p>The following example shows how to use <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify a custom task scheduler:</p>System.Threading.Tasks.Parallel#06"
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64))
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 759
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>), a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n<p>For an example that uses this method, see How to: Write a Parallel.For Loop with Thread-Local Variables.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int32, Int32, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 894
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>), a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n"
  example:
  - "\n<p>The following example uses thread-local variables to compute the sum of the results of many lengthy operations. This example limits the degree of parallelism to four.</p>System.Threading.Tasks.Parallel#04"
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int32, Int32, ParallelOptions, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 821
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>), a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n<p>For an example that uses this method, see How to: Write a Parallel.For Loop with Thread-Local Variables.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int64, Int64, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 971
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each value in the iteration range (<em>fromInclusive</em>, <em>toExclusive</em>). It is provided with the following parameters: the iteration count (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>), a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</p>\n<p>The <em>localInit</em> delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads. These initial states are passed to the first <em>body</em> invocations on each thread. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per thread to perform a final action on each thread's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n<p>If <em>fromInclusive</em> is greater than or equal to <em>toExclusive</em>, then the method returns immediately without performing any iterations.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int64, Int64, ParallelOptions, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2533
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> orderable partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\" data-throw-if-not-resolved=\"false\"></xref> property in the source orderable partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>Any methods in the source orderable partitioner return <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2941
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref>method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is  <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> orderable partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> orderable partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The exception that is thrown when any methods in the <em>source</em> orderable partitioner return <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2471
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>A method in the <em>source</em> partitioner returns <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method in the <em>source</em> partitioner does not return the correct number of partitions.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2412
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n"
  example:
  - "\n<p>The following example shows how to implement a range partitioner for use with <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref>:</p>System.Threading.Tasks.Parallel_RangePartitioners#01"
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is  <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The exception that is thrown when any methods in the <em>source</em> partitioner return <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method in the <em>source</em> partitioner does not return the correct number of partitions.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2863
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The exception that is thrown when any methods in the <em>source</em> partitioner return <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2788
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel and loop options can be configured.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The exception that is thrown when any methods in the <em>source</em> partitioner return <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1826
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and the current element's index (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1739
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, and a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1654
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the current element as a parameter.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method to count the number of vowels and non-whitespace characters in a text file. In this case, the <xref href=\"System.Threading.Tasks.ParallelLoopResult\" data-throw-if-not-resolved=\"false\"></xref> value returned by the method is ignored. Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously. For this purpose, the example uses the <strong>lock</strong> statement (in C#) and the <strong>SyncLock</strong> statement (in Visual Basic). </p>System.Threading.Tasks.Parallel.ForEach#1"
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1873
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and the current element's index (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1786
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, and a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1699
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel and loop options can be configured.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the current element as a parameter.</p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2705
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em><xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong> partitions.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 3145
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The OrderablePartitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> or <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em><xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong>  partitions.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2615
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n<p>The <em>localInit</em> delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em><xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong> partitions.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 3039
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation  with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref href=\"System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\" data-throw-if-not-resolved=\"false\"></xref> method expects custom partitioners to support dynamic partitioning. This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning. Partitioners must support dynamic partitions.  For more information, see Custom Partitioners for PLINQ and TPL and How to: Implement Dynamic Partitions.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property in the <em>source</em><xref href=\"System.Collections.Concurrent.Partitioner\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong> partitions.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1933
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p> The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method with local state:</p>System.Threading.Tasks.Parallel#02"
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2079
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p> The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, the current element's index (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>), and some local state that may be shared amongst iterations that execute on the same thread.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2009
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</p>\n"
  remarks: "\n<p> The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2155
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n"
  remarks: "\n<p>The <em>body</em> delegate is invoked once for each element in the <em>source</em> enumerable. It is provided with the following parameters: the current element, a <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> instance that may be used to break out of the loop prematurely, the current element's index (<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>), and some local state that may be shared amongst iterations that execute on the same thread.</p>\n<p>The <em>localInit</em> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first <em>body</em> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <em>localFinally</em> delegate. The <em>localFinally</em> delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</p>\n<p>The <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> object the chance to add, change, or remove threads that service the loop. </p>\n"
  example:
  - 
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: localInit
      type: System.Func{{TLocal}}
      description: "The function delegate that returns the initial state of the local data \nfor each thread."
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: >-
        A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure

        that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: Invoke(Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invoke
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 173
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes each of the provided actions, possibly in parallel.</p>\n"
  remarks: "\n<p>This method can be used to execute a set of operations, potentially in parallel. </p>\n<p> No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</p>\n<p>For more information, see How to: Use Parallel.Invoke to Execute Parallel Operations.</p>\n"
  example:
  - "\n<p>This example demonstrates how to use the <xref href=\"System.Threading.Tasks.Parallel.Invoke(System.Action[])\" data-throw-if-not-resolved=\"false\"></xref>method with other methods, anonymous delegates, and lambda expressions.</p>System.Threading.Tasks.Parallel#01"
  syntax:
    content: public static void Invoke(params Action[] actions)
    content.vb: Public Shared Sub Invoke(ParamArray actions As Action())
    parameters:
    - id: actions
      type: System.Action[]
      description: An array of <xref href="System.Action" data-throw-if-not-resolved="false"></xref> to execute.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>actions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that is thrown when any action in the <em>actions</em> array throws an exception.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>actions</em> array contains a <strong>null</strong> element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Action())
  name.vb: Invoke(Action())
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: Invoke(ParallelOptions, Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invoke
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 206
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</p>\n"
  remarks: "\n<p>This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> structure enables the caller to cancel the entire operation. For more information, see Cancellation in Managed Threads.</p>\n<p> No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</p>\n<p>For more information, see How to: Use Parallel.Invoke to Execute Parallel Operations.</p>\n"
  example:
  - 
  syntax:
    content: public static void Invoke(ParallelOptions parallelOptions, params Action[] actions)
    content.vb: Public Shared Sub Invoke(parallelOptions As ParallelOptions, ParamArray actions As Action())
    parameters:
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: "A <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> \ninstance that configures the behavior of this operation."
    - id: actions
      type: System.Action[]
      description: An array of <xref href="System.Action" data-throw-if-not-resolved="false"></xref> to execute.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> is set.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>actions</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The exception that is thrown when any action in the <em>actions</em> array throws an exception.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>actions</em> array contains a <strong>null</strong> element.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action())
  name.vb: Invoke(ParallelOptions, Action())
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  name: Action<Int32, ParallelLoopState>
  fullName: System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>
  fullname.vb: System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState)
  name.vb: Action(Of Int32, ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Action`2
  parent: System
  isExternal: false
  name: Action<T1, T2>
  fullName: System.Action<T1, T2>
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
- uid: System.Action{System.Int32}
  parent: System
  definition: System.Action`1
  name: Action<Int32>
  fullName: System.Action<System.Int32>
  fullname.vb: System.Action(Of System.Int32)
  name.vb: Action(Of Int32)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action`1
  parent: System
  isExternal: false
  name: Action<T>
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  name: Action<Int64, ParallelLoopState>
  fullName: System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>
  fullname.vb: System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState)
  name.vb: Action(Of Int64, ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: )
    fullName: )
- uid: System.Action{System.Int64}
  parent: System
  definition: System.Action`1
  name: Action<Int64>
  fullName: System.Action<System.Int64>
  fullname.vb: System.Action(Of System.Int64)
  name.vb: Action(Of Int64)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TLocal}}
  parent: System
  definition: System.Func`1
  name: Func<TLocal>
  fullName: System.Func<TLocal>
  fullname.vb: System.Func(Of TLocal)
  name.vb: Func(Of TLocal)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  name: Func<Int32, ParallelLoopState, TLocal, TLocal>
  fullName: System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullname.vb: System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  name.vb: Func(Of Int32, ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action{{TLocal}}
  parent: System
  definition: System.Action`1
  name: Action<TLocal>
  fullName: System.Action<TLocal>
  fullname.vb: System.Action(Of TLocal)
  name.vb: Action(Of TLocal)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`4
  parent: System
  isExternal: false
  name: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  name: Func<Int64, ParallelLoopState, TLocal, TLocal>
  fullName: System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullname.vb: System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  name.vb: Func(Of Int64, ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  definition: System.Action`3
  name: Action<TSource, ParallelLoopState, Int64>
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>
  fullname.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64)
  name.vb: Action(Of TSource, ParallelLoopState, Int64)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Action`3
  parent: System
  isExternal: false
  name: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  fullname.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  name: Action<TSource, ParallelLoopState>
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState>
  fullname.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState)
  name.vb: Action(Of TSource, ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource}}
  parent: System
  definition: System.Action`1
  name: Action<TSource>
  fullName: System.Action<TSource>
  fullname.vb: System.Action(Of TSource)
  name.vb: Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`5
  name: Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>
  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal)
  name.vb: Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`5
  parent: System
  isExternal: false
  name: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  name: Func<TSource, ParallelLoopState, TLocal, TLocal>
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  name.vb: Func(Of TSource, ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action[]
  isExternal: true
  name: Action[]
  fullName: System.Action[]
  fullname.vb: System.Action()
  name.vb: Action()
  spec.csharp:
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
