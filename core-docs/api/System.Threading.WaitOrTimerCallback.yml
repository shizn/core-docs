items:
- uid: System.Threading.WaitOrTimerCallback
  commentId: T:System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  parent: System.Threading
  children: []
  langs:
  - csharp
  - vb
  name: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadPool.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitOrTimerCallback
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1133
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: "\n<p>Represents a method to be called when a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> is signaled or times out.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> represents a callback method that you want to execute when a registered wait handle times out or is signaled. Create the delegate by passing your callback method to the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> constructor. Your method must have the signature shown here.</p>\n<p>Create the registered wait handle by passing the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate and a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. Your callback method executes each time the <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> times out or is signaled.</p>\n<p>[Visual Basic]</p>\n<p>Visual Basic users can omit the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> constructor, and simply use the <strong>AddressOf</strong> operator when passing the callback method to <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. Visual Basic automatically calls the correct delegate constructor.</p>\n<p>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> when you create the registered wait handle. Each time your callback method executes, the <em>state</em> parameter contains this object.</p>\n<p>For more information about using callback methods to synchronize thread pool threads, see The Managed Thread Pool.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate to represent a callback method that is executed when a wait handle is signaled.</p>\n<p>The example also shows how to use the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is <code>WaitProc</code> and the wait handle is an <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The example defines a <code>TaskInfo</code> class to hold the information that is passed to the callback when it executes. The example creates a <code>TaskInfo</code> object and assigns it some string data. The <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that is returned by the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is assigned to the <code>Handle</code> field of the <code>TaskInfo</code> object, so that the callback method has access to the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>In addition to the <code>TaskInfo</code> object, the call to the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method specifies the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> the task waits on, a <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that represents the <code>WaitProc</code> callback method, a one-second timeout interval, and multiple callbacks. </p>\n<p>When the main thread signals the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> by calling its <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate is invoked. The <code>WaitProc</code> method tests <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the <code>WaitProc</code> method unregisters the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>, stopping further callbacks. In the case of a timeout, the task continues waiting. The <code>WaitProc</code> method ends by printing a message to the console.</p>System.Threading.ThreadPool RegisterWaitForSingleObject0#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
    content.vb: >-
      <ComVisible(True)>

      Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)
    parameters:
    - id: state
      type: System.Object
    - id: timedOut
      type: System.Boolean
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
