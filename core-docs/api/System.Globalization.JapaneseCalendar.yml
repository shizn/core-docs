items:
- uid: System.Globalization.JapaneseCalendar
  commentId: T:System.Globalization.JapaneseCalendar
  id: JapaneseCalendar
  parent: System.Globalization
  children:
  - System.Globalization.JapaneseCalendar.#ctor
  - System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.JapaneseCalendar.Eras
  - System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  - System.Globalization.JapaneseCalendar.MinSupportedDateTime
  - System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.JapaneseCalendar.TwoDigitYearMax
  langs:
  - csharp
  - vb
  name: JapaneseCalendar
  fullName: System.Globalization.JapaneseCalendar
  type: Class
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JapaneseCalendar
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 129
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Represents the Japanese calendar.</p>\n"
  remarks: "\n<p>The Japanese calendar, which is also known as the Wareki calendar, works exactly like the Gregorian calendar, except that the year and era are different.</p>\n<p>For information about using the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> class and the other calendar classes in the .NET Framework, see Working with Calendars.</p>\n<p>The Japanese calendar recognizes one era for every emperor's reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called \"Gannen.\" Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.</p>\n<p>This class assigns numbers to the eras as follows: </p>\n<p>GetEra value </p>\n<p>Era Name </p>\n<p>Era Abbreviation </p>\n<p>Gregorian Dates </p>\n<p>This class handles dates from September 8 in the year Meiji 1 (in the Gregorian calendar, September 8, 1868). Although the Japanese calendar was switched from a lunar calendar to a solar calendar in the year Meiji 6 (1873 of the Gregorian calendar), this implementation is based on the solar calendar only.</p>\n<p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.</p>\n<p>The Japanese calendar has 12 months with 28 to 31 days each: </p>\n<p>GetMonth value </p>\n<p>Month </p>\n<p>English </p>\n<p>Days in common years </p>\n<p>Days in leap years </p>\n<p>Nigatsu, which is equivalent to the Gregorian calendar month of February, has 29 days during leap years and 28 during common years.</p>\n<p>The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the first day of Ichigatsu in the year Heisei 13 in the Japanese calendar.</p>\n<p>If the application is using the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> class, <xref href=\"System.DateTime.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> recognizes the era abbreviations in front of the year. The abbreviation is either the single-character case-insensitive Latin alphabet abbreviation or the single-character Kanji abbreviation.</p>\n<p>Each <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object supports a set of calendars. The <xref href=\"System.Globalization.CultureInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property returns the default calendar for the culture, and the <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, the application should set the <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> to a new <xref href=\"System.Globalization.Calendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: 'public class JapaneseCalendar : Calendar'
    content.vb: >-
      Public Class JapaneseCalendar
          Inherits Calendar
  seealso:
  - type: System.Globalization.Calendar
    commentId: T:System.Globalization.Calendar
  - type: System.Globalization.GregorianCalendar
    commentId: T:System.Globalization.GregorianCalendar
  - type: System.Globalization.CultureInfo.Calendar
    commentId: P:System.Globalization.CultureInfo.Calendar
  - type: System.Globalization.CultureInfo.OptionalCalendars
    commentId: P:System.Globalization.CultureInfo.OptionalCalendars
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.JapaneseCalendar.#ctor
  commentId: M:System.Globalization.JapaneseCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: JapaneseCalendar()
  fullName: System.Globalization.JapaneseCalendar.JapaneseCalendar()
  type: Constructor
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 131
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public JapaneseCalendar()
    content.vb: Public Sub New
  exceptions:
  - type: System.TypeInitializationException
    commentId: T:System.TypeInitializationException
    description: "\n<p>Unable to initialize a <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> object because of missing culture information.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.JapaneseCalendar.Eras
  commentId: P:System.Globalization.JapaneseCalendar.Eras
  id: Eras
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: Eras
  fullName: System.Globalization.JapaneseCalendar.Eras
  type: Property
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Eras
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 132
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets the list of eras in the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The Japanese calendar recognizes one era for every emperor's reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called \"Gannen.\" Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.</p>\n<p>This class assigns numbers to the eras as follows: </p>\n<p>GetEra value </p>\n<p>Era Name </p>\n<p>Era Abbreviation </p>\n<p>Gregorian Dates </p>\n<p>This class handles dates from September 8 in the year Meiji 1 (January 1, 1868 of the Gregorian calendar). Although the Japanese calendar was switched from a lunar calendar to a solar calendar in the year Meiji 6 (1873 of the Gregorian calendar), this implementation is based on the solar calendar only.</p>\n<p>Should additional eras be added in the future, applications may encounter more than the expected four eras for the Japanese calendar. Applications should be tested to ensure that they continue to work in such an event; see <see href=\"http://go.microsoft.com/fwlink/p/?LinkId=239618\">Era Handling for the Japanese Calendar</see>.</p>\n"
  example:
  - "\n<p>The following example displays the values contained in the <xref href=\"System.Globalization.JapaneseCalendar.Eras\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Globalization.JapaneseCalendar.Eras#1"
  syntax:
    content: public override int[] Eras { get; }
    content.vb: Public Overrides ReadOnly Property Eras As Integer()
    parameters: []
    return:
      type: System.Int32[]
      description: "\n<p>An array of integers that represents the eras in the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  commentId: P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: MaxSupportedDateTime
  fullName: System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  type: Property
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxSupportedDateTime
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 133
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets the latest date and time supported by the current <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example gets the minimum value and the maximum value of the calendar.</p>System.Globalization.JapaneseCalendar_MinMax#1"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    content.vb: Public Overrides ReadOnly Property MaxSupportedDateTime As DateTime
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>The latest date and time supported by the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Globalization.JapaneseCalendar.MinSupportedDateTime
  commentId: P:System.Globalization.JapaneseCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: MinSupportedDateTime
  fullName: System.Globalization.JapaneseCalendar.MinSupportedDateTime
  type: Property
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinSupportedDateTime
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 134
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets the earliest date and time supported by the current <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The earliest date supported by the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> class is September 8, 1868 C.E., in the first year of the Meiji era. Ordinarily, date and time operations that use the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> class throw an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception for dates before this date. However, some members, such as the <xref href=\"System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method, support dates from January 1, 1868 through September 7 in the year Meiji 1.</p>\n"
  example:
  - "\n<p>The following example gets the earliest and latest dates supported by the calendar.</p>System.Globalization.JapaneseCalendar_MinMax#1"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    content.vb: Public Overrides ReadOnly Property MinSupportedDateTime As DateTime
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>The earliest date and time supported by the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> type, which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Globalization.JapaneseCalendar.TwoDigitYearMax
  commentId: P:System.Globalization.JapaneseCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: TwoDigitYearMax
  fullName: System.Globalization.JapaneseCalendar.TwoDigitYearMax
  type: Property
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TwoDigitYearMax
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 135
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n"
  remarks: "\n<p>This property implements <xref href=\"System.Globalization.Calendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Because the year in the Japanese calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <xref href=\"System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    content.vb: Public Overrides Property TwoDigitYearMax As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified in a set operation is less than 99. </p>\n<p>-or- </p>\n<p>The value specified in a set operation is greater than 8011 (or <strong>MaxSupportedDateTime.Year</strong>).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In a set operation, the current instance is read-only.</p>\n"
  seealso:
  - type: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: AddMonths(DateTime, Int32)
  fullName: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddMonths
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 136
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is the specified number of months away from the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting month is outside the year of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. The era part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting year is outside the era of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. The time-of-day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> remains the same as the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For example, if the specified month is Juugatsu (October), which has 31 days, the specified day is the 31st day of that month, and <em>months</em> is 6, the resulting year is one more than the specified year, the resulting month is Shigatsu (April), and the resulting day is the 30th day, which is the last day in Shigatsu (April).</p>\n<p>If <em>months</em> is negative, the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is earlier than the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The<xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value always equals <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>. You can preserve the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>time</em> parameter by calling the <xref href=\"System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\" data-throw-if-not-resolved=\"false\"></xref> method, as the following example shows.</p>System.Globalization.Calendar.AddMethods#5"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override DateTime AddMonths(DateTime time, int months)
    content.vb: Public Overrides Function AddMonths(time As DateTime, months As Integer) As DateTime
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to which to add months. </p>\n"
    - id: months
      type: System.Int32
      description: "\n<p>The number of months to add. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that results from adding the specified number of months to the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is outside the supported range. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>months</em> is less than -120000.</p>\n<p>-or- </p>\n<p>\n<em>months</em> is greater than 120000. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: AddYears(DateTime, Int32)
  fullName: System.Globalization.JapaneseCalendar.AddYears(System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddYears
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 137
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is the specified number of years away from the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> remains the same as the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. The era part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting year is outside the era of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. The time-of-day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> remains the same as the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For example, Nigatsu (February) has 28 days except during leap years when it has 29 days. If the specified date is the 29th day of Nigatsu (February) in a leap year and the value of <em>years</em> is 1, the resulting date will be the 28th day of Nigatsu (February) in the following year.</p>\n<p>If <em>years</em> is negative, the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is earlier than the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The<xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value always equals <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>. You can preserve the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>time</em> parameter by calling the <xref href=\"System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\" data-throw-if-not-resolved=\"false\"></xref> method, as the following example shows.</p>System.Globalization.Calendar.AddMethods#8"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override DateTime AddYears(DateTime time, int years)
    content.vb: Public Overrides Function AddYears(time As DateTime, years As Integer) As DateTime
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to which to add years. </p>\n"
    - id: years
      type: System.Int32
      description: "\n<p>The number of years to add. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that results from adding the specified number of years to the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is outside the supported range. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>time</em> is outside the supported range of the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n<p>-or-</p>\n<p>\n<em>years</em> is less than -10,000 or greater than 10,000. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetDayOfMonth(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDayOfMonth
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 138
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the day of the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override int GetDayOfMonth(DateTime time)
    content.vb: Public Overrides Function GetDayOfMonth(time As DateTime) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer from 1 to 31 that represents the day of the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.DateTime.Day
    commentId: P:System.DateTime.Day
  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetDayOfWeek(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDayOfWeek
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 139
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the day of the week in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> values are as follows: </p>\n<p>DayOfWeek value </p>\n<p>which indicates </p>\n<table><tbody><tr><td>\n<p>Sunday </p>\n</td><td>\n<p>日曜日 (Nichiyoubi) </p>\n</td></tr><tr><td>\n<p>Monday </p>\n</td><td>\n<p>月曜日 (Getsuyoubi) </p>\n</td></tr><tr><td>\n<p>Tuesday </p>\n</td><td>\n<p>火曜日 (Kayoubi) </p>\n</td></tr><tr><td>\n<p>Wednesday </p>\n</td><td>\n<p>水曜日 (Suiyoubi) </p>\n</td></tr><tr><td>\n<p>Thursday </p>\n</td><td>\n<p>木曜日 (Mokuyoubi) </p>\n</td></tr><tr><td>\n<p>Friday </p>\n</td><td>\n<p>金曜日 (Kinyoubi) </p>\n</td></tr><tr><td>\n<p>Saturday </p>\n</td><td>\n<p>土曜日 (Doyoubi) </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override DayOfWeek GetDayOfWeek(DateTime time)
    content.vb: Public Overrides Function GetDayOfWeek(time As DateTime) As DayOfWeek
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.DayOfWeek
      description: "\n<p>A <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value that represents the day of the week in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.DateTime.DayOfWeek
    commentId: P:System.DateTime.DayOfWeek
  - type: System.DayOfWeek
    commentId: T:System.DayOfWeek
  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetDayOfYear(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDayOfYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 140
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the day of the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The day of the year is defined as the number of days from the first day of the year. For example, <xref href=\"System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> for the first day of the first month returns 1, and <xref href=\"System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> for the last day of the last month returns the total number of days in that year, which is the same value as that returned by <xref href=\"System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override int GetDayOfYear(DateTime time)
    content.vb: Public Overrides Function GetDayOfYear(time As DateTime) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer from 1 to 366 that represents the day of the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.DateTime.DayOfYear
    commentId: P:System.DateTime.DayOfYear
  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetDaysInMonth(Int32, Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDaysInMonth
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 141
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n"
  remarks: "\n<p>For example, this method returns 28 or 29 for Nigatsu (February, <em>month</em> = 2), depending on whether <em>year</em> is a leap year.</p>\n"
  example:
  - "\n<p>The following code example calls <xref href=\"System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for the second month in each of five years in each era.</p>System.Globalization.JapaneseCalendar.GetDaysInMonth#1"
  syntax:
    content: public override int GetDaysInMonth(int year, int month, int era)
    content.vb: Public Overrides Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 12 that represents the month. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of days in the specified month in the specified year in the specified era.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>month</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetDaysInYear(Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDaysInYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 142
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the number of days in the specified year in the specified era.</p>\n"
  remarks: "\n<p>For example, this method returns 365 or 366, depending on whether <em>year</em> is a leap year.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for five years in each era.</p>System.Globalization.JapaneseCalendar.GetDaysInYear#1"
  syntax:
    content: public override int GetDaysInYear(int year, int era)
    content.vb: Public Overrides Function GetDaysInYear(year As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of days in the specified year in the specified era.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetEra(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEra
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 143
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the era in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The Japanese calendar recognizes one era for every emperor's reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called \"Gannen.\" Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.</p>\n<p>This class assigns numbers to the eras as follows: </p>\n<p>GetEra value </p>\n<p>Era Name </p>\n<p>Era Abbreviation </p>\n<p>Gregorian Dates </p>\n<p>Ordinarily, the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> class supports dates from September 8 in the year Meiji 1 (September 8, 1868 of the Gregorian calendar), which is the value of the <xref href=\"System.Globalization.JapaneseCalendar.MinSupportedDateTime\" data-throw-if-not-resolved=\"false\"></xref> property. However, the <xref href=\"System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method successfully returns the era for dates from January 1 through September 7 in the year Meiji 1 (January 1, 1868 through September 7, 1868 in the Gregorian calendar). For dates earlier than January 1, 1868 in the Gregorian calendar, the method throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override int GetEra(DateTime time)
    content.vb: Public Overrides Function GetEra(time As DateTime) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that represents the era in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is outside the supported range. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - type: System.Globalization.Calendar.GetHour(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
  - type: System.Globalization.Calendar.GetMinute(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
  - type: System.Globalization.Calendar.GetSecond(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetLeapMonth(Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetLeapMonth
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 144
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Calculates the leap month for a specified year and era.</p>\n"
  remarks: "\n<p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref href=\"System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref href=\"System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetLeapMonth(int year, int era)
    content.vb: Public Overrides Function GetLeapMonth(year As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>A year.</p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An era.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The return value is always 0 because the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> type does not support the notion of a leap month.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> or <em>era</em> is outside the range supported by the <xref href=\"System.Globalization.JapaneseCalendar\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetMonth(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMonth
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 145
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override int GetMonth(DateTime time)
    content.vb: Public Overrides Function GetMonth(time As DateTime) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer from 1 to 12 that represents the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.DateTime.Month
    commentId: P:System.DateTime.Month
  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - type: System.Globalization.Calendar.GetHour(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
  - type: System.Globalization.Calendar.GetMinute(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
  - type: System.Globalization.Calendar.GetSecond(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetMonthsInYear(Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMonthsInYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 146
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the number of months in the specified year in the specified era.</p>\n"
  example:
  - "\n<p>The following code example calls <xref href=\"System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for five years in each era.</p>System.Globalization.JapaneseCalendar.GetMonthsInYear#1"
  syntax:
    content: public override int GetMonthsInYear(int year, int era)
    content.vb: Public Overrides Function GetMonthsInYear(year As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The return value is always 12.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  commentId: M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)
  fullName: System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetWeekOfYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 147
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the week of the year that includes the date in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method can be used to determine the number of weeks in the year by setting the <em>time</em> parameter to the last day of the year.</p>\n<p>The <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> property contains culture-specific values that can be used for the <em>rule</em> and <em>firstDayOfWeek</em> parameters.</p>\n<p>The <xref href=\"System.Globalization.DateTimeFormatInfo.FirstDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> contains the default <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Globalization.DateTimeFormatInfo.CalendarWeekRule\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> contains the default <xref href=\"System.Globalization.CalendarWeekRule\" data-throw-if-not-resolved=\"false\"></xref> value that defines a calendar week for a specific culture, using the calendar specified in the <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For example, in <xref href=\"System.Globalization.GregorianCalendar\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\" data-throw-if-not-resolved=\"false\"></xref> method for January 1 returns 1.</p>\n"
  example:
  - "\n<p>The following code example shows how the result of <xref href=\"System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\" data-throw-if-not-resolved=\"false\"></xref> varies depending on the <xref href=\"System.Globalization.DateTimeFormatInfo.FirstDayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CalendarWeekRule\" data-throw-if-not-resolved=\"false\"></xref> values used. If the specified date is the last day of the year, <xref href=\"System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\" data-throw-if-not-resolved=\"false\"></xref> returns the total number of weeks in that year.</p>System.Globalization.Calendar.GetWeekOfYear#1"
  syntax:
    content: public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)
    content.vb: Public Overrides Function GetWeekOfYear(time As DateTime, rule As CalendarWeekRule, firstDayOfWeek As DayOfWeek) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    - id: rule
      type: System.Globalization.CalendarWeekRule
      description: "\n<p>One of the <xref href=\"System.Globalization.CalendarWeekRule\" data-throw-if-not-resolved=\"false\"></xref> values that defines a calendar week. </p>\n"
    - id: firstDayOfWeek
      type: System.DayOfWeek
      description: "\n<p>One of the <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> values that represents the first day of the week. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 1-based integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>time</em> or <em>firstDayOfWeek</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>rule</em> is not a valid <xref href=\"System.Globalization.CalendarWeekRule\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: GetYear(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 148
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the values of several components of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> in terms of the Japanese calendar.</p>System.Globalization.JapaneseCalendar_AddGet#1"
  syntax:
    content: public override int GetYear(DateTime time)
    content.vb: Public Overrides Function GetYear(time As DateTime) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that represents the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.DateTime.Year
    commentId: P:System.DateTime.Year
  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - type: System.Globalization.Calendar.GetHour(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
  - type: System.Globalization.Calendar.GetMinute(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
  - type: System.Globalization.Calendar.GetSecond(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: IsLeapDay(Int32, Int32, Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLeapDay
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 149
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified date in the specified era is a leap day.</p>\n"
  remarks: "\n<p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.</p>\n<p>A leap day is a day that occurs only in a leap year. For example, the 29th day of Nigatsu (February) is the only leap day.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for the last day of the second month (February) for five years in each of the eras.</p>System.Globalization.JapaneseCalendar.IsLeapDay#1"
  syntax:
    content: public override bool IsLeapDay(int year, int month, int day, int era)
    content.vb: Public Overrides Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 12 that represents the month. </p>\n"
    - id: day
      type: System.Int32
      description: "\n<p>An integer from 1 to 31 that represents the day. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>, if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>month</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>day</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: IsLeapMonth(Int32, Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLeapMonth
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 150
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n"
  remarks: "\n<p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.</p>\n<p>A leap month is an entire month that occurs only in a leap year. The Japanese calendar does not have any leap months.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for all the months in five years in the current era.</p>System.Globalization.JapaneseCalendar.IsLeapMonth#1"
  syntax:
    content: public override bool IsLeapMonth(int year, int month, int era)
    content.vb: Public Overrides Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 12 that represents the month. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>month</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: IsLeapYear(Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLeapYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 151
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified year in the specified era is a leap year.</p>\n"
  remarks: "\n<p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for five years in each of the eras.</p>System.Globalization.JapaneseCalendar.IsLeapYear#1"
  syntax:
    content: public override bool IsLeapYear(int year, int era)
    content.vb: Public Overrides Function IsLeapYear(year As Integer, era As Integer) As Boolean
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>, if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: System.Globalization.JapaneseCalendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDateTime
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 152
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is set to the specified date and time in the specified era.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.</p>\n"
  syntax:
    content: public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)
    content.vb: Public Overrides Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As DateTime
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 12 that represents the month. </p>\n"
    - id: day
      type: System.Int32
      description: "\n<p>An integer from 1 to 31 that represents the day. </p>\n"
    - id: hour
      type: System.Int32
      description: "\n<p>An integer from 0 to 23 that represents the hour. </p>\n"
    - id: minute
      type: System.Int32
      description: "\n<p>An integer from 0 to 59 that represents the minute. </p>\n"
    - id: second
      type: System.Int32
      description: "\n<p>An integer from 0 to 59 that represents the second. </p>\n"
    - id: millisecond
      type: System.Int32
      description: "\n<p>An integer from 0 to 999 that represents the millisecond. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is set to the specified date and time in the current era.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>month</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>day</em> is outside the range supported by the calendar.</p>\n<p>-or- </p>\n<p>\n<em>hour</em> is less than zero or greater than 23.</p>\n<p>-or- </p>\n<p>\n<em>minute</em> is less than zero or greater than 59.</p>\n<p>-or- </p>\n<p>\n<em>second</em> is less than zero or greater than 59.</p>\n<p>-or- </p>\n<p>\n<em>millisecond</em> is less than zero or greater than 999.</p>\n<p>-or- </p>\n<p>\n<em>era</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.JapaneseCalendar.Eras
    commentId: P:System.Globalization.JapaneseCalendar.Eras
  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  commentId: M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  - vb
  name: ToFourDigitYear(Int32)
  fullName: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToFourDigitYear
    path: src/System.Globalization.Calendars/ref/System.Globalization.Calendars.cs
    startLine: 153
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Converts the specified year to a four-digit year by using the <xref href=\"System.Globalization.JapaneseCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> property to determine the appropriate century.</p>\n"
  remarks: "\n<p>This method implements <xref href=\"System.Globalization.Calendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Because the year in the Japanese calendar is typically less than four digits long, this implementation always returns the value of the <em>year</em> parameter.</p>\n<p>\n<xref href=\"System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> supports either a two-digit year or a four-digit year. However, a valid year is generally represented as two digits (less than 100). Passing a two-digit year value causes the method to convert the value to a four-digit value according to the <xref href=\"System.Globalization.JapaneseCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> value representing the appropriate century. If the application supplies a four-digit value, or if it supplies zero or a negative value, <xref href=\"System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> throws an exception.</p>\n"
  syntax:
    content: public override int ToFourDigitYear(int year)
    content.vb: Public Overrides Function ToFourDigitYear(year As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer (usually two digits) that represents the year to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is outside the range supported by the calendar. </p>\n"
  seealso:
  - type: System.Globalization.JapaneseCalendar.TwoDigitYearMax
    commentId: P:System.Globalization.JapaneseCalendar.TwoDigitYearMax
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32[]
  isExternal: false
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ()
    fullName: ()
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.DayOfWeek
  parent: System
  isExternal: false
  name: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.CalendarWeekRule
  parent: System.Globalization
  isExternal: false
  name: CalendarWeekRule
  fullName: System.Globalization.CalendarWeekRule
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.TypeInitializationException
  isExternal: false
  name: TypeInitializationException
  fullName: System.TypeInitializationException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
