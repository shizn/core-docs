items:
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  id: PropertyInfo
  parent: System.Reflection
  children:
  - System.Reflection.PropertyInfo.Attributes
  - System.Reflection.PropertyInfo.CanRead
  - System.Reflection.PropertyInfo.CanWrite
  - System.Reflection.PropertyInfo.Equals(System.Object)
  - System.Reflection.PropertyInfo.GetConstantValue
  - System.Reflection.PropertyInfo.GetHashCode
  - System.Reflection.PropertyInfo.GetIndexParameters
  - System.Reflection.PropertyInfo.GetMethod
  - System.Reflection.PropertyInfo.GetValue(System.Object)
  - System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  - System.Reflection.PropertyInfo.IsSpecialName
  - System.Reflection.PropertyInfo.PropertyType
  - System.Reflection.PropertyInfo.SetMethod
  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  langs:
  - csharp
  - vb
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PropertyInfo
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 21
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a property and provides access to property metadata.</p>\n"
  remarks: "\n<p>Properties are logically the same as fields. A property is a named aspect of an object's state whose value is typically accessible through <strong>get</strong> and <strong>set</strong> accessors. Properties may be read-only, in which case a set routine is not supported.</p>\n<p>To determine whether a property is <strong>static</strong>, you must obtain the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for the <strong>get</strong> or <strong>set</strong> accessor, by calling the <see cref=\"Overload:System.Reflection.PropertyInfo.GetGetMethod\"></see> or the <see cref=\"Overload:System.Reflection.PropertyInfo.GetSetMethod\"></see> method, and examine its <xref href=\"System.Reflection.MethodBase.IsStatic\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Several methods in this class assume that the <strong>get</strong> accessor and <strong>set</strong> accessor methods of a property have certain formats. The signatures of the <strong>get</strong> and <strong>set</strong> methods must match the following convention: </p>\n<ul><li>\n<p>The return type of the <strong>get</strong> method and the last argument of the <strong>set</strong> method must be identical. This is the type of the property.</p>\n</li><li>\n<p>The <strong>get</strong> and <strong>set</strong> methods must have the same number, type, and order of indices.</p>\n</li></ul>\n<p>If this format is not followed, the behavior of the <strong>GetValue</strong> and <strong>SetValue</strong> methods is undefined.</p>\n<p>Calling <xref href=\"System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> on <strong>PropertyInfo</strong> when the <em>inherit</em> parameter of <strong>GetCustomAttributes</strong> is <strong>true</strong> does not walk the type hierarchy. Use <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> to inherit custom attributes.</p>\n"
  example:
  - "\n<p>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</p>\n<p>This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: example.exe > propertyinfo.txt</p>Reflection#1"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_PropertyInfo))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class PropertyInfo : MemberInfo, ICustomAttributeProvider, _MemberInfo, _PropertyInfo
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_PropertyInfo))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class PropertyInfo
          Inherits MemberInfo
          Implements ICustomAttributeProvider, _MemberInfo, _PropertyInfo
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.PropertyInfo.Attributes
  commentId: P:System.Reflection.PropertyInfo.Attributes
  id: Attributes
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.PropertyInfo.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 91
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the attributes for this property.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.PropertyInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property returns the attributes associated with the property represented by this <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object.  The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <strong>SpecialName</strong> property, and so on. Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref href=\"System.Reflection.PropertyInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.Reflection.PropertyAttributes.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In most cases, you probably want to retrieve the custom attributes associated with a property. To do this, retrieve the value of the <xref href=\"System.Reflection.MemberInfo.CustomAttributes\" data-throw-if-not-resolved=\"false\"></xref> property, or call one of the overloads of the <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>To get the <xref href=\"System.Reflection.PropertyInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property: </p>\n<ol><li>\n<p>Get a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the type to which the property belongs.</p>\n</li><li>\n<p>Get the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object by calling an overload of the <xref href=\"System.Type.GetProperty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>Retrieve the property's attributes from the <xref href=\"System.Reflection.PropertyInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ol>\n<p>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref href=\"System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method and supplying a value for the <em>attributes</em> argument.  </p>\n"
  syntax:
    content: public abstract PropertyAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As PropertyAttributes
    parameters: []
    return:
      type: System.Reflection.PropertyAttributes
  seealso:
  - type: System.Reflection.MemberInfo.CustomAttributes
    commentId: P:System.Reflection.MemberInfo.CustomAttributes
  - type: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
    commentId: M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.CanRead
  commentId: P:System.Reflection.PropertyInfo.CanRead
  id: CanRead
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Reflection.PropertyInfo.CanRead
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanRead
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 93
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the property can be read.</p>\n"
  remarks: "\n<p>If the property does not have a <strong>get</strong> accessor, it cannot be read.</p>\n<p>To get the <strong>CanRead</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>PropertyInfo</strong>. From the <strong>PropertyInfo</strong>, get the <strong>CanRead</strong> value.</p>\n"
  example:
  - "\n<p>The following example defines two properties. The first property is readable and the <strong>CanRead</strong> property is <strong>true</strong>. The second property is not readable (there is no get accessor), and the <strong>CanRead</strong> property is <strong>false</strong>.</p>Classic PropertyInfo.CanRead Example#1"
  syntax:
    content: public abstract bool CanRead { get; }
    content.vb: Public MustOverride ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.CanWrite
  commentId: P:System.Reflection.PropertyInfo.CanWrite
  id: CanWrite
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Reflection.PropertyInfo.CanWrite
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanWrite
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 95
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the property can be written to.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Reflection.PropertyInfo.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong> if the property has a <strong>set</strong> accessor, even if the accessor is <strong>private</strong>, <strong>internal</strong> (or <strong>Friend</strong> in Visual Basic), or <strong>protected</strong>.   If the property does not have a <strong>set</strong> accessor, the method returns <strong>false</strong>. </p>\n<p>To get the value of the <xref href=\"System.Reflection.PropertyInfo.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property: </p>\n<ol><li>\n<p>Get the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object of the type that includes the property.</p>\n</li><li>\n<p>Call the <xref href=\"System.Type.GetProperty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the property.</p>\n</li><li>\n<p>Retrieve the value of the <xref href=\"System.Reflection.PropertyInfo.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ol>\n"
  example:
  - "\n<p>The following example defines two properties. The first property is writable and the <strong>CanWrite</strong> property is <strong>true</strong>. The second property is not writable (there is no <strong>set</strong> accessor), and the <strong>CanWrite</strong> property is <strong>false</strong>.</p>Classic PropertyInfo.CanWrite Example#1"
  syntax:
    content: public abstract bool CanWrite { get; }
    content.vb: Public MustOverride ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.GetMethod
  commentId: P:System.Reflection.PropertyInfo.GetMethod
  id: GetMethod
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetMethod
  fullName: System.Reflection.PropertyInfo.GetMethod
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethod
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 135
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <strong>get</strong> accessor for this property.</p>\n"
  syntax:
    content: public virtual MethodInfo GetMethod { get; }
    content.vb: Public Overridable ReadOnly Property GetMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.PropertyInfo.IsSpecialName
  commentId: P:System.Reflection.PropertyInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  fullName: System.Reflection.PropertyInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSpecialName
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 155
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the property is the special name.</p>\n"
  remarks: "\n<p>The <strong>SpecialName</strong> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</p>\n<p>To get the <strong>IsSpecialName</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>PropertyInfo</strong>. From the <strong>PropertyInfo</strong>, get the <strong>IsSpecialName</strong> value.</p>\n"
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.PropertyInfo.PropertyType
  commentId: P:System.Reflection.PropertyInfo.PropertyType
  id: PropertyType
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: PropertyType
  fullName: System.Reflection.PropertyInfo.PropertyType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PropertyType
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 79
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of this property.</p>\n"
  remarks: "\n<p>To determine the type of a particular property, do the following: </p>\n<ol><li>\n<p>Get a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref href=\"System.Object.GetType\" data-throw-if-not-resolved=\"false\"></xref> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates. </p>\n</li><li>\n<p>Get a <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the property in which you're interested. You can do this by getting an array of all properties from the <xref href=\"System.Type.GetProperties\" data-throw-if-not-resolved=\"false\"></xref> method and then iterating the elements in the array, or you can retrieve the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the property directly by calling the <xref href=\"System.Type.GetProperty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and specifying the property name. </p>\n</li><li>\n<p>Retrieve the value of the <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> property from the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</li></ol>\n"
  example:
  - "\n<p>The following example defines an <code>Employee</code> class that has five properties. It then uses retrieves an array of <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent those properties and displays the name and type of each. </p>System.Reflection.PropertyInfo.PropertyType#1"
  syntax:
    content: public abstract Type PropertyType { get; }
    content.vb: Public MustOverride ReadOnly Property PropertyType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.SetMethod
  commentId: P:System.Reflection.PropertyInfo.SetMethod
  id: SetMethod
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: SetMethod
  fullName: System.Reflection.PropertyInfo.SetMethod
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetMethod
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 143
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <strong>set</strong> accessor for this property.</p>\n"
  remarks: "\n<p>Retrieving the value of the <xref href=\"System.Reflection.PropertyInfo.SetMethod\" data-throw-if-not-resolved=\"false\"></xref> property is equivalent to calling the <xref href=\"System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with a value of <strong>true</strong> for the <em>nonPublic</em> argument. </p>\n"
  syntax:
    content: public virtual MethodInfo SetMethod { get; }
    content.vb: Public Overridable ReadOnly Property SetMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  seealso:
  - type: System.Reflection.PropertyInfo.GetMethod
    commentId: P:System.Reflection.PropertyInfo.GetMethod
  - type: System.Reflection.PropertyInfo.CanWrite
    commentId: P:System.Reflection.PropertyInfo.CanWrite
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.PropertyInfo.Equals(System.Object)
  commentId: M:System.Reflection.PropertyInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.PropertyInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.PropertyInfo.GetConstantValue
  commentId: M:System.Reflection.PropertyInfo.GetConstantValue
  id: GetConstantValue
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetConstantValue()
  fullName: System.Reflection.PropertyInfo.GetConstantValue()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetConstantValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 69
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a literal value associated with the property by a compiler. </p>\n"
  remarks: "\n<p>This method is provided for designers of managed compilers and code analyzers.</p>\n<p>Do not use this method in the reflection-only context, because it might cause code to execute. Use the <xref href=\"System.Reflection.PropertyInfo.GetRawConstantValue\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n<p>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.</p>\n<p>For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  syntax:
    content: public virtual object GetConstantValue()
    content.vb: Public Overridable Function GetConstantValue As Object
    return:
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.PropertyInfo.GetHashCode
  commentId: M:System.Reflection.PropertyInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.PropertyInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.PropertyInfo.GetIndexParameters
  commentId: M:System.Reflection.PropertyInfo.GetIndexParameters
  id: GetIndexParameters
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetIndexParameters()
  fullName: System.Reflection.PropertyInfo.GetIndexParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetIndexParameters
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 89
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>When overridden in a derived class, returns an array of all the index parameters for the property.</p>\n"
  remarks: "\n<p>Extract any required parameter information from the returned array.</p>\n<p>To use the <strong>GetIndexParameters</strong> method, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>PropertyInfo</strong>. From the <strong>PropertyInfo</strong>, use the <strong>GetIndexParameters</strong> method.</p>\n"
  example:
  - "\n<p>The following example displays the index parameters of the specified property.</p>Classic PropertyInfo.GetIndexParameters Example#1"
  syntax:
    content: public abstract ParameterInfo[] GetIndexParameters()
    content.vb: Public MustOverride Function GetIndexParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.PropertyInfo.GetValue(System.Object)
  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  fullName: System.Reflection.PropertyInfo.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 97
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the property value of a specified object.</p>\n"
  remarks: "\n<p>You call the <xref href=\"System.Reflection.PropertyInfo.GetValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref href=\"System.Reflection.TargetParameterCountException\" data-throw-if-not-resolved=\"false\"></xref> exception. You can determine whether a property is indexed or not by calling the <xref href=\"System.Reflection.PropertyInfo.GetIndexParameters\" data-throw-if-not-resolved=\"false\"></xref> method. If the length of the returned <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array is zero, the property is not indexed. </p>\n<p>This is a convenience method that provides an implementation for the abstract <xref href=\"System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method with the <xref href=\"System.Reflection.BindingFlags\" data-throw-if-not-resolved=\"false\"></xref> parameter set to <xref href=\"System.Reflection.BindingFlags.Default\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Reflection.Binder\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>null</strong>, the object array of index values set to <strong>null</strong>, and the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example defines a <code>Planet</code> class that has two properties: <code>Name</code>, the name of the planet; and <code>Distance</code>, the planet's distance from Earth. The example instantiates a <code>Planet</code> object that represents the planet Jupiter and passes it to a <code>GetPropertyValues</code> method that displays information about the properties and uses the <xref href=\"System.Reflection.PropertyInfo.GetValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to get the value of each <code>Planet</code> property. </p>System.Reflection.PropertyInfo.GetValue#1"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public object GetValue(object obj)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  id: GetValue(System.Object,System.Object[])
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object, Object[])
  fullName: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 104
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the property value of a specified object with optional index values for indexed properties.</p>\n"
  remarks: "\n<p>To determine whether a property is indexed, use the <xref href=\"System.Reflection.PropertyInfo.GetIndexParameters\" data-throw-if-not-resolved=\"false\"></xref> method. If the resulting array has 0 (zero) elements, the property is not indexed.</p>\n<p>This is a convenience method that provides an implementation for the abstract <strong>GetValue</strong> method with a <strong>BindingFlags</strong> parameter of <strong>Default</strong>, the <strong>Binder</strong> set to <strong>null</strong>, and the <strong>CultureInfo</strong> set to <strong>null</strong>.</p>\n<p>Because static properties belong to the type, not individual objects, get static properties by passing <strong>null</strong> as the object argument. For example, use the following code to get the static <strong>CurrentCulture</strong> property of <strong>CultureInfo</strong> : </p>\n<pre><code>PropertyInfo CurCultProp = \n(typeof(CultureInfo)).GetProperty(\"CurrentCulture\"); \nConsole.WriteLine(\"CurrCult: \" +\nCurCultProp.GetValue(null,null));</code></pre>\n<p>To use the <strong>GetValue</strong> method, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>PropertyInfo</strong>. From the <strong>PropertyInfo</strong>, use the <strong>GetValue</strong> method.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example shows how to get the value of an indexed property. The <xref href=\"System.String.Chars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property is the default property (the indexer in C#) of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Reflection.PropertyInfo.GetValue Example#1"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public virtual object GetValue(object obj, object[] index)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Overridable Function GetValue(obj As Object, index As Object()) As Object
    parameters:
    - id: obj
      type: System.Object
    - id: index
      type: System.Object[]
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> array does not contain the type of arguments needed.</p>\n<p>-or- </p>\n<p>The property's <strong>get</strong> accessor is not found. </p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The object does not match the target type, or a property is an instance property but <em>obj</em> is <strong>null</strong>. </p>\n"
  - type: System.Reflection.TargetParameterCountException
    commentId: T:System.Reflection.TargetParameterCountException
    description: "\n<p>The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>There was an illegal attempt to access a private or protected method inside a class. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property indicates the reason for the error.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object())
  name.vb: GetValue(Object, Object())
- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object)
  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 113
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the property value of a specified object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload sets the value of a non-indexed property. To determine whether a property is indexed, call the <xref href=\"System.Reflection.PropertyInfo.GetIndexParameters\" data-throw-if-not-resolved=\"false\"></xref> method. If the resulting array has 0 (zero) elements, the property is not indexed. To set the value of an indexed property, call the <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> overload.  </p>\n<p>If the property type of this <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object is a value type and <em>value</em> is <strong>null</strong>, the property will be set to the default value for that type. </p>\n<p>This is a convenience method that calls the runtime implementation of the abstract <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method, specifying <xref href=\"System.Reflection.BindingFlags.Default\" data-throw-if-not-resolved=\"false\"></xref> for the <em>BindingFlags</em> parameter, <strong>null</strong> for <em>Binder</em>, <strong>null</strong> for <em>Object[]</em>, and <strong>null</strong> for <em>CultureInfo</em>.</p>\n<p>To use the <see cref=\"Overload:System.Reflection.PropertyInfo.SetValue\"></see> method, first get a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the class. From the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>, get the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object. From the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object, call the <see cref=\"Overload:System.Reflection.PropertyInfo.SetValue\"></see> method.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example declares a class named <code>Example</code> with one <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and one instance property. The example uses the <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to change the original property values and displays the original and final values. </p>PropertyInfo.SetValue#2"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public void SetValue(object obj, object value)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Sub SetValue(obj As Object, value As Object)
    parameters:
    - id: obj
      type: System.Object
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The property's <strong>set</strong> accessor is not found. </p>\n<p>-or-</p>\n<p>\n<em>value</em> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The type of <em>obj</em> does not match the target type, or a property is an instance property but <em>obj</em> is <strong>null</strong>. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>There was an illegal attempt to access a private or protected method inside a class. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>An error occurred while setting the property value. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property indicates the reason for the error.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  id: SetValue(System.Object,System.Object,System.Object[])
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object, Object[])
  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 120
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the property value of a specified object with optional index values for index properties.</p>\n"
  remarks: "\n<p>If this <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> object is a value type and <em>value</em> is <strong>null</strong>, then the property will be set to the default value for that type.</p>\n<p>To determine whether a property is indexed, use the <xref href=\"System.Reflection.PropertyInfo.GetIndexParameters\" data-throw-if-not-resolved=\"false\"></xref> method. If the resulting array has 0 (zero) elements, the property is not indexed.</p>\n<p>This is a convenience method that calls the runtime implementation of the abstract <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method, specifying <xref href=\"System.Reflection.BindingFlags.Default\" data-throw-if-not-resolved=\"false\"></xref> for the <em>BindingFlags</em> parameter, <strong>null</strong> for <em>Binder</em>, and <strong>null</strong> for <em>CultureInfo</em>.</p>\n<p>To use the <see cref=\"Overload:System.Reflection.PropertyInfo.SetValue\"></see> method, first get a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the class. From the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>, get the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref>. From the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref>, use the <see cref=\"Overload:System.Reflection.PropertyInfo.SetValue\"></see> method.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following example defines a class named <code>TestClass</code> that has a read-write property named <code>Caption</code>. It  displays the default value of the <code>Caption</code> property, calls the <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method to change the property value, and displays the result.</p>Classic PropertyInfo.SetValue1 Example#1<p>Note that, because the <code>Caption</code> property is not a parameter array, the <em>index</em> argument is <strong>null</strong>. </p>"
  - "\n<p>The following example declares a class named <code>Example</code> with three properties: a <strong>static</strong> property (<strong>Shared</strong> in Visual Basic), an instance property, and an indexed instance property. The example uses the <xref href=\"System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method to change the default values of the properties and displays the original and final values.</p>\n<p>The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property. </p>\n<ul><li>\n<p>In Visual Basic, the property name is always used to search for the property with reflection. You can use the <strong>Default</strong> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example. You can also use the property name.</p>\n</li><li>\n<p>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code. By default, the name of the property is <code>Item</code>, and you must use that name when you search for the property with reflection. You can use the <xref href=\"System.Runtime.CompilerServices.IndexerNameAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to give the indexer a different name. In this example, the name is <code>IndexedInstanceProperty</code>. </p>\n</li><li>\n<p>In C++, the <strong>default</strong> specifier can be used to make an indexed property a default indexed property (class indexer). In that case, the name of the property by default is <code>Item</code>, and you must use that name when you search for the property with reflection, as in this example. You can use the <xref href=\"System.Runtime.CompilerServices.IndexerNameAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code. An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</p>\n</li></ul>PropertyInfo.SetValue#1"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public virtual void SetValue(object obj, object value, object[] index)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Overridable Sub SetValue(obj As Object, value As Object, index As Object())
    parameters:
    - id: obj
      type: System.Object
    - id: value
      type: System.Object
    - id: index
      type: System.Object[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> array does not contain the type of arguments needed.</p>\n<p>-or- </p>\n<p>The property's <strong>set</strong> accessor is not found. </p>\n<p>-or-</p>\n<p>\n<em>value</em> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The object does not match the target type, or a property is an instance property but <em>obj</em> is <strong>null</strong>. </p>\n"
  - type: System.Reflection.TargetParameterCountException
    commentId: T:System.Reflection.TargetParameterCountException
    description: "\n<p>The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>There was an illegal attempt to access a private or protected method inside a class. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property indicates the reason for the error.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object())
  name.vb: SetValue(Object, Object, Object())
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.PropertyAttributes
  parent: System.Reflection
  isExternal: false
  name: PropertyAttributes
  fullName: System.Reflection.PropertyAttributes
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  fullName: System.Reflection.TargetException
- uid: System.Reflection.TargetParameterCountException
  isExternal: false
  name: TargetParameterCountException
  fullName: System.Reflection.TargetParameterCountException
- uid: System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
