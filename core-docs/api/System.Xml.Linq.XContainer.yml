items:
- uid: System.Xml.Linq.XContainer
  commentId: T:System.Xml.Linq.XContainer
  id: XContainer
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XContainer.Add(System.Object)
  - System.Xml.Linq.XContainer.Add(System.Object[])
  - System.Xml.Linq.XContainer.AddFirst(System.Object)
  - System.Xml.Linq.XContainer.AddFirst(System.Object[])
  - System.Xml.Linq.XContainer.CreateWriter
  - System.Xml.Linq.XContainer.DescendantNodes
  - System.Xml.Linq.XContainer.Descendants
  - System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Elements
  - System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.FirstNode
  - System.Xml.Linq.XContainer.LastNode
  - System.Xml.Linq.XContainer.Nodes
  - System.Xml.Linq.XContainer.RemoveNodes
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  langs:
  - csharp
  - vb
  name: XContainer
  fullName: System.Xml.Linq.XContainer
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XContainer
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 132
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Represents a node that can contain other nodes.</p>\n"
  remarks: "\n<p>This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.</p>\n<p>The two classes that derive from <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> are <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: 'public abstract class XContainer : XNode'
    content.vb: >-
      Public MustInherit Class XContainer
          Inherits XNode
  inheritance:
  - System.Object
  - System.Xml.Linq.XObject
  - System.Xml.Linq.XNode
  inheritedMembers:
  - System.Xml.Linq.XNode.DocumentOrderComparer
  - System.Xml.Linq.XNode.EqualityComparer
  - System.Xml.Linq.XNode.NextNode
  - System.Xml.Linq.XNode.PreviousNode
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  - System.Xml.Linq.XNode.Ancestors
  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.CreateReader
  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.ElementsAfterSelf
  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.ElementsBeforeSelf
  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.NodesAfterSelf
  - System.Xml.Linq.XNode.NodesBeforeSelf
  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  - System.Xml.Linq.XNode.Remove
  - System.Xml.Linq.XNode.ReplaceWith(System.Object)
  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  - System.Xml.Linq.XNode.ToString
  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  - System.Xml.Linq.XObject.BaseUri
  - System.Xml.Linq.XObject.Document
  - System.Xml.Linq.XObject.NodeType
  - System.Xml.Linq.XObject.Parent
  - System.Xml.Linq.XObject.Changed
  - System.Xml.Linq.XObject.Changing
  - System.Xml.Linq.XObject.AddAnnotation(System.Object)
  - System.Xml.Linq.XObject.Annotation(System.Type)
  - System.Xml.Linq.XObject.Annotation``1
  - System.Xml.Linq.XObject.Annotations(System.Type)
  - System.Xml.Linq.XObject.Annotations``1
  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  - System.Xml.Linq.XObject.RemoveAnnotations``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.Linq.XContainer.FirstNode
  commentId: P:System.Xml.Linq.XContainer.FirstNode
  id: FirstNode
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: FirstNode
  fullName: System.Xml.Linq.XContainer.FirstNode
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstNode
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 135
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Get the first child node of this node.</p>\n"
  example:
  - "\n<p>The following example creates an element that contains child elements. It then gets the first child node of the parent element.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nXNode firstNode = xmlTree.FirstNode;\nConsole.WriteLine(firstNode);</code></pre>\n<pre><code class=\"vb\">Dim xmlTree As XElement = _ \n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nDim firstNode As XNode = xmlTree.FirstNode\nConsole.WriteLine(firstNode)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Child1>1</Child1></code></pre>\n"
  syntax:
    content: public XNode FirstNode { get; }
    content.vb: Public ReadOnly Property FirstNode As XNode
    parameters: []
    return:
      type: System.Xml.Linq.XNode
      description: "\n<p>An <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> containing the first child node of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.LastNode
    commentId: P:System.Xml.Linq.XContainer.LastNode
  - type: System.Xml.Linq.XContainer.Nodes
    commentId: M:System.Xml.Linq.XContainer.Nodes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XContainer.LastNode
  commentId: P:System.Xml.Linq.XContainer.LastNode
  id: LastNode
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: LastNode
  fullName: System.Xml.Linq.XContainer.LastNode
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastNode
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 136
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Get the last child node of this node.</p>\n"
  example:
  - "\n<p>The following example creates an element that contains child elements. It then gets the last child node of the parent element.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nXNode lastNode = xmlTree.LastNode;\nConsole.WriteLine(lastNode);</code></pre>\n<pre><code class=\"vb\">Dim xmlTree As XElement = _ \n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nDim lastNode As XNode = xmlTree.LastNode\nConsole.WriteLine(lastNode)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Child5>5</Child5></code></pre>\n"
  syntax:
    content: public XNode LastNode { get; }
    content.vb: Public ReadOnly Property LastNode As XNode
    parameters: []
    return:
      type: System.Xml.Linq.XNode
      description: "\n<p>An <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> containing the last child node of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.FirstNode
    commentId: P:System.Xml.Linq.XContainer.FirstNode
  - type: System.Xml.Linq.XContainer.Nodes
    commentId: M:System.Xml.Linq.XContainer.Nodes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XContainer.Add(System.Object)
  commentId: M:System.Xml.Linq.XContainer.Add(System.Object)
  id: Add(System.Object)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Add(Object)
  fullName: System.Xml.Linq.XContainer.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 137
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Adds the specified content as children of this <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method adds the new content after the existing content of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For details about the valid content that can be passed to this function, see Valid Content of XElement and XDocument Objects.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  example:
  - "\n<p>The following example creates two XML trees, and then uses this method to add an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> object to one of them. It also adds the results of a LINQ query to the XML tree. </p>\n<pre><code class=\"c#\">XElement srcTree = new XElement(\"Root\",\nnew XElement(\"Element1\", 1),\nnew XElement(\"Element2\", 2),\nnew XElement(\"Element3\", 3),\nnew XElement(\"Element4\", 4),\nnew XElement(\"Element5\", 5)\n);\nXElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nxmlTree.Add(new XElement(\"NewChild\", \"new content\"));\nxmlTree.Add(\nfrom el in srcTree.Elements()\nwhere (int)el > 3\nselect el\n);\n// Even though Child9 does not exist in srcTree, the following statement will not\n// throw an exception, and nothing will be added to xmlTree.\nxmlTree.Add(srcTree.Element(\"Child9\"));\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XElement = _ \n<Root>\n    <Element1>1</Element1>\n    <Element2>2</Element2>\n    <Element3>3</Element3>\n    <Element4>4</Element4>\n    <Element5>5</Element5>\n</Root>\n\nDim xmlTree As XElement = _ \n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nxmlTree.Add(New XElement(\"NewChild\", \"new content\"))\nxmlTree.Add( _\nFrom el In srcTree.Elements() _\nWhere CInt(el) > 3 _\nSelect el _\n)\n' Even though Child9 does not exist in srcTree, the following statement will not\n' throw an exception, and nothing will be added to xmlTree.\nxmlTree.Add(srcTree.<Child9>)\nConsole.WriteLine(xmlTree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Child1>1</Child1>\n<Child2>2</Child2>\n<Child3>3</Child3>\n<Child4>4</Child4>\n<Child5>5</Child5>\n<NewChild>new content</NewChild>\n<Element4>4</Element4>\n<Element5>5</Element5>\n</Root></code></pre>\n"
  syntax:
    content: public void Add(object content)
    content.vb: Public Sub Add(content As Object)
    parameters:
    - id: content
      type: System.Object
      description: "\n<p>A content object containing simple content or a collection of content objects to be added.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.RemoveNodes
    commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Add(System.Object[])
  commentId: M:System.Xml.Linq.XContainer.Add(System.Object[])
  id: Add(System.Object[])
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Add(Object[])
  fullName: System.Xml.Linq.XContainer.Add(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 138
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Adds the specified content as children of this <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method adds the new content after the existing content of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For details about the valid content that can be passed to this function, see Valid Content of XElement and XDocument Objects.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  example:
  - "\n<p>The following example creates two XML trees, uses this method to add an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> object to one of them. It also adds the results of a LINQ query to the XML tree. </p>\n<pre><code class=\"c#\">XElement srcTree = new XElement(\"Root\",\nnew XElement(\"Element1\", 1),\nnew XElement(\"Element2\", 2),\nnew XElement(\"Element3\", 3),\nnew XElement(\"Element4\", 4),\nnew XElement(\"Element5\", 5)\n);\nXElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nxmlTree.Add(new XElement(\"NewChild\", \"new content\"));\nxmlTree.Add(\nfrom el in srcTree.Elements()\nwhere (int)el > 3\nselect el\n);\n// Even though Child9 does not exist in srcTree, the following statement will not\n// throw an exception, and nothing will be added to xmlTree\nxmlTree.Add(srcTree.Element(\"Child9\"));\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XElement = _ \n<Root>\n    <Element1>1</Element1>\n    <Element2>2</Element2>\n    <Element3>3</Element3>\n    <Element4>4</Element4>\n    <Element5>5</Element5>\n</Root>\n\nDim xmlTree As XElement = _\n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nxmlTree.Add(New XElement(\"NewChild\", \"new content\"))\nxmlTree.Add( _\nFrom el In srcTree.Elements() _\nWhere CInt(el) > 3 _\nSelect el _\n)\n' Even though Child9 does not exist in srcTree, the following statement will not\n' throw an exception, and nothing will be added to xmlTree\nxmlTree.Add(srcTree.<Child9>)\nConsole.WriteLine(xmlTree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Child1>1</Child1>\n<Child2>2</Child2>\n<Child3>3</Child3>\n<Child4>4</Child4>\n<Child5>5</Child5>\n<NewChild>new content</NewChild>\n<Element4>4</Element4>\n<Element5>5</Element5>\n</Root></code></pre>\n"
  syntax:
    content: public void Add(params object[] content)
    content.vb: Public Sub Add(ParamArray content As Object())
    parameters:
    - id: content
      type: System.Object[]
      description: "\n<p>A parameter list of content objects.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.RemoveNodes
    commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XContainer.Add(System.Object())
  name.vb: Add(Object())
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
  commentId: M:System.Xml.Linq.XContainer.AddFirst(System.Object)
  id: AddFirst(System.Object)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: AddFirst(Object)
  fullName: System.Xml.Linq.XContainer.AddFirst(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddFirst
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 139
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Adds the specified content as the first children of this document or element.</p>\n"
  remarks: "\n<p>This method adds the new content before the existing content of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For details about the valid content that can be passed to this function, see Valid Content of XElement and XDocument Objects.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  example:
  - "\n<p>The following example creates two XML trees, uses this method to add an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> object as the first element to one of them. It also adds the results of a LINQ query to the XML tree. </p>\n<pre><code class=\"c#\">XElement srcTree = new XElement(\"Root\",\nnew XElement(\"Element1\", 1),\nnew XElement(\"Element2\", 2),\nnew XElement(\"Element3\", 3),\nnew XElement(\"Element4\", 4),\nnew XElement(\"Element5\", 5)\n);\nXElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nxmlTree.AddFirst(new XElement(\"NewChild\", \"new content\"));\nxmlTree.AddFirst(\nfrom el in srcTree.Elements()\nwhere (int)el > 3\nselect el\n);\n// Even though Child9 does not exist in srcTree, the following statement will not\n// throw an exception, and nothing will be added to xmlTree\nxmlTree.AddFirst(srcTree.Element(\"Child9\"));\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XElement = _ \n<Root>\n    <Element1>1</Element1>\n    <Element2>2</Element2>\n    <Element3>3</Element3>\n    <Element4>4</Element4>\n    <Element5>5</Element5>\n</Root>\n\nDim xmlTree As XElement = _ \n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nxmlTree.AddFirst(New XElement(\"NewChild\", \"new content\"))\nxmlTree.AddFirst( _\nFrom el In srcTree.Elements() _\nWhere CInt(el) > 3 _\nSelect el _\n)\n' Even though Child9 does not exist in srcTree, the following statement will not\n' throw an exception, and nothing will be added to xmlTree\nxmlTree.AddFirst(srcTree.<Child9>)\nConsole.WriteLine(xmlTree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Element4>4</Element4>\n<Element5>5</Element5>\n<NewChild>new content</NewChild>\n<Child1>1</Child1>\n<Child2>2</Child2>\n<Child3>3</Child3>\n<Child4>4</Child4>\n<Child5>5</Child5>\n</Root></code></pre>\n"
  syntax:
    content: public void AddFirst(object content)
    content.vb: Public Sub AddFirst(content As Object)
    parameters:
    - id: content
      type: System.Object
      description: "\n<p>A content object containing simple content or a collection of content objects to be added.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.RemoveNodes
    commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  commentId: M:System.Xml.Linq.XContainer.AddFirst(System.Object[])
  id: AddFirst(System.Object[])
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: AddFirst(Object[])
  fullName: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddFirst
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 140
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Adds the specified content as the first children of this document or element.</p>\n"
  remarks: "\n<p>This method adds the new content before the existing content of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For details about the valid content that can be passed to this function, see Valid Content of XElement and XDocument Objects.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  example:
  - "\n<p>The following example creates two XML trees, and uses this method to add an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> object as the first element to one of them. It also adds the results of a LINQ query to the XML tree. </p>\n<pre><code class=\"c#\">XElement srcTree = new XElement(\"Root\",\nnew XElement(\"Element1\", 1),\nnew XElement(\"Element2\", 2),\nnew XElement(\"Element3\", 3),\nnew XElement(\"Element4\", 4),\nnew XElement(\"Element5\", 5)\n);\nXElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nxmlTree.AddFirst(new XElement(\"NewChild\", \"new content\"));\nxmlTree.AddFirst(\nfrom el in srcTree.Elements()\nwhere (int)el > 3\nselect el\n);\n// Even though Child9 does not exist in srcTree, the following statement will not\n// throw an exception, and nothing will be added to xmlTree.\nxmlTree.AddFirst(srcTree.Element(\"Child9\"));\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XElement = _ \n<Root>\n    <Element1>1</Element1>\n    <Element2>2</Element2>\n    <Element3>3</Element3>\n    <Element4>4</Element4>\n    <Element5>5</Element5>\n</Root>\n\nDim xmlTree As XElement = _ \n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nxmlTree.AddFirst(New XElement(\"NewChild\", \"new content\"))\nxmlTree.AddFirst( _\nFrom el In srcTree.Elements() _\nWhere CInt(el) > 3 _\nSelect el _\n)\n' Even though Child9 does not exist in srcTree, the following statement will not\n' throw an exception, and nothing will be added to xmlTree.\nxmlTree.AddFirst(srcTree.<Child9>)\nConsole.WriteLine(xmlTree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Element4>4</Element4>\n<Element5>5</Element5>\n<NewChild>new content</NewChild>\n<Child1>1</Child1>\n<Child2>2</Child2>\n<Child3>3</Child3>\n<Child4>4</Child4>\n<Child5>5</Child5>\n</Root></code></pre>\n"
  syntax:
    content: public void AddFirst(params object[] content)
    content.vb: Public Sub AddFirst(ParamArray content As Object())
    parameters:
    - id: content
      type: System.Object[]
      description: "\n<p>A parameter list of content objects.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The parent is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.RemoveNodes
    commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XContainer.AddFirst(System.Object())
  name.vb: AddFirst(Object())
- uid: System.Xml.Linq.XContainer.CreateWriter
  commentId: M:System.Xml.Linq.XContainer.CreateWriter
  id: CreateWriter
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: CreateWriter()
  fullName: System.Xml.Linq.XContainer.CreateWriter()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateWriter
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 141
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that can be used to add nodes to the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.</p>\n<p>For more information, see Working with XML Namespaces.</p>\n"
  example:
  - "\n<p>You can use this method to perform an XSLT transformation. You can create an XML tree, create an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> from the XML tree, create a new document, and create a <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that will write into the new document. Then, you can invoke the XSLT transformation, passing the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> to the transform. After the transformation successfully completes, the new XML tree is populated with the results of the transformation.</p>\n<pre><code class=\"c#\">string xslMarkup = @\"<?xml version='1.0'?>\n<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>\n<xsl:template match='/Parent'>\n<Root>\n    <C1><xsl:value-of select='Child1'/></C1>\n    <C2><xsl:value-of select='Child2'/></C2>\n</Root>\n</xsl:template>\n</xsl:stylesheet>\";\n\nXDocument xmlTree = new XDocument(\nnew XElement(\"Parent\",\nnew XElement(\"Child1\", \"Child1 data\"),\nnew XElement(\"Child2\", \"Child2 data\")\n)\n);\n\nXDocument newTree = new XDocument();\nusing (XmlWriter writer = newTree.CreateWriter()) {\n// Load the style sheet.\nXslCompiledTransform xslt = new XslCompiledTransform();\nxslt.Load(XmlReader.Create(new StringReader(xslMarkup)));\n\n// Execute the transform and output the results to a writer.\nxslt.Transform(xmlTree.CreateReader(), writer);\n}\n\nConsole.WriteLine(newTree);</code></pre>\n<pre><code class=\"vb\">Dim xslMarkup As XDocument = _ \n<?xml version='1.0'?>\n<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>\n<xsl:template match='/Parent'>\n    <Root>\n        <C1><xsl:value-of select='Child1'/></C1>\n        <C2><xsl:value-of select='Child2'/></C2>\n    </Root>\n</xsl:template>\n</xsl:stylesheet>\n\nDim xmlTree As XElement = _ \n<Parent>\n<Child1>Child1 data</Child1>\n<Child2>Child2 data</Child2>\n</Parent>\n\nDim newTree As XDocument = New XDocument()\n\nUsing writer As XmlWriter = newTree.CreateWriter()\n' Load the style sheet.\nDim xslt As XslCompiledTransform = _\nNew XslCompiledTransform()\nxslt.Load(xslMarkup.CreateReader())\n\n' Execute the transform and output the results to a writer.\nxslt.Transform(xmlTree.CreateReader(), writer)\nEnd Using\n\nConsole.WriteLine(newTree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<C1>Child1 data</C1>\n<C2>Child2 data</C2>\n</Root></code></pre>\n"
  syntax:
    content: public XmlWriter CreateWriter()
    content.vb: Public Function CreateWriter As XmlWriter
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that is ready to have content written to it.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.DescendantNodes
  commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  id: DescendantNodes
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: DescendantNodes()
  fullName: System.Xml.Linq.XContainer.DescendantNodes()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DescendantNodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 142
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the descendant nodes for this document or element, in document order.</p>\n"
  remarks: "\n<p>Note that attributes are not considered to be nodes in LINQ to XML, so they will not be part of the collection that is returned by this method.</p>\n<p>This method uses deferred execution.</p>\n"
  example:
  - "\n<p>The following example creates an XML tree, and then iterates through the <xref href=\"System.Xml.Linq.XContainer.DescendantNodes\" data-throw-if-not-resolved=\"false\"></xref> axis.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\n// Attributes are not nodes, so will not be returned by DescendantNodes.\nnew XAttribute(\"Att1\", \"AttributeContent\"),\nnew XElement(\"Child\",\nnew XElement(\"GrandChild\", \"element content\")\n)\n);\nIEnumerable<XNode> dnas =\nfrom node in xmlTree.DescendantNodes()\nselect node;\nforeach (XNode node in dnas)\n{\nif (node is XElement)\nConsole.WriteLine((node as XElement).Name);\nelse\nConsole.WriteLine(node);\n}</code></pre>\n<pre><code class=\"vb\">' Attributes are not nodes, so will not be returned by DescendantNodes.\nDim xmlTree As XElement = _ \n<Root Att1=\"AttributeContent\">\n<Child>\n    <GrandChild>element content</GrandChild>\n</Child>\n</Root>\n\nDim dnas = From node In xmlTree.DescendantNodes _\n   Select node\n\nFor Each node In dnas\nIf TypeOf node Is XElement Then\nConsole.WriteLine(DirectCast(node, XElement).Name)\nElse\nConsole.WriteLine(node)\nEnd If\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Child\nGrandChild\nelement content</code></pre>\n"
  syntax:
    content: public IEnumerable<XNode> DescendantNodes()
    content.vb: Public Function DescendantNodes As IEnumerable(Of XNode)
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> containing the descendant nodes of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>, in document order.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Descendants
  commentId: M:System.Xml.Linq.XContainer.Descendants
  id: Descendants
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Descendants()
  fullName: System.Xml.Linq.XContainer.Descendants()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Descendants
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 143
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the descendant elements for this document or element, in document order.</p>\n"
  remarks: "\n<p>Note that this method will not return itself in the resulting <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. See <xref href=\"System.Xml.Linq.XElement.DescendantsAndSelf\" data-throw-if-not-resolved=\"false\"></xref> if you need to include the current <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> in the results.</p>\n<p>This method uses deferred execution. </p>\n"
  example:
  - "\n<p>The following example creates an XML tree, and then uses this axis method to retrieve the descendants.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"AttributeContent\"),\nnew XElement(\"Child\",\nnew XText(\"Some text\"),\nnew XElement(\"GrandChild\", \"element content\")\n)\n);\nIEnumerable<XElement> de =\nfrom el in xmlTree.Descendants()\nselect el;\nforeach (XElement el in de)\nConsole.WriteLine(el.Name);</code></pre>\n<pre><code class=\"vb\">' Attributes are not nodes, so will not be returned by DescendantNodes.\nDim xmlTree As XElement = _\n<Root Att1=\"AttributeContent\">\n<Child>Some text\n    <GrandChild>element content</GrandChild>\n</Child>\n</Root>\nDim de = From el In xmlTree.Descendants _\n Select el\n\nFor Each el In de\nConsole.WriteLine(el.Name)\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Child\nGrandChild</code></pre>\n"
  syntax:
    content: public IEnumerable<XElement> Descendants()
    content.vb: Public Function Descendants As IEnumerable(Of XElement)
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> containing the descendant elements of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  id: Descendants(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Descendants(XName)
  fullName: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Descendants
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 144
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>This method uses deferred execution. </p>\n"
  example:
  - "\n<p>The following example prints all descendants of an element.</p>\n<pre><code class=\"c#\">// Attributes are not nodes, so will not be returned by DescendantNodes.\nXElement xmlTree = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"AttributeContent\"),\nnew XElement(\"Child\",\nnew XText(\"Some text\"),\nnew XElement(\"GrandChild\", \"element content\")\n)\n);\nIEnumerable<XElement> de =\nfrom el in xmlTree.Descendants(\"Child\")\nselect el;\nforeach (XElement el in de)\nConsole.WriteLine(el.Name);</code></pre>\n<pre><code class=\"vb\">' Attributes are not nodes, so will not be returned by the descendants axis.\nDim xmlTree As XElement = _ \n<Root Att1=\"AttributeContent\">\n <Child>Some text\n     <GrandChild>element content</GrandChild>\n </Child>\n</Root>\n\nDim de = From el In xmlTree...<Child> _\n Select el\n\nFor Each el In de\nConsole.WriteLine(el.Name)\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Child</code></pre>\n<p>The following is the same example, but in this case the XML is in a namespace. For more information, see Working with XML Namespaces.</p>\n<pre><code class=\"c#\">// Attributes are not nodes, so will not be returned by DescendantNodes.\nXNamespace aw = \"http://www.adventure-works.com\";\nXElement xmlTree = new XElement(aw + \"Root\",\nnew XAttribute(aw + \"Att1\", \"AttributeContent\"),\nnew XElement(aw + \"Child\",\nnew XText(\"Some text\"),\nnew XElement(aw + \"GrandChild\", \"element content\")\n)\n);\nIEnumerable<XElement> de =\nfrom el in xmlTree.Descendants(aw + \"Child\")\nselect el;\nforeach (XElement el in de)\nConsole.WriteLine(el.Name);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw = \"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\n' Attributes are not nodes, so will not be returned by the descendants axis.\nDim xmlTree As XElement = _ \n    <aw:Root aw:Att1=\"AttributeContent\">\n         <aw:Child>Some text\n             <aw:GrandChild>element content</aw:GrandChild>\n         </aw:Child>\n     </aw:Root>\n\nDim de = From el In xmlTree...<aw:Child> _\n         Select el\n\nFor Each el In de\n    Console.WriteLine(el.Name)\nNext\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>{http://www.adventure-works.com}Child</code></pre>\n"
  syntax:
    content: public IEnumerable<XElement> Descendants(XName name)
    content.vb: Public Function Descendants(name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> containing the descendant elements of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> that match the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  id: Element(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Element(XName)
  fullName: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Element
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 145
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the first (in document order) child element with the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Returns <strong>null</strong> if there is no element with the specified name.</p>\n<p>Some axis methods return collections of elements or attributes. This method returns only a single element.</p>\n<p>This method returns <strong>null</strong> if the element with the specified name is not found. All of the methods that allow you to construct elements (the constructor of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>, <see cref=\"Overload:System.Xml.Linq.XContainer.Add\"></see>, and so on) accept <strong>null</strong> as a valid argument. This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree. The following example shows this idiom.</p>\n<p>In contrast to <see cref=\"Overload:System.Xml.Linq.XContainer.Elements\"></see>, this method is not an axis method. It does not use deferred execution; it simply returns an element when called.</p>\n"
  example:
  - "\n<p>The following example shows two uses of this method. In one case, the method finds the element in <code>srcTree</code>. In the second case, the method does not find the element in the source tree, no element is added to <code>xmlTree</code>, and no exception is thrown.</p>\n<p>Note that the Visual Basic example uses the child XML property. It is also allowable to use the <xref href=\"System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)\" data-throw-if-not-resolved=\"false\"></xref> method directly in Visual Basic.</p>\n<pre><code class=\"c#\">XElement srcTree = new XElement(\"Root\",\nnew XElement(\"Element1\", 1),\nnew XElement(\"Element2\", 2),\nnew XElement(\"Element3\", 3),\nnew XElement(\"Element4\", 4),\nnew XElement(\"Element5\", 5)\n);\nXElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5),\nsrcTree.Element(\"Element3\"),\n// Even though Element9 does not exist in srcTree, the following line\n// will not throw an exception.\nsrcTree.Element(\"Element9\")\n);\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XElement = _ \n<Root>\n    <Element1>1</Element1>\n    <Element2>2</Element2>\n    <Element3>3</Element3>\n    <Element4>4</Element4>\n    <Element5>5</Element5>\n</Root>\n\nDim xmlTree As XElement = _\n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n    <%= srcTree.<Element3> %>\n    <%= srcTree.<Element9> %>\n</Root>\n\n' Even though Element9 does not exist in srcTree, adding it to the tree\n' will not throw an exception.\n\nConsole.WriteLine(xmlTree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Child1>1</Child1>\n<Child2>2</Child2>\n<Child3>3</Child3>\n<Child4>4</Child4>\n<Child5>5</Child5>\n<Element3>3</Element3>\n</Root></code></pre>\n<p>The following is the same example, but in this case the XML is in a namespace. For more information, see Working with XML Namespaces.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement srcTree = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XElement(aw + \"Element1\", 1),\nnew XElement(aw + \"Element2\", 2),\nnew XElement(aw + \"Element3\", 3),\nnew XElement(aw + \"Element4\", 4),\nnew XElement(aw + \"Element5\", 5)\n);\nXElement xmlTree = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XElement(aw + \"Child1\", 1),\nnew XElement(aw + \"Child2\", 2),\nnew XElement(aw + \"Child3\", 3),\nnew XElement(aw + \"Child4\", 4),\nnew XElement(aw + \"Child5\", 5),\nsrcTree.Element(aw + \"Element3\"),\n// Even though Element9 does not exist in srcTree, the following line\n// will not throw an exception.\nsrcTree.Element(aw + \"Element9\")\n);\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim srcTree As XElement = _ \n    <aw:Root>\n        <aw:Element1>1</aw:Element1>\n        <aw:Element2>2</aw:Element2>\n        <aw:Element3>3</aw:Element3>\n        <aw:Element4>4</aw:Element4>\n        <aw:Element5>5</aw:Element5>\n    </aw:Root>\n\nDim xmlTree As XElement = _\n    <aw:Root>\n        <aw:Child1>1</aw:Child1>\n        <aw:Child2>2</aw:Child2>\n        <aw:Child3>3</aw:Child3>\n        <aw:Child4>4</aw:Child4>\n        <aw:Child5>5</aw:Child5>\n        <%= srcTree.<aw:Element3> %>\n        <%= srcTree.<aw:Element9> %>\n    </aw:Root>\n\n' Even though Element9 does not exist in srcTree, adding it to the tree\n' will not throw an exception.\n\nConsole.WriteLine(xmlTree)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><aw:Root xmlns:aw=\"http://www.adventure-works.com\">\n<aw:Child1>1</aw:Child1>\n<aw:Child2>2</aw:Child2>\n<aw:Child3>3</aw:Child3>\n<aw:Child4>4</aw:Child4>\n<aw:Child5>5</aw:Child5>\n<aw:Element3>3</aw:Element3>\n</aw:Root></code></pre>\n"
  syntax:
    content: public XElement Element(XName name)
    content.vb: Public Function Element(name As XName) As XElement
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    return:
      type: System.Xml.Linq.XElement
      description: "\n<p>A <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that matches the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Elements
  commentId: M:System.Xml.Linq.XContainer.Elements
  id: Elements
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Elements()
  fullName: System.Xml.Linq.XContainer.Elements()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Elements
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 146
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the child elements of this element or document, in document order.</p>\n"
  remarks: "\n<p>This method uses deferred execution. </p>\n"
  example:
  - "\n<p>The following example creates an XML tree, and then selects some elements using this axis method.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XElement(\"Child5\", 5)\n);\nIEnumerable<XElement> elements =\nfrom el in xmlTree.Elements()\nwhere (int)el <= 3\nselect el;\nforeach (XElement el in elements)\nConsole.WriteLine(el);</code></pre>\n<pre><code class=\"vb\">Dim xmlTree As XElement = _\n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <Child3>3</Child3>\n    <Child4>4</Child4>\n    <Child5>5</Child5>\n</Root>\n\nDim elements = From el In xmlTree.Elements _\n       Where el.Value <= 3 _\n       Select el\n\nFor Each el In elements\nConsole.WriteLine(el)\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Child1>1</Child1>\n<Child2>2</Child2>\n<Child3>3</Child3></code></pre>\n<p>The following is the same example, but in this case the XML is in a namespace. For more information, see Working with XML Namespaces.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement xmlTree = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XElement(aw + \"Child1\", 1),\nnew XElement(aw + \"Child2\", 2),\nnew XElement(aw + \"Child3\", 3),\nnew XElement(aw + \"Child4\", 4),\nnew XElement(aw + \"Child5\", 5)\n);\nIEnumerable<XElement> elements =\nfrom el in xmlTree.Elements()\nwhere (int)el <= 3\nselect el;\nforeach (XElement el in elements)\nConsole.WriteLine(el);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim xmlTree As XElement = _\n    <aw:Root>\n        <aw:Child1>1</aw:Child1>\n        <aw:Child2>2</aw:Child2>\n        <aw:Child3>3</aw:Child3>\n        <aw:Child4>4</aw:Child4>\n        <aw:Child5>5</aw:Child5>\n    </aw:Root>\n\nDim elements = From el In xmlTree.Elements _\n               Where el.Value <= 3 _\n               Select el\n\nFor Each el In elements\n    Console.WriteLine(el)\nNext\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><aw:Child1 xmlns:aw=\"http://www.adventure-works.com\">1</aw:Child1>\n<aw:Child2 xmlns:aw=\"http://www.adventure-works.com\">2</aw:Child2>\n<aw:Child3 xmlns:aw=\"http://www.adventure-works.com\">3</aw:Child3></code></pre>\n"
  syntax:
    content: public IEnumerable<XElement> Elements()
    content.vb: Public Function Elements As IEnumerable(Of XElement)
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> containing the child elements of this <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>, in document order.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
    commentId: M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  id: Elements(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Elements(XName)
  fullName: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Elements
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 147
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>This method uses deferred execution. </p>\n"
  example:
  - "\n<p>The following example creates an XML tree, and then selects several child elements using this axis method.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Type1\", 1),\nnew XElement(\"Type1\", 2),\nnew XElement(\"Type2\", 3),\nnew XElement(\"Type2\", 4),\nnew XElement(\"Type2\", 5)\n);\nIEnumerable<XElement> elements =\nfrom el in xmlTree.Elements(\"Type2\")\nselect el;\nforeach (XElement el in elements)\nConsole.WriteLine(el);</code></pre>\n<pre><code class=\"vb\">Dim xmlTree As XElement = _ \n<Root>\n    <Type1>1</Type1>\n    <Type1>2</Type1>\n    <Type2>3</Type2>\n    <Type2>4</Type2>\n    <Type2>5</Type2>\n</Root>\n\nDim elements = From el In xmlTree.<Type2> _\n       Select el\n\nFor Each el In elements\nConsole.WriteLine(el)\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Type2>3</Type2>\n<Type2>4</Type2>\n<Type2>5</Type2></code></pre>\n<p>The following is the same example, but in this case the XML is in a namespace. For more information, see Working with XML Namespaces.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement xmlTree = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XElement(aw + \"Type1\", 1),\nnew XElement(aw + \"Type1\", 2),\nnew XElement(aw + \"Type2\", 3),\nnew XElement(aw + \"Type2\", 4),\nnew XElement(aw + \"Type2\", 5)\n);\nIEnumerable<XElement> elements =\nfrom el in xmlTree.Elements(aw + \"Type2\")\nselect el;\nforeach (XElement el in elements)\nConsole.WriteLine(el);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim xmlTree As XElement = _ \n    <aw:Root>\n        <aw:Type1>1</aw:Type1>\n        <aw:Type1>2</aw:Type1>\n        <aw:Type2>3</aw:Type2>\n        <aw:Type2>4</aw:Type2>\n        <aw:Type2>5</aw:Type2>\n    </aw:Root>\n\nDim elements = From el In xmlTree.<aw:Type2> _\n               Select el\n\nFor Each el In elements\n    Console.WriteLine(el)\nNext\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><aw:Type2 xmlns:aw=\"http://www.adventure-works.com\">3</aw:Type2>\n<aw:Type2 xmlns:aw=\"http://www.adventure-works.com\">4</aw:Type2>\n<aw:Type2 xmlns:aw=\"http://www.adventure-works.com\">5</aw:Type2></code></pre>\n"
  syntax:
    content: public IEnumerable<XElement> Elements(XName name)
    content.vb: Public Function Elements(name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> containing the children of the <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>, in document order.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
    commentId: M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.Nodes
  commentId: M:System.Xml.Linq.XContainer.Nodes
  id: Nodes
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: Nodes()
  fullName: System.Xml.Linq.XContainer.Nodes()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Nodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 148
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the child nodes of this element or document, in document order.</p>\n"
  remarks: "\n<p>Note that the content does not include attributes. In LINQ to XML, attributes are not considered to be nodes of the tree. They are name/value pairs associated with an element.</p>\n<p>This method uses deferred execution.</p>\n"
  example:
  - "\n<p>The following example creates an XML tree with a variety of types of nodes. It then queries this axis method to enumerate and print the nodes.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XComment(\"a comment\"),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XText(\"mixed content\"),\nnew XElement(\"Child5\", 5)\n);\nIEnumerable<XNode> nodes =\nfrom nd in xmlTree.Nodes()\nselect nd;\nforeach (XNode node in nodes)\nConsole.WriteLine(node);</code></pre>\n<pre><code class=\"vb\">Dim xmlTree As XElement = _ \n<Root>\n    <Child1>1</Child1>\n    <Child2>2</Child2>\n    <!--a comment-->\n    <Child3>3</Child3>\n    <Child4>4</Child4>mixed content<Child5>5</Child5>\n    </Root>\n\nDim nodes = From nd In xmlTree.Nodes() _\n    Select nd\n\nFor Each node In nodes\nConsole.WriteLine(node)\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Child1>1</Child1>\n<Child2>2</Child2>\n<!--a comment-->\n<Child3>3</Child3>\n<Child4>4</Child4>\nmixed content\n<Child5>5</Child5></code></pre>\n<p>The following example creates an XML tree that contains a variety of types of nodes. It then enumerates through portions of the tree, printing the node types.</p>\n<pre><code class=\"c#\">XDocument xmlTree = new XDocument(\nnew XComment(\"a comment\"),\nnew XProcessingInstruction(\"xml-stylesheet\", \"type=\\\"text/xsl\\\" href=\\\"hello.xsl\\\"\"),\nnew XElement(\"Root\",\nnew XAttribute(\"Att\", \"attContent\"),\nnew XElement(\"Child1\",\n    new XCData(\"CDATA content\")\n),\nnew XElement(\"Child2\",\n    new XText(\"Text content\")\n)\n)\n);\n\nforeach (XNode node in xmlTree.Nodes())\n{\nConsole.WriteLine(node.NodeType);\nif (node.NodeType == XmlNodeType.Element)\n{\nforeach (XAttribute att in ((XElement)node).Attributes())\n    Console.WriteLine(att.NodeType);\nforeach (XNode node2 in ((XElement)node).Nodes())\n{\n    Console.WriteLine(node2.NodeType);\n    if (node2.NodeType == XmlNodeType.Element)\n        foreach (XNode node3 in ((XElement)node2).Nodes())\n            Console.WriteLine(node3.NodeType);\n}\n}\n}</code></pre>\n<pre><code class=\"vb\">Dim xmlTree As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--a comment-->\n<?xml-stylesheet type='text/xsl' href='hello.xsl'?>\n<Root Att=\"attContent\">\n<Child1><![CDATA[CDATA content]]></Child1>\n<Child2>Text content</Child2>\n</Root>\n\n' Note that XNode uses XmlNodeType, which is in the System.Xml namespace\nFor Each node In xmlTree.Nodes\nConsole.WriteLine(node.NodeType.ToString())\nIf node.NodeType = XmlNodeType.Element Then\nFor Each att In DirectCast(node, XElement).Attributes\n    Console.WriteLine(att.NodeType.ToString())\nNext\nFor Each node2 In DirectCast (node, XElement).Nodes()\n    Console.WriteLine(node2.NodeType.ToString())\n    If node2.NodeType = XmlNodeType.Element Then\n        For Each node3 In DirectCast (node2, XElement).Nodes\n            Console.WriteLine(node3.NodeType.ToString())\n        Next\n    End If\nNext\nEnd If\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Comment\nProcessingInstruction\nElement\nAttribute\nElement\nCDATA\nElement\nText</code></pre>\n"
  syntax:
    content: public IEnumerable<XNode> Nodes()
    content.vb: Public Function Nodes As IEnumerable(Of XNode)
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> containing the contents of this <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>, in document order.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.Attributes
    commentId: M:System.Xml.Linq.XElement.Attributes
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.RemoveNodes
  commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  id: RemoveNodes
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: RemoveNodes()
  fullName: System.Xml.Linq.XContainer.RemoveNodes()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveNodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 149
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Removes the child nodes from this document or element.</p>\n"
  remarks: "\n<p>If you call this method on an element that contains attributes, this method will not remove the attributes. To remove the attributes of an element, use <xref href=\"System.Xml.Linq.XElement.RemoveAttributes\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <see cref=\"Overload:System.Xml.Linq.Extensions.Remove\"></see> method has related functionality. It removes the child nodes of every node in a collection.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  example:
  - "\n<p>The following example creates an XML tree that contains some child nodes. It then calls this method to remove the child nodes.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XElement(\"Child1\", 1),\nnew XElement(\"Child2\", 2),\nnew XComment(\"a comment\"),\nnew XElement(\"Child3\", 3),\nnew XElement(\"Child4\", 4),\nnew XText(\"mixed content\"),\nnew XElement(\"Child5\", 5)\n);\nxmlTree.RemoveNodes();\nConsole.WriteLine(xmlTree);</code></pre>\n<pre><code class=\"vb\">Dim xmltree As XElement = _ \n<Root>\n<Child1>1</Child1>\n<Child2>2</Child2>\n<!--a comment-->\n<Child3>3</Child3>\n<Child4>4</Child4>mixed content<Child5>5</Child5>\n</Root>\n\nxmltree.RemoveNodes()\nConsole.WriteLine(xmltree)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root /></code></pre>\n"
  syntax:
    content: public void RemoveNodes()
    content.vb: Public Sub RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  commentId: M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  id: ReplaceNodes(System.Object)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: ReplaceNodes(Object)
  fullName: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReplaceNodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 150
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Replaces the children nodes of this document or element with the specified content.</p>\n"
  remarks: "\n<p>For details about the valid content that can be passed to this function, see Valid Content of XElement and XDocument Objects.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n<p>This method has snapshot semantics. It first creates a copy of the new content. It then removes all children nodes of this node. Finally, it adds the new content as children nodes. This means that you can replace children nodes using a query on the children nodes themselves.</p>\n"
  example:
  - "\n<p>The following example creates an XML tree that contains children nodes. It then replaces all of the children nodes with a single element.</p>\n<p>To see an example of replacing the children nodes with the results of a LINQ query, see <xref href=\"System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XElement(\"Child\", 1),\nnew XElement(\"Child\", 2),\nnew XElement(\"Child\", 3),\nnew XElement(\"Child\", 4),\nnew XElement(\"Child\", 5)\n);\nroot.ReplaceNodes(\nfrom el in root.Elements()\nwhere (int)el >= 3\nselect el\n);\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = _ \n<Root>\n<Child>1</Child>\n<Child>2</Child>\n<Child>3</Child>\n<Child>4</Child>\n<Child>5</Child>\n</Root>\nroot.ReplaceNodes( _\nFrom el In root.Elements _\nWhere el.Value >= 3 _\nSelect el)\nConsole.WriteLine(root)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Child>3</Child>\n<Child>4</Child>\n<Child>5</Child>\n</Root></code></pre>\n"
  syntax:
    content: public void ReplaceNodes(object content)
    content.vb: Public Sub ReplaceNodes(content As Object)
    parameters:
    - id: content
      type: System.Object
      description: "\n<p>A content object containing simple content or a collection of content objects that replace the children nodes.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.RemoveNodes
    commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  commentId: M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  id: ReplaceNodes(System.Object[])
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  - vb
  name: ReplaceNodes(Object[])
  fullName: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReplaceNodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 151
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Replaces the children nodes of this document or element with the specified content.</p>\n"
  remarks: "\n<p>For details about the valid content that can be passed to this function, see Valid Content of XElement and XDocument Objects.</p>\n<p>This method will raise the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n<p>This method has snapshot semantics. It first creates a copy of the new content. It then removes all children nodes of this node. Finally, it adds the new content as children nodes. This means that you can replace children nodes using a query on the children nodes themselves.</p>\n"
  example:
  - "\n<p>The following example creates a dictionary and an XML tree. It then queries the dictionary, projects the results to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>, and replaces the contents of the XML tree with the results of the query.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XElement(\"Child\", 1),\nnew XElement(\"Child\", 2),\nnew XElement(\"Child\", 3),\nnew XElement(\"Child\", 4),\nnew XElement(\"Child\", 5)\n);\nroot.ReplaceNodes(\nfrom el in root.Elements()\nwhere (int)el >= 3\nselect el\n);\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = _ \n<Root>\n<Child>1</Child>\n<Child>2</Child>\n<Child>3</Child>\n<Child>4</Child>\n<Child>5</Child>\n</Root>\nroot.ReplaceNodes( _\nFrom el In root.Elements _\nWhere el.Value >= 3 _\nSelect el)\nConsole.WriteLine(root)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Child>3</Child>\n<Child>4</Child>\n<Child>5</Child>\n</Root></code></pre>\n"
  syntax:
    content: public void ReplaceNodes(params object[] content)
    content.vb: Public Sub ReplaceNodes(ParamArray content As Object())
    parameters:
    - id: content
      type: System.Object[]
      description: "\n<p>A parameter list of content objects.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.RemoveNodes
    commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XContainer.ReplaceNodes(System.Object())
  name.vb: ReplaceNodes(Object())
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Xml.Linq.XObject
  parent: System.Xml.Linq
  isExternal: false
  name: XObject
  fullName: System.Xml.Linq.XObject
- uid: System.Xml.Linq.XNode
  parent: System.Xml.Linq
  isExternal: false
  name: XNode
  fullName: System.Xml.Linq.XNode
- uid: System.Xml.Linq.XNode.DocumentOrderComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DocumentOrderComparer
  fullName: System.Xml.Linq.XNode.DocumentOrderComparer
- uid: System.Xml.Linq.XNode.EqualityComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: EqualityComparer
  fullName: System.Xml.Linq.XNode.EqualityComparer
- uid: System.Xml.Linq.XNode.NextNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NextNode
  fullName: System.Xml.Linq.XNode.NextNode
- uid: System.Xml.Linq.XNode.PreviousNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: PreviousNode
  fullName: System.Xml.Linq.XNode.PreviousNode
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddAfterSelf(Object)
  fullName: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddAfterSelf(Object[])
  fullName: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  fullname.vb: System.Xml.Linq.XNode.AddAfterSelf(System.Object())
  name.vb: AddAfterSelf(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddBeforeSelf(Object)
  fullName: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddBeforeSelf(Object[])
  fullName: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  fullname.vb: System.Xml.Linq.XNode.AddBeforeSelf(System.Object())
  name.vb: AddBeforeSelf(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.Ancestors
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors()
  fullName: System.Xml.Linq.XNode.Ancestors()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.Ancestors
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.Ancestors
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors(XName)
  fullName: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CompareDocumentOrder(XNode, XNode)
  fullName: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: CompareDocumentOrder
    fullName: System.Xml.Linq.XNode.CompareDocumentOrder
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: CompareDocumentOrder
    fullName: System.Xml.Linq.XNode.CompareDocumentOrder
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.CreateReader
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader()
  fullName: System.Xml.Linq.XNode.CreateReader()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.CreateReader
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.CreateReader
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader(ReaderOptions)
  fullName: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - uid: System.Xml.Linq.ReaderOptions
    name: ReaderOptions
    fullName: System.Xml.Linq.ReaderOptions
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - uid: System.Xml.Linq.ReaderOptions
    name: ReaderOptions
    fullName: System.Xml.Linq.ReaderOptions
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DeepEquals(XNode, XNode)
  fullName: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: DeepEquals
    fullName: System.Xml.Linq.XNode.DeepEquals
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: DeepEquals
    fullName: System.Xml.Linq.XNode.DeepEquals
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf()
  fullName: System.Xml.Linq.XNode.ElementsAfterSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf(XName)
  fullName: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf()
  fullName: System.Xml.Linq.XNode.ElementsBeforeSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf(XName)
  fullName: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsAfter(XNode)
  fullName: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
    name: IsAfter
    fullName: System.Xml.Linq.XNode.IsAfter
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
    name: IsAfter
    fullName: System.Xml.Linq.XNode.IsAfter
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsBefore(XNode)
  fullName: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
    name: IsBefore
    fullName: System.Xml.Linq.XNode.IsBefore
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
    name: IsBefore
    fullName: System.Xml.Linq.XNode.IsBefore
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.NodesAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesAfterSelf()
  fullName: System.Xml.Linq.XNode.NodesAfterSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.NodesAfterSelf
    name: NodesAfterSelf
    fullName: System.Xml.Linq.XNode.NodesAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.NodesAfterSelf
    name: NodesAfterSelf
    fullName: System.Xml.Linq.XNode.NodesAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.NodesBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesBeforeSelf()
  fullName: System.Xml.Linq.XNode.NodesBeforeSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.NodesBeforeSelf
    name: NodesBeforeSelf
    fullName: System.Xml.Linq.XNode.NodesBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.NodesBeforeSelf
    name: NodesBeforeSelf
    fullName: System.Xml.Linq.XNode.NodesBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: ReadFrom(XmlReader)
  fullName: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
    name: ReadFrom
    fullName: System.Xml.Linq.XNode.ReadFrom
  - name: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
    name: ReadFrom
    fullName: System.Xml.Linq.XNode.ReadFrom
  - name: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.Remove
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Remove()
  fullName: System.Xml.Linq.XNode.Remove()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.Remove
    name: Remove
    fullName: System.Xml.Linq.XNode.Remove
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.Remove
    name: Remove
    fullName: System.Xml.Linq.XNode.Remove
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: ReplaceWith(Object)
  fullName: System.Xml.Linq.XNode.ReplaceWith(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: ReplaceWith(Object[])
  fullName: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  fullname.vb: System.Xml.Linq.XNode.ReplaceWith(System.Object())
  name.vb: ReplaceWith(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ToString
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString()
  fullName: System.Xml.Linq.XNode.ToString()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ToString
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ToString
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString(SaveOptions)
  fullName: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - uid: System.Xml.Linq.SaveOptions
    name: SaveOptions
    fullName: System.Xml.Linq.SaveOptions
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - uid: System.Xml.Linq.SaveOptions
    name: SaveOptions
    fullName: System.Xml.Linq.SaveOptions
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: WriteTo(XmlWriter)
  fullName: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.Linq.XNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.Linq.XNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.BaseUri
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: BaseUri
  fullName: System.Xml.Linq.XObject.BaseUri
- uid: System.Xml.Linq.XObject.Document
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Document
  fullName: System.Xml.Linq.XObject.Document
- uid: System.Xml.Linq.XObject.NodeType
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: NodeType
  fullName: System.Xml.Linq.XObject.NodeType
- uid: System.Xml.Linq.XObject.Parent
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Parent
  fullName: System.Xml.Linq.XObject.Parent
- uid: System.Xml.Linq.XObject.Changed
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changed
  fullName: System.Xml.Linq.XObject.Changed
- uid: System.Xml.Linq.XObject.Changing
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changing
  fullName: System.Xml.Linq.XObject.Changing
- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: AddAnnotation(Object)
  fullName: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
    name: AddAnnotation
    fullName: System.Xml.Linq.XObject.AddAnnotation
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
    name: AddAnnotation
    fullName: System.Xml.Linq.XObject.AddAnnotation
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotation(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: Annotation(Type)
  fullName: System.Xml.Linq.XObject.Annotation(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotation(System.Type)
    name: Annotation
    fullName: System.Xml.Linq.XObject.Annotation
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotation(System.Type)
    name: Annotation
    fullName: System.Xml.Linq.XObject.Annotation
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotation``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation<T>()
  fullName: System.Xml.Linq.XObject.Annotation<T>()
  fullname.vb: System.Xml.Linq.XObject.Annotation(Of T)()
  name.vb: Annotation(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotation``1
    name: Annotation<T>
    fullName: System.Xml.Linq.XObject.Annotation<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotation``1
    name: Annotation(Of T)
    fullName: System.Xml.Linq.XObject.Annotation(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: Annotations(Type)
  fullName: System.Xml.Linq.XObject.Annotations(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotations(System.Type)
    name: Annotations
    fullName: System.Xml.Linq.XObject.Annotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotations(System.Type)
    name: Annotations
    fullName: System.Xml.Linq.XObject.Annotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations<T>()
  fullName: System.Xml.Linq.XObject.Annotations<T>()
  fullname.vb: System.Xml.Linq.XObject.Annotations(Of T)()
  name.vb: Annotations(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotations``1
    name: Annotations<T>
    fullName: System.Xml.Linq.XObject.Annotations<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotations``1
    name: Annotations(Of T)
    fullName: System.Xml.Linq.XObject.Annotations(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: RemoveAnnotations(Type)
  fullName: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    name: RemoveAnnotations
    fullName: System.Xml.Linq.XObject.RemoveAnnotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    name: RemoveAnnotations
    fullName: System.Xml.Linq.XObject.RemoveAnnotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.RemoveAnnotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations<T>()
  fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>()
  fullname.vb: System.Xml.Linq.XObject.RemoveAnnotations(Of T)()
  name.vb: RemoveAnnotations(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1
    name: RemoveAnnotations<T>
    fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1
    name: RemoveAnnotations(Of T)
    fullName: System.Xml.Linq.XObject.RemoveAnnotations(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<XNode>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XNode)
  name.vb: IEnumerable(Of XNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<XElement>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement)
  name.vb: IEnumerable(Of XElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    fullName: System.Xml.Linq.XElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XElement
    name: XElement
    fullName: System.Xml.Linq.XElement
  - name: )
    fullName: )
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  fullName: System.Xml.Linq.XName
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: false
  name: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
