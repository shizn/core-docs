items:
- uid: System.Net.NetworkInformation.IPInterfaceProperties
  commentId: T:System.Net.NetworkInformation.IPInterfaceProperties
  id: IPInterfaceProperties
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.IPInterfaceProperties.#ctor
  - System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  - System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
  - System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
  - System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  - System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  - System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  langs:
  - csharp
  - vb
  name: IPInterfaceProperties
  fullName: System.Net.NetworkInformation.IPInterfaceProperties
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPInterfaceProperties
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 172
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).</p>\n"
  remarks: "\n<p>This class provides access to configuration and address information for network interfaces that support IPv4 or IPv6. You do not create instances of this class; they are returned by the <xref href=\"System.Net.NetworkInformation.NetworkInterface.GetIPProperties\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To access IPv4-specific properties, use the object returned by the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties\" data-throw-if-not-resolved=\"false\"></xref> method. To access IPv6-specific properties, use the object returned by the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example displays address information.</p>NclNetInfoReport#8"
  syntax:
    content: public abstract class IPInterfaceProperties
    content.vb: Public MustInherit Class IPInterfaceProperties
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.NetworkInformation.IPInterfaceProperties.#ctor
  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: IPInterfaceProperties()
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IPInterfaceProperties()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 174
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor can be called only from classes that derive from <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected IPInterfaceProperties()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  id: AnycastAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: AnycastAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AnycastAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 175
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the anycast IP addresses assigned to this interface.</p>\n"
  remarks: "\n<p>An anycast address identifies multiple computers. Packets sent to an anycast address are sent to one of the computers identified by the address. Anycast addressing is an IPv6 feature used to update router tables for a group of hosts.</p>\n"
  example:
  - "\n<p>The following code example displays the anycast addresses for the network interfaces on the local computer.</p>NclNetInfo2#43"
  syntax:
    content: public abstract IPAddressInformationCollection AnycastAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property AnycastAddresses As IPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.IPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the anycast addresses for this interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  id: DhcpServerAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: DhcpServerAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DhcpServerAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 176
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.</p>\n"
  remarks: "\n<p>Dynamic Host Configuration Protocol (DHCP) allows a computer to obtain a network address from a DHCP server, as opposed to using a static (fixed) network address. A DHCP server does not permanently assign addresses; instead, it temporarily uses one of a number of available addresses to the computer.</p>\n"
  example:
  - "\n<p>The following code example displays the DHCP address information for the network interfaces on the local computer.</p>NclNetInfo2#46"
  syntax:
    content: public abstract IPAddressCollection DhcpServerAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property DhcpServerAddresses As IPAddressCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.IPAddressCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the address information for DHCP servers, or an empty array if no servers are found.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  id: DnsAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: DnsAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DnsAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 177
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the addresses of Domain Name System (DNS) servers for this interface.</p>\n"
  remarks: "\n<p>DNS is a hierarchical naming system used to map host names to IP addresses.</p>\n"
  example:
  - "\n<p>The following code example displays the DNS addresses for the network interfaces on the local computer.</p>NclNetInfo2#42"
  syntax:
    content: public abstract IPAddressCollection DnsAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property DnsAddresses As IPAddressCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.IPAddressCollection
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the DNS server addresses.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  id: DnsSuffix
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: DnsSuffix
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DnsSuffix
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 178
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the Domain Name System (DNS) suffix associated with this interface.</p>\n"
  remarks: "\n<p>The DNS suffix identifies the domain name (for example, \"contoso.com\") that is appended to an unqualified host name to obtain a fully qualified domain name (FQDN) suitable for a DNS name query. For example, if the local machine has \"contoso.com\" as its <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix\" data-throw-if-not-resolved=\"false\"></xref>, and must resolve the unqualified host name \"www\", the FQDN to query is \"www.contoso.com\".</p>\n"
  example:
  - "\n<p>The following code example displays the DNS suffix.</p>NclNetInfo2#41"
  syntax:
    content: public abstract string DnsSuffix { get; }
    content.vb: Public MustOverride ReadOnly Property DnsSuffix As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the DNS suffix for this interface, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if there is no DNS suffix for the interface.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows 2000. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  id: GatewayAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: GatewayAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GatewayAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 179
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the IPv4 network gateway addresses for this interface.</p>\n"
  remarks: "\n<p>Gateways that implement the Internet Protocol Version 4 (IPv4) to forward packets between networks are returned by this property.</p>\n"
  example:
  - "\n<p>The following code example displays the gateway addresses for the network interfaces on the local computer.</p>NclNetInfo2#47"
  syntax:
    content: public abstract GatewayIPAddressInformationCollection GatewayAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property GatewayAddresses As GatewayIPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.GatewayIPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the address information for network gateways, or an empty array if no gateways are found.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  id: IsDnsEnabled
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: IsDnsEnabled
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDnsEnabled
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 180
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether NetBt is configured to use DNS name resolution on this interface.</p>\n"
  remarks: "\n<p>DNS is a hierarchical naming system used to map host names to IP addresses.</p>\n"
  example:
  - "\n<p>The following code example displays the value of this property.</p>NclNetInfo2#41"
  syntax:
    content: public abstract bool IsDnsEnabled { get; }
    content.vb: Public MustOverride ReadOnly Property IsDnsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if NetBt is configured to use DNS name resolution on this interface; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  id: IsDynamicDnsEnabled
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: IsDynamicDnsEnabled
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDynamicDnsEnabled
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 181
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).</p>\n"
  remarks: "\n<p>Dynamic DNS enables a client to inform the DNS servers that its dynamic IP address is mapped to its static host name.</p>\n"
  example:
  - "\n<p>The following code example displays the value of this property.</p>NclNetInfo2#41"
  syntax:
    content: public abstract bool IsDynamicDnsEnabled { get; }
    content.vb: Public MustOverride ReadOnly Property IsDynamicDnsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  id: MulticastAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: MulticastAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 182
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the multicast addresses assigned to this interface.</p>\n"
  remarks: "\n<p>A multicast address identifies multiple computers. Packets sent to a multicast address are sent to all computers identified by the address. </p>\n"
  example:
  - "\n<p>The following code example displays the multicast addresses for the network interfaces on the local computer.</p>NclNetInfo2#44"
  syntax:
    content: public abstract MulticastIPAddressInformationCollection MulticastAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property MulticastAddresses As MulticastIPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.MulticastIPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the multicast addresses for this interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  id: UnicastAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: UnicastAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnicastAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 183
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the unicast addresses assigned to this interface.</p>\n"
  remarks: "\n<p>A unicast address identifies a single computer. Packets sent to a unicast address are sent to the computer identified by the address.</p>\n"
  example:
  - "\n<p>The following code example displays the unicast addresses for the network interfaces on the local computer.</p>NclNetInfo2#45"
  syntax:
    content: public abstract UnicastIPAddressInformationCollection UnicastAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property UnicastAddresses As UnicastIPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.UnicastIPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the unicast addresses for this interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  id: WinsServersAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: WinsServersAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WinsServersAddresses
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 184
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the addresses of Windows Internet Name Service (WINS) servers.</p>\n"
  remarks: "\n<p>WINS provides a distributed database for registering and querying dynamic NetBIOS names to IP address mappings.</p>\n"
  syntax:
    content: public abstract IPAddressCollection WinsServersAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property WinsServersAddresses As IPAddressCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.IPAddressCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the address information for WINS servers, or an empty array if no servers are found.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
  id: GetIPv4Properties
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: GetIPv4Properties()
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPv4Properties
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 185
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.</p>\n"
  remarks: "\n<p>This property returns <strong>null</strong> for <xref href=\"System.Net.NetworkInformation.NetworkInterfaceType.Loopback\" data-throw-if-not-resolved=\"false\"></xref> interfaces.</p>\n<p>For a detailed description of the information available for an interface that supports IPv4, see the <xref href=\"System.Net.NetworkInformation.IPv4InterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> class documentation. Note that the object returned by the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties\" data-throw-if-not-resolved=\"false\"></xref> method reflects the configuration as of the time the object is created. This information is not updated dynamically.</p>\n"
  syntax:
    content: public abstract IPv4InterfaceProperties GetIPv4Properties()
    content.vb: Public MustOverride Function GetIPv4Properties As IPv4InterfaceProperties
    return:
      type: System.Net.NetworkInformation.IPv4InterfaceProperties
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPv4InterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains IPv4 configuration data, or <strong>null</strong> if no data is available for the interface.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The interface does not support the IPv4 protocol.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
  id: GetIPv6Properties
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: GetIPv6Properties()
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPv6Properties
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 186
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.</p>\n"
  remarks: "\n<p>For a detailed description of the information available for an interface that supports IPv6, see the <xref href=\"System.Net.NetworkInformation.IPv6InterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> documentation. Note that the object returned by the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties\" data-throw-if-not-resolved=\"false\"></xref> method reflects the configuration as of the time the object is created. This information is not updated dynamically.</p>\n"
  syntax:
    content: public abstract IPv6InterfaceProperties GetIPv6Properties()
    content.vb: Public MustOverride Function GetIPv6Properties As IPv6InterfaceProperties
    return:
      type: System.Net.NetworkInformation.IPv6InterfaceProperties
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPv6InterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains IPv6 configuration data.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The interface does not support the IPv6 protocol.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.NetworkInformation.IPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPAddressInformationCollection
  fullName: System.Net.NetworkInformation.IPAddressInformationCollection
- uid: System.Net.NetworkInformation.IPAddressCollection
  isExternal: false
  name: IPAddressCollection
  fullName: System.Net.NetworkInformation.IPAddressCollection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: GatewayIPAddressInformationCollection
  fullName: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: MulticastIPAddressInformationCollection
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
- uid: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: UnicastIPAddressInformationCollection
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
- uid: System.Net.NetworkInformation.IPv4InterfaceProperties
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPv4InterfaceProperties
  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties
- uid: System.Net.NetworkInformation.IPv6InterfaceProperties
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPv6InterfaceProperties
  fullName: System.Net.NetworkInformation.IPv6InterfaceProperties
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Net.NetworkInformation.NetworkInformationException
  isExternal: false
  name: NetworkInformationException
  fullName: System.Net.NetworkInformation.NetworkInformationException
