items:
- uid: System.Security.Cryptography.AesCng
  commentId: T:System.Security.Cryptography.AesCng
  id: AesCng
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.AesCng.#ctor
  - System.Security.Cryptography.AesCng.#ctor(System.String)
  - System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.AesCng.CreateDecryptor
  - System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.AesCng.CreateEncryptor
  - System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.AesCng.Dispose(System.Boolean)
  - System.Security.Cryptography.AesCng.GenerateIV
  - System.Security.Cryptography.AesCng.GenerateKey
  - System.Security.Cryptography.AesCng.Key
  - System.Security.Cryptography.AesCng.KeySize
  langs:
  - csharp
  - vb
  name: AesCng
  fullName: System.Security.Cryptography.AesCng
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AesCng
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 35
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Provides a Cryptography Next Generation (CNG) implementation of the Advanced Encryption Standard (AES) algorithm.</p>\n"
  syntax:
    content: 'public sealed class AesCng : Aes, IDisposable'
    content.vb: >-
      Public NotInheritable Class AesCng
          Inherits Aes
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  - System.Security.Cryptography.Aes
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Security.Cryptography.Aes.Create
  - System.Security.Cryptography.Aes.Create(System.String)
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.AesCng.#ctor
  commentId: M:System.Security.Cryptography.AesCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: AesCng()
  fullName: System.Security.Cryptography.AesCng.AesCng()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 37
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> class with an ephemeral key.</p>\n"
  syntax:
    content: public AesCng()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.AesCng.#ctor(System.String)
  commentId: M:System.Security.Cryptography.AesCng.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: AesCng(String)
  fullName: System.Security.Cryptography.AesCng.AesCng(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 38
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key name, which represents an existing persisted AES key. </p>\n"
  remarks: "\n<p>This constructor uses a default <xref href=\"System.Security.Cryptography.CngKeyOpenOptions\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.Security.Cryptography.CngKeyOpenOptions.None\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider\" data-throw-if-not-resolved=\"false\"></xref> as the default key storage provider (KSP) to open the key.</p>\n"
  syntax:
    content: public AesCng(string keyName)
    content.vb: Public Sub New(keyName As String)
    parameters:
    - id: keyName
      type: System.String
      description: "\n<p>The name of the key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyName</em> is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>\n      Cryptography Next Generation (CNG) is not supported on this system.\n</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>All other errors.\n</p>\n"
  seealso:
  - type: System.Security.Cryptography.CngKey.Open(System.String)
    commentId: M:System.Security.Cryptography.CngKey.Open(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)
  commentId: M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)
  id: '#ctor(System.String,System.Security.Cryptography.CngProvider)'
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: AesCng(String, CngProvider)
  fullName: System.Security.Cryptography.AesCng.AesCng(System.String, System.Security.Cryptography.CngProvider)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 39
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key name, which represents an existing persisted AES key, and the specified key storage provider (KSP).</p>\n"
  remarks: "\n<p>A default <xref href=\"System.Security.Cryptography.CngKeyOpenOptions\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.Security.Cryptography.CngKeyOpenOptions.None\" data-throw-if-not-resolved=\"false\"></xref> is used to open the key.</p>\n"
  syntax:
    content: public AesCng(string keyName, CngProvider provider)
    content.vb: Public Sub New(keyName As String, provider As CngProvider)
    parameters:
    - id: keyName
      type: System.String
      description: "\n<p>The name of the key.</p>\n"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>The KSP that contains the key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyName</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>provider</em> is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>\n      Cryptography Next Generation (CNG) is not supported on this system.\n</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>All other errors.\n</p>\n"
  seealso:
  - type: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
    commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  commentId: M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: '#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)'
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: AesCng(String, CngProvider, CngKeyOpenOptions)
  fullName: System.Security.Cryptography.AesCng.AesCng(System.String, System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngKeyOpenOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 40
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key name, which represents an existing persisted AES key,  the specified key storage provider (KSP) and key open options.</p>\n"
  syntax:
    content: public AesCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)
    content.vb: Public Sub New(keyName As String, provider As CngProvider, openOptions As CngKeyOpenOptions)
    parameters:
    - id: keyName
      type: System.String
      description: "\n<p>The name of the key.</p>\n"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>The KSP that contains the key.</p>\n"
    - id: openOptions
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyName</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>provider</em> is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>\n      Cryptography Next Generation (CNG) is not supported on this system.\n</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>All other errors.\n</p>\n"
  seealso:
  - type: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
    commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.AesCng.Key
  commentId: P:System.Security.Cryptography.AesCng.Key
  id: Key
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Security.Cryptography.AesCng.Key
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 41
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the key for the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  remarks: "\n<p>If you've created the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> object using an existing persisted key, when you read the value of the <xref href=\"System.Security.Cryptography.AesCng.Key\" data-throw-if-not-resolved=\"false\"></xref> property, an attempt to export the key will be made. In this case, if the key is not exportable, a <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n<p>In addition to that, if you set the value of the <xref href=\"System.Security.Cryptography.AesCng.Key\" data-throw-if-not-resolved=\"false\"></xref> property,  the persisted key will no longer be used and a temporary key will be used instead. If you need to use the persisted key again, a new instance of <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> class needs to be created.</p>\n"
  syntax:
    content: public override byte[] Key { get; set; }
    content.vb: Public Overrides Property Key As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>The key for the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  overridden: System.Security.Cryptography.SymmetricAlgorithm.Key
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.AesCng.KeySize
  commentId: P:System.Security.Cryptography.AesCng.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: KeySize
  fullName: System.Security.Cryptography.AesCng.KeySize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySize
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 42
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the size, in bits, of the secret key used by the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  remarks: "\n<p>If you've created the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> object using an existing persisted key and you set the value of the <xref href=\"System.Security.Cryptography.AesCng.KeySize\" data-throw-if-not-resolved=\"false\"></xref> property,  the persisted key will no longer be used and an ephemeral key will be used instead. If you need to use the persisted key again, a new instance of <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> class needs to be created.</p>\n"
  syntax:
    content: public override int KeySize { get; set; }
    content.vb: Public Overrides Property KeySize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The size, in bits, of the secret key used by the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  overridden: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.AesCng.CreateDecryptor
  commentId: M:System.Security.Cryptography.AesCng.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: CreateDecryptor()
  fullName: System.Security.Cryptography.AesCng.CreateDecryptor()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDecryptor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 43
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a symmetric AES decryptor object with the current key and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>This method decrypts an encrypted message created using the <xref href=\"System.Security.Cryptography.AesCng.CreateEncryptor\" data-throw-if-not-resolved=\"false\"></xref> overload with the same signature.</p>\n"
  syntax:
    content: public override ICryptoTransform CreateDecryptor()
    content.vb: Public Overrides Function CreateDecryptor As ICryptoTransform
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric AES decryptor object.</p>\n"
  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: CreateDecryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDecryptor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 44
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a symmetric AES decryptor object with the specified key and initialization vector (IV).</p>\n"
  remarks: "\n<p>This method decrypts an encrypted message created using the <xref href=\"System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> overload with the same signature.</p>\n<p>If you've created the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> object using an existing persisted key and you want to make use of that key when decrypting the message, you want to set the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property and then call the  parameterless <xref href=\"System.Security.Cryptography.AesCng.CreateDecryptor\" data-throw-if-not-resolved=\"false\"></xref> overload instead; otherwise, using this method will create an ephemeral key as specified by the <em>rgbKey</em> parameter.</p>\n"
  syntax:
    content: public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)
    content.vb: Public Overrides Function CreateDecryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "\n<p>The secret key to use for the AES algorithm. The key size must be 128, 192, or 256 bits.</p>\n"
    - id: rgbIV
      type: System.Byte[]
      description: "\n<p>The initialization vector to use for the AES algorithm.</p>\n"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric AES decryptor object.</p>\n"
  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rgbKey</em>  is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\n<p>-or-</p>\n<p>\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\n<p>-or-</p>\n<p>\n<em>rgbIV</em>  is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte(), System.Byte())
  name.vb: CreateDecryptor(Byte(), Byte())
- uid: System.Security.Cryptography.AesCng.CreateEncryptor
  commentId: M:System.Security.Cryptography.AesCng.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: CreateEncryptor()
  fullName: System.Security.Cryptography.AesCng.CreateEncryptor()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEncryptor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 45
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a symmetric AES encryptor object using the current key and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>Use this method to encrypt a message and then use the <xref href=\"System.Security.Cryptography.AesCng.CreateDecryptor\" data-throw-if-not-resolved=\"false\"></xref> overload with the same signature to decrypt the  result of this method.</p>\n"
  syntax:
    content: public override ICryptoTransform CreateEncryptor()
    content.vb: Public Overrides Function CreateEncryptor As ICryptoTransform
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric AES encryptor object.</p>\n"
  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: CreateEncryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEncryptor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 46
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a symmetric AES encryptor object with the specified key and initialization vector (IV).</p>\n"
  remarks: "\n<p>Use this method to encrypt a message and then use the <xref href=\"System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> overload with the same signature to decrypt the  result of this method.</p>\n<p>If you've created the <xref href=\"System.Security.Cryptography.AesCng\" data-throw-if-not-resolved=\"false\"></xref> object using an existing persisted key and you want to make use of that key when encrypting the message, you want to set the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property and then call the  parameterless <xref href=\"System.Security.Cryptography.AesCng.CreateEncryptor\" data-throw-if-not-resolved=\"false\"></xref> overload instead; otherwise, using this method will create an ephemeral key as specified by the <em>rgbKey</em> parameter.</p>\n"
  syntax:
    content: public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)
    content.vb: Public Overrides Function CreateEncryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "\n<p>The secret key to use for the AES algorithm. The key size must be 128, 192, or 256 bits.</p>\n"
    - id: rgbIV
      type: System.Byte[]
      description: "\n<p>The initialization vector to use for the AES algorithm.</p>\n"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric AES encryptor object.</p>\n"
  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rgbKey</em>  is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\n<p>-or-</p>\n<p>\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\n<p>-or-</p>\n<p>\n<em>rgbIV</em>  is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte(), System.Byte())
  name.vb: CreateEncryptor(Byte(), Byte())
- uid: System.Security.Cryptography.AesCng.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.AesCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.AesCng.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 47
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overridden: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Security.Cryptography.AesCng.GenerateIV
  commentId: M:System.Security.Cryptography.AesCng.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: GenerateIV()
  fullName: System.Security.Cryptography.AesCng.GenerateIV()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateIV
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 48
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a random initialization vector (IV) to use for the AES algorithm.</p>\n"
  syntax:
    content: public override void GenerateIV()
    content.vb: Public Overrides Sub GenerateIV
  overridden: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.AesCng.GenerateKey
  commentId: M:System.Security.Cryptography.AesCng.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.AesCng
  langs:
  - csharp
  - vb
  name: GenerateKey()
  fullName: System.Security.Cryptography.AesCng.GenerateKey()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateKey
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a random key to use for the AES algorithm.</p>\n"
  syntax:
    content: public override void GenerateKey()
    content.vb: Public Overrides Sub GenerateKey
  overridden: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  seealso:
  - type: System.Security.Cryptography.AesCng.Key
    commentId: P:System.Security.Cryptography.AesCng.Key
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.Aes
  parent: System.Security.Cryptography
  isExternal: false
  name: Aes
  fullName: System.Security.Cryptography.Aes
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Security.Cryptography.Aes.Create
  parent: System.Security.Cryptography.Aes
  isExternal: true
  name: Create()
  fullName: System.Security.Cryptography.Aes.Create()
  spec.csharp:
  - uid: System.Security.Cryptography.Aes.Create
    name: Create
    fullName: System.Security.Cryptography.Aes.Create
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.Aes.Create
    name: Create
    fullName: System.Security.Cryptography.Aes.Create
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.Aes.Create(System.String)
  parent: System.Security.Cryptography.Aes
  isExternal: true
  name: Create(String)
  fullName: System.Security.Cryptography.Aes.Create(System.String)
  spec.csharp:
  - uid: System.Security.Cryptography.Aes.Create(System.String)
    name: Create
    fullName: System.Security.Cryptography.Aes.Create
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.Aes.Create(System.String)
    name: Create
    fullName: System.Security.Cryptography.Aes.Create
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
    name: Clear
    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
    name: Clear
    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
    name: ValidKeySize
    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
    name: ValidKeySize
    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.CngProvider
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProvider
  fullName: System.Security.Cryptography.CngProvider
- uid: System.Security.Cryptography.CngKeyOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyOpenOptions
  fullName: System.Security.Cryptography.CngKeyOpenOptions
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
    name: CreateDecryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
    name: CreateDecryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: CreateDecryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])
  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())
  name.vb: CreateDecryptor(Byte(), Byte())
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
    name: CreateDecryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
    name: CreateDecryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
    name: CreateEncryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
    name: CreateEncryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: CreateEncryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])
  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())
  name.vb: CreateEncryptor(Byte(), Byte())
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
    name: CreateEncryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
    name: CreateEncryptor
    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
    name: GenerateIV
    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
    name: GenerateIV
    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: true
  name: GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  spec.csharp:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
    name: GenerateKey
    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
    name: GenerateKey
    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
