items:
- uid: System.Net.NetworkInformation.PingOptions
  commentId: T:System.Net.NetworkInformation.PingOptions
  id: PingOptions
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.PingOptions.#ctor
  - System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
  - System.Net.NetworkInformation.PingOptions.DontFragment
  - System.Net.NetworkInformation.PingOptions.Ttl
  langs:
  - csharp
  - vb
  name: PingOptions
  fullName: System.Net.NetworkInformation.PingOptions
  type: Class
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PingOptions
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 54
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Used to control how <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data packets are transmitted.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> class provides the <xref href=\"System.Net.NetworkInformation.PingOptions.Ttl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.NetworkInformation.PingOptions.DontFragment\" data-throw-if-not-resolved=\"false\"></xref> properties to control how Internet Control Message Protocol (ICMP) echo request packets are transmitted.  </p>\n<p>The <xref href=\"System.Net.NetworkInformation.PingOptions.Ttl\" data-throw-if-not-resolved=\"false\"></xref> property specifies the Time to Live for packets sent by the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class. This value indicates the number of routing nodes that can forward a <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> packet before it is discarded. Setting this option is useful if you want to test the number of forwards, also known as hops, are required to send a packet from a source computer to a destination computer.</p>\n<p>The <xref href=\"System.Net.NetworkInformation.PingOptions.DontFragment\" data-throw-if-not-resolved=\"false\"></xref>  property controls whether data sent to a remote host can be divided into multiple packets.  This option is useful if you want to test the maximum transmission unit (MTU) of the routers and gateways used to transmit the packet.</p>\n<p>Instances of the <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> class are passed to the <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> and <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> methods, and the <xref href=\"System.Net.NetworkInformation.PingReply\" data-throw-if-not-resolved=\"false\"></xref> class returns instances of <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> via the <xref href=\"System.Net.NetworkInformation.PingReply.Options\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>For a list of initial property values for an instance of <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref>, see the <see cref=\"Overload:System.Net.NetworkInformation.PingOptions.#ctor\"></see> constructor.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.NetworkInformation.PingReply\" data-throw-if-not-resolved=\"false\"></xref> classes to send an ICMP echo request to the host specified on the command line.</p>NCLPingSync#1"
  syntax:
    content: public class PingOptions
    content.vb: Public Class PingOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.NetworkInformation.PingOptions.#ctor
  commentId: M:System.Net.NetworkInformation.PingOptions.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: PingOptions()
  fullName: System.Net.NetworkInformation.PingOptions.PingOptions()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 56
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property</p>\n<p>Initial Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingOptions.Ttl\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>128</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingOptions.DontFragment\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr></tbody></table>\n<p>You can set the properties to new values before calling <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> or <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates calling this constructor.</p>NCLPingSync#2"
  syntax:
    content: public PingOptions()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: PingOptions(Int32, Boolean)
  fullName: System.Net.NetworkInformation.PingOptions.PingOptions(System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 57
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> class and sets the Time to Live and fragmentation values.</p>\n"
  remarks: "\n<p>The <em>ttl</em> parameter limits the number of routers and gateways that can forward the data. This is useful for testing the length of the route between the local and remote computers. The <em>dontFragment</em> parameter allows you to test the maximum transmission unit (MTU) of the routers and gateways used to transmit the packet.</p>\n"
  example:
  - "\n<p>The following code example demonstrates calling this constructor and displaying the new instance's property values.</p>NCLPingAsync#3"
  syntax:
    content: public PingOptions(int ttl, bool dontFragment)
    content.vb: Public Sub New(ttl As Integer, dontFragment As Boolean)
    parameters:
    - id: ttl
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value greater than zero that specifies the number of times that the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data packets can be forwarded.</p>\n"
    - id: dontFragment
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to prevent data sent to the remote host from being fragmented; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>ttl </em>is less than or equal to zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.PingOptions.DontFragment
  commentId: P:System.Net.NetworkInformation.PingOptions.DontFragment
  id: DontFragment
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: DontFragment
  fullName: System.Net.NetworkInformation.PingOptions.DontFragment
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DontFragment
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 58
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that controls fragmentation of the data sent to the remote host.</p>\n"
  remarks: "\n<p>Applications use this property to control whether data sent to a remote host by the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class can be divided into multiple packets.  This option is useful if you want to test the maximum transmission unit (MTU) of the routers and gateways used to transmit the packet. If this property is <strong>true</strong> and the data sent to the remote host is larger then the MTU of a gateway or router between the sender and the remote host, the ping operation fails with status <xref href=\"System.Net.NetworkInformation.IPStatus.PacketTooBig\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates setting the value of this property using a <see cref=\"Overload:System.Net.NetworkInformation.PingOptions.#ctor\"></see> constructor, and then displaying the value.</p>NCLPingAsync#3"
  syntax:
    content: public bool DontFragment { get; set; }
    content.vb: Public Property DontFragment As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the data cannot be sent in multiple packets; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.PingOptions.Ttl
  commentId: P:System.Net.NetworkInformation.PingOptions.Ttl
  id: Ttl
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: Ttl
  fullName: System.Net.NetworkInformation.PingOptions.Ttl
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ttl
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 59
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets or sets the number of routing nodes that can forward the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data before it is discarded.</p>\n"
  remarks: "\n<p>As gateways and routers transmit packets through a network, they decrement the current Time-to-Live (TTL) value found in the packet header. If the TTL value reaches zero, the packet is deemed undeliverable and is discarded. This option is useful if you want to test the number of routers and gateways used to transmit the data.</p>\n"
  example:
  - "\n<p>The following code example demonstrates setting the value of this property using a <see cref=\"Overload:System.Net.NetworkInformation.PingOptions.#ctor\"></see> constructor, and then displaying the value.</p>NCLPingAsync#3"
  syntax:
    content: public int Ttl { get; set; }
    content.vb: Public Property Ttl As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the number of times the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data packets can be forwarded. The default is 128.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than or equal to zero.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
