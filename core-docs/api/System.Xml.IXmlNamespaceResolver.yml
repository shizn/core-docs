items:
- uid: System.Xml.IXmlNamespaceResolver
  commentId: T:System.Xml.IXmlNamespaceResolver
  id: IXmlNamespaceResolver
  parent: System.Xml
  children:
  - System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  - System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  - System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  langs:
  - csharp
  - vb
  name: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
  type: Interface
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IXmlNamespaceResolver
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 27
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Provides read-only access to a set of prefix and namespace mappings.</p>\n"
  example:
  - 
  syntax:
    content: public interface IXmlNamespaceResolver
    content.vb: Public Interface IXmlNamespaceResolver
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  commentId: M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.IXmlNamespaceResolver
  langs:
  - csharp
  - vb
  name: GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNamespacesInScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 29
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a collection of defined prefix-namespace mappings that are currently in scope.</p>\n"
  remarks: "\n<p>The collection is keyed by prefix and can be used to enumerate the namespaces currently in scope. The collection is a disconnected copy of the current namespace list.</p>\n<p>The following table lists the <xref href=\"System.Xml.XmlNamespaceScope\" data-throw-if-not-resolved=\"false\"></xref> values and how it affects the whether or not the default and built-in namespaces are returned by the <xref href=\"System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>XmlNamespaceScope value</p>\n<p>xmlns:xml</p>\n<p>xmlns:xmlns</p>\n<p>xmlns=\"\"</p>\n"
  example:
  - 
  syntax:
    content: IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
    content.vb: Function GetNamespacesInScope(scope As XmlNamespaceScope) As IDictionary(Of String, String)
    parameters:
    - id: scope
      type: System.Xml.XmlNamespaceScope
      description: "\n<p>An <xref href=\"System.Xml.XmlNamespaceScope\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the type of namespace nodes to return.</p>\n"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>An <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> that contains the current in-scope namespaces.</p>\n"
- uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  commentId: M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.IXmlNamespaceResolver
  langs:
  - csharp
  - vb
  name: LookupNamespace(String)
  fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 30
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the namespace URI mapped to the specified prefix.</p>\n"
  remarks: "\n<p>Namespace URI-to-prefix mappings can change from node to node in an XML document. You cannot depend on the result of a lookup being consistent from one node to the next.</p>\n<p>The following table describes how the default and built-in namespaces are handled by the <xref href=\"System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Prefix</p>\n<p>Return Value</p>\n<table><tbody><tr><td>\n<p>xml</p>\n</td><td>\n<p>http://www.w3.org/XML/1998/namespace</p>\n</td></tr><tr><td>\n<p>xmlns</p>\n</td><td>\n<p>http://www.w3.org/2000/xmlns/</p>\n</td></tr><tr><td>\n<p>\n<strong>String.Empty</strong> (A default namespace has been assigned).</p>\n</td><td>\n<p>The currently assigned default namespace.</p>\n</td></tr><tr><td>\n<p>\n<strong>String.Empty</strong> (The default namespace has not been explicitly assigned).</p>\n</td><td>\n<p>\n<strong>String.Empty</strong> (The blank prefix is associated with elements that are not in any namespace).</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: string LookupNamespace(string prefix)
    content.vb: Function LookupNamespace(prefix As String) As String
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix whose namespace URI you wish to find.</p>\n"
    return:
      type: System.String
      description: "\n<p>The namespace URI that is mapped to the prefix; <strong>null</strong> if the prefix is not mapped to a namespace URI.</p>\n"
- uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  commentId: M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  id: LookupPrefix(System.String)
  parent: System.Xml.IXmlNamespaceResolver
  langs:
  - csharp
  - vb
  name: LookupPrefix(String)
  fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupPrefix
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 31
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the prefix that is mapped to the specified namespace URI.</p>\n"
  remarks: "\n<p>It is possible for a namespace URI to be mapped to multiple prefixes. Because the prefixes are not mapped in a predictable manner, you should not depend on getting back a particular prefix when a namespace URI is mapped to more than one prefix.</p>\n<p>Namespace URI to prefix mappings can change from node to node in an XML document. You cannot depend on the result of a lookup being consistent from one node to the next.</p>\n<p>The following table describes how the default and built-in namespaces are handled by the <xref href=\"System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Namespace</p>\n<p>Return value</p>\n<table><tbody><tr><td>\n<p>http://www.w3.org/XML/1998/namespace</p>\n</td><td>\n<p>xml</p>\n</td></tr><tr><td>\n<p>http://www.w3.org/2000/xmlns/</p>\n</td><td>\n<p>xmlns</p>\n</td></tr><tr><td>\n<p>An empty namespace.</p>\n</td><td>\n<p>A default namespace that has not been defined.</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: string LookupPrefix(string namespaceName)
    content.vb: Function LookupPrefix(namespaceName As String) As String
    parameters:
    - id: namespaceName
      type: System.String
      description: "\n<p>The namespace URI whose prefix you wish to find.</p>\n"
    return:
      type: System.String
      description: "\n<p>The prefix that is mapped to the namespace URI; <strong>null</strong> if the namespace URI is not mapped to a prefix.</p>\n"
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Xml.XmlNamespaceScope
  parent: System.Xml
  isExternal: false
  name: XmlNamespaceScope
  fullName: System.Xml.XmlNamespaceScope
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System
  isExternal: false
  name: System
  fullName: System
