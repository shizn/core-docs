items:
- uid: System.Security.Cryptography.CipherMode
  commentId: T:System.Security.Cryptography.CipherMode
  id: CipherMode
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CipherMode.CBC
  - System.Security.Cryptography.CipherMode.CTS
  - System.Security.Cryptography.CipherMode.ECB
  langs:
  - csharp
  - vb
  name: CipherMode
  fullName: System.Security.Cryptography.CipherMode
  type: Enum
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CipherMode
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Specifies the block cipher mode to use for encryption.
  syntax:
    content: 'public enum CipherMode : int'
    content.vb: Public Enum CipherMode As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Security.Cryptography.CipherMode.CBC
  commentId: F:System.Security.Cryptography.CipherMode.CBC
  id: CBC
  parent: System.Security.Cryptography.CipherMode
  langs:
  - csharp
  - vb
  name: CBC
  fullName: System.Security.Cryptography.CipherMode.CBC
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CBC
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
    startLine: 14
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: The Cipher Block Chaining (CBC) mode introduces feedback. Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation. This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block. The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted. If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled. In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.
  syntax:
    content: CBC = null
    content.vb: CBC = Nothing
    return:
      type: System.Security.Cryptography.CipherMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Cryptography.CipherMode.CTS
  commentId: F:System.Security.Cryptography.CipherMode.CTS
  id: CTS
  parent: System.Security.Cryptography.CipherMode
  langs:
  - csharp
  - vb
  name: CTS
  fullName: System.Security.Cryptography.CipherMode.CTS
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CTS
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
    startLine: 15
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: The Cipher Text Stealing (CTS) mode handles any length of plain text and produces cipher text whose length matches the plain text length. This mode behaves like the CBC mode for all but the last two blocks of the plain text.
  syntax:
    content: CTS = null
    content.vb: CTS = Nothing
    return:
      type: System.Security.Cryptography.CipherMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Cryptography.CipherMode.ECB
  commentId: F:System.Security.Cryptography.CipherMode.ECB
  id: ECB
  parent: System.Security.Cryptography.CipherMode
  langs:
  - csharp
  - vb
  name: ECB
  fullName: System.Security.Cryptography.CipherMode.ECB
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECB
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CipherMode.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "The Electronic Codebook (ECB) mode encrypts each block individually. Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks. Important:  This mode is not recommended because it opens the door for multiple security exploits. If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time. It is also possible to use block analysis to determine the encryption key. Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection."
  syntax:
    content: ECB = null
    content.vb: ECB = Nothing
    return:
      type: System.Security.Cryptography.CipherMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  fullName: System.Security.Cryptography.CipherMode
