items:
- uid: System.Linq.ILookup`2
  commentId: T:System.Linq.ILookup`2
  id: ILookup`2
  parent: System.Linq
  children:
  - System.Linq.ILookup`2.Contains(`0)
  - System.Linq.ILookup`2.Count
  - System.Linq.ILookup`2.Item(`0)
  langs:
  - csharp
  - vb
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  type: Interface
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ILookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 194
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Defines an indexer, size property, and Boolean search method for data structures that map keys to <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> sequences of values.</p>\n"
  remarks: "\n<p>The type <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The extension method <see cref=\"Overload:System.Linq.Enumerable.ToLookup\"></see>, which can be appended to the end of a LINQ query, returns an object of type <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates an <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> object and iterates through its contents.</p>System.Linq.ILookup#1"
  syntax:
    content: 'public interface ILookup<TKey, TElement> : IEnumerable<IGrouping<TKey, TElement>>, IEnumerable'
    content.vb: >-
      Public Interface ILookup(Of TKey, TElement)
          Inherits IEnumerable(Of IGrouping(Of TKey, TElement)), IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the keys in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> sequences that make up the values in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Linq.Lookup`2
    commentId: T:System.Linq.Lookup`2
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}.GetEnumerator
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
- uid: System.Linq.ILookup`2.Count
  commentId: P:System.Linq.ILookup`2.Count
  id: Count
  parent: System.Linq.ILookup`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Linq.ILookup<TKey, TElement>.Count
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 196
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Gets the number of key/value collection pairs in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: int Count { get; }
    content.vb: ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value collection pairs in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Linq.ILookup(Of TKey, TElement).Count
- uid: System.Linq.ILookup`2.Item(`0)
  commentId: P:System.Linq.ILookup`2.Item(`0)
  id: Item(`0)
  parent: System.Linq.ILookup`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Linq.ILookup<TKey, TElement>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 197
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Gets the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> sequence of values indexed by a specified key.</p>\n"
  example:
  - 
  syntax:
    content: IEnumerable<TElement> this[TKey key] { get; }
    content.vb: ReadOnly Property Item(key As TKey) As IEnumerable(Of TElement)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the desired sequence of values.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> sequence of values indexed by the specified key.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Linq.ILookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Linq.ILookup`2.Contains(`0)
  commentId: M:System.Linq.ILookup`2.Contains(`0)
  id: Contains(`0)
  parent: System.Linq.ILookup`2
  langs:
  - csharp
  - vb
  name: Contains(TKey)
  fullName: System.Linq.ILookup<TKey, TElement>.Contains(TKey)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 198
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether a specified key exists in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: bool Contains(TKey key)
    content.vb: Function Contains(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to search for in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>key</em> is in the <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  fullName.vb: System.Linq.ILookup(Of TKey, TElement).Contains(TKey)
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement)).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: IEnumerable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
