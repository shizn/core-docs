items:
- uid: System.IO.BinaryReader
  commentId: T:System.IO.BinaryReader
  id: BinaryReader
  parent: System.IO
  children:
  - System.IO.BinaryReader.#ctor(System.IO.Stream)
  - System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)
  - System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - System.IO.BinaryReader.BaseStream
  - System.IO.BinaryReader.Dispose
  - System.IO.BinaryReader.Dispose(System.Boolean)
  - System.IO.BinaryReader.FillBuffer(System.Int32)
  - System.IO.BinaryReader.PeekChar
  - System.IO.BinaryReader.Read
  - System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.BinaryReader.Read7BitEncodedInt
  - System.IO.BinaryReader.ReadBoolean
  - System.IO.BinaryReader.ReadByte
  - System.IO.BinaryReader.ReadBytes(System.Int32)
  - System.IO.BinaryReader.ReadChar
  - System.IO.BinaryReader.ReadChars(System.Int32)
  - System.IO.BinaryReader.ReadDecimal
  - System.IO.BinaryReader.ReadDouble
  - System.IO.BinaryReader.ReadInt16
  - System.IO.BinaryReader.ReadInt32
  - System.IO.BinaryReader.ReadInt64
  - System.IO.BinaryReader.ReadSByte
  - System.IO.BinaryReader.ReadSingle
  - System.IO.BinaryReader.ReadString
  - System.IO.BinaryReader.ReadUInt16
  - System.IO.BinaryReader.ReadUInt32
  - System.IO.BinaryReader.ReadUInt64
  langs:
  - csharp
  - vb
  name: BinaryReader
  fullName: System.IO.BinaryReader
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinaryReader
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 24
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads primitive data types as binary values in a specific encoding.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class provides methods that simplify reading primitive data types from a stream. For example, you can use the <xref href=\"System.IO.BinaryReader.ReadBoolean\" data-throw-if-not-resolved=\"false\"></xref> method to read the next byte as a Boolean value and advance the current position in the stream by one byte. The class includes read methods that support different data types. </p>\n<p>When you create a new instance of the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> object. If you do not specify an encoding type, UTF-8 is used.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public class BinaryReader : IDisposable
    content.vb: >-
      <ComVisible(True)>

      Public Class BinaryReader
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream)
  commentId: M:System.IO.BinaryReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: BinaryReader(Stream)
  fullName: System.IO.BinaryReader.BinaryReader(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 42
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified stream and using UTF-8 encoding.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public BinaryReader(Stream input)
    content.vb: Public Sub New(input As Stream)
    parameters:
    - id: input
      type: System.IO.Stream
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed. </p>\n"
  seealso:
  - type: System.Text.UTF8Encoding
    commentId: T:System.Text.UTF8Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)
  commentId: M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: BinaryReader(Stream, Encoding)
  fullName: System.IO.BinaryReader.BinaryReader(System.IO.Stream, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 45
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified stream and character encoding.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public BinaryReader(Stream input, Encoding encoding)
    content.vb: Public Sub New(input As Stream, encoding As Encoding)
    parameters:
    - id: input
      type: System.IO.Stream
    - id: encoding
      type: System.Text.Encoding
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>encoding</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  commentId: M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: BinaryReader(Stream, Encoding, Boolean)
  fullName: System.IO.BinaryReader.BinaryReader(System.IO.Stream, System.Text.Encoding, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 48
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\n"
  syntax:
    content: public BinaryReader(Stream input, Encoding encoding, bool leaveOpen)
    content.vb: Public Sub New(input As Stream, encoding As Encoding, leaveOpen As Boolean)
    parameters:
    - id: input
      type: System.IO.Stream
    - id: encoding
      type: System.Text.Encoding
    - id: leaveOpen
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>encoding</em> or <em>input</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryReader.BaseStream
  commentId: P:System.IO.BinaryReader.BaseStream
  id: BaseStream
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: BaseStream
  fullName: System.IO.BinaryReader.BaseStream
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BaseStream
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 78
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Exposes access to the underlying stream of the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Using the underlying stream while reading or while using the <strong>BinaryReader</strong> can cause data loss and corruption. For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write <strong>Double</strong> data to memory by using the <strong>BinaryReader</strong> and <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> classes on top of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class. <strong>MemoryStream</strong> only reads and writes <strong>Byte</strong> data.</p>System.IO.BinaryReaderWriter.RWDouble#1"
  syntax:
    content: public virtual Stream BaseStream { get; }
    content.vb: Public Overridable ReadOnly Property BaseStream As Stream
    parameters: []
    return:
      type: System.IO.Stream
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.BinaryReader.Dispose
  commentId: M:System.IO.BinaryReader.Dispose
  id: Dispose
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.BinaryReader.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 103
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryReader.Dispose(System.Boolean)
  commentId: M:System.IO.BinaryReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.BinaryReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 88
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by <strong>Dispose</strong> and <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref>. By default, this method specifies the <em>disposing</em> parameter as <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> specifies the <em>disposing</em> parameter as <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.BinaryReader.FillBuffer(System.Int32)
  commentId: M:System.IO.BinaryReader.FillBuffer(System.Int32)
  id: FillBuffer(System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: FillBuffer(Int32)
  fullName: System.IO.BinaryReader.FillBuffer(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FillBuffer
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 537
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Fills the internal buffer with the specified number of bytes read from the stream.</p>\n"
  remarks: "\n<p>The internal buffer size is the larger value between 16 and the value returned by <xref href=\"System.Text.Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for the specified encoding.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected virtual void FillBuffer(int numBytes)
    content.vb: Protected Overridable Sub FillBuffer(numBytes As Integer)
    parameters:
    - id: numBytes
      type: System.Int32
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached before <em>numBytes</em> could be read. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Requested <em>numBytes</em> is larger than the internal buffer size.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.BinaryReader.PeekChar
  commentId: M:System.IO.BinaryReader.PeekChar
  id: PeekChar
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: PeekChar()
  fullName: System.IO.BinaryReader.PeekChar()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PeekChar
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 108
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Returns the next available character and does not advance the byte or character position.</p>\n"
  remarks: "\n<p>If surrogate characters can be expected in the stream use the <xref href=\"System.IO.BinaryReader.ReadChars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, then set the stream back to the original position.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual int PeekChar()
    content.vb: Public Overridable Function PeekChar As Integer
    return:
      type: System.Int32
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The current character cannot be decoded into the internal character buffer by using the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> selected for the stream.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.Read
  commentId: M:System.IO.BinaryReader.Read
  id: Read
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: Read()
  fullName: System.IO.BinaryReader.Read()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 121
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific character being read from the stream.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows how to read and write data using memory as a backing store. This example displays a list of invalid file path characters to the console. Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters. Because the list of invalid characters can vary based on the system, output for this code may also vary.</p>System.IO.BinaryReaderWriter.RWChar2#1"
  syntax:
    content: public virtual int Read()
    content.vb: Public Overridable Function Read As Integer
    return:
      type: System.Int32
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.BinaryReader.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 488
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the specified number of bytes from the stream, starting from a specified point in the byte array. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read operation.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows how to write binary data by using memory as a backing store. It displays a message to the console that indicates whether the data was written correctly.</p>System.IO.BinaryReaderWriter.RWBytes2#1"
  - "\n<p>This example reads the contents of a file and displays each byte's numeric value in 16-column format. The end of the file that is being read is detected when the <xref href=\"System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns zero bytes.</p>System.IO.BinaryReaderWriter#6"
  syntax:
    content: public virtual int Read(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function Read(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n<p>-or-</p>\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.BinaryReader.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: Read(Char[], Int32, Int32)
  fullName: System.IO.BinaryReader.Read(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 296
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the specified number of characters from the stream, starting from a specified point in the character array.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read operation.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows how to read and write data using memory as a backing store. This example displays a list of invalid file path characters to the console. Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters. Because the list of invalid characters can vary based on the system, output for this code may also vary.</p>System.IO.BinaryReaderWriter.RWChars2#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int Read(char[] buffer, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n<p>-or-</p>\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.BinaryReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
- uid: System.IO.BinaryReader.Read7BitEncodedInt
  commentId: M:System.IO.BinaryReader.Read7BitEncodedInt
  id: Read7BitEncodedInt
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: Read7BitEncodedInt()
  fullName: System.IO.BinaryReader.Read7BitEncodedInt()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read7BitEncodedInt
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 566
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads in a 32-bit integer in compressed format.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>If the integer will fit in seven bits, the integer takes only one byte of space. The integer is expected to have been written through <xref href=\"System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected int Read7BitEncodedInt()
    content.vb: Protected Function Read7BitEncodedInt As Integer
    return:
      type: System.Int32
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The stream is corrupted.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.BinaryReader.ReadBoolean
  commentId: M:System.IO.BinaryReader.ReadBoolean
  id: ReadBoolean
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadBoolean()
  fullName: System.IO.BinaryReader.ReadBoolean()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadBoolean
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 130
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a <strong>Boolean</strong> value from the current stream and advances the current position of the stream by one byte.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual bool ReadBoolean()
    content.vb: Public Overridable Function ReadBoolean As Boolean
    return:
      type: System.Boolean
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadByte
  commentId: M:System.IO.BinaryReader.ReadByte
  id: ReadByte
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.BinaryReader.ReadByte()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadByte
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 135
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the next byte from the current stream and advances the current position of the stream by one byte.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>Because of data formatting conflicts, using this method with the following encodings is not recommended:</p>\n<ul><li>\n<p>UTF-7</p>\n</li><li>\n<p>ISO-2022-JP</p>\n</li><li>\n<p>ISCII</p>\n</li></ul>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</p>System.IO.BinaryReaderWriter.RWByte#1"
  syntax:
    content: public virtual byte ReadByte()
    content.vb: Public Overridable Function ReadByte As Byte
    return:
      type: System.Byte
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadBytes(System.Int32)
  commentId: M:System.IO.BinaryReader.ReadBytes(System.Int32)
  id: ReadBytes(System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadBytes(Int32)
  fullName: System.IO.BinaryReader.ReadBytes(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadBytes
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 505
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read operation.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</p>System.IO.BinaryReaderWriter.RWBytes1#1<p>This example reads the contents of a file and displays it to the console as dump text. The end of the file that is being read is detected when the length of the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array returned from <xref href=\"System.IO.BinaryReader.ReadBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is zero.</p>System.IO.BinaryReaderWriter#6"
  syntax:
    content: public virtual byte[] ReadBytes(int count)
    content.vb: Public Overridable Function ReadBytes(count As Integer) As Byte()
    parameters:
    - id: count
      type: System.Int32
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadChar
  commentId: M:System.IO.BinaryReader.ReadChar
  id: ReadChar
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadChar()
  fullName: System.IO.BinaryReader.ReadChar()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadChar
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 151
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the next character from the current stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific character being read from the stream.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.IO.BinaryReader.ReadChar\" data-throw-if-not-resolved=\"false\"></xref> method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance. The position is restored to the original location before <xref href=\"System.IO.BinaryReader.ReadChar\" data-throw-if-not-resolved=\"false\"></xref> was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected. If surrogate characters can be expected in the stream, use the <xref href=\"System.IO.BinaryReader.ReadChars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n<p>Because of data formatting conflicts, using this method with the following encodings is not recommended:</p>\n<ul><li>\n<p>UTF-7</p>\n</li><li>\n<p>ISO-2022-JP</p>\n</li><li>\n<p>ISCII</p>\n</li></ul>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write data using memory as a backing store.</p>System.IO.BinaryReaderWriter.RWChar1#1"
  syntax:
    content: public virtual char ReadChar()
    content.vb: Public Overridable Function ReadChar As Char
    return:
      type: System.Char
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A surrogate character was read. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadChars(System.Int32)
  commentId: M:System.IO.BinaryReader.ReadChars(System.Int32)
  id: ReadChars(System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadChars(Int32)
  fullName: System.IO.BinaryReader.ReadChars(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadChars
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 460
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <strong>Encoding</strong> used and the specific character being read from the stream.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read operation.</p>\n<p>When reading from network streams, in some rare cases, the <xref href=\"System.IO.BinaryReader.ReadChars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method might read an extra character from the stream if the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> was constructed with Unicode encoding. If this occurs, you can use the <xref href=\"System.IO.BinaryReader.ReadBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to read a fixed-length byte array, and then pass that array to the <xref href=\"System.IO.BinaryReader.ReadChars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write data using memory as a backing store.</p>System.IO.BinaryReaderWriter.RWChars1#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual char[] ReadChars(int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ReadChars(count As Integer) As Char()
    parameters:
    - id: count
      type: System.Int32
    return:
      type: System.Char[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadDecimal
  commentId: M:System.IO.BinaryReader.ReadDecimal
  id: ReadDecimal
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadDecimal()
  fullName: System.IO.BinaryReader.ReadDecimal()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadDecimal
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 230
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual decimal ReadDecimal()
    content.vb: Public Overridable Function ReadDecimal As Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadDouble
  commentId: M:System.IO.BinaryReader.ReadDouble
  id: ReadDouble
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadDouble()
  fullName: System.IO.BinaryReader.ReadDouble()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadDouble
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 218
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write <strong>Double</strong> data to memory by using the <strong>BinaryReader</strong> and <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> classes on top of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class. <strong>MemoryStream</strong> only reads and writes <strong>Byte</strong> data.</p>System.IO.BinaryReaderWriter.RWDouble#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual double ReadDouble()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ReadDouble As Double
    return:
      type: System.Double
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadInt16
  commentId: M:System.IO.BinaryReader.ReadInt16
  id: ReadInt16
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadInt16()
  fullName: System.IO.BinaryReader.ReadInt16()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt16
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 159
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual short ReadInt16()
    content.vb: Public Overridable Function ReadInt16 As Short
    return:
      type: System.Int16
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadInt32
  commentId: M:System.IO.BinaryReader.ReadInt32
  id: ReadInt32
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadInt32()
  fullName: System.IO.BinaryReader.ReadInt32()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt32
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 170
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual int ReadInt32()
    content.vb: Public Overridable Function ReadInt32 As Integer
    return:
      type: System.Int32
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadInt64
  commentId: M:System.IO.BinaryReader.ReadInt64
  id: ReadInt64
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadInt64()
  fullName: System.IO.BinaryReader.ReadInt64()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt64
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 192
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual long ReadInt64()
    content.vb: Public Overridable Function ReadInt64 As Long
    return:
      type: System.Int64
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadSByte
  commentId: M:System.IO.BinaryReader.ReadSByte
  id: ReadSByte
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadSByte()
  fullName: System.IO.BinaryReader.ReadSByte()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadSByte
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 145
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a signed byte from this stream and advances the current position of the stream by one byte.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public virtual sbyte ReadSByte()
    content.vb: >-
      <CLSCompliant(False)>

      Public Overridable Function ReadSByte As SByte
    return:
      type: System.SByte
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadSingle
  commentId: M:System.IO.BinaryReader.ReadSingle
  id: ReadSingle
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadSingle()
  fullName: System.IO.BinaryReader.ReadSingle()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadSingle
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 211
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual float ReadSingle()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ReadSingle As Single
    return:
      type: System.Single
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadString
  commentId: M:System.IO.BinaryReader.ReadString
  id: ReadString
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadString()
  fullName: System.IO.BinaryReader.ReadString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadString
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 241
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual string ReadString()
    content.vb: Public Overridable Function ReadString As String
    return:
      type: System.String
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadUInt16
  commentId: M:System.IO.BinaryReader.ReadUInt16
  id: ReadUInt16
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadUInt16()
  fullName: System.IO.BinaryReader.ReadUInt16()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadUInt16
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 164
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public virtual ushort ReadUInt16()
    content.vb: >-
      <CLSCompliant(False)>

      Public Overridable Function ReadUInt16 As UShort
    return:
      type: System.UInt16
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadUInt32
  commentId: M:System.IO.BinaryReader.ReadUInt32
  id: ReadUInt32
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadUInt32()
  fullName: System.IO.BinaryReader.ReadUInt32()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadUInt32
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 186
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public virtual uint ReadUInt32()
    content.vb: >-
      <CLSCompliant(False)>

      Public Overridable Function ReadUInt32 As UInteger
    return:
      type: System.UInt32
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryReader.ReadUInt64
  commentId: M:System.IO.BinaryReader.ReadUInt64
  id: ReadUInt64
  parent: System.IO.BinaryReader
  langs:
  - csharp
  - vb
  name: ReadUInt64()
  fullName: System.IO.BinaryReader.ReadUInt64()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/BinaryReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadUInt64
    path: src/mscorlib/src/System/IO/BinaryReader.cs
    startLine: 201
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> does not restore the file position after an unsuccessful read.</p>\n<p>\n<strong>BinaryReader</strong> reads this data type in little-endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public virtual ulong ReadUInt64()
    content.vb: >-
      <CLSCompliant(False)>

      Public Overridable Function ReadUInt64 As ULong
    return:
      type: System.UInt64
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.EndOfStreamException
  isExternal: false
  name: EndOfStreamException
  fullName: System.IO.EndOfStreamException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
