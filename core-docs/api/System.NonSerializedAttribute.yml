items:
- uid: System.NonSerializedAttribute
  commentId: T:System.NonSerializedAttribute
  id: NonSerializedAttribute
  parent: System
  children:
  - System.NonSerializedAttribute.#ctor
  langs:
  - csharp
  - vb
  name: NonSerializedAttribute
  fullName: System.NonSerializedAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Formatters/src/System/NonSerializedAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NonSerializedAttribute
    path: src/System.Runtime.Serialization.Formatters/src/System/NonSerializedAttribute.cs
    startLine: 8
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System
  summary: "\n<p>Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.</p>\n"
  remarks: "\n<p>When using the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.Serialization.Formatters.Soap.SoapFormatter\" data-throw-if-not-resolved=\"false\"></xref> classes to serialize an object, use the <xref href=\"System.NonSerializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to prevent a field from being serialized. For example, you can use this attribute to prevent the serialization of sensitive data. </p>\n<p>The target objects for the <xref href=\"System.NonSerializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute are public and private fields of a serializable class. By default, classes are not serializable unless they are marked with <xref href=\"System.SerializableAttribute\" data-throw-if-not-resolved=\"false\"></xref>. During the serialization process all the public and private fields of a class are serialized by default. Fields marked with <xref href=\"System.NonSerializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> are excluded during serialization. If you are using the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize an object, use the <xref href=\"System.Xml.Serialization.XmlIgnoreAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to get the same functionality. Alternatively, implement the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface to explicitly control the serialization process. Note that classes that implement <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> must still be marked with <xref href=\"System.SerializableAttribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>To apply the <xref href=\"System.NonSerializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to an event, set the attribute location to field, as shown in the following C# code.</p>\n<pre><code>[field:NonSerializedAttribute()] \npublic event ChangedEventHandler Changed;</code></pre>\n<p>If a field is not serialized, but it still requires a default value that must be supplied after deserialization, you can create a method that supplies the field with a value, then apply the <xref href=\"System.Runtime.Serialization.OnDeserializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the method.</p>\n<p>For more information about using attributes, see Extending Metadata Using Attributes. </p>\n"
  example:
  - "\n<p>The following example demonstrates serialization of an object marked with the <xref href=\"System.SerializableAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute, and the behavior of a field marked with the <xref href=\"System.NonSerializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> in the serialized object.</p>\n<p>The code uses the <xref href=\"System.Runtime.Serialization.Formatters.Soap.SoapFormatter\" data-throw-if-not-resolved=\"false\"></xref> class to serialize the object. The class is found in the system.runtime.serialization.formatters.soap.dll, which is not loaded by default into a project. To run the code, you must add a reference to the DLL to your project.</p>SerializationAttributes#1"
  syntax:
    content: 'public sealed class NonSerializedAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class NonSerializedAttribute
          Inherits Attribute
  seealso:
  - type: System.SerializableAttribute
    commentId: T:System.SerializableAttribute
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.Runtime.Serialization.ISerializable
    commentId: T:System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.NonSerializedAttribute.#ctor
  commentId: M:System.NonSerializedAttribute.#ctor
  id: '#ctor'
  parent: System.NonSerializedAttribute
  langs:
  - csharp
  - vb
  name: NonSerializedAttribute()
  fullName: System.NonSerializedAttribute.NonSerializedAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Formatters/src/System/NonSerializedAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Formatters/src/System/NonSerializedAttribute.cs
    startLine: 11
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.NonSerializedAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public NonSerializedAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
