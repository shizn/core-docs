items:
- uid: System.Threading.SemaphoreFullException
  commentId: T:System.Threading.SemaphoreFullException
  id: SemaphoreFullException
  parent: System.Threading
  children:
  - System.Threading.SemaphoreFullException.#ctor
  - System.Threading.SemaphoreFullException.#ctor(System.String)
  - System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: SemaphoreFullException
  fullName: System.Threading.SemaphoreFullException
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SemaphoreFullException
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 254
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>The exception that is thrown when the <see cref=\"Overload:System.Threading.Semaphore.Release\"></see> method is called on a semaphore whose count is already at the maximum. </p>\n"
  remarks: "\n<p>The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore. When the count is zero, subsequent requests block until other threads release the semaphore. When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created. If a programming error causes a thread to call the <see cref=\"Overload:System.Threading.Semaphore.Release\"></see> method at this point, a <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>The <xref href=\"System.Threading.Semaphore\" data-throw-if-not-resolved=\"false\"></xref> class does not enforce thread identity on calls to the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> and <see cref=\"Overload:System.Threading.Semaphore.Release\"></see> methods. It is not necessary for the same thread that called <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> to call <see cref=\"Overload:System.Threading.Semaphore.Release\"></see>.</p>\n<p>\n<xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> does not necessarily indicate a problem with the code where the exception occurred. Consider the following scenario: Thread A and thread B enter a semaphore that has a maximum count of two. A programming error in thread B causes it to call <see cref=\"Overload:System.Threading.Semaphore.Release\"></see> twice, so that the count on the semaphore is full. As a result, when thread A eventually calls <see cref=\"Overload:System.Threading.Semaphore.Release\"></see>, a <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>For a list of initial property values for an instance of the <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> class, see the <xref href=\"System.Threading.SemaphoreFullException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following code example shows how a programming error in one thread can lead to a <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> in another thread: Two threads enter a semaphore. The second thread releases the semaphore twice, while the first thread is still executing its task. When the first thread finishes and releases the semaphore, the semaphore count is already full and an exception is thrown.</p>System.Threading.SemaphoreFullException#1"
  syntax:
    content: 'public class SemaphoreFullException : Exception'
    content.vb: >-
      Public Class SemaphoreFullException
          Inherits Exception
  seealso:
  - type: System.Threading.Semaphore
    commentId: T:System.Threading.Semaphore
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.SemaphoreFullException.#ctor
  commentId: M:System.Threading.SemaphoreFullException.#ctor
  id: '#ctor'
  parent: System.Threading.SemaphoreFullException
  langs:
  - csharp
  - vb
  name: SemaphoreFullException()
  fullName: System.Threading.SemaphoreFullException.SemaphoreFullException()
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 256
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> class with default values.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Adding the given count to the semaphore would cause it to exceed its maximum count.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of the <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The system-supplied error message string. </p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public SemaphoreFullException()
    content.vb: Public Sub New
  seealso:
  - type: System.Threading.Semaphore
    commentId: T:System.Threading.Semaphore
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreFullException.#ctor(System.String)
  commentId: M:System.Threading.SemaphoreFullException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Threading.SemaphoreFullException
  langs:
  - csharp
  - vb
  name: SemaphoreFullException(String)
  fullName: System.Threading.SemaphoreFullException.SemaphoreFullException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 257
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of <em>message</em> is a text string intended to inform the user about the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of the <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> class initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>. </p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public SemaphoreFullException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception.</p>\n"
  seealso:
  - type: System.Threading.Semaphore
    commentId: T:System.Threading.Semaphore
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)
  commentId: M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Threading.SemaphoreFullException
  langs:
  - csharp
  - vb
  name: SemaphoreFullException(String, Exception)
  fullName: System.Threading.SemaphoreFullException.SemaphoreFullException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 258
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SemaphoreFullException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n"
  example:
  - 
  syntax:
    content: public SemaphoreFullException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception.</p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>innerException</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception.</p>\n"
  seealso:
  - type: System.Threading.Semaphore
    commentId: T:System.Threading.Semaphore
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
