items:
- uid: System.IO.BinaryWriter
  commentId: T:System.IO.BinaryWriter
  id: BinaryWriter
  parent: System.IO
  children:
  - System.IO.BinaryWriter.#ctor
  - System.IO.BinaryWriter.#ctor(System.IO.Stream)
  - System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)
  - System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - System.IO.BinaryWriter.BaseStream
  - System.IO.BinaryWriter.Dispose
  - System.IO.BinaryWriter.Dispose(System.Boolean)
  - System.IO.BinaryWriter.Flush
  - System.IO.BinaryWriter.Null
  - System.IO.BinaryWriter.OutStream
  - System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)
  - System.IO.BinaryWriter.Write(System.Boolean)
  - System.IO.BinaryWriter.Write(System.Byte)
  - System.IO.BinaryWriter.Write(System.Byte[])
  - System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.BinaryWriter.Write(System.Char)
  - System.IO.BinaryWriter.Write(System.Char[])
  - System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)
  - System.IO.BinaryWriter.Write(System.Decimal)
  - System.IO.BinaryWriter.Write(System.Double)
  - System.IO.BinaryWriter.Write(System.Int16)
  - System.IO.BinaryWriter.Write(System.Int32)
  - System.IO.BinaryWriter.Write(System.Int64)
  - System.IO.BinaryWriter.Write(System.SByte)
  - System.IO.BinaryWriter.Write(System.Single)
  - System.IO.BinaryWriter.Write(System.String)
  - System.IO.BinaryWriter.Write(System.UInt16)
  - System.IO.BinaryWriter.Write(System.UInt32)
  - System.IO.BinaryWriter.Write(System.UInt64)
  - System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)
  langs:
  - csharp
  - vb
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
  type: Class
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryWriter
    path: src/System.IO/ref/System.IO.cs
    startLine: 45
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class provides methods that simplify writing primitive data types to a stream. For example, you can use the <xref href=\"System.IO.BinaryWriter.Write(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to write a Boolean value to the stream as a one-byte value. The class includes write methods that support different data types. </p>\n<p>When you create a new instance of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class, you provide the stream to write to, and optionally specify the type of encoding and whether to leave the stream open after disposing the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> object. If you do not specify an encoding type, UTF-8 is used.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>A derived class can override the methods of this class to give unique character encodings.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: 'public class BinaryWriter : IDisposable'
    content.vb: >-
      Public Class BinaryWriter
          Inherits IDisposable
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.BinaryWriter.Null
  commentId: F:System.IO.BinaryWriter.Null
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  fullName: System.IO.BinaryWriter.Null
  type: Field
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.IO/ref/System.IO.cs
    startLine: 47
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Specifies a <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> with no backing store.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public static readonly BinaryWriter Null
    content.vb: Public Shared ReadOnly Null As BinaryWriter
    return:
      type: System.IO.BinaryWriter
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.BinaryWriter.OutStream
  commentId: F:System.IO.BinaryWriter.OutStream
  id: OutStream
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: OutStream
  fullName: System.IO.BinaryWriter.OutStream
  type: Field
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutStream
    path: src/System.IO/ref/System.IO.cs
    startLine: 48
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Holds the underlying stream.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected Stream OutStream
    content.vb: Protected OutStream As Stream
    return:
      type: System.IO.Stream
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.BinaryWriter.#ctor
  commentId: M:System.IO.BinaryWriter.#ctor
  id: '#ctor'
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: BinaryWriter()
  fullName: System.IO.BinaryWriter.BinaryWriter()
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 49
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class that writes to a stream.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected BinaryWriter()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.BinaryWriter.#ctor(System.IO.Stream)
  commentId: M:System.IO.BinaryWriter.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: BinaryWriter(Stream)
  fullName: System.IO.BinaryWriter.BinaryWriter(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 50
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified stream and using UTF-8 encoding.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public BinaryWriter(Stream output)
    content.vb: Public Sub New(output As Stream)
    parameters:
    - id: output
      type: System.IO.Stream
      description: "\n<p>The output stream. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support writing or is already closed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>output</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Text.Encoding.UTF8
    commentId: P:System.Text.Encoding.UTF8
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)
  commentId: M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: BinaryWriter(Stream, Text.Encoding)
  fullName: System.IO.BinaryWriter.BinaryWriter(System.IO.Stream, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 51
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified stream and character encoding.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public BinaryWriter(Stream output, Text.Encoding encoding)
    content.vb: Public Sub New(output As Stream, encoding As Text.Encoding)
    parameters:
    - id: output
      type: System.IO.Stream
      description: "\n<p>The output stream. </p>\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\n<p>The character encoding to use. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support writing or is already closed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>output</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  commentId: M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: BinaryWriter(Stream, Text.Encoding, Boolean)
  fullName: System.IO.BinaryWriter.BinaryWriter(System.IO.Stream, System.Text.Encoding, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 52
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\n"
  syntax:
    content: public BinaryWriter(Stream output, Text.Encoding encoding, bool leaveOpen)
    content.vb: Public Sub New(output As Stream, encoding As Text.Encoding, leaveOpen As Boolean)
    parameters:
    - id: output
      type: System.IO.Stream
      description: "\n<p>The output stream.</p>\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\n<p>The character encoding to use.</p>\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to leave the stream open after the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support writing or is already closed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>output</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryWriter.BaseStream
  commentId: P:System.IO.BinaryWriter.BaseStream
  id: BaseStream
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: BaseStream
  fullName: System.IO.BinaryWriter.BaseStream
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseStream
    path: src/System.IO/ref/System.IO.cs
    startLine: 53
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets the underlying stream of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write <strong>Double</strong> data to memory by using the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> and <strong>BinaryWriter</strong> classes on top of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class. <strong>MemoryStream</strong> only reads and writes <strong>Byte</strong> data.</p>System.IO.BinaryReaderWriter.RWDouble#1"
  syntax:
    content: public virtual Stream BaseStream { get; }
    content.vb: Public Overridable ReadOnly Property BaseStream As Stream
    parameters: []
    return:
      type: System.IO.Stream
      description: "\n<p>The underlying stream associated with the <strong>BinaryWriter</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.BinaryWriter.Dispose
  commentId: M:System.IO.BinaryWriter.Dispose
  id: Dispose
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.BinaryWriter.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 54
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.BinaryWriter.Dispose(System.Boolean)
  commentId: M:System.IO.BinaryWriter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.BinaryWriter.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 55
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.BinaryWriter.Flush
  commentId: M:System.IO.BinaryWriter.Flush
  id: Flush
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.BinaryWriter.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO/ref/System.IO.cs
    startLine: 56
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\n"
  remarks: "\n<p>All derived classes should override <strong>Flush</strong> to ensure that all buffered data is sent to the stream.</p>\n<p>Flushing the stream will not flush its underlying encoder unless you explicitly call <strong>Flush</strong> or <xref href=\"System.IO.BinaryWriter.Close\" data-throw-if-not-resolved=\"false\"></xref>. Setting <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Flush()
    content.vb: Public Overridable Sub Flush
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)
  commentId: M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)
  id: Seek(System.Int32,System.IO.SeekOrigin)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Seek(Int32, SeekOrigin)
  fullName: System.IO.BinaryWriter.Seek(System.Int32, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO/ref/System.IO.cs
    startLine: 57
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Sets the position within the current stream.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example writes a series of byte values to a file. The example uses <xref href=\"System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> to move to various locations in the file, and then writes marker bytes by using the <xref href=\"System.IO.BinaryWriter.Write(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.IO.BinaryReaderWriter#5"
  syntax:
    content: public virtual long Seek(int offset, SeekOrigin origin)
    content.vb: Public Overridable Function Seek(offset As Integer, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int32
      description: "\n<p>A byte offset relative to <em>origin</em>. </p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>A field of <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> indicating the reference point from which the new position is to be obtained. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The position with the current stream.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file pointer was moved to an invalid location. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> value is invalid. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Boolean)
  commentId: M:System.IO.BinaryWriter.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Boolean)
  fullName: System.IO.BinaryWriter.Write(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 58
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a one-byte <strong>Boolean</strong> value to the current stream, with 0 representing <strong>false</strong> and 1 representing <strong>true</strong>.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual void Write(bool value)
    content.vb: Public Overridable Sub Write(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The <strong>Boolean</strong> value to write (0 or 1). </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Byte)
  commentId: M:System.IO.BinaryWriter.Write(System.Byte)
  id: Write(System.Byte)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Byte)
  fullName: System.IO.BinaryWriter.Write(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 59
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes an unsigned byte to the current stream and advances the stream position by one byte.</p>\n"
  remarks: "\n<p>Because of data formatting conflicts, using this method with the following encodings is not recommended:</p>\n<ul><li>\n<p>UTF-7</p>\n</li><li>\n<p>ISO-2022-JP</p>\n</li><li>\n<p>ISCII</p>\n</li></ul>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</p>System.IO.BinaryReaderWriter.RWByte#1"
  syntax:
    content: public virtual void Write(byte value)
    content.vb: Public Overridable Sub Write(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The unsigned byte to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Byte[])
  commentId: M:System.IO.BinaryWriter.Write(System.Byte[])
  id: Write(System.Byte[])
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Byte[])
  fullName: System.IO.BinaryWriter.Write(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 60
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a byte array to the underlying stream.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</p>System.IO.BinaryReaderWriter.RWBytes1#1"
  syntax:
    content: public virtual void Write(byte[] buffer)
    content.vb: Public Overridable Sub Write(buffer As Byte())
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A byte array containing the data to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.BinaryWriter.Write(System.Byte())
  name.vb: Write(Byte())
- uid: System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.BinaryWriter.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 61
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a region of a byte array to the current stream.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</p>System.IO.BinaryReaderWriter.RWBytes2#1"
  syntax:
    content: public virtual void Write(byte[] buffer, int index, int count)
    content.vb: Public Overridable Sub Write(buffer As Byte(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A byte array containing the data to write. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting point in <em>buffer</em> at which to begin writing. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to write. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.BinaryWriter.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.BinaryWriter.Write(System.Char)
  commentId: M:System.IO.BinaryWriter.Write(System.Char)
  id: Write(System.Char)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Char)
  fullName: System.IO.BinaryWriter.Write(System.Char)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 62
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific characters being written to the stream.</p>\n"
  remarks: "\n<p>Because of data formatting conflicts, using this method with the following encodings is not recommended:</p>\n<ul><li>\n<p>UTF-7</p>\n</li><li>\n<p>ISO-2022-JP</p>\n</li><li>\n<p>ISCII</p>\n</li></ul>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n<p>Unicode surrogate characters must be written out as pairs together in the same call, not individually. If you require support for surrogate pairs in your application, consider using a character array and the <xref href=\"System.IO.BinaryWriter.Write(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write data using memory as a backing store.</p>System.IO.BinaryReaderWriter.RWChar1#1"
  syntax:
    content: public virtual void Write(char ch)
    content.vb: Public Overridable Sub Write(ch As Char)
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The non-surrogate, Unicode character to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ch</em> is a single surrogate character.</p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Char[])
  commentId: M:System.IO.BinaryWriter.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Char[])
  fullName: System.IO.BinaryWriter.Write(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 63
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character array to the current stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific characters being written to the stream.</p>\n"
  remarks: "\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example shows how to read and write data using memory as a backing store.</p>System.IO.BinaryReaderWriter.RWChars1#1"
  syntax:
    content: public virtual void Write(char[] chars)
    content.vb: Public Overridable Sub Write(chars As Char())
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>A character array containing the data to write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.BinaryWriter.Write(System.Char())
  name.vb: Write(Char())
- uid: System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Char[], Int32, Int32)
  fullName: System.IO.BinaryWriter.Write(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 64
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and perhaps the specific characters being written to the stream.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write data using memory as a backing store.</p>System.IO.BinaryReaderWriter.RWChars2#1"
  syntax:
    content: public virtual void Write(char[] chars, int index, int count)
    content.vb: Public Overridable Sub Write(chars As Char(), index As Integer, count As Integer)
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>A character array containing the data to write. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting point in <em>chars</em> from which to begin writing. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.BinaryWriter.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
- uid: System.IO.BinaryWriter.Write(System.Decimal)
  commentId: M:System.IO.BinaryWriter.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Decimal)
  fullName: System.IO.BinaryWriter.Write(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 65
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</p>\n"
  remarks: "\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public virtual void Write(decimal value)
    content.vb: Public Overridable Sub Write(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Double)
  commentId: M:System.IO.BinaryWriter.Write(System.Double)
  id: Write(System.Double)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Double)
  fullName: System.IO.BinaryWriter.Write(System.Double)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 66
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to read and write <strong>Double</strong> data to memory by using the <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> and <strong>BinaryWriter</strong> classes on top of the <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class. <strong>MemoryStream</strong> only reads and writes <strong>Byte</strong> data.</p>System.IO.BinaryReaderWriter.RWDouble#1"
  syntax:
    content: public virtual void Write(double value)
    content.vb: Public Overridable Sub Write(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The eight-byte floating-point value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Int16)
  commentId: M:System.IO.BinaryWriter.Write(System.Int16)
  id: Write(System.Int16)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Int16)
  fullName: System.IO.BinaryWriter.Write(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 67
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public virtual void Write(short value)
    content.vb: Public Overridable Sub Write(value As Short)
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The two-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Int32)
  commentId: M:System.IO.BinaryWriter.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Int32)
  fullName: System.IO.BinaryWriter.Write(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 68
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual void Write(int value)
    content.vb: Public Overridable Sub Write(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The four-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Int64)
  commentId: M:System.IO.BinaryWriter.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Int64)
  fullName: System.IO.BinaryWriter.Write(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 69
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(long value)
    content.vb: Public Overridable Sub Write(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The eight-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.SByte)
  commentId: M:System.IO.BinaryWriter.Write(System.SByte)
  id: Write(System.SByte)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(SByte)
  fullName: System.IO.BinaryWriter.Write(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 70
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a signed byte to the current stream and advances the stream position by one byte.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(sbyte value)
    content.vb: Public Overridable Sub Write(value As SByte)
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The signed byte to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.Single)
  commentId: M:System.IO.BinaryWriter.Write(System.Single)
  id: Write(System.Single)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Single)
  fullName: System.IO.BinaryWriter.Write(System.Single)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 72
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual void Write(float value)
    content.vb: Public Overridable Sub Write(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The four-byte floating-point value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.String)
  commentId: M:System.IO.BinaryWriter.Write(System.String)
  id: Write(System.String)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(String)
  fullName: System.IO.BinaryWriter.Write(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 73
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a length-prefixed string to this stream in the current encoding of the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</p>\n"
  remarks: "\n<p>Length-prefixed means that this method first writes the length of the string, in bytes, when encoded with the <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> instance's current encoding to the stream. This value is written as an unsigned integer. This method then writes that many bytes to the stream.</p>\n<p>For example, the string “A” has a length of 1, but when encoded with UTF-16; the length is 2 bytes, so the value written in the prefix is 2, and 3 bytes are written to the stream, including the prefix.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to store and retrieve application settings in a file.</p>System.IO.BinaryReaderWriter#1"
  syntax:
    content: public virtual void Write(string value)
    content.vb: Public Overridable Sub Write(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.UInt16)
  commentId: M:System.IO.BinaryWriter.Write(System.UInt16)
  id: Write(System.UInt16)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(UInt16)
  fullName: System.IO.BinaryWriter.Write(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 74
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(ushort value)
    content.vb: Public Overridable Sub Write(value As UShort)
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The two-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.UInt32)
  commentId: M:System.IO.BinaryWriter.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(UInt32)
  fullName: System.IO.BinaryWriter.Write(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 76
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(uint value)
    content.vb: Public Overridable Sub Write(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The four-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write(System.UInt64)
  commentId: M:System.IO.BinaryWriter.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write(UInt64)
  fullName: System.IO.BinaryWriter.Write(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 78
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</p>\n"
  remarks: "\n<p>\n<strong>BinaryWriter</strong> stores this data type in little endian format.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(ulong value)
    content.vb: Public Overridable Sub Write(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The eight-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)
  commentId: M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)
  id: Write7BitEncodedInt(System.Int32)
  parent: System.IO.BinaryWriter
  langs:
  - csharp
  - vb
  name: Write7BitEncodedInt(Int32)
  fullName: System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write7BitEncodedInt
    path: src/System.IO/ref/System.IO.cs
    startLine: 80
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a 32-bit integer in a compressed format.</p>\n"
  remarks: "\n<p>The integer of the <em>value</em> parameter is written out seven bits at a time, starting with the seven least-significant bits. The high bit of a byte indicates whether there are more bytes to be written after this one.</p>\n<p>If <em>value</em> will fit in seven bits, it takes only one byte of space. If <em>value</em> will not fit in seven bits, the high bit is set on the first byte and written out. <em>value</em> is then shifted by seven bits and the next byte is written. This process is repeated until the entire integer has been written.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected void Write7BitEncodedInt(int value)
    content.vb: Protected Sub Write7BitEncodedInt(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit integer to be written. </p>\n"
  exceptions:
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>The end of the stream is reached. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The stream is closed. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Text.Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.IO.EndOfStreamException
  isExternal: false
  name: EndOfStreamException
  fullName: System.IO.EndOfStreamException
