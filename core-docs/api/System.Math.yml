items:
- uid: System.Math
  commentId: T:System.Math
  id: Math
  parent: System
  children:
  - System.Math.Abs(System.Decimal)
  - System.Math.Abs(System.Double)
  - System.Math.Abs(System.Int16)
  - System.Math.Abs(System.Int32)
  - System.Math.Abs(System.Int64)
  - System.Math.Abs(System.SByte)
  - System.Math.Abs(System.Single)
  - System.Math.Acos(System.Double)
  - System.Math.Asin(System.Double)
  - System.Math.Atan(System.Double)
  - System.Math.Atan2(System.Double,System.Double)
  - System.Math.Ceiling(System.Decimal)
  - System.Math.Ceiling(System.Double)
  - System.Math.Cos(System.Double)
  - System.Math.Cosh(System.Double)
  - System.Math.E
  - System.Math.Exp(System.Double)
  - System.Math.Floor(System.Decimal)
  - System.Math.Floor(System.Double)
  - System.Math.IEEERemainder(System.Double,System.Double)
  - System.Math.Log(System.Double)
  - System.Math.Log(System.Double,System.Double)
  - System.Math.Log10(System.Double)
  - System.Math.Max(System.Byte,System.Byte)
  - System.Math.Max(System.Decimal,System.Decimal)
  - System.Math.Max(System.Double,System.Double)
  - System.Math.Max(System.Int16,System.Int16)
  - System.Math.Max(System.Int32,System.Int32)
  - System.Math.Max(System.Int64,System.Int64)
  - System.Math.Max(System.SByte,System.SByte)
  - System.Math.Max(System.Single,System.Single)
  - System.Math.Max(System.UInt16,System.UInt16)
  - System.Math.Max(System.UInt32,System.UInt32)
  - System.Math.Max(System.UInt64,System.UInt64)
  - System.Math.Min(System.Byte,System.Byte)
  - System.Math.Min(System.Decimal,System.Decimal)
  - System.Math.Min(System.Double,System.Double)
  - System.Math.Min(System.Int16,System.Int16)
  - System.Math.Min(System.Int32,System.Int32)
  - System.Math.Min(System.Int64,System.Int64)
  - System.Math.Min(System.SByte,System.SByte)
  - System.Math.Min(System.Single,System.Single)
  - System.Math.Min(System.UInt16,System.UInt16)
  - System.Math.Min(System.UInt32,System.UInt32)
  - System.Math.Min(System.UInt64,System.UInt64)
  - System.Math.PI
  - System.Math.Pow(System.Double,System.Double)
  - System.Math.Round(System.Decimal)
  - System.Math.Round(System.Decimal,System.Int32)
  - System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  - System.Math.Round(System.Decimal,System.MidpointRounding)
  - System.Math.Round(System.Double)
  - System.Math.Round(System.Double,System.Int32)
  - System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  - System.Math.Round(System.Double,System.MidpointRounding)
  - System.Math.Sign(System.Decimal)
  - System.Math.Sign(System.Double)
  - System.Math.Sign(System.Int16)
  - System.Math.Sign(System.Int32)
  - System.Math.Sign(System.Int64)
  - System.Math.Sign(System.SByte)
  - System.Math.Sign(System.Single)
  - System.Math.Sin(System.Double)
  - System.Math.Sinh(System.Double)
  - System.Math.Sqrt(System.Double)
  - System.Math.Tan(System.Double)
  - System.Math.Tanh(System.Double)
  - System.Math.Truncate(System.Decimal)
  - System.Math.Truncate(System.Double)
  langs:
  - csharp
  - vb
  name: Math
  fullName: System.Math
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Math
    path: src/mscorlib/src/System/Math.cs
    startLine: 22
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n"
  example:
  - "\n<p>The following example uses several mathematical and trigonometric functions from the <xref href=\"System.Math\" data-throw-if-not-resolved=\"false\"></xref> class to calculate the inner angles of a trapezoid.</p>MathSample#1"
  syntax:
    content: public class Math
    content.vb: Public Class Math
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Math.Abs(System.Decimal)
  commentId: M:System.Math.Abs(System.Decimal)
  id: Abs(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Decimal)
  fullName: System.Math.Abs(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 310
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n"
  remarks: "\n<p>The absolute value of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#1"
  syntax:
    content: public static decimal Abs(decimal value)
    content.vb: Public Shared Function Abs(value As Decimal) As Decimal
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Double)
  commentId: M:System.Math.Abs(System.Double)
  id: Abs(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Double)
  fullName: System.Math.Abs(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of a double-precision floating-point number.</p>\n"
  remarks: "\n<p>The absolute value of a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> is its numeric value without its sign. For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</p>\n<p>If <em>value</em> is equal to <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is equal to <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Abs(double value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Abs(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Int16)
  commentId: M:System.Math.Abs(System.Int16)
  id: Abs(System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Int16)
  fullName: System.Math.Abs(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 241
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of a 16-bit signed integer.</p>\n"
  remarks: "\n<p>The absolute value of an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#3"
  syntax:
    content: public static short Abs(short value)
    content.vb: Public Shared Function Abs(value As Short) As Short
    parameters:
    - id: value
      type: System.Int16
    return:
      type: System.Int16
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> equals <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Int32)
  commentId: M:System.Math.Abs(System.Int32)
  id: Abs(System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Int32)
  fullName: System.Math.Abs(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 256
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of a 32-bit signed integer.</p>\n"
  remarks: "\n<p>The absolute value of an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#4"
  syntax:
    content: public static int Abs(int value)
    content.vb: Public Shared Function Abs(value As Integer) As Integer
    parameters:
    - id: value
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> equals <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Int64)
  commentId: M:System.Math.Abs(System.Int64)
  id: Abs(System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Int64)
  fullName: System.Math.Abs(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 271
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of a 64-bit signed integer.</p>\n"
  remarks: "\n<p>The absolute value of an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#5"
  syntax:
    content: public static long Abs(long value)
    content.vb: Public Shared Function Abs(value As Long) As Long
    parameters:
    - id: value
      type: System.Int64
    return:
      type: System.Int64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> equals <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.SByte)
  commentId: M:System.Math.Abs(System.SByte)
  id: Abs(System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(SByte)
  fullName: System.Math.Abs(System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 224
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of an 8-bit signed integer.</p>\n"
  remarks: "\n<p>The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.SByte)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#6"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static sbyte Abs(sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Abs(value As SByte) As SByte
    parameters:
    - id: value
      type: System.SByte
    return:
      type: System.SByte
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> equals <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Single)
  commentId: M:System.Math.Abs(System.Single)
  id: Abs(System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Single)
  fullName: System.Math.Abs(System.Single)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the absolute value of a single-precision floating-point number.</p>\n"
  remarks: "\n<p>The absolute value of a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</p>\n<p>If <em>value</em> is equal to <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is equal to <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Abs(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method to get the absolute value of a number of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Math.Abs#7"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static float Abs(float value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Abs(value As Single) As Single
    parameters:
    - id: value
      type: System.Single
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Acos(System.Double)
  commentId: M:System.Math.Acos(System.Double)
  id: Acos(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Acos(Double)
  fullName: System.Math.Acos(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the angle whose cosine is the specified number.</p>\n"
  remarks: "\n<p>Multiply the return value by 180/<xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref> to convert from radians to degrees.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Acos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to assist in the computation of the inner angles of a given trapezoid.</p>MathSample#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Acos(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Acos(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Asin(System.Double)
  commentId: M:System.Math.Asin(System.Double)
  id: Asin(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Asin(Double)
  fullName: System.Math.Asin(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the angle whose sine is the specified number.</p>\n"
  remarks: "\n<p>A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</p>\n<p>Multiply the return value by 180/<xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref> to convert from radians to degrees.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Asin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to assist in the computation of the inner angles of a given trapezoid.</p>MathSample#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Asin(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Asin(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Atan(System.Double)
  commentId: M:System.Math.Atan(System.Double)
  id: Atan(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Atan(Double)
  fullName: System.Math.Atan(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the angle whose tangent is the specified number.</p>\n"
  remarks: "\n<p>A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</p>\n<p>Multiply the return value by 180/<xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref> to convert from radians to degrees.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to calculate the arctangent of a value and display it to the console.</p>math.atanx#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Atan(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Atan(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Atan2(System.Double,System.Double)
  commentId: M:System.Math.Atan2(System.Double,System.Double)
  id: Atan2(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Atan2(Double, Double)
  fullName: System.Math.Atan2(System.Double, System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the angle whose tangent is the quotient of two specified numbers.</p>\n"
  remarks: "\n<p>The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</p>\n"
  example:
  - "\n<p>The following example demonstrates how to calculate the arctangent of an angle and a vector. The resulting value is displayed in the console.</p>math.atanx#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Atan2(double y, double x)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Atan2(y As Double, x As Double) As Double
    parameters:
    - id: y
      type: System.Double
    - id: x
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Ceiling(System.Decimal)
  commentId: M:System.Math.Ceiling(System.Decimal)
  id: Ceiling(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Ceiling(Decimal)
  fullName: System.Math.Ceiling(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ceiling
    path: src/mscorlib/src/System/Math.cs
    startLine: 50
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smallest integral value that is greater than or equal to the specified decimal number.</p>\n"
  remarks: "\n<p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <em>d</em> is positive, the presence of any fractional component causes <em>d</em> to be rounded to the next highest integer. If <em>d</em> is negative, the rounding operation causes any fractional component of <em>d</em> to be discarded. The operation of this method differs from the <xref href=\"System.Math.Floor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method, which supports rounding toward negative infinity. </p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Math.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method and contrasts it with the <xref href=\"System.Math.Floor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Math.Ceiling#1"
  syntax:
    content: public static decimal Ceiling(decimal d)
    content.vb: Public Shared Function Ceiling(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Math.Floor(System.Decimal)
    commentId: M:System.Math.Floor(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Ceiling(System.Double)
  commentId: M:System.Math.Ceiling(System.Double)
  id: Ceiling(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Ceiling(Double)
  fullName: System.Math.Ceiling(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</p>\n"
  remarks: "\n<p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <em>a</em> is positive, the presence of any fractional component causes <em>a</em> to be rounded to the next highest integer. If <em>a</em> is negative, the rounding operation causes any fractional component of <em>a</em> to be discarded. The operation of this method differs from the <xref href=\"System.Math.Floor(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method, which supports rounding toward negative infinity.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Math.Ceiling(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method and contrasts it with the <xref href=\"System.Math.Floor(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Math.Ceiling#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Ceiling(double a)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Ceiling(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Cos(System.Double)
  commentId: M:System.Math.Cos(System.Double)
  id: Cos(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Cos(Double)
  fullName: System.Math.Cos(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the cosine of the specified angle.</p>\n"
  remarks: "\n<p>The angle, <em>d</em>, must be in radians. Multiply by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180 to convert degrees to radians.</p>\n<p>Acceptable values of <em>d</em> range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside this range, the <xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method returns <em>d</em> unchanged rather than throwing an exception. </p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain trigonometric identities for selected angles.</p>System.Math.SinCos#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Cos(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Cos(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Cosh(System.Double)
  commentId: M:System.Math.Cosh(System.Double)
  id: Cosh(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Cosh(Double)
  fullName: System.Math.Cosh(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the hyperbolic cosine of the specified angle.</p>\n"
  remarks: "\n<p>The angle, <em>value</em>, must be in radians. Multiply by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180 to convert degrees to radians.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Cosh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain hyperbolic identities for selected values.</p>System.Math.SinhCosh#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Cosh(double value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Cosh(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Exp(System.Double)
  commentId: M:System.Math.Exp(System.Double)
  id: Exp(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Exp(Double)
  fullName: System.Math.Exp(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns <strong>e</strong> raised to the specified power.</p>\n"
  remarks: "\n<p>\n<strong>e</strong> is a mathematical constant whose value is approximately 2.71828. </p>\n<p>Use the <xref href=\"System.Math.Pow(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate powers of other bases.</p>\n<p>\n<xref href=\"System.Math.Exp(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> is the inverse of <xref href=\"System.Math.Log(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Exp(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain exponential and logarithmic identities for selected values.</p>System.Math.Exp#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Exp(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Exp(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.E
    commentId: F:System.Math.E
  - type: System.Math.Pow(System.Double,System.Double)
    commentId: M:System.Math.Pow(System.Double,System.Double)
  - type: System.Math.Log(System.Double)
    commentId: M:System.Math.Log(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Floor(System.Decimal)
  commentId: M:System.Math.Floor(System.Decimal)
  id: Floor(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Floor(Decimal)
  fullName: System.Math.Floor(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Floor
    path: src/mscorlib/src/System/Math.cs
    startLine: 66
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the largest integer less than or equal to the specified decimal number.</p>\n"
  remarks: "\n<p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <em>d</em> is positive, any fractional component is truncated. If <em>d</em> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref href=\"System.Math.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method, which supports rounding toward positive infinity.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Math.Floor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method and contrasts it with the <xref href=\"System.Math.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Math.Ceiling#1"
  syntax:
    content: public static decimal Floor(decimal d)
    content.vb: Public Shared Function Floor(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Math.Ceiling(System.Decimal)
    commentId: M:System.Math.Ceiling(System.Decimal)
  - type: System.Decimal.Floor(System.Decimal)
    commentId: M:System.Decimal.Floor(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Floor(System.Double)
  commentId: M:System.Math.Floor(System.Double)
  id: Floor(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Floor(Double)
  fullName: System.Math.Floor(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the largest integer less than or equal to the specified double-precision floating-point number.</p>\n"
  remarks: "\n<p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <em>d</em> is positive, any fractional component is truncated. If <em>d</em> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref href=\"System.Math.Ceiling(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method, which supports rounding toward positive infinity.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Math.Floor(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method and contrasts it with the <xref href=\"System.Math.Ceiling(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Math.Ceiling#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Floor(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Floor(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.IEEERemainder(System.Double,System.Double)
  commentId: M:System.Math.IEEERemainder(System.Double,System.Double)
  id: IEEERemainder(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: IEEERemainder(Double, Double)
  fullName: System.Math.IEEERemainder(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IEEERemainder
    path: src/mscorlib/src/System/Math.cs
    startLine: 184
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the remainder resulting from the division of a specified number by another specified number.</p>\n"
  remarks: "\n<p>This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</p>\n<p>The<xref href=\"System.Math.IEEERemainder(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the <xref href=\"System.Math.IEEERemainder(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method is:</p>\n<pre><code>IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))</code></pre>\n<p>In contrast, the formula for the modulus operator is:</p>\n<pre><code>Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) * \n  (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) * \n  Math.Sign(dividend)</code></pre>\n"
  example:
  - "\n<p>The following example contrasts the remainder returned by the <xref href=\"System.Math.IEEERemainder(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method with the remainder returned by the modulus division operator.</p>System.Math.IEEERemainder#1"
  syntax:
    content: public static double IEEERemainder(double x, double y)
    content.vb: Public Shared Function IEEERemainder(x As Double, y As Double) As Double
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Log(System.Double)
  commentId: M:System.Math.Log(System.Double)
  id: Log(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Log(Double)
  fullName: System.Math.Log(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the natural (base <strong>e</strong>) logarithm of a specified number.</p>\n"
  remarks: "\n<p>Parameter <em>d</em> is specified as a base 10 number.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Math.Log(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Math.Log_Overloads#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Log(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Log(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.E
    commentId: F:System.Math.E
  - type: System.Math.Exp(System.Double)
    commentId: M:System.Math.Exp(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Log(System.Double,System.Double)
  commentId: M:System.Math.Log(System.Double,System.Double)
  id: Log(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Log(Double, Double)
  fullName: System.Math.Log(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Log
    path: src/mscorlib/src/System/Math.cs
    startLine: 482
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the logarithm of a specified number in a specified base.</p>\n"
  remarks: "\n<p></p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Log(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain logarithmic identities for selected values.</p>System.Math.Log_Overloads#1"
  syntax:
    content: public static double Log(double a, double newBase)
    content.vb: Public Shared Function Log(a As Double, newBase As Double) As Double
    parameters:
    - id: a
      type: System.Double
    - id: newBase
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Log10(System.Double)
  commentId: M:System.Math.Log10(System.Double)
  id: Log10(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Log10(Double)
  fullName: System.Math.Log10(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the base 10 logarithm of a specified number.</p>\n"
  remarks: "\n<p>Parameter <em>d</em> is specified as a base 10 number.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Log10(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to return the base 10 logarithm for selected values.</p>System.Math.Log10#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Log10(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Log10(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Byte,System.Byte)
  commentId: M:System.Math.Max(System.Byte,System.Byte)
  id: Max(System.Byte,System.Byte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Byte, Byte)
  fullName: System.Math.Max(System.Byte, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 325
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 8-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static byte Max(byte val1, byte val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As Byte, val2 As Byte) As Byte
    parameters:
    - id: val1
      type: System.Byte
    - id: val2
      type: System.Byte
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Decimal,System.Decimal)
  commentId: M:System.Math.Max(System.Decimal,System.Decimal)
  id: Max(System.Decimal,System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Decimal, Decimal)
  fullName: System.Math.Max(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 392
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two decimal numbers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static decimal Max(decimal val1, decimal val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Max(val1 As Decimal, val2 As Decimal) As Decimal
    parameters:
    - id: val1
      type: System.Decimal
    - id: val2
      type: System.Decimal
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Double,System.Double)
  commentId: M:System.Math.Max(System.Double,System.Double)
  id: Max(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Double, Double)
  fullName: System.Math.Max(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 381
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two double-precision floating-point numbers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static double Max(double val1, double val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Max(val1 As Double, val2 As Double) As Double
    parameters:
    - id: val1
      type: System.Double
    - id: val2
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Int16,System.Int16)
  commentId: M:System.Math.Max(System.Int16,System.Int16)
  id: Max(System.Int16,System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Int16, Int16)
  fullName: System.Math.Max(System.Int16, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 331
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 16-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static short Max(short val1, short val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As Short, val2 As Short) As Short
    parameters:
    - id: val1
      type: System.Int16
    - id: val2
      type: System.Int16
    return:
      type: System.Int16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Int32,System.Int32)
  commentId: M:System.Math.Max(System.Int32,System.Int32)
  id: Max(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Int32, Int32)
  fullName: System.Math.Max(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 344
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 32-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static int Max(int val1, int val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As Integer, val2 As Integer) As Integer
    parameters:
    - id: val1
      type: System.Int32
    - id: val2
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Int64,System.Int64)
  commentId: M:System.Math.Max(System.Int64,System.Int64)
  id: Max(System.Int64,System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Int64, Int64)
  fullName: System.Math.Max(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 357
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 64-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static long Max(long val1, long val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As Long, val2 As Long) As Long
    parameters:
    - id: val1
      type: System.Int64
    - id: val2
      type: System.Int64
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.SByte,System.SByte)
  commentId: M:System.Math.Max(System.SByte,System.SByte)
  id: Max(System.SByte,System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(SByte, SByte)
  fullName: System.Math.Max(System.SByte, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 318
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 8-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static sbyte Max(sbyte val1, sbyte val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As SByte, val2 As SByte) As SByte
    parameters:
    - id: val1
      type: System.SByte
    - id: val2
      type: System.SByte
    return:
      type: System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Single,System.Single)
  commentId: M:System.Math.Max(System.Single,System.Single)
  id: Max(System.Single,System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Single, Single)
  fullName: System.Math.Max(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 370
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two single-precision floating-point numbers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static float Max(float val1, float val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Max(val1 As Single, val2 As Single) As Single
    parameters:
    - id: val1
      type: System.Single
    - id: val2
      type: System.Single
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.UInt16,System.UInt16)
  commentId: M:System.Math.Max(System.UInt16,System.UInt16)
  id: Max(System.UInt16,System.UInt16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(UInt16, UInt16)
  fullName: System.Math.Max(System.UInt16, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 337
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 16-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static ushort Max(ushort val1, ushort val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As UShort, val2 As UShort) As UShort
    parameters:
    - id: val1
      type: System.UInt16
    - id: val2
      type: System.UInt16
    return:
      type: System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.UInt32,System.UInt32)
  commentId: M:System.Math.Max(System.UInt32,System.UInt32)
  id: Max(System.UInt32,System.UInt32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(UInt32, UInt32)
  fullName: System.Math.Max(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 350
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 32-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static uint Max(uint val1, uint val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As UInteger, val2 As UInteger) As UInteger
    parameters:
    - id: val1
      type: System.UInt32
    - id: val2
      type: System.UInt32
    return:
      type: System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.UInt64,System.UInt64)
  commentId: M:System.Math.Max(System.UInt64,System.UInt64)
  id: Max(System.UInt64,System.UInt64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(UInt64, UInt64)
  fullName: System.Math.Max(System.UInt64, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 363
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the larger of two 64-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Max\"></see> method to return and display the greater of two variables. </p>Math.Max#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static ulong Max(ulong val1, ulong val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Max(val1 As ULong, val2 As ULong) As ULong
    parameters:
    - id: val1
      type: System.UInt64
    - id: val2
      type: System.UInt64
    return:
      type: System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Byte,System.Byte)
  commentId: M:System.Math.Min(System.Byte,System.Byte)
  id: Min(System.Byte,System.Byte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Byte, Byte)
  fullName: System.Math.Min(System.Byte, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 407
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 8-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static byte Min(byte val1, byte val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As Byte, val2 As Byte) As Byte
    parameters:
    - id: val1
      type: System.Byte
    - id: val2
      type: System.Byte
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Decimal,System.Decimal)
  commentId: M:System.Math.Min(System.Decimal,System.Decimal)
  id: Min(System.Decimal,System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Decimal, Decimal)
  fullName: System.Math.Min(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 474
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two decimal numbers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static decimal Min(decimal val1, decimal val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Min(val1 As Decimal, val2 As Decimal) As Decimal
    parameters:
    - id: val1
      type: System.Decimal
    - id: val2
      type: System.Decimal
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Double,System.Double)
  commentId: M:System.Math.Min(System.Double,System.Double)
  id: Min(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Double, Double)
  fullName: System.Math.Min(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 463
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two double-precision floating-point numbers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static double Min(double val1, double val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Min(val1 As Double, val2 As Double) As Double
    parameters:
    - id: val1
      type: System.Double
    - id: val2
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Int16,System.Int16)
  commentId: M:System.Math.Min(System.Int16,System.Int16)
  id: Min(System.Int16,System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Int16, Int16)
  fullName: System.Math.Min(System.Int16, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 413
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 16-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static short Min(short val1, short val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As Short, val2 As Short) As Short
    parameters:
    - id: val1
      type: System.Int16
    - id: val2
      type: System.Int16
    return:
      type: System.Int16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Int32,System.Int32)
  commentId: M:System.Math.Min(System.Int32,System.Int32)
  id: Min(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Int32, Int32)
  fullName: System.Math.Min(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 426
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 32-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static int Min(int val1, int val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As Integer, val2 As Integer) As Integer
    parameters:
    - id: val1
      type: System.Int32
    - id: val2
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Int64,System.Int64)
  commentId: M:System.Math.Min(System.Int64,System.Int64)
  id: Min(System.Int64,System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Int64, Int64)
  fullName: System.Math.Min(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 439
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 64-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static long Min(long val1, long val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As Long, val2 As Long) As Long
    parameters:
    - id: val1
      type: System.Int64
    - id: val2
      type: System.Int64
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.SByte,System.SByte)
  commentId: M:System.Math.Min(System.SByte,System.SByte)
  id: Min(System.SByte,System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(SByte, SByte)
  fullName: System.Math.Min(System.SByte, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 400
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 8-bit signed integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static sbyte Min(sbyte val1, sbyte val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As SByte, val2 As SByte) As SByte
    parameters:
    - id: val1
      type: System.SByte
    - id: val2
      type: System.SByte
    return:
      type: System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Single,System.Single)
  commentId: M:System.Math.Min(System.Single,System.Single)
  id: Min(System.Single,System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Single, Single)
  fullName: System.Math.Min(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 452
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two single-precision floating-point numbers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static float Min(float val1, float val2)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Min(val1 As Single, val2 As Single) As Single
    parameters:
    - id: val1
      type: System.Single
    - id: val2
      type: System.Single
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.UInt16,System.UInt16)
  commentId: M:System.Math.Min(System.UInt16,System.UInt16)
  id: Min(System.UInt16,System.UInt16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(UInt16, UInt16)
  fullName: System.Math.Min(System.UInt16, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 419
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 16-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static ushort Min(ushort val1, ushort val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As UShort, val2 As UShort) As UShort
    parameters:
    - id: val1
      type: System.UInt16
    - id: val2
      type: System.UInt16
    return:
      type: System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.UInt32,System.UInt32)
  commentId: M:System.Math.Min(System.UInt32,System.UInt32)
  id: Min(System.UInt32,System.UInt32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(UInt32, UInt32)
  fullName: System.Math.Min(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 432
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 32-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static uint Min(uint val1, uint val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As UInteger, val2 As UInteger) As UInteger
    parameters:
    - id: val1
      type: System.UInt32
    - id: val2
      type: System.UInt32
    return:
      type: System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.UInt64,System.UInt64)
  commentId: M:System.Math.Min(System.UInt64,System.UInt64)
  id: Min(System.UInt64,System.UInt64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(UInt64, UInt64)
  fullName: System.Math.Min(System.UInt64, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 445
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the smaller of two 64-bit unsigned integers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <see cref=\"Overload:System.Math.Min\"></see> method to return and display the smaller of two variables. </p>Math.Min#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static ulong Min(ulong val1, ulong val2)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Function Min(val1 As ULong, val2 As ULong) As ULong
    parameters:
    - id: val1
      type: System.UInt64
    - id: val2
      type: System.UInt64
    return:
      type: System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Pow(System.Double,System.Double)
  commentId: M:System.Math.Pow(System.Double,System.Double)
  id: Pow(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Pow(Double, Double)
  fullName: System.Math.Pow(System.Double, System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a specified number raised to the specified power.</p>\n"
  remarks: "\n<p>The following table indicates the return value when various values or ranges of values are specified for the <em>x</em> and <em>y</em> parameters. For more information, see <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Parameters </p>\n<p>Return value </p>\n<table><tbody><tr><td>\n<p>\n<em>x</em> or <em>y</em> = <strong>NaN</strong>. </p>\n</td><td>\n<p>\n<strong>NaN </strong>\n</p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = Any value except <strong>NaN</strong>; <em>y</em> = 0. </p>\n</td><td>\n<p>1 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = <strong>NegativeInfinity</strong>; <em>y</em> < 0. </p>\n</td><td>\n<p>0 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = <strong>NegativeInfinity</strong>; <em>y</em> is a positive odd integer. </p>\n</td><td>\n<p>\n<strong>NegativeInfinity </strong>\n</p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = <strong>NegativeInfinity</strong>; <em>y</em> is positive but not an odd integer. </p>\n</td><td>\n<p>\n<strong>PositiveInfinity </strong>\n</p>\n</td></tr><tr><td>\n<p>\n<em>x</em> < 0 but not <strong>NegativeInfinity</strong>; <em>y</em> is not an integer, <strong>NegativeInfinity</strong>, or <strong>PositiveInfinity</strong>.</p>\n</td><td>\n<p>\n<strong>NaN </strong>\n</p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = -1; <em>y</em> = <strong>NegativeInfinity</strong> or <strong>PositiveInfinity</strong>. </p>\n</td><td>\n<p>\n<strong>NaN </strong>\n</p>\n</td></tr><tr><td>\n<p>-1 < <em>x</em> < 1; <em>y</em> = <strong>NegativeInfinity</strong>. </p>\n</td><td>\n<p>\n<strong>PositiveInfinity </strong>\n</p>\n</td></tr><tr><td>\n<p>-1 < <em>x</em> < 1; <em>y</em> = <strong>PositiveInfinity</strong>. </p>\n</td><td>\n<p>0 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> < -1 or <em>x</em> > 1; <em>y</em> = <strong>NegativeInfinity</strong>. </p>\n</td><td>\n<p>0 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> < -1 or <em>x</em> > 1; <em>y</em> = <strong>PositiveInfinity</strong>. </p>\n</td><td>\n<p>\n<strong>PositiveInfinity </strong>\n</p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = 0; <em>y</em> < 0. </p>\n</td><td>\n<p>\n<strong>PositiveInfinity </strong>\n</p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = 0; <em>y</em> > 0. </p>\n</td><td>\n<p>0 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = 1; <em>y</em> is any value except <strong>NaN</strong>. </p>\n</td><td>\n<p>1 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = <strong>PositiveInfinity</strong>; <em>y</em> < 0. </p>\n</td><td>\n<p>0 </p>\n</td></tr><tr><td>\n<p>\n<em>x</em> = <strong>PositiveInfinity</strong>; <em>y</em> > 0. </p>\n</td><td>\n<p>\n<strong>PositiveInfinity </strong>\n</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Math.Pow(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</p>System.Math.Pow#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Pow(double x, double y)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Pow(x As Double, y As Double) As Double
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.Sqrt(System.Double)
    commentId: M:System.Math.Sqrt(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal)
  commentId: M:System.Math.Round(System.Decimal)
  id: Round(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal)
  fullName: System.Math.Round(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 139
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a decimal value to the nearest integral value.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static decimal Round(decimal d)
    content.vb: Public Shared Function Round(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The result is outside the range of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal)
    commentId: M:System.Decimal.Round(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal,System.Int32)
  commentId: M:System.Math.Round(System.Decimal,System.Int32)
  id: Round(System.Decimal,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal, Int32)
  fullName: System.Math.Round(System.Decimal, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 143
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a decimal value to a specified number of fractional digits.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static decimal Round(decimal d, int decimals)
    content.vb: Public Shared Function Round(d As Decimal, decimals As Integer) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    - id: decimals
      type: System.Int32
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>decimals</em> is less than 0 or greater than 28. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The result is outside the range of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal,System.Int32)
    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  id: Round(System.Decimal,System.Int32,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal, Int32, MidpointRounding)
  fullName: System.Math.Round(System.Decimal, System.Int32, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 151
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static decimal Round(decimal d, int decimals, MidpointRounding mode)
    content.vb: Public Shared Function Round(d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    - id: decimals
      type: System.Int32
    - id: mode
      type: System.MidpointRounding
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>decimals</em> is less than 0 or greater than 28. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The result is outside the range of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)
    commentId: M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Decimal,System.MidpointRounding)
  id: Round(System.Decimal,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal, MidpointRounding)
  fullName: System.Math.Round(System.Decimal, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 147
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static decimal Round(decimal d, MidpointRounding mode)
    content.vb: Public Shared Function Round(d As Decimal, mode As MidpointRounding) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    - id: mode
      type: System.MidpointRounding
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The result is outside the range of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal,System.MidpointRounding)
    commentId: M:System.Decimal.Round(System.Decimal,System.MidpointRounding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double)
  commentId: M:System.Math.Round(System.Double)
  id: Round(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double)
  fullName: System.Math.Round(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a double-precision floating-point value to the nearest integral value.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Round(double a)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Round(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal)
    commentId: M:System.Decimal.Round(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double,System.Int32)
  commentId: M:System.Math.Round(System.Double,System.Int32)
  id: Round(System.Double,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double, Int32)
  fullName: System.Math.Round(System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 117
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a double-precision floating-point value to a specified number of fractional digits.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static double Round(double value, int digits)
    content.vb: Public Shared Function Round(value As Double, digits As Integer) As Double
    parameters:
    - id: value
      type: System.Double
    - id: digits
      type: System.Int32
    return:
      type: System.Double
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>digits</em> is less than 0 or greater than 15. </p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal,System.Int32)
    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  id: Round(System.Double,System.Int32,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double, Int32, MidpointRounding)
  fullName: System.Math.Round(System.Double, System.Int32, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 129
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static double Round(double value, int digits, MidpointRounding mode)
    content.vb: Public Shared Function Round(value As Double, digits As Integer, mode As MidpointRounding) As Double
    parameters:
    - id: value
      type: System.Double
    - id: digits
      type: System.Int32
    - id: mode
      type: System.MidpointRounding
    return:
      type: System.Double
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>digits</em> is less than 0 or greater than 15. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)
    commentId: M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Double,System.MidpointRounding)
  id: Round(System.Double,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double, MidpointRounding)
  fullName: System.Math.Round(System.Double, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 125
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Round</strong> method, see the <see cref=\"Overload:System.Math.Round\"></see> reference page.</p>\n"
  syntax:
    content: public static double Round(double value, MidpointRounding mode)
    content.vb: Public Shared Function Round(value As Double, mode As MidpointRounding) As Double
    parameters:
    - id: value
      type: System.Double
    - id: mode
      type: System.MidpointRounding
    return:
      type: System.Double
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  - type: System.Decimal.Round(System.Decimal,System.MidpointRounding)
    commentId: M:System.Decimal.Round(System.Decimal,System.MidpointRounding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Decimal)
  commentId: M:System.Math.Sign(System.Decimal)
  id: Sign(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Decimal)
  fullName: System.Math.Sign(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 569
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of a decimal number.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: public static int Sign(decimal value)
    content.vb: Public Shared Function Sign(value As Decimal) As Integer
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Double)
  commentId: M:System.Math.Sign(System.Double)
  id: Sign(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Double)
  fullName: System.Math.Sign(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 558
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of a double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: public static int Sign(double value)
    content.vb: Public Shared Function Sign(value As Double) As Integer
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Int32
  exceptions:
  - type: System.ArithmeticException
    commentId: T:System.ArithmeticException
    description: "\n<p>\n<em>value</em> is equal to <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Int16)
  commentId: M:System.Math.Sign(System.Int16)
  id: Sign(System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Int16)
  fullName: System.Math.Sign(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 515
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of a 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: public static int Sign(short value)
    content.vb: Public Shared Function Sign(value As Short) As Integer
    parameters:
    - id: value
      type: System.Int16
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Int32)
  commentId: M:System.Math.Sign(System.Int32)
  id: Sign(System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Int32)
  fullName: System.Math.Sign(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 527
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of a 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: public static int Sign(int value)
    content.vb: Public Shared Function Sign(value As Integer) As Integer
    parameters:
    - id: value
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Int64)
  commentId: M:System.Math.Sign(System.Int64)
  id: Sign(System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Int64)
  fullName: System.Math.Sign(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 537
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of a 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: public static int Sign(long value)
    content.vb: Public Shared Function Sign(value As Long) As Integer
    parameters:
    - id: value
      type: System.Int64
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.SByte)
  commentId: M:System.Math.Sign(System.SByte)
  id: Sign(System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(SByte)
  fullName: System.Math.Sign(System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 501
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of an 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.SByte)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of an <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static int Sign(sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Sign(value As SByte) As Integer
    parameters:
    - id: value
      type: System.SByte
    return:
      type: System.Int32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Single)
  commentId: M:System.Math.Sign(System.Single)
  id: Sign(System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Single)
  fullName: System.Math.Sign(System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 547
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an integer that indicates the sign of a single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Math.Sign(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the sign of a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value and display it to the console.</p>Math.Sign#1"
  syntax:
    content: public static int Sign(float value)
    content.vb: Public Shared Function Sign(value As Single) As Integer
    parameters:
    - id: value
      type: System.Single
    return:
      type: System.Int32
  exceptions:
  - type: System.ArithmeticException
    commentId: T:System.ArithmeticException
    description: "\n<p>\n<em>value</em> is equal to <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sin(System.Double)
  commentId: M:System.Math.Sin(System.Double)
  id: Sin(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sin(Double)
  fullName: System.Math.Sin(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the sine of the specified angle.</p>\n"
  remarks: "\n<p>The angle, <em>a</em>, must be in radians. Multiply by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180 to convert degrees to radians.</p>\n<p>Acceptable values of <em>a</em> range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside of this range, the <xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method returns <em>a</em> unchanged rather than throwing an exception.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain trigonometric identities for selected angles.</p>System.Math.SinCos#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Sin(double a)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Sin(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sinh(System.Double)
  commentId: M:System.Math.Sinh(System.Double)
  id: Sinh(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sinh(Double)
  fullName: System.Math.Sinh(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the hyperbolic sine of the specified angle.</p>\n"
  remarks: "\n<p>The angle, <em>value</em>, must be in radians. Multiply by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180 to convert degrees to radians.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Sinh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain hyperbolic identities for selected values.</p>System.Math.SinhCosh#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Sinh(double value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Sinh(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sqrt(System.Double)
  commentId: M:System.Math.Sqrt(System.Double)
  id: Sqrt(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sqrt(Double)
  fullName: System.Math.Sqrt(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the square root of a specified number.</p>\n"
  example:
  - "\n<p>The square root of the area of a square represents the length of any side of the square. The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square. </p>System.Math.Sqrt#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Sqrt(double d)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Sqrt(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.Pow(System.Double,System.Double)
    commentId: M:System.Math.Pow(System.Double,System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Tan(System.Double)
  commentId: M:System.Math.Tan(System.Double)
  id: Tan(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Tan(Double)
  fullName: System.Math.Tan(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the tangent of the specified angle.</p>\n"
  remarks: "\n<p>The angle, <em>a</em>, must be in radians. Multiply by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180 to convert degrees to radians.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to calculate the tangent of an angle and display it to the console.</p>math.atanx#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Tan(double a)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Tan(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Tanh(System.Double)
  commentId: M:System.Math.Tanh(System.Double)
  id: Tanh(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Tanh(Double)
  fullName: System.Math.Tanh(System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the hyperbolic tangent of the specified angle.</p>\n"
  remarks: "\n<p>The angle, <em>value</em>, must be in radians. Multiply by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180 to convert degrees to radians.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.Tanh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to evaluate certain hyperbolic tangent identities for selected values.</p>System.Math.Tanh#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static double Tanh(double value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function Tanh(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Truncate(System.Decimal)
  commentId: M:System.Math.Truncate(System.Decimal)
  id: Truncate(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Truncate(Decimal)
  fullName: System.Math.Truncate(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Truncate
    path: src/mscorlib/src/System/Math.cs
    startLine: 159
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Calculates the integral part of a specified decimal number. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Math.Truncate(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> rounds <em>d</em> to the nearest integer towards zero.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Math.Truncate(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method to truncate both a positive and a negative <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Math.Truncate#2"
  syntax:
    content: public static decimal Truncate(decimal d)
    content.vb: Public Shared Function Truncate(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
    return:
      type: System.Decimal
  seealso:
  - type: System.Math.Ceiling(System.Decimal)
    commentId: M:System.Math.Ceiling(System.Decimal)
  - type: System.Math.Floor(System.Decimal)
    commentId: M:System.Math.Floor(System.Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Truncate(System.Double)
  commentId: M:System.Math.Truncate(System.Double)
  id: Truncate(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Truncate(Double)
  fullName: System.Math.Truncate(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Truncate
    path: src/mscorlib/src/System/Math.cs
    startLine: 163
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Calculates the integral part of a specified double-precision floating-point number. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Math.Truncate(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> rounds <em>d</em> to the nearest integer towards zero.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Math.Truncate(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to truncate both a positive and a negative <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Math.Truncate#1"
  syntax:
    content: public static double Truncate(double d)
    content.vb: Public Shared Function Truncate(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Double
  seealso:
  - type: System.Math.Ceiling(System.Double)
    commentId: M:System.Math.Ceiling(System.Double)
  - type: System.Math.Floor(System.Double)
    commentId: M:System.Math.Floor(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.PI
  commentId: F:System.Math.PI
  id: PI
  parent: System.Math
  langs:
  - csharp
  - vb
  name: PI
  fullName: System.Math.PI
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PI
    path: src/mscorlib/src/System/Math.cs
    startLine: 34
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</p>\n"
  remarks: "\n<p>The value of this field is 3.14159265358979323846.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref> to assist in the computation of the inner angles of a given trapezoid.</p>MathSample#1"
  syntax:
    content: public const double PI = 3.1415926535897931
    content.vb: Public Const PI As Double = 3.1415926535897931
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Math.E
  commentId: F:System.Math.E
  id: E
  parent: System.Math
  langs:
  - csharp
  - vb
  name: E
  fullName: System.Math.E
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: E
    path: src/mscorlib/src/System/Math.cs
    startLine: 35
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Represents the natural logarithmic base, specified by the constant, <strong>e</strong>.</p>\n"
  remarks: "\n<p>The value of this field is 2.7182818284590452354.</p>\n"
  example:
  - "\n<p>The following example compares <xref href=\"System.Math.E\" data-throw-if-not-resolved=\"false\"></xref> with the value calculated from a power series.</p>System.Math.E#1"
  syntax:
    content: public const double E = 2.7182818284590451
    content.vb: Public Const E As Double = 2.7182818284590451
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArithmeticException
  parent: System
  isExternal: false
  name: ArithmeticException
  fullName: System.ArithmeticException
