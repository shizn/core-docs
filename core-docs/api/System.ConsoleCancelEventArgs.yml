items:
- uid: System.ConsoleCancelEventArgs
  commentId: T:System.ConsoleCancelEventArgs
  id: ConsoleCancelEventArgs
  parent: System
  children:
  - System.ConsoleCancelEventArgs.Cancel
  - System.ConsoleCancelEventArgs.SpecialKey
  langs:
  - csharp
  - vb
  name: ConsoleCancelEventArgs
  fullName: System.ConsoleCancelEventArgs
  type: Class
  source:
    remote:
      path: src/System.Console/src/System/ConsoleCancelEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConsoleCancelEventArgs
    path: src/System.Console/src/System/ConsoleCancelEventArgs.cs
    startLine: 9
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Provides data for the <xref href=\"System.Console.CancelKeyPress\" data-throw-if-not-resolved=\"false\"></xref> event. This class cannot be inherited.</p>\n"
  remarks: "\n<p>A user can interrupt a console application process by simultaneously pressing the <xref href=\"System.ConsoleModifiers.Control\" data-throw-if-not-resolved=\"false\"></xref> modifier key and the <xref href=\"System.ConsoleKey.C\" data-throw-if-not-resolved=\"false\"></xref> console key (Ctrl+C), or the <xref href=\"System.ConsoleModifiers.Control\" data-throw-if-not-resolved=\"false\"></xref> modifier key and the Break console key (Ctrl+Break). The .NET Framework consequently provides a <xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to the event handler for the <xref href=\"System.Console.CancelKeyPress\" data-throw-if-not-resolved=\"false\"></xref> event to specify whether the process should be cancelled. </p>\n<p>If the <xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong> in the event handler, the process is resumed; otherwise, the process is terminated. By default, the value of the <xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, and the process terminates. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class to handle an event.</p>console.cancelkeypress#1"
  syntax:
    content: 'public sealed class ConsoleCancelEventArgs : EventArgs'
    content.vb: >-
      Public NotInheritable Class ConsoleCancelEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ConsoleCancelEventArgs.Cancel
  commentId: P:System.ConsoleCancelEventArgs.Cancel
  id: Cancel
  parent: System.ConsoleCancelEventArgs
  langs:
  - csharp
  - vb
  name: Cancel
  fullName: System.ConsoleCancelEventArgs.Cancel
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/ConsoleCancelEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cancel
    path: src/System.Console/src/System/ConsoleCancelEventArgs.cs
    startLine: 20
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets a value that indicates whether simultaneously pressing the <xref href=\"System.ConsoleModifiers.Control\" data-throw-if-not-resolved=\"false\"></xref> modifier key and the <xref href=\"System.ConsoleKey.C\" data-throw-if-not-resolved=\"false\"></xref> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process. The default is <strong>false</strong>, which terminates the current process. </p>\n"
  remarks: "\n<p>The <xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> property is automatically initialized to <strong>false</strong> when the handler for the <xref href=\"System.Console.CancelKeyPress\" data-throw-if-not-resolved=\"false\"></xref> event is invoked. The value of the <xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> property when the event handler finishes determines whether the current process resumes or terminates. </p>\n<p>In a set operation after Ctrl+C is pressed, specify <strong>true</strong> to indicate that the current process should resume when the event handler concludes, or <strong>false</strong> to indicate that the current process should terminate. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> property to handle an event.</p>console.cancelkeypress#1"
  syntax:
    content: public bool Cancel { get; set; }
    content.vb: Public Property Cancel As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.ConsoleCancelEventHandler
    commentId: T:System.ConsoleCancelEventHandler
  - type: System.ConsoleKey
    commentId: T:System.ConsoleKey
  - type: System.ConsoleModifiers
    commentId: T:System.ConsoleModifiers
  - type: System.ConsoleCancelEventArgs.SpecialKey
    commentId: P:System.ConsoleCancelEventArgs.SpecialKey
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ConsoleCancelEventArgs.SpecialKey
  commentId: P:System.ConsoleCancelEventArgs.SpecialKey
  id: SpecialKey
  parent: System.ConsoleCancelEventArgs
  langs:
  - csharp
  - vb
  name: SpecialKey
  fullName: System.ConsoleCancelEventArgs.SpecialKey
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/ConsoleCancelEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SpecialKey
    path: src/System.Console/src/System/ConsoleCancelEventArgs.cs
    startLine: 25
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets the combination of modifier and console keys that interrupted the current process.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.ConsoleCancelEventArgs.SpecialKey\" data-throw-if-not-resolved=\"false\"></xref> property to handle an event.</p>console.cancelkeypress#1"
  syntax:
    content: public ConsoleSpecialKey SpecialKey { get; }
    content.vb: Public ReadOnly Property SpecialKey As ConsoleSpecialKey
    parameters: []
    return:
      type: System.ConsoleSpecialKey
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ConsoleSpecialKey
  parent: System
  isExternal: false
  name: ConsoleSpecialKey
  fullName: System.ConsoleSpecialKey
