items:
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  id: Nullable`1
  parent: System
  children:
  - System.Nullable`1.#ctor(`0)
  - System.Nullable`1.Equals(System.Object)
  - System.Nullable`1.GetHashCode
  - System.Nullable`1.GetValueOrDefault
  - System.Nullable`1.GetValueOrDefault(`0)
  - System.Nullable`1.HasValue
  - System.Nullable`1.op_Explicit(System.Nullable{`0})~`0
  - System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}
  - System.Nullable`1.ToString
  - System.Nullable`1.Value
  langs:
  - csharp
  - vb
  name: Nullable<T>
  fullName: System.Nullable<T>
  type: Struct
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Nullable
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1288
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a value type that can be assigned <strong>null</strong>.</p>\n"
  remarks: "\n<p>A type is said to be nullable if it can be assigned a value or can be assigned <strong>null</strong>, which means the type has no value whatsoever. By default, all reference types, such as <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, are nullable, but all value types, such as <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, are not. </p>\n<p>In C# and Visual Basic, you mark a value type as nullable by using the <strong>?</strong> notation after the value type. For example, <strong>int?</strong> in C# or <strong>Integer?</strong> in Visual Basic declares an integer value type that can be assigned <strong>null</strong>.</p>\n<p>The <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure supports using only a value type as a nullable type because reference types are nullable by design. </p>\n<p>The <xref href=\"System.Nullable\" data-throw-if-not-resolved=\"false\"></xref> class provides complementary support for the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure. The <xref href=\"System.Nullable\" data-throw-if-not-resolved=\"false\"></xref> class supports obtaining the underlying type of a nullable type, and comparison and equality operations on pairs of nullable types whose underlying value type does not support generic comparison and equality operations.</p>\n"
  example:
  - <p>The following code example defines three rows of a table in the Microsoft Pubs sample database. The table contains two columns that are not nullable and two columns that are nullable.</p>system.nullableOfT.class#1
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct Nullable<T>
          where T : struct
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure Nullable(Of T As Structure)
    typeParameters:
    - id: T
      description: "\n<p>The underlying value type of the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> generic type.</p>\n"
  seealso:
  - type: System.Nullable
    commentId: T:System.Nullable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
- uid: System.Nullable`1.#ctor(`0)
  commentId: M:System.Nullable`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Nullable(T)
  fullName: System.Nullable<T>.Nullable(T)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1291
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure to the specified value. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Nullable`1.#ctor(`0)\" data-throw-if-not-resolved=\"false\"></xref> constructor initializes the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property of the new <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object to <strong>true</strong>, and the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property to the value of the <em>value</em> parameter.</p>\n"
  example:
  - 
  syntax:
    content: public Nullable(T value)
    content.vb: Public Sub New(value As T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>A value type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Nullable(Of T).Nullable(T)
- uid: System.Nullable`1.HasValue
  commentId: P:System.Nullable`1.HasValue
  id: HasValue
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: HasValue
  fullName: System.Nullable<T>.HasValue
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1292
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object has a valid value of its underlying type. </p>\n"
  remarks: "\n<p>If the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object can be accessed with the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property. Otherwise, attempting to access its value throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property of a <strong>Nullable<Integer></strong> object to determine whether it should display the object's <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property or its <xref href=\"System.Nullable`1.GetValueOrDefault\" data-throw-if-not-resolved=\"false\"></xref> property. </p>System.Nullable~1.HasValue#1"
  syntax:
    content: public bool HasValue { get; }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object has a value; <strong>false</strong> if the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object has no value.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Nullable(Of T).HasValue
- uid: System.Nullable`1.Value
  commentId: P:System.Nullable`1.Value
  id: Value
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Nullable<T>.Value
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1293
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if it has been assigned a valid underlying value.</p>\n"
  remarks: "\n<p>If a value of type <strong>T</strong> has not been assigned to the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, you can compare it to <strong>null</strong> and retrieve its <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property, but you cannot access its <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property or call its other members. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property of a <strong>Nullable<Integer></strong> object to determine whether it should display the object's <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property or its <xref href=\"System.Nullable`1.GetValueOrDefault\" data-throw-if-not-resolved=\"false\"></xref> property. </p>System.Nullable~1.HasValue#1"
  syntax:
    content: public T Value { get; }
    content.vb: Public ReadOnly Property Value As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. An exception is thrown if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Nullable(Of T).Value
- uid: System.Nullable`1.Equals(System.Object)
  commentId: M:System.Nullable`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Nullable<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1294
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>true</strong> and the <em>other</em> argument is not <strong>null</strong>, equality is determined by passing the <em>other</em> parameter to the <strong>Equals</strong> method of the underlying value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  example:
  - "\n<p>The following code example determines whether an object and a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object are equal to the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>system.nullableOfT.Equals#1"
  syntax:
    content: public override bool Equals(object other)
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>An object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter is equal to the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>. </p>\n<p>This table describes how equality is defined for the compared values: </p>\n<p>Return Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<strong>true</strong>\n</p>\n</td><td>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, and the <em>other</em> parameter is <strong>null</strong>. That is, two null values are equal by definition.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, and the value returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is equal to the <em>other</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<strong>false</strong>\n</p>\n</td><td>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property for the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>true</strong>, and the <em>other</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property for the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>false</strong>, and the <em>other</em> parameter is not <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property for the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>true</strong>, and the value returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is not equal to the <em>other</em> parameter.</p>\n</td></tr></tbody></table>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Nullable(Of T).Equals(System.Object)
- uid: System.Nullable`1.GetHashCode
  commentId: M:System.Nullable`1.GetHashCode
  id: GetHashCode
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Nullable<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1295
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the hash code of the object returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code of the object returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, or zero if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Nullable(Of T).GetHashCode()
- uid: System.Nullable`1.GetValueOrDefault
  commentId: M:System.Nullable`1.GetValueOrDefault
  id: GetValueOrDefault
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: GetValueOrDefault()
  fullName: System.Nullable<T>.GetValueOrDefault()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueOrDefault
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1296
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, or the object's default value.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Nullable`1.GetValueOrDefault\"></see> method returns a value even if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong> (unlike the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, which throws an exception). </p>\n"
  example:
  - "\n<p>The following code example retrieves the value of a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if that value is defined; otherwise, it retrieves the default value or a specific default value.</p>system.nullableOfT.GetValueOrDefault#1"
  syntax:
    content: public T GetValueOrDefault()
    content.vb: Public Function GetValueOrDefault As T
    return:
      type: '{T}'
      description: "\n<p>The value of the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property if the  <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>; otherwise, the default value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object. The type of the default value is the type argument of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, and the value of the default value consists solely of binary zeroes.</p>\n"
  seealso:
  - type: System.Nullable`1.GetValueOrDefault(`0)
    commentId: M:System.Nullable`1.GetValueOrDefault(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Nullable(Of T).GetValueOrDefault()
- uid: System.Nullable`1.GetValueOrDefault(`0)
  commentId: M:System.Nullable`1.GetValueOrDefault(`0)
  id: GetValueOrDefault(`0)
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: GetValueOrDefault(T)
  fullName: System.Nullable<T>.GetValueOrDefault(T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueOrDefault
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1297
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, or the specified default value.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Nullable`1.GetValueOrDefault\"></see> method returns a value even if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong> (unlike the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, which throws an exception). </p>\n"
  example:
  - "\n<p>The following code example retrieves the value of a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if that value is defined; otherwise, it retrieves the default value or a specific default value.</p>system.nullableOfT.GetValueOrDefault#1"
  syntax:
    content: public T GetValueOrDefault(T defaultValue)
    content.vb: Public Function GetValueOrDefault(defaultValue As T) As T
    parameters:
    - id: defaultValue
      type: '{T}'
      description: "\n<p>A value to return if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value of the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>; otherwise, the <em>defaultValue</em> parameter.</p>\n"
  seealso:
  - type: System.Nullable`1.GetValueOrDefault
    commentId: M:System.Nullable`1.GetValueOrDefault
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Nullable(Of T).GetValueOrDefault(T)
- uid: System.Nullable`1.op_Explicit(System.Nullable{`0})~`0
  commentId: M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0
  id: op_Explicit(System.Nullable{`0})~`0
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Explicit(Nullable<T> to T)
  fullName: System.Nullable<T>.Explicit(System.Nullable<T> to T)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1298
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> instance to its underlying value. </p>\n"
  remarks: "\n<p>This operator supports the explicit conversion of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> instance to type <strong>T</strong>, the type of <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref>. The syntax for such explicit conversions is language-dependent. You may also be able to perform the conversion by calling the <xref href=\"System.Convert.ChangeType(System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The <xref href=\"System.Nullable`1.op_Explicit(System.Nullable{`0})~`0\" data-throw-if-not-resolved=\"false\"></xref> operator enables code such as the following, which converts a <code>Nullable(Of Int32)</code> value to an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Nullable~1.Conversion#1"
  syntax:
    content: public static explicit operator T(Nullable<T> value)
    content.vb: Public Shared Narrowing Operator CType(value As Nullable(Of T)) As T
    parameters:
    - id: value
      type: System.Nullable`1
      description: "\n<p>A nullable value.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value of the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Nullable(Of T).Narrowing(System.Nullable(Of T) to T)
  name.vb: Narrowing(Nullable(Of T) to T)
- uid: System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}
  commentId: M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}
  id: op_Implicit(`0)~System.Nullable{`0}
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Implicit(T to Nullable<T>)
  fullName: System.Nullable<T>.Implicit(T to System.Nullable<T>)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1299
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object initialized to a specified value. </p>\n"
  remarks: "\n<p>If the <em>value</em> parameter is not <strong>null</strong>, the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the new <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> value is initialized to the <em>value</em> parameter and the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <strong>true</strong>. </p>\n<p>If the <em>value</em> parameter is <strong>null</strong>, the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the new <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> value is initialized to the default value, which is the value that is all binary zeroes, and the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static implicit operator Nullable<T>(T value)
    content.vb: Public Shared Widening Operator CType(value As T) As Nullable(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>A value type.</p>\n"
    return:
      type: System.Nullable`1
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object whose <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is initialized with the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Nullable(Of T).Widening(T to System.Nullable(Of T))
  name.vb: Widening(T to Nullable(Of T))
- uid: System.Nullable`1.ToString
  commentId: M:System.Nullable`1.ToString
  id: ToString
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Nullable<T>.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1300
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the text representation of the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Nullable`1.ToString\" data-throw-if-not-resolved=\"false\"></xref> property returns the string yielded by calling the <strong>ToString</strong> property of the object returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following code example displays the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>system.nullableOfT.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The text representation of the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, or an empty string (\"\") if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Nullable(Of T).ToString()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: false
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
