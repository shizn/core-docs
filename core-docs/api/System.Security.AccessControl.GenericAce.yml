items:
- uid: System.Security.AccessControl.GenericAce
  commentId: T:System.Security.AccessControl.GenericAce
  id: GenericAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.PropagationFlags
  langs:
  - csharp
  - vb
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 262
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.</p>\n"
  remarks: "\n<p>An ACE contains both an ACE header and a binary blob. The header contains information about the type of the ACE, various flags, and the size of the binary blob.</p>\n"
  example:
  - 
  syntax:
    content: 'public abstract class GenericAce : object'
    content.vb: >-
      Public MustInherit Class GenericAce
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.AccessControl.GenericAce.AceFlags
  commentId: P:System.Security.AccessControl.GenericAce.AceFlags
  id: AceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AceFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 265
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the <xref href=\"System.Security.AccessControl.AceFlags\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>An <xref href=\"System.Security.AccessControl.AceFlags\" data-throw-if-not-resolved=\"false\"></xref> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE).</p>\n"
  example:
  - 
  syntax:
    content: public AceFlags AceFlags { get; set; }
    content.vb: Public Property AceFlags As AceFlags
    parameters: []
    return:
      type: System.Security.AccessControl.AceFlags
      description: "\n<p>The <xref href=\"System.Security.AccessControl.AceFlags\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.GenericAce.AceType
  commentId: P:System.Security.AccessControl.GenericAce.AceType
  id: AceType
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AceType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 266
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type of this Access Control Entry (ACE).</p>\n"
  example:
  - 
  syntax:
    content: public AceType AceType { get; }
    content.vb: Public ReadOnly Property AceType As AceType
    parameters: []
    return:
      type: System.Security.AccessControl.AceType
      description: "\n<p>The type of this ACE.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags
  id: AuditFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 267
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the audit information associated with this Access Control Entry (ACE).</p>\n"
  example:
  - 
  syntax:
    content: public AuditFlags AuditFlags { get; }
    content.vb: Public ReadOnly Property AuditFlags As AuditFlags
    parameters: []
    return:
      type: System.Security.AccessControl.AuditFlags
      description: "\n<p>The audit information associated with this Access Control Entry (ACE).</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 268
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public abstract int BinaryLength { get; }
    content.vb: Public MustOverride ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags
  id: InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InheritanceFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 269
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets flags that specify the inheritance properties of this Access Control Entry (ACE).</p>\n"
  example:
  - 
  syntax:
    content: public InheritanceFlags InheritanceFlags { get; }
    content.vb: Public ReadOnly Property InheritanceFlags As InheritanceFlags
    parameters: []
    return:
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>Flags that specify the inheritance properties of this ACE.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.GenericAce.IsInherited
  commentId: P:System.Security.AccessControl.GenericAce.IsInherited
  id: IsInherited
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInherited
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 270
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsInherited { get; }
    content.vb: Public ReadOnly Property IsInherited As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this ACE is inherited; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags
  id: PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropagationFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 271
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).</p>\n"
  example:
  - 
  syntax:
    content: public PropagationFlags PropagationFlags { get; }
    content.vb: Public ReadOnly Property PropagationFlags As PropagationFlags
    parameters: []
    return:
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Flags that specify the inheritance propagation properties of this ACE.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.GenericAce.Copy
  commentId: M:System.Security.AccessControl.GenericAce.Copy
  id: Copy
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Copy
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 272
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Creates a deep copy of this Access Control Entry (ACE).</p>\n"
  example:
  - 
  syntax:
    content: public GenericAce Copy()
    content.vb: Public Function Copy As GenericAce
    return:
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object that this method creates.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  id: CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: CreateFromBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 273
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Creates a <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object from the specified binary data.</p>\n"
  example:
  - 
  syntax:
    content: public static GenericAce CreateFromBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Shared Function CreateFromBinaryForm(binaryForm As Byte(), offset As Integer) As GenericAce
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The binary data from which to create the new <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset at which to begin unmarshaling.</p>\n"
    return:
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object this method creates.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 274
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object is equal to the current <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed bool Equals(object o)
    content.vb: Public NotOverridable Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object to compare to the current <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object is equal to the current <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 275
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Marshals the contents of the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object into the specified byte array beginning at the specified offset.</p>\n"
  example:
  - 
  syntax:
    content: public abstract void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public MustOverride Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The byte array into which the contents of the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> is marshaled.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset at which to start marshaling.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode
  id: GetHashCode
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 276
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Serves as a hash function for the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> class. The  <xref href=\"System.Security.AccessControl.GenericAce.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method is suitable for use in hashing algorithms and data structures like a hash table.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed int GetHashCode()
    content.vb: Public NotOverridable Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  commentId: M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: Equality(GenericAce, GenericAce)
  fullName: System.Security.AccessControl.GenericAce.Equality(System.Security.AccessControl.GenericAce, System.Security.AccessControl.GenericAce)
  type: Operator
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 277
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> objects are considered equal.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(GenericAce left, GenericAce right)
    content.vb: Public Shared Operator =(left As GenericAce, right As GenericAce) As Boolean
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The first <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The second <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> objects are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  commentId: M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  - vb
  name: Inequality(GenericAce, GenericAce)
  fullName: System.Security.AccessControl.GenericAce.Inequality(System.Security.AccessControl.GenericAce, System.Security.AccessControl.GenericAce)
  type: Operator
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 278
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> objects are considered unequal.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(GenericAce left, GenericAce right)
    content.vb: Public Shared Operator <>(left As GenericAce, right As GenericAce) As Boolean
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The first <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The second <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> objects are unequal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
