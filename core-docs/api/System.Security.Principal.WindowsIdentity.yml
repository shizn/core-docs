items:
- uid: System.Security.Principal.WindowsIdentity
  commentId: T:System.Security.Principal.WindowsIdentity
  id: WindowsIdentity
  parent: System.Security.Principal
  children:
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String)
  - System.Security.Principal.WindowsIdentity.AccessToken
  - System.Security.Principal.WindowsIdentity.AuthenticationType
  - System.Security.Principal.WindowsIdentity.Claims
  - System.Security.Principal.WindowsIdentity.Clone
  - System.Security.Principal.WindowsIdentity.DefaultIssuer
  - System.Security.Principal.WindowsIdentity.Dispose
  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetAnonymous
  - System.Security.Principal.WindowsIdentity.GetCurrent
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  - System.Security.Principal.WindowsIdentity.Groups
  - System.Security.Principal.WindowsIdentity.ImpersonationLevel
  - System.Security.Principal.WindowsIdentity.IsAnonymous
  - System.Security.Principal.WindowsIdentity.IsAuthenticated
  - System.Security.Principal.WindowsIdentity.IsGuest
  - System.Security.Principal.WindowsIdentity.IsSystem
  - System.Security.Principal.WindowsIdentity.Name
  - System.Security.Principal.WindowsIdentity.Owner
  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  - System.Security.Principal.WindowsIdentity.User
  langs:
  - csharp
  - vb
  name: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
  type: Class
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowsIdentity
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 190
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Represents a Windows user.</p>\n"
  remarks: "\n<p>Call the <xref href=\"System.Security.Principal.WindowsIdentity.GetCurrent\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current user.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic. </p>\n"
  example:
  - "\n<p>The following example shows the use of members of <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.  For an example showing how to obtain a Windows account token through a call to the unmanaged Win32 LogonUser function, and use that token to impersonate another user, see the <xref href=\"System.Security.Principal.WindowsImpersonationContext\" data-throw-if-not-resolved=\"false\"></xref> class.   </p>System.Security.Principal.WindowsIdentity_AllMembers#1"
  syntax:
    content: 'public class WindowsIdentity : ClaimsIdentity, IIdentity, IDisposable'
    content.vb: >-
      Public Class WindowsIdentity
          Inherits ClaimsIdentity
          Implements IIdentity, IDisposable
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsIdentity
  implements:
  - System.Security.Principal.IIdentity
  - System.IDisposable
  inheritedMembers:
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  commentId: F:System.Security.Principal.WindowsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
  type: Field
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIssuer
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 192
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Identifies the name of the default <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> issuer.</p>\n"
  syntax:
    content: public const string DefaultIssuer = "AD AUTHORITY"
    content.vb: Public Const DefaultIssuer As String = "AD AUTHORITY"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 193
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified Windows account token.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Principal.WindowsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>Negotiate</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Principal.WindowsAccountType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>Normal</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Principal.WindowsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr></tbody></table>\n<p>You can retrieve the token represented by <em>userToken</em> by calling unmanaged code such as the Win32 API LogonUser function. Always release <em>userToken</em> by calling the Win32 API CloseHandle function. For more information on calling unmanaged code, see Consuming Unmanaged DLL Functions.</p>\n"
  syntax:
    content: public WindowsIdentity(IntPtr userToken)
    content.vb: Public Sub New(userToken As IntPtr)
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "\n<p>The account token for the user on whose behalf the code is running. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>userToken</em> is 0.</p>\n<p>-or-</p>\n<p>\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>A Win32 error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  id: '#ctor(System.IntPtr,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(IntPtr, String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 194
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified Windows account token and the specified authentication type.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Principal.WindowsAccountType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>Normal</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Principal.WindowsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr></tbody></table>\n<p>The value of the <em>type</em> parameter is used to set the <xref href=\"System.Security.Principal.WindowsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> parameter. If <em>type</em> is <strong>null</strong>, the security system sets <xref href=\"System.Security.Principal.WindowsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> to <strong>Negotiate</strong> on Windows Vista and later versions of the Windows operating system, and to <strong>Kerberos</strong> on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.</p>\n<p>You can retrieve the token represented by <em>userToken</em> by calling unmanaged code such as the Win32 API LogonUser function. Always release <em>userToken</em> by calling the Win32 API CloseHandle function. For more information on calling unmanaged code, see Consuming Unmanaged DLL Functions.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor to create a new instance of the  <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified Windows account token and the specified authentication type. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#4"
  syntax:
    content: public WindowsIdentity(IntPtr userToken, string type)
    content.vb: Public Sub New(userToken As IntPtr, type As String)
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "\n<p>The account token for the user on whose behalf the code is running. </p>\n"
    - id: type
      type: System.String
      description: "\n<p>(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>userToken</em> is 0.</p>\n<p>-or-</p>\n<p>\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>A Win32 error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 195
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified User Principal Name (UPN).</p>\n"
  remarks: "\n<p>A UPN has the format username@domainname.com, in other words, an email address. The UPN identified in <em>sUserPrincipalName</em> is used to retrieve a token for that user through the Win32 API LsaLogonUser function. In turn that token is used to identify the user. An exception might be returned due to the inability to log on using the supplied UPN.</p>\n<p>This constructor is intended for use only on computers joined to Windows Server 2003 or later domains. An exception is thrown for earlier domain types. This restriction is due to the fact that this constructor uses the <see href=\"http://go.microsoft.com/fwlink/?LinkId=143533\">KERB_S4U_LOGON structure</see>, which was first introduced in Windows Server 2003. </p>\n"
  syntax:
    content: public WindowsIdentity(string sUserPrincipalName)
    content.vb: Public Sub New(sUserPrincipalName As String)
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "\n<p>The UPN for the user on whose behalf the code is running. </p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\n<p>-or-</p>\n<p>The computer is not running Windows 2003 or later.</p>\n<p>-or-</p>\n<p>The user is not a member of the domain the computer is attached to.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  commentId: P:System.Security.Principal.WindowsIdentity.AccessToken
  id: AccessToken
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessToken
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 196
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets this <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\" data-throw-if-not-resolved=\"false\"></xref> for this <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n"
  syntax:
    content: >-
      public SafeAccessTokenHandle AccessToken

      {
          [SecurityCritical]
          get;
      }
    content.vb: Public ReadOnly Property AccessToken As SafeAccessTokenHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "\n<p>Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  commentId: P:System.Security.Principal.WindowsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticationType
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 197
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the type of authentication used to identify the user.</p>\n"
  remarks: "\n<p>This property is informational; it is not used by the security system. On Windows Vista and later versions of the Windows operating system, the default value for this property is <strong>Negotiate</strong>, which chooses the best security support provider (SSP) based on customer-configured security policy. The default property value for earlier versions of the Windows operating system is <strong>Kerberos</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed string AuthenticationType { get; }
    content.vb: Public NotOverridable Overrides ReadOnly Property AuthenticationType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The type of authentication used to identify the user.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.AuthenticationType
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\n<p>-or-</p>\n<p>The computer is not running Windows 2003 or later.</p>\n<p>-or-</p>\n<p>The user is not a member of the domain the computer is attached to.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Claims
  commentId: P:System.Security.Principal.WindowsIdentity.Claims
  id: Claims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 198
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets all claims for the user represented by this Windows identity.</p>\n"
  syntax:
    content: public override IEnumerable<Claim> Claims { get; }
    content.vb: Public Overrides ReadOnly Property Claims As IEnumerable(Of Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>A collection of claims for this <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.Claims
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Groups
  commentId: P:System.Security.Principal.WindowsIdentity.Groups
  id: Groups
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Groups
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 199
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the groups the current Windows user belongs to.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.Groups\" data-throw-if-not-resolved=\"false\"></xref> property to display the identity references for the groups the current user belongs to.  This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#20"
  syntax:
    content: public IdentityReferenceCollection Groups { get; }
    content.vb: Public ReadOnly Property Groups As IdentityReferenceCollection
    parameters: []
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "\n<p>An object representing the groups the current Windows user belongs to.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  commentId: P:System.Security.Principal.WindowsIdentity.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImpersonationLevel
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 200
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the impersonation level for the user.</p>\n"
  remarks: "\n<p>Describes the impersonation level to be used to connect to WMI.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.ImpersonationLevel\" data-throw-if-not-resolved=\"false\"></xref> property to display the impersonation level for the current user. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#21"
  syntax:
    content: public TokenImpersonationLevel ImpersonationLevel { get; }
    content.vb: Public ReadOnly Property ImpersonationLevel As TokenImpersonationLevel
    parameters: []
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "\n<p>One of the enumeration values that specifies the impersonation level. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  commentId: P:System.Security.Principal.WindowsIdentity.IsAnonymous
  id: IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAnonymous
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 201
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value that indicates whether the user account is identified as an anonymous account by the system.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Principal.WindowsIdentity.IsAnonymous\" data-throw-if-not-resolved=\"false\"></xref> property detects both the Windows anonymous identity and the anonymous identity that is returned by the <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Anonymous accounts are typically only encountered only from within ASP.NET-based applications when anonymous access is allowed by Internet Information Services (IIS).</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.IsAnonymous\" data-throw-if-not-resolved=\"false\"></xref> property to detect whether the user account is identified as an anonymous account by the system. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#9"
  syntax:
    content: public virtual bool IsAnonymous { get; }
    content.vb: Public Overridable ReadOnly Property IsAnonymous As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user account is an anonymous account; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  commentId: P:System.Security.Principal.WindowsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 202
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value indicating whether the user has been authenticated by Windows.</p>\n"
  syntax:
    content: public override bool IsAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user was authenticated; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  commentId: P:System.Security.Principal.WindowsIdentity.IsGuest
  id: IsGuest
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGuest
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 203
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType.Guest\" data-throw-if-not-resolved=\"false\"></xref> account by the system.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.IsGuest\" data-throw-if-not-resolved=\"false\"></xref> property to return a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType.Guest\" data-throw-if-not-resolved=\"false\"></xref> account by the system. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#12"
  syntax:
    content: public virtual bool IsGuest { get; }
    content.vb: Public Overridable ReadOnly Property IsGuest As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType.Guest\" data-throw-if-not-resolved=\"false\"></xref> account; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  commentId: P:System.Security.Principal.WindowsIdentity.IsSystem
  id: IsSystem
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSystem
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 204
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType.System\" data-throw-if-not-resolved=\"false\"></xref> account by the system.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.IsSystem\" data-throw-if-not-resolved=\"false\"></xref> property to return a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType.System\" data-throw-if-not-resolved=\"false\"></xref> account by the system. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#11"
  syntax:
    content: public virtual bool IsSystem { get; }
    content.vb: Public Overridable ReadOnly Property IsSystem As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType.System\" data-throw-if-not-resolved=\"false\"></xref> account; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Name
  commentId: P:System.Security.Principal.WindowsIdentity.Name
  id: Name
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Security.Principal.WindowsIdentity.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 205
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the user's Windows logon name.</p>\n"
  remarks: "\n<p>The logon name is in the form DOMAIN\\USERNAME.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property to get the user's Windows logon name. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#8"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The Windows logon name of the user on whose behalf the code is being run.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Owner
  commentId: P:System.Security.Principal.WindowsIdentity.Owner
  id: Owner
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Owner
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 206
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the security identifier (SID) for the token owner.</p>\n"
  remarks: "\n<p>The SID uniquely identifies a user or group on all Windows NT implementations.  The returned SID identifies the default owner SID that will be applied to newly created objects.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.Owner\" data-throw-if-not-resolved=\"false\"></xref> property to display the security identifier for the token owner.  This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class</p>System.Security.Principal.WindowsIdentity_AllMembers#19"
  syntax:
    content: public SecurityIdentifier Owner { get; }
    content.vb: Public ReadOnly Property Owner As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>An object for the token owner.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.User
  commentId: P:System.Security.Principal.WindowsIdentity.User
  id: User
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: User
  fullName: System.Security.Principal.WindowsIdentity.User
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: User
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 207
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the security identifier (SID) for the user.</p>\n"
  remarks: "\n<p>The SID uniquely identifies a user or group on all Windows NT implementations.  </p>\n<p>The <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref> method is not the same as the Windows anonymous user. This property gets <strong>null</strong> for an anonymous user represented by the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref> method; it does not get the SID representing an anonymous Windows user.</p>\n"
  syntax:
    content: public SecurityIdentifier User { get; }
    content.vb: Public ReadOnly Property User As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>An object for the user.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Clone
  commentId: M:System.Security.Principal.WindowsIdentity.Clone
  id: Clone
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 208
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Creates a new  object that is a copy of the current instance.</p>\n"
  syntax:
    content: public override ClaimsIdentity Clone()
    content.vb: Public Overrides Function Clone As ClaimsIdentity
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>A copy of the current instance.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.Clone
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.WindowsIdentity.Dispose
  commentId: M:System.Security.Principal.WindowsIdentity.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 209
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Releases all resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>Call <xref href=\"System.Security.Principal.WindowsIdentity.Dispose\" data-throw-if-not-resolved=\"false\"></xref> when you are finished using the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Security.Principal.WindowsIdentity.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method leaves the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <xref href=\"System.Security.Principal.WindowsIdentity.Dispose\" data-throw-if-not-resolved=\"false\"></xref>, you must release all references to the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> was occupying. For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method. </p>\n<p>Always call <xref href=\"System.Security.Principal.WindowsIdentity.Dispose\" data-throw-if-not-resolved=\"false\"></xref> before you release your last reference to the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  commentId: M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 210
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources. </p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong><strong></strong>method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  commentId: M:System.Security.Principal.WindowsIdentity.GetAnonymous
  id: GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAnonymous
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 211
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.</p>\n"
  remarks: "\n<p>This property returns an empty <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that enables you to treat operations as anonymous. The property value does not correspond to a Windows anonymous user and cannot be used for impersonation. Also, note that the identity returned by this property is not static; each call to <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref> returns a different anonymous identity.</p>\n<p>You can use the <xref href=\"System.Security.Principal.WindowsIdentity.IsAnonymous\" data-throw-if-not-resolved=\"false\"></xref> property to detect the return value from <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref>. However, <xref href=\"System.Security.Principal.WindowsIdentity.IsAnonymous\" data-throw-if-not-resolved=\"false\"></xref> detects both the Windows anonymous identity and the anonymous identity returned by this method. To use the latter identity, cache the <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref> return value instead of relying on the <xref href=\"System.Security.Principal.WindowsIdentity.IsAnonymous\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.GetAnonymous\" data-throw-if-not-resolved=\"false\"></xref> method to return a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents an anonymous Windows user. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#15"
  syntax:
    content: public static WindowsIdentity GetAnonymous()
    content.vb: Public Shared Function GetAnonymous As WindowsIdentity
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents an anonymous user.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent
  id: GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 212
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current Windows user.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Principal.WindowsIdentity.GetCurrent\" data-throw-if-not-resolved=\"false\"></xref> method to return a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current Windows user. This code example is part of a larger example provided for the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Principal.WindowsIdentity_AllMembers#13"
  syntax:
    content: public static WindowsIdentity GetCurrent()
    content.vb: Public Shared Function GetCurrent As WindowsIdentity
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents the current user.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  id: GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 213
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Windows identity for either the thread or the process, depending on the value of the <em>ifImpersonating</em> parameter.</p>\n"
  remarks: "\n<p>If <em>ifImpersonating</em> is <strong>true</strong> and the thread is not impersonating, the returned <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object has no value.  If <em>ifImpersonating</em> is <strong>false</strong> and the thread is impersonating, the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> for the thread is returned.  If <em>ifImpersonating</em> is <strong>false</strong> and the thread is not impersonating, the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> for the process is returned.  </p>\n"
  syntax:
    content: public static WindowsIdentity GetCurrent(bool ifImpersonating)
    content.vb: Public Shared Function GetCurrent(ifImpersonating As Boolean) As WindowsIdentity
    parameters:
    - id: ifImpersonating
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to return the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> only if the thread is currently impersonating; <strong>false</strong> to return the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>   of the thread if it is impersonating or the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> of the process if the thread is not currently impersonating.</p>\n"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents a Windows user.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  id: GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 214
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current Windows user, using the specified desired token access level.</p>\n"
  remarks: "\n<p>The <em>desiredAccess</em> parameter specifies an access mask that identifies the requested types of access to the access token. These requested access types are compared with the token's discretionary access control list (DACL) to determine which types of access are granted or denied. </p>\n"
  syntax:
    content: public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess)
    content.vb: Public Shared Function GetCurrent(desiredAccess As TokenAccessLevels) As WindowsIdentity
    parameters:
    - id: desiredAccess
      type: System.Security.Principal.TokenAccessLevels
      description: "\n<p>A bitwise combination of the enumeration values. </p>\n"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents the current user.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: RunImpersonated(SafeAccessTokenHandle, Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Action)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunImpersonated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 215
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\" data-throw-if-not-resolved=\"false\"></xref>, you can use <xref href=\"System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\" data-throw-if-not-resolved=\"false\"></xref> and provide your function directly as a parameter.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class to impersonate a user.</p>\n<p>This sample asks the user to enter a password on the console screen. The password will be visible on the screen, because the console window does not support masked input natively.</p>\n<pre><code class=\"c#\">// The following example demonstrates the use of the WindowsIdentity class to impersonate a user. \n// IMPORTANT NOTE: \n// This sample asks the user to enter a password on the console screen. \n// The password will be visible on the screen, because the console window \n// does not support masked input natively.\n\n\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Security.Principal;\nusing Microsoft.Win32.SafeHandles;\n\npublic class ImpersonationDemo\n{\n[DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\npublic static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,\nint dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);\n\npublic static void Main()\n{\n// Get the user token for the specified user, domain, and password using the \n// unmanaged LogonUser method. \n// The local machine name can be used for the domain name to impersonate a user on this machine.\nConsole.Write(\"Enter the name of the domain on which to log on: \");\nstring domainName = Console.ReadLine();\n\nConsole.Write(\"Enter the login of a user on {0} that you wish to impersonate: \", domainName);\nstring userName = Console.ReadLine();\n\nConsole.Write(\"Enter the password for {0}: \", userName);\n\nconst int LOGON32_PROVIDER_DEFAULT = 0;\n//This parameter causes LogonUser to create a primary token. \nconst int LOGON32_LOGON_INTERACTIVE = 2;\n\n// Call LogonUser to obtain a handle to an access token. \nSafeAccessTokenHandle safeAccessTokenHandle;\nbool returnValue = LogonUser(userName, domainName, Console.ReadLine(),\n    LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,\n    out safeAccessTokenHandle);\n\nif (false == returnValue)\n{\n    int ret = Marshal.GetLastWin32Error();\n    Console.WriteLine(\"LogonUser failed with error code : {0}\", ret);\n    throw new System.ComponentModel.Win32Exception(ret);\n}\n\nConsole.WriteLine(\"Did LogonUser Succeed? \" + (returnValue ? \"Yes\" : \"No\"));\n// Check the identity.\nConsole.WriteLine(\"Before impersonation: \" + WindowsIdentity.GetCurrent().Name);\n\n// Note: if you want to run as unimpersonated, pass\n//       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'\nWindowsIdentity.RunImpersonated(\n    safeAccessTokenHandle,\n    // User action\n    () =>\n    {\n        // Check the identity.\n        Console.WriteLine(\"During impersonation: \" + WindowsIdentity.GetCurrent().Name);\n    }\n    );\n\n// Check the identity again.\nConsole.WriteLine(\"After impersonation: \" + WindowsIdentity.GetCurrent().Name);\n}\n}</code></pre>\n"
  syntax:
    content: public static void RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)
    content.vb: Public Shared Sub RunImpersonated(safeAccessTokenHandle As SafeAccessTokenHandle, action As Action)
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\n"
    - id: action
      type: System.Action
      description: "\n<p>The System.Action to run. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<T>)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunImpersonated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 216
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Runs the specified function as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\" data-throw-if-not-resolved=\"false\"></xref>, you can use <xref href=\"System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\" data-throw-if-not-resolved=\"false\"></xref> and provide your function directly as a parameter.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class to impersonate a user.</p>\n<p>This sample asks the user to enter a password on the console screen. The password will be visible on the screen, because the console window does not support masked input natively.</p>\n<pre><code class=\"c#\">// The following example demonstrates the use of the WindowsIdentity class to impersonate a user. \n// IMPORTANT NOTE: \n// This sample asks the user to enter a password on the console screen. \n// The password will be visible on the screen, because the console window \n// does not support masked input natively.\n\n\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Security.Principal;\nusing Microsoft.Win32.SafeHandles;\n\npublic class ImpersonationDemo\n{\n[DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\npublic static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,\nint dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);\n\npublic static void Main()\n{\n// Get the user token for the specified user, domain, and password using the \n// unmanaged LogonUser method. \n// The local machine name can be used for the domain name to impersonate a user on this machine.\nConsole.Write(\"Enter the name of the domain on which to log on: \");\nstring domainName = Console.ReadLine();\n\nConsole.Write(\"Enter the login of a user on {0} that you wish to impersonate: \", domainName);\nstring userName = Console.ReadLine();\n\nConsole.Write(\"Enter the password for {0}: \", userName);\n\nconst int LOGON32_PROVIDER_DEFAULT = 0;\n//This parameter causes LogonUser to create a primary token. \nconst int LOGON32_LOGON_INTERACTIVE = 2;\n\n// Call LogonUser to obtain a handle to an access token. \nSafeAccessTokenHandle safeAccessTokenHandle;\nbool returnValue = LogonUser(userName, domainName, Console.ReadLine(),\n    LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,\n    out safeAccessTokenHandle);\n\nif (false == returnValue)\n{\n    int ret = Marshal.GetLastWin32Error();\n    Console.WriteLine(\"LogonUser failed with error code : {0}\", ret);\n    throw new System.ComponentModel.Win32Exception(ret);\n}\n\nConsole.WriteLine(\"Did LogonUser Succeed? \" + (returnValue ? \"Yes\" : \"No\"));\n// Check the identity.\nConsole.WriteLine(\"Before impersonation: \" + WindowsIdentity.GetCurrent().Name);\n\n// Note: if you want to run as unimpersonated, pass\n//       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'\nWindowsIdentity.RunImpersonated(\n    safeAccessTokenHandle,\n    // User action\n    () =>\n    {\n        // Check the identity.\n        Console.WriteLine(\"During impersonation: \" + WindowsIdentity.GetCurrent().Name);\n    }\n    );\n\n// Check the identity again.\nConsole.WriteLine(\"After impersonation: \" + WindowsIdentity.GetCurrent().Name);\n}\n}</code></pre>\n"
  syntax:
    content: public static T RunImpersonated<T>(SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func)
    content.vb: Public Shared Function RunImpersonated(Of T)(safeAccessTokenHandle As SafeAccessTokenHandle, func As Func(Of T)) As T
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\n"
    - id: func
      type: System.Func{{T}}
      description: "\n<p>The System.Func to run.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of object used by and returned by the function.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>Returns the result of the function.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Principal.WindowsIdentity.RunImpersonated(Of T)(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func(Of T))
  name.vb: RunImpersonated(Of T)(SafeAccessTokenHandle, Func(Of T))
references:
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
    name: AddClaim
    fullName: System.Security.Claims.ClaimsIdentity.AddClaim
  - name: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
    name: AddClaim
    fullName: System.Security.Claims.ClaimsIdentity.AddClaim
  - name: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  fullname.vb: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: AddClaims(IEnumerable(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    name: AddClaims
    fullName: System.Security.Claims.ClaimsIdentity.AddClaims
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    name: AddClaims
    fullName: System.Security.Claims.ClaimsIdentity.AddClaims
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
    name: TryRemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim
  - name: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
    name: TryRemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim
  - name: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
    name: RemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim
  - name: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
    name: RemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim
  - name: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>)
  fullname.vb: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindAll(Predicate(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
    name: FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
    name: FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
    name: FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
    name: FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>)
  fullname.vb: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: HasClaim(Predicate(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
    name: HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
    name: HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: HasClaim(String, String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
    name: HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
    name: HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>)
  fullname.vb: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindFirst(Predicate(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
    name: FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
    name: FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
    name: FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
    name: FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Security.Claims.ClaimsIdentity.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Security.Claims.ClaimsIdentity.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
    name: CreateClaim
    fullName: System.Security.Claims.ClaimsIdentity.CreateClaim
  - name: (
    fullName: (
  - uid: System.IO.BinaryReader
    name: BinaryReader
    fullName: System.IO.BinaryReader
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
    name: CreateClaim
    fullName: System.Security.Claims.ClaimsIdentity.CreateClaim
  - name: (
    fullName: (
  - uid: System.IO.BinaryReader
    name: BinaryReader
    fullName: System.IO.BinaryReader
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
    name: WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
    name: WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[])
  fullname.vb: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
    name: WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
    name: WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.Actor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
- uid: System.Security.Claims.ClaimsIdentity.Label
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.Claims
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: false
  name: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Name
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Claims.ClaimsIdentity.Clone
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.Clone
    name: Clone
    fullName: System.Security.Claims.ClaimsIdentity.Clone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.Clone
    name: Clone
    fullName: System.Security.Claims.ClaimsIdentity.Clone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.TokenAccessLevels
  parent: System.Security.Principal
  isExternal: false
  name: TokenAccessLevels
  fullName: System.Security.Principal.TokenAccessLevels
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  fullName: System.Action
- uid: System.Func{{T}}
  parent: System
  definition: System.Func`1
  name: Func<T>
  fullName: System.Func<T>
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
