items:
- uid: System.FormattableString
  commentId: T:System.FormattableString
  id: FormattableString
  parent: System
  children:
  - System.FormattableString.#ctor
  - System.FormattableString.ArgumentCount
  - System.FormattableString.Format
  - System.FormattableString.GetArgument(System.Int32)
  - System.FormattableString.GetArguments
  - System.FormattableString.Invariant(System.FormattableString)
  - System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.FormattableString.ToString
  - System.FormattableString.ToString(System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: FormattableString
  fullName: System.FormattableString
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FormattableString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a composite format string, along with the arguments to be formatted. </p>\n"
  remarks: "\n<p>A composite format string consists of fixed text intermixed with indexed placeholders, called format items, that correspond to the objects in the list. The formatting operation yields a result string that consists of the original fixed text intermixed with the string representation of the objects in the list. Composite formatting is supported by methods such as <xref href=\"System.String.Format(System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Console.WriteLine(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.  For more information on composite formatting, see Composite Formatting. </p>\n<p>A <xref href=\"System.FormattableString\" data-throw-if-not-resolved=\"false\"></xref> instance may result from the an interpolated string in C# or Visual Basic. </p>\n"
  syntax:
    content: 'public abstract class FormattableString : IFormattable'
    content.vb: >-
      Public MustInherit Class FormattableString
          Implements IFormattable
  inheritance:
  - System.Object
  implements:
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.FormattableString.#ctor
  commentId: M:System.FormattableString.#ctor
  id: '#ctor'
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: FormattableString()
  fullName: System.FormattableString.FormattableString()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 870
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Instantiates a new instance of the <xref href=\"System.FormattableString\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: protected FormattableString()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.FormattableString.ArgumentCount
  commentId: P:System.FormattableString.ArgumentCount
  id: ArgumentCount
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: ArgumentCount
  fullName: System.FormattableString.ArgumentCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArgumentCount
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the number of arguments to be formatted. </p>\n"
  remarks: "\n<p>The arguments can be retrieved from the object array returned by the <xref href=\"System.FormattableString.GetArguments\" data-throw-if-not-resolved=\"false\"></xref> method, or they can be retrieved individually by index number from the <xref href=\"System.FormattableString.GetArgument(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The indexes of individual arguments range from zero to <xref href=\"System.FormattableString.ArgumentCount\" data-throw-if-not-resolved=\"false\"></xref> â€“ 1. </p>\n"
  syntax:
    content: public abstract int ArgumentCount { get; }
    content.vb: Public MustOverride ReadOnly Property ArgumentCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.FormattableString.Format
  commentId: P:System.FormattableString.Format
  id: Format
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: Format
  fullName: System.FormattableString.Format
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the composite format string. </p>\n"
  remarks: "\n<p>A composite format string consists of zero or more runs of fixed text intermixed with one or more format items, which are indicated by an index number delimited with brackets (for example, <code>{0}</code>). The index of each format item corresponds to an argument in an object list that follows the composite format string. For example, in the following statement: </p>Formatting.Composite#9<p>the composite format string is <code>\"Name = {0}, hours = {1:hh}\"</code>. </p>"
  syntax:
    content: public abstract string Format { get; }
    content.vb: Public MustOverride ReadOnly Property Format As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.FormattableString.GetArgument(System.Int32)
  commentId: M:System.FormattableString.GetArgument(System.Int32)
  id: GetArgument(System.Int32)
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: GetArgument(Int32)
  fullName: System.FormattableString.GetArgument(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArgument
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the argument at the specified index position. </p>\n"
  syntax:
    content: public abstract object GetArgument(int index)
    content.vb: Public MustOverride Function GetArgument(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.FormattableString.GetArguments
  commentId: M:System.FormattableString.GetArguments
  id: GetArguments
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: GetArguments()
  fullName: System.FormattableString.GetArguments()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArguments
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an object array that contains one or more objects to format. </p>\n"
  remarks: "\n<p>Clients should not modify the contents of the array. </p>\n"
  syntax:
    content: public abstract object[] GetArguments()
    content.vb: Public MustOverride Function GetArguments As Object()
    return:
      type: System.Object[]
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.FormattableString.Invariant(System.FormattableString)
  commentId: M:System.FormattableString.Invariant(System.FormattableString)
  id: Invariant(System.FormattableString)
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: Invariant(FormattableString)
  fullName: System.FormattableString.Invariant(System.FormattableString)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invariant
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 65
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a result string in which arguments are formatted by using the conventions of the invariant culture. </p>\n"
  remarks: "\n<p>This static method can be imported in C# by the following statement: </p>\n<pre><code class=\"c#\">using static System.FormattableString;</code></pre>\n<p>Within the scope that <strong>import</strong> directive, an interpolated string may be formatted using the conventions of the invariant culture by code such as the following: </p>\n<pre><code class=\"c#\">Invariant($\"{{ lat = {latitude}; lon = {longitude} }}\") </code></pre>\n"
  syntax:
    content: public static string Invariant(FormattableString formattable)
    content.vb: Public Shared Function Invariant(formattable As FormattableString) As String
    parameters:
    - id: formattable
      type: System.FormattableString
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>formattable</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)
  commentId: M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: IFormattable.ToString(String, IFormatProvider)
  fullName: System.FormattableString.System.IFormattable.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IFormattable.ToString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 47
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the string that results from formatting the format string along with its arguments by using the formatting conventions of a specified culture. </p>\n"
  remarks: "\n<p>This implementation calls the derived class' <xref href=\"System.FormattableString.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation. </p>\n<p>This member is an explicit interface implementation. It can be used only when the <xref href=\"System.FormattableString\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  syntax:
    content: string IFormattable.ToString(string ignored, IFormatProvider formatProvider)
    content.vb: Function System.IFormattable.ToString(ignored As String, formatProvider As IFormatProvider) As String Implements IFormattable.ToString
    parameters:
    - id: ignored
      type: System.String
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  name.vb: System.IFormattable.ToString(String, IFormatProvider)
- uid: System.FormattableString.ToString
  commentId: M:System.FormattableString.ToString
  id: ToString
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.FormattableString.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 75
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of the current culture. </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.FormattableString.ToString(System.IFormatProvider)
  commentId: M:System.FormattableString.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.FormattableString.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 45
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of a specified culture. </p>\n"
  syntax:
    content: public abstract string ToString(IFormatProvider formatProvider)
    content.vb: Public MustOverride Function ToString(formatProvider As IFormatProvider) As String
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.FormattableString
  parent: System
  isExternal: false
  name: FormattableString
  fullName: System.FormattableString
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
