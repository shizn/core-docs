items:
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  id: DirectoryNotFoundException
  parent: System.IO
  children:
  - System.IO.DirectoryNotFoundException.#ctor
  - System.IO.DirectoryNotFoundException.#ctor(System.String)
  - System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DirectoryNotFoundException
    path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System.IO
  summary: "\n<p>The exception that is thrown when part of a file or directory cannot be found.</p>\n"
  remarks: "\n<p>\n<strong>DirectoryNotFoundException</strong> uses the HRESULT COR_E_DIRECTORYNOTFOUND which has the value 0x80070003. Note that <strong>DirectoryNotFoundException</strong> is also thrown when COM interop programs see the HRESULT STG_E_PATHNOTFOUND, which has the value 0x80030003.</p>\n<p>If your code does not have <xref href=\"System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery\" data-throw-if-not-resolved=\"false\"></xref> permission, the error message for this exception may only contain file or directory names instead of fully qualified paths.</p>\n"
  example:
  - "\n<p>The following example shows how to force and recover from a <xref href=\"System.IO.DirectoryNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>.</p>DirectoryNotFoundException#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class DirectoryNotFoundException : IOException, ISerializable, _Exception
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class DirectoryNotFoundException
          Inherits IOException
          Implements ISerializable, _Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  - System.IO.IOException
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.DirectoryNotFoundException.#ctor
  commentId: M:System.IO.DirectoryNotFoundException.#ctor
  id: '#ctor'
  parent: System.IO.DirectoryNotFoundException
  langs:
  - csharp
  - vb
  name: DirectoryNotFoundException()
  fullName: System.IO.DirectoryNotFoundException.DirectoryNotFoundException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
    startLine: 27
  assemblies:
  - System.Runtime
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.DirectoryNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> class with its message string set to a system-supplied message and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Could not find the specified directory.\" This message takes into account the current system culture.</p>\n<p>The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance is initialized to <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to call the <xref href=\"System.IO.DirectoryNotFoundException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>DirectoryNotFoundException#1"
  syntax:
    content: public DirectoryNotFoundException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryNotFoundException.#ctor(System.String)
  commentId: M:System.IO.DirectoryNotFoundException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryNotFoundException
  langs:
  - csharp
  - vb
  name: DirectoryNotFoundException(String)
  fullName: System.IO.DirectoryNotFoundException.DirectoryNotFoundException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.DirectoryNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> class with its message string set to <em>message</em> and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance using <em>message</em>.</p>\n<p>The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance is initialized to <strong>null</strong>.</p>\n"
  syntax:
    content: public DirectoryNotFoundException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)
  commentId: M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.IO.DirectoryNotFoundException
  langs:
  - csharp
  - vb
  name: DirectoryNotFoundException(String, Exception)
  fullName: System.IO.DirectoryNotFoundException.DirectoryNotFoundException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/DirectoryNotFoundException.cs
    startLine: 37
  assemblies:
  - System.Runtime
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.DirectoryNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.IO.DirectoryNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public DirectoryNotFoundException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: System.Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
