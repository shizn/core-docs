items:
- uid: System.String
  commentId: T:System.String
  id: String
  parent: System
  children:
  - System.String.#ctor(System.Char*)
  - System.String.#ctor(System.Char*,System.Int32,System.Int32)
  - System.String.#ctor(System.Char,System.Int32)
  - System.String.#ctor(System.Char[])
  - System.String.#ctor(System.Char[],System.Int32,System.Int32)
  - System.String.Chars(System.Int32)
  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  - System.String.Compare(System.String,System.String)
  - System.String.Compare(System.String,System.String,System.Boolean)
  - System.String.Compare(System.String,System.String,System.StringComparison)
  - System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  - System.String.CompareOrdinal(System.String,System.String)
  - System.String.CompareTo(System.String)
  - System.String.Concat(System.Collections.Generic.IEnumerable{System.String})
  - System.String.Concat(System.Object)
  - System.String.Concat(System.Object,System.Object)
  - System.String.Concat(System.Object,System.Object,System.Object)
  - System.String.Concat(System.Object[])
  - System.String.Concat(System.String,System.String)
  - System.String.Concat(System.String,System.String,System.String)
  - System.String.Concat(System.String,System.String,System.String,System.String)
  - System.String.Concat(System.String[])
  - System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})
  - System.String.Contains(System.String)
  - System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.String.Empty
  - System.String.EndsWith(System.String)
  - System.String.EndsWith(System.String,System.StringComparison)
  - System.String.Equals(System.Object)
  - System.String.Equals(System.String)
  - System.String.Equals(System.String,System.String)
  - System.String.Equals(System.String,System.String,System.StringComparison)
  - System.String.Equals(System.String,System.StringComparison)
  - System.String.Format(System.IFormatProvider,System.String,System.Object)
  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)
  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  - System.String.Format(System.IFormatProvider,System.String,System.Object[])
  - System.String.Format(System.String,System.Object)
  - System.String.Format(System.String,System.Object,System.Object)
  - System.String.Format(System.String,System.Object,System.Object,System.Object)
  - System.String.Format(System.String,System.Object[])
  - System.String.GetHashCode
  - System.String.IndexOf(System.Char)
  - System.String.IndexOf(System.Char,System.Int32)
  - System.String.IndexOf(System.Char,System.Int32,System.Int32)
  - System.String.IndexOf(System.String)
  - System.String.IndexOf(System.String,System.Int32)
  - System.String.IndexOf(System.String,System.Int32,System.Int32)
  - System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  - System.String.IndexOf(System.String,System.Int32,System.StringComparison)
  - System.String.IndexOf(System.String,System.StringComparison)
  - System.String.IndexOfAny(System.Char[])
  - System.String.IndexOfAny(System.Char[],System.Int32)
  - System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)
  - System.String.Insert(System.Int32,System.String)
  - System.String.IsNullOrEmpty(System.String)
  - System.String.IsNullOrWhiteSpace(System.String)
  - System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.String.Join(System.String,System.Object[])
  - System.String.Join(System.String,System.String[])
  - System.String.Join(System.String,System.String[],System.Int32,System.Int32)
  - System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  - System.String.LastIndexOf(System.Char)
  - System.String.LastIndexOf(System.Char,System.Int32)
  - System.String.LastIndexOf(System.Char,System.Int32,System.Int32)
  - System.String.LastIndexOf(System.String)
  - System.String.LastIndexOf(System.String,System.Int32)
  - System.String.LastIndexOf(System.String,System.Int32,System.Int32)
  - System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  - System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)
  - System.String.LastIndexOf(System.String,System.StringComparison)
  - System.String.LastIndexOfAny(System.Char[])
  - System.String.LastIndexOfAny(System.Char[],System.Int32)
  - System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  - System.String.Length
  - System.String.op_Equality(System.String,System.String)
  - System.String.op_Inequality(System.String,System.String)
  - System.String.PadLeft(System.Int32)
  - System.String.PadLeft(System.Int32,System.Char)
  - System.String.PadRight(System.Int32)
  - System.String.PadRight(System.Int32,System.Char)
  - System.String.Remove(System.Int32)
  - System.String.Remove(System.Int32,System.Int32)
  - System.String.Replace(System.Char,System.Char)
  - System.String.Replace(System.String,System.String)
  - System.String.Split(System.Char[])
  - System.String.Split(System.Char[],System.Int32)
  - System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)
  - System.String.Split(System.Char[],System.StringSplitOptions)
  - System.String.Split(System.String[],System.Int32,System.StringSplitOptions)
  - System.String.Split(System.String[],System.StringSplitOptions)
  - System.String.StartsWith(System.String)
  - System.String.StartsWith(System.String,System.StringComparison)
  - System.String.Substring(System.Int32)
  - System.String.Substring(System.Int32,System.Int32)
  - System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator
  - System.String.System#Collections#IEnumerable#GetEnumerator
  - System.String.System#IComparable#CompareTo(System.Object)
  - System.String.System#IConvertible#GetTypeCode
  - System.String.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.String.System#IConvertible#ToByte(System.IFormatProvider)
  - System.String.System#IConvertible#ToChar(System.IFormatProvider)
  - System.String.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.String.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.String.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.String.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.String.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.String.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.String.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.String.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.String.System#IConvertible#ToString(System.IFormatProvider)
  - System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.String.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.String.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.String.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.String.ToCharArray
  - System.String.ToCharArray(System.Int32,System.Int32)
  - System.String.ToLower
  - System.String.ToLowerInvariant
  - System.String.ToString
  - System.String.ToUpper
  - System.String.ToUpperInvariant
  - System.String.Trim
  - System.String.Trim(System.Char[])
  - System.String.TrimEnd(System.Char[])
  - System.String.TrimStart(System.Char[])
  langs:
  - csharp
  - vb
  name: String
  fullName: System.String
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: String
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1490
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents text as a sequence of UTF-16 code units.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>A string is a sequential collection of characters that is used to represent text. A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a sequential collection of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects that represent a string; a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object corresponds to a UTF-16 code unit. The value of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is the content of the sequential collection of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the Immutability and the StringBuilder class section later in this topic. The maximum size of a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object in memory is 2GB, or about 1 billion characters.</p>\n<p>In this section:</p>\n<p>Instantiating a String objectChar objects and Unicode charactersStrings and The Unicode StandardStrings and embedded null charactersStrings and indexesNull strings and empty stringsImmutability and the StringBuilder classOrdinal vs. culture-sensitive operationsNormalizationString operations by category</p>\n"
  syntax:
    content: 'public sealed class String : IEnumerable<char>, IEnumerable, IComparable, IComparable<string>, IConvertible, IEquatable<string>'
    content.vb: >-
      Public NotInheritable Class String
          Implements IEnumerable(Of Char), IEnumerable, IComparable, IComparable(Of String), IConvertible, IEquatable(Of String)
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.ICloneable
    commentId: T:System.ICloneable
  - type: System.IConvertible
    commentId: T:System.IConvertible
  - type: System.Collections.IEnumerable
    commentId: T:System.Collections.IEnumerable
  - type: System.Text.StringBuilder
    commentId: T:System.Text.StringBuilder
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{System.Char}
  - System.Collections.IEnumerable
  - System.IComparable
  - System.IComparable{System.String}
  - System.IConvertible
  - System.IEquatable{System.String}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.String.Empty
  commentId: F:System.String.Empty
  id: Empty
  parent: System.String
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.String.Empty
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1492
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the empty string. This field is read-only.</p>\n"
  remarks: "\n<p>The value of this field is the zero-length string, \"\".</p>\n<p>In application code, this field is most commonly used in assignments to initialize a string variable to an empty string. To test whether the value of a string is either <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.String.IsNullOrEmpty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public static readonly string Empty
    content.vb: Public Shared ReadOnly Empty As String
    return:
      type: System.String
  seealso:
  - type: System.String.IsNullOrEmpty(System.String)
    commentId: M:System.String.IsNullOrEmpty(System.String)
  - type: System.String.IsNullOrWhiteSpace(System.String)
    commentId: M:System.String.IsNullOrWhiteSpace(System.String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.String.#ctor(System.Char*)
  commentId: M:System.String.#ctor(System.Char*)
  id: '#ctor(System.Char*)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char*)
  fullName: System.String.String(System.Char*)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1493
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other <strong>String</strong>constructor overloads, see the <see cref=\"Overload:System.String.#ctor\"></see> constructor summary. </p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [SecurityCritical]

      public String(char *value)
    content.vb: >-
      <CLSCompliant(False)>

      <SecurityCritical>

      Public Sub New(value As Char *)
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to a null-terminated array of Unicode characters. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current process does not have read access to all the addressed characters.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> specifies an address less than 64000.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.#ctor(System.Char*,System.Int32,System.Int32)
  commentId: M:System.String.#ctor(System.Char*,System.Int32,System.Int32)
  id: '#ctor(System.Char*,System.Int32,System.Int32)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char*, Int32, Int32)
  fullName: System.String.String(System.Char*, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1496
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other <strong>String</strong> constructor overloads, see the <see cref=\"Overload:System.String.#ctor\"></see> constructor summary. </p>\n"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      [SecurityCritical]

      public String(char *value, int startIndex, int length)
    content.vb: >-
      <CLSCompliant(False)>

      <SecurityCritical>

      Public Sub New(value As Char *, startIndex As Integer, length As Integer)
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to an array of Unicode characters. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position within <em>value</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters within <em>value</em> to use. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero, <em>value</em> + <em>startIndex</em> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> + <em>startIndex</em> specifies an address less than 64000.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.#ctor(System.Char,System.Int32)
  commentId: M:System.String.#ctor(System.Char,System.Int32)
  id: '#ctor(System.Char,System.Int32)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char, Int32)
  fullName: System.String.String(System.Char, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1499
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by a specified Unicode character repeated a specified number of times.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other <strong>String</strong> constructor overloads, see the <see cref=\"Overload:System.String.#ctor\"></see> constructor summary. </p>\n"
  syntax:
    content: public String(char c, int count)
    content.vb: Public Sub New(c As Char, count As Integer)
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>A Unicode character. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times <em>c</em> occurs. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.#ctor(System.Char[])
  commentId: M:System.String.#ctor(System.Char[])
  id: '#ctor(System.Char[])'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char[])
  fullName: System.String.String(System.Char[])
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1500
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by an array of Unicode characters.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other <strong>String</strong> constructor overloads, see the <see cref=\"Overload:System.String.#ctor\"></see> constructor summary. </p>\n"
  syntax:
    content: public String(char[] value)
    content.vb: Public Sub New(value As Char())
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>An array of Unicode characters. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.String(System.Char())
  name.vb: String(Char())
- uid: System.String.#ctor(System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.#ctor(System.Char[],System.Int32,System.Int32)
  id: '#ctor(System.Char[],System.Int32,System.Int32)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char[], Int32, Int32)
  fullName: System.String.String(System.Char[], System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1501
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other <strong>String</strong> constructor overloads, see the <see cref=\"Overload:System.String.#ctor\"></see> constructor summary. </p>\n"
  syntax:
    content: public String(char[] value, int startIndex, int length)
    content.vb: Public Sub New(value As Char(), startIndex As Integer, length As Integer)
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>An array of Unicode characters. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position within <em>value</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters within <em>value</em> to use. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or- </p>\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the number of elements in <em>value</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.String(System.Char(), System.Int32, System.Int32)
  name.vb: String(Char(), Int32, Int32)
- uid: System.String.Chars(System.Int32)
  commentId: P:System.String.Chars(System.Int32)
  id: Chars(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Chars[Int32]
  fullName: System.String.Chars[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1502
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at a specified position in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <em>index</em> parameter is zero-based.</p>\n<p>This property returns the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at the position specified by the <em>index</em> parameter. However, a Unicode character might be represented by more than one <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class to work with Unicode characters instead of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. For more information, seethe \"Char Objects and Unicode Characters\" section in the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class overview.</p>\n<p>In C#, the <xref href=\"System.String.Chars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property is an indexer. In Visual Basic, it is the default property of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class. Each <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object in the string can be accessed by using code such as the following.</p>System.String.Chars#1"
  example:
  - "\n<p>The following example demonstrates how you can use this indexer in a routine to validate a string.</p>Uri_IsHexDigit#1"
  syntax:
    content: >-
      [IndexerName("Chars")]

      public char this[int index] { get; }
    content.vb: >-
      <IndexerName("Chars")>

      Public ReadOnly Property Chars(index As Integer) As Char
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>A position in the current string. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The object at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is greater than or equal to the length of this object or less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.GetEnumerator
    commentId: M:System.String.GetEnumerator
  - type: System.Int32
    commentId: T:System.Int32
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Chars
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.String.Chars(System.Int32)
  name.vb: Chars(Int32)
- uid: System.String.Length
  commentId: P:System.String.Length
  id: Length
  parent: System.String
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.String.Length
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1504
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the number of characters in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property returns the number of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class to work with each Unicode character instead of each <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings \"abc\" and \"def\" are separated by a null character. The <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</p>System.String.Class#1"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property.</p>string.length#1"
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of characters in the current string.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32, Int32)
  fullName: System.String.Compare(System.String, System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1505
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares substrings of two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects and returns an integer that indicates their relative position in the sort order.</p>\n"
  remarks: "\n<p>The substrings to compare start in <em>strA</em> at <em>indexA</em> and in <em>strB</em> at <em>indexB</em>. Both <em>indexA</em> and <em>indexB</em> are zero-based; that is, the first character in <em>strA</em> and <em>strB</em> is at position zero. The length of the first substring is equal to the length of <em>strA</em> minus <em>indexA</em> plus one. The length of the second substring is equal to the length of <em>strB</em> minus <em>indexB</em> plus one. </p>\n<p>The number of characters to compare is the lesser of the lengths of the two substrings, and <em>length</em>. The <em>indexA</em>, <em>indexB</em>, and <em>length</em> parameters must be nonnegative.</p>\n<p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</p>\n<p>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When comparing strings, you should call the <xref href=\"System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see Best Practices for Using Strings in the .NET Framework.</p>\n<p>One or both comparands can be <strong>null</strong>. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.</p>\n<p>The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n<p>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".</p>System.String.Compare#2<p>Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:</p>System.String.Compare#3"
  example:
  - "\n<p>The following example compares two substrings.</p>string.compare3#1"
  syntax:
    content: public static int Compare(string strA, int indexA, string strB, int indexB, int length)
    content.vb: Public Shared Function Compare(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to use in the comparison. </p>\n"
    - id: indexA
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strA</em>. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to use in the comparison. </p>\n"
    - id: indexB
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strB</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters in the substrings to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The substrings occur in the same position in the sort order, or <em>length</em> is zero. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> follows the substring in <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>indexA</em> is greater than <em>strA</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexB</em> is greater than <em>strB</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\n<p>-or-</p>\n<p>Either <em>indexA</em> or <em>indexB</em> is <strong>null</strong>, and <em>length</em> is greater than zero.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32, Int32, StringComparison)
  fullName: System.String.Compare(System.String, System.Int32, System.String, System.Int32, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1506
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares substrings of two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order. </p>\n"
  remarks: "\n<p>The substrings to compare start in <em>strA</em> at <em>indexA</em> and in <em>strB</em> at <em>indexB</em>. Both <em>indexA</em> and <em>indexB</em> are zero-based; that is, the first character in <em>strA</em> and <em>strB</em> is at position zero, not position one. The length of the first substring is equal to the length of <em>strA</em> minus <em>indexA</em> plus one. The length of the second substring is equal to the length of <em>strB</em> minus <em>indexB</em> plus one.</p>\n<p>The number of characters to compare is the lesser of the lengths of the two substrings, and <em>length</em>. The <em>indexA</em>, <em>indexB</em>, and <em>length</em> parameters must be nonnegative.</p>\n<p>The <em>comparisonType</em> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</p>\n<p>One or both comparands can be <strong>null</strong>. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.</p>\n<p>The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n<p>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".</p>System.String.Compare#8<p>Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:</p>System.String.Compare#9"
  example:
  - "\n<p>The following example compares two substrings.</p>string.compare3#1"
  syntax:
    content: public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType)
    content.vb: Public Shared Function Compare(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to use in the comparison. </p>\n"
    - id: indexA
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strA</em>. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to use in the comparison.</p>\n"
    - id: indexB
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strB</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters in the substrings to compare. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules to use in the comparison. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order.</p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The substrings occur in the same position in the sort order, or the <em>length</em> parameter is zero. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> follllows the substring in <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>indexA</em> is greater than <em>strA</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexB</em> is greater than <em>strB</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\n<p>-or-</p>\n<p>Either <em>indexA</em> or <em>indexB</em> is <strong>null</strong>, and <em>length</em> is greater than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Compare(System.String,System.String)
  commentId: M:System.String.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  fullName: System.String.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1507
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects and returns an integer that indicates their relative position in the sort order.</p>\n"
  remarks: "\n<p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</p>\n<p>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When comparing strings, you should call the<xref href=\"System.String.Compare(System.String,System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see Best Practices for Using Strings in the .NET Framework.</p>\n<p>One or both comparands can be <strong>null</strong>. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.</p>\n<p>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n<p>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".</p>System.String.Compare#10<p>Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:</p>System.String.Compare#11"
  example:
  - "\n<p>The following example calls the <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to compare three sets of strings. </p>System.String.Compare#18"
  - "\n<p>In the following example, the <strong>ReverseStringComparer</strong> class demonstrates how you can evaluate two strings with the <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>ArrayList#7"
  syntax:
    content: public static int Compare(string strA, string strB)
    content.vb: Public Shared Function Compare(strA As String, strB As String) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Compare(System.String,System.String,System.Boolean)
  commentId: M:System.String.Compare(System.String,System.String,System.Boolean)
  id: Compare(System.String,System.String,System.Boolean)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, String, Boolean)
  fullName: System.String.Compare(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1508
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n"
  remarks: "\n<p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</p>\n<p>The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When comparing strings, you should call the <xref href=\"System.String.Compare(System.String,System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see Best Practices for Using Strings in the .NET Framework.</p>\n<p>One or both comparands can be <strong>null</strong>. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.</p>\n<p>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n<p>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".</p>System.String.Compare#12<p>Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:</p>System.String.Compare#13"
  example:
  - "\n<p>The following example demonstrates that the <xref href=\"System.String.Compare(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to using <xref href=\"System.String.ToUpper\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.String.ToLower\" data-throw-if-not-resolved=\"false\"></xref> when comparing strings.</p>System.String.Compare#18"
  syntax:
    content: public static int Compare(string strA, string strB, bool ignoreCase)
    content.vb: Public Shared Function Compare(strA As String, strB As String, ignoreCase As Boolean) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore case during the comparison; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Compare(System.String,System.String,System.StringComparison)
  commentId: M:System.String.Compare(System.String,System.String,System.StringComparison)
  id: Compare(System.String,System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, String, StringComparison)
  fullName: System.String.Compare(System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1509
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n"
  remarks: "\n<p>The <em>comparisonType</em> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</p>\n<p>One or both comparands can be <strong>null</strong>. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.</p>\n<p>The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n<p>Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".</p>System.String.Compare#16<p>Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:</p>System.String.Compare#17"
  example:
  - "\n<p>The following example compares three versions of the letter \"I\". The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</p>System.String.CompareCmp#1"
  syntax:
    content: public static int Compare(string strA, string strB, StringComparison comparisonType)
    content.vb: Public Shared Function Compare(strA As String, strB As String, comparisonType As StringComparison) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare.</p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules to use in the comparison. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> is in the same position as <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> is not supported.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  id: CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CompareOrdinal(String, Int32, String, Int32, Int32)
  fullName: System.String.CompareOrdinal(System.String, System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareOrdinal
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1510
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares substrings of two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in each substring. </p>\n"
  remarks: "\n<p>The <em>indexA</em>, <em>indexB</em>, and <em>length</em> parameters must be nonnegative.</p>\n<p>The number of characters compared is the lesser of the length of <em>strA</em> less <em>indexA</em>, the length of <em>strB</em> less <em>indexB</em>, and <em>length</em>.</p>\n<p>This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>. To perform a case-insensitive comparison using ordinal sort rules, call the<xref href=\"System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref>method with the <em>comparisonType</em> argument set to<xref href=\"System.StringComparison.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Because <xref href=\"System.String.CompareOrdinal(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> is a static method, <em>strA</em> and <em>strB</em> can be <strong>null</strong>. If both values are <strong>null</strong>, the method returns 0 (zero), which indicates that <em>strA</em> and <em>strB</em> are equal. If only one of the values is <strong>null</strong>, the method considers the non-null value to be greater. </p>\n"
  example:
  - "\n<p>This following example demonstrates that <xref href=\"System.String.CompareOrdinal(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> use different sort orders.</p>StringCompareOrdinal#1"
  syntax:
    content: public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length)
    content.vb: Public Shared Function CompareOrdinal(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to use in the comparison. </p>\n"
    - id: indexA
      type: System.Int32
      description: "\n<p>The starting index of the substring in <em>strA</em>. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to use in the comparison. </p>\n"
    - id: indexB
      type: System.Int32
      description: "\n<p>The starting index of the substring in <em>strB</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters in the substrings to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value</p>\n<p>Condition</p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> is less than the substring in <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The substrings are equal, or <em>length</em> is zero. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> is greater than the substring in <em>strB</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>strA</em> is not <strong>null</strong> and <em>indexA</em> is greater than <em>strA</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>strB</em> is not <strong>null</strong> and<em>indexB</em> is greater than <em>strB</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\n"
  seealso:
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.CompareOrdinal(System.String,System.String)
  commentId: M:System.String.CompareOrdinal(System.String,System.String)
  id: CompareOrdinal(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CompareOrdinal(String, String)
  fullName: System.String.CompareOrdinal(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareOrdinal
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1511
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in each string.</p>\n"
  remarks: "\n<p>This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>. To perform a case-insensitive comparison using ordinal sort rules, call the <xref href=\"System.String.Compare(System.String,System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>comparisonType</em> argument set to <xref href=\"System.StringComparison.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Because <xref href=\"System.String.CompareOrdinal(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>is a static method, <em>strA</em> and <em>strB</em> can be <strong>null</strong>. If both values are <strong>null</strong>, the method returns 0 (zero), which indicates that <em>strA</em> and <em>strB</em> are equal. If only one of the values is <strong>null</strong>, the method considers the non-null value to be greater.</p>\n"
  example:
  - "\n<p>The following example performs and ordinal comparison of two strings that only differ in case.</p>string.compareordinal#1"
  syntax:
    content: public static int CompareOrdinal(string strA, string strB)
    content.vb: Public Shared Function CompareOrdinal(strA As String, strB As String) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value</p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> is less than <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> and <em>strB</em> are equal. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> is greater than <em>strB</em>. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.CompareTo(System.String)
  commentId: M:System.String.CompareTo(System.String)
  id: CompareTo(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CompareTo(String)
  fullName: System.String.CompareTo(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1512
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance with a specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string. </p>\n"
  remarks: "\n<p>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.String.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <see cref=\"Overload:System.String.Equals\"></see> method.</p>\n<p>For more information about the behavior of this method, see the Remarks section of the <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and performs slightly better than the <xref href=\"System.String.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, because it does not have to determine whether the <em>strB</em> argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>to a<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.String.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to compare the current string instance with another string. </p>stringcompareto#1<p>The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</p>T.CompareTo#1"
  syntax:
    content: public int CompareTo(string strB)
    content.vb: Public Function CompareTo(strB As String) As Integer
    parameters:
    - id: strB
      type: System.String
      description: "\n<p>The string to compare with this instance. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <em>strB</em> parameter.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance precedes <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance has the same position in the sort order as <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance follows <em>strB</em>.</p>\n<p>-or- </p>\n<p>\n<em>strB</em> is <strong>null</strong>. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  implements:
  - System.IComparable{System.String}.CompareTo(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Concat(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})
  id: Concat(System.Collections.Generic.IEnumerable{System.String})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(IEnumerable<String>)
  fullName: System.String.Concat(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1513
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The method concatenates each object in <em>values</em>; it does not add any delimiters. To specify a delimiter between each member of <em>values</em>, call the <xref href=\"System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>An <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string is used in place of any null element in <em>values</em>.</p>\n<p>If <em>values</em> is an empty <strong>IEnumerable(Of String)</strong>, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>values</em> is <strong>null</strong>, the method throws an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> exception.</p>\n<p>\n<xref href=\"System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that lets you concatenate each element in an <strong>IEnumerable(Of String)</strong> collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a <strong>List(Of String)</strong> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\"). The <strong>IEnumerable(Of String)</strong> collection that is returned by the <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method is passed to the <xref href=\"System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method to display the result as a single string. </p>System.String.Concat#3"
  example:
  - "\n<p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, which it then passes to the <xref href=\"System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.Concat#2"
  syntax:
    content: public static string Concat(IEnumerable<string> values)
    content.vb: Public Shared Function Concat(values As IEnumerable(Of String)) As String
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\n<p>A collection object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and whose generic type argument is <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated strings in <em>values</em>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>values</em> is an empty <strong>IEnumerable(Of String)</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Concat(IEnumerable(Of String))
- uid: System.String.Concat(System.Object)
  commentId: M:System.String.Concat(System.Object)
  id: Concat(System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object)
  fullName: System.String.Concat(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1514
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates the string  representation of a specified object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.Concat(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method represents <em>arg0</em> as a string by calling its parameterless <strong>ToString</strong> method.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Concat(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>string.concat5#1"
  syntax:
    content: public static string Concat(object arg0)
    content.vb: Public Shared Function Concat(arg0 As Object) As String
    parameters:
    - id: arg0
      type: System.Object
      description: "\n<p>The object to represent, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of <em>arg0</em>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>arg0</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Concat(System.Object,System.Object)
  commentId: M:System.String.Concat(System.Object,System.Object)
  id: Concat(System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object, Object)
  fullName: System.String.Concat(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1515
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the string representations of two specified objects.</p>\n"
  remarks: "\n<p>The method concatenates <em>arg0</em> and <em>arg1</em>by calling the parameterless <strong>ToString</strong> method of <em>arg0</em> and <em>arg1</em>; it does not add any delimiters.</p>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> is used in place of any null argument.</p>\n<p>If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, \"System.String[]\").</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Concat(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>string.concat5#1"
  syntax:
    content: public static string Concat(object arg0, object arg1)
    content.vb: Public Shared Function Concat(arg0 As Object, arg1 As Object) As String
    parameters:
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to concatenate. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated string representations of the values of <em>arg0</em> and <em>arg1</em>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Concat(System.Object,System.Object,System.Object)
  commentId: M:System.String.Concat(System.Object,System.Object,System.Object)
  id: Concat(System.Object,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object, Object, Object)
  fullName: System.String.Concat(System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1516
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the string representations of three specified objects.</p>\n"
  remarks: "\n<p>The method concatenates <em>arg0</em>, <em>arg1</em>, and <em>arg2</em> by calling the parameterless <strong>ToString</strong> method of each object; it does not add any delimiters.</p>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> is used in place of any null argument.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Concat(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>string.concat5#1"
  syntax:
    content: public static string Concat(object arg0, object arg1, object arg2)
    content.vb: Public Shared Function Concat(arg0 As Object, arg1 As Object, arg2 As Object) As String
    parameters:
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to concatenate. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to concatenate. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated string representations of the values of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Concat(System.Object[])
  commentId: M:System.String.Concat(System.Object[])
  id: Concat(System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object[])
  fullName: System.String.Concat(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1517
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the string representations of the elements in a specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  remarks: "\n<p>The method concatenates each object in <em>args</em> by calling the parameterless <strong>ToString</strong> method of that object; it does not add any delimiters.</p>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> is used in place of any null object in the array.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.String.Concat(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method with an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array.</p>stringconcat1#1"
  syntax:
    content: public static string Concat(params object[] args)
    content.vb: Public Shared Function Concat(ParamArray args As Object()) As String
    parameters:
    - id: args
      type: System.Object[]
      description: "\n<p>An object array that contains the elements to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated string representations of the values of the elements in <em>args</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(System.Object())
  name.vb: Concat(Object())
- uid: System.String.Concat(System.String,System.String)
  commentId: M:System.String.Concat(System.String,System.String)
  id: Concat(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String, String)
  fullName: System.String.Concat(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1518
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates two specified instances of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The method concatenates <em>str0</em> and <em>str1</em>; it does not add any delimiters.</p>\n<p>You can also use your language's string concatenation operator, such as <strong>+</strong> in C#, or <strong>&</strong> and <strong>+</strong> in Visual Basic)</p>\n<p>, to concatenate strings.</p>\n<p>An <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string is used in place of any null argument.</p>\n"
  example:
  - "\n<p>The following example concatenates a person's first, middle, and last name.</p>stringconcat4#1"
  syntax:
    content: public static string Concat(string str0, string str1)
    content.vb: Public Shared Function Concat(str0 As String, str1 As String) As String
    parameters:
    - id: str0
      type: System.String
      description: "\n<p>The first string to concatenate. </p>\n"
    - id: str1
      type: System.String
      description: "\n<p>The second string to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenation of <em>str0</em> and <em>str1</em>.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Concat(System.String,System.String,System.String)
  commentId: M:System.String.Concat(System.String,System.String,System.String)
  id: Concat(System.String,System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String, String, String)
  fullName: System.String.Concat(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1519
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates three specified instances of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The method concatenates <em>str0</em>, <em>str1</em>, and <em>str2</em>; it does not add any delimiters.</p>\n<p>You can also use your language's string concatenation operator, such as <strong>+</strong> in C#, or <strong>&</strong> and <strong>+</strong> in Visual Basic)</p>\n<p>, to concatenate strings.</p>\n<p>An <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string is used in place of any null argument.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.String.Concat(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to concatenate three strings and displays the result. </p>System.String.Concat#6"
  syntax:
    content: public static string Concat(string str0, string str1, string str2)
    content.vb: Public Shared Function Concat(str0 As String, str1 As String, str2 As String) As String
    parameters:
    - id: str0
      type: System.String
      description: "\n<p>The first string to concatenate. </p>\n"
    - id: str1
      type: System.String
      description: "\n<p>The second string to concatenate. </p>\n"
    - id: str2
      type: System.String
      description: "\n<p>The third string to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenation of <em>str0</em>, <em>str1</em>, and <em>str2</em>.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Concat(System.String,System.String,System.String,System.String)
  commentId: M:System.String.Concat(System.String,System.String,System.String,System.String)
  id: Concat(System.String,System.String,System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String, String, String, String)
  fullName: System.String.Concat(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1520
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates four specified instances of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The method concatenates <em>str0</em>, <em>str1</em>, <em>str2</em>, and <em>str3</em>; it does not add any delimiters.</p>\n<p>You can also use your language's string concatenation operator, such as <strong>+</strong> in C#, or <strong>&</strong> and <strong>+</strong> in Visual Basic)</p>\n<p>, to concatenate strings.</p>\n<p>An <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string is used in place of any null object in the array.</p>\n"
  example:
  - "\n<p>The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them. It then calls the <xref href=\"System.String.Concat(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to reassemble the scrambled words.</p>System.String.Concat#1"
  syntax:
    content: public static string Concat(string str0, string str1, string str2, string str3)
    content.vb: Public Shared Function Concat(str0 As String, str1 As String, str2 As String, str3 As String) As String
    parameters:
    - id: str0
      type: System.String
      description: "\n<p>The first string to concatenate. </p>\n"
    - id: str1
      type: System.String
      description: "\n<p>The second string to concatenate. </p>\n"
    - id: str2
      type: System.String
      description: "\n<p>The third string to concatenate. </p>\n"
    - id: str3
      type: System.String
      description: "\n<p>The fourth string to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenation of <em>str0</em>, <em>str1</em>, <em>str2</em>, and <em>str3</em>.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Concat(System.String[])
  commentId: M:System.String.Concat(System.String[])
  id: Concat(System.String[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String[])
  fullName: System.String.Concat(System.String[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1521
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the elements of a specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  remarks: "\n<p>The method concatenates each object in <em>values</em>; it does not add any delimiters.</p>\n<p>An <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string is used in place of any null object in the array.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.String.Concat(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method with a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> array.</p>stringconcat3#1"
  syntax:
    content: public static string Concat(params string[] values)
    content.vb: Public Shared Function Concat(ParamArray values As String()) As String
    parameters:
    - id: values
      type: System.String[]
      description: "\n<p>An array of string instances. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated elements of <em>values</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(System.String())
  name.vb: Concat(String())
- uid: System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat<T>(IEnumerable<T>)
  fullName: System.String.Concat<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1522
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n"
  remarks: "\n<p>The method concatenates each object in <em>values</em>; it does not add any delimiters.</p>\n<p>An <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string is used in place of any null argument.</p>\n<p>\n<xref href=\"System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that lets you concatenate each element in an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection without first converting the elements to strings. It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates. The string representation of each object in the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection is derived by calling that object's <strong>ToString</strong> method. </p>\n"
  example:
  - "\n<p>The following example defines a very simple <code>Animal</code> class that contains the name of an animal and the order to which it belongs. It then defines a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object to contain a number of <code>Animal</code> objects. The <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> extension method is called to extract the <code>Animal</code> objects whose <code>Order</code> property equals \"Rodent\". The result is passed to the <xref href=\"System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method and displayed to the console.</p>System.String.Concat#4"
  syntax:
    content: public static string Concat<T>(IEnumerable<T> values)
    content.vb: Public Shared Function Concat(Of T)(values As IEnumerable(Of T)) As String
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection object that implements the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the members of <em>values</em>.</p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated members in <em>values</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Concat(Of T)(IEnumerable(Of T))
- uid: System.String.Contains(System.String)
  commentId: M:System.String.Contains(System.String)
  id: Contains(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Contains(String)
  fullName: System.String.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1523
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether a specified substring occurs within this string.</p>\n"
  remarks: "\n<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</p>\n<p>To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> extension method  that includes a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</p>System.String.Contains#1<p>The following example then calls the <code>Contains</code> extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison. </p>System.String.Contains#2<p>If you are interested in the position of the substring <em>value</em> in the current instance, you can call the <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to get the starting position of its first occurrence, or you can call the <xref href=\"System.String.LastIndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to get the starting position of its last occurrence. The example includes a call to the <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method if a substring is found in a string instance. </p>"
  example:
  - "\n<p>The following example determines whether the string \"fox\" is a substring of a familiar quotation. If \"fox\" is found in the string, it also displays its starting position. </p>String.Contains#1"
  syntax:
    content: public bool Contains(string value)
    content.vb: Public Function Contains(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter occurs within this string, or if <em>value</em> is the empty string (\"\"); otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.String)
    commentId: M:System.String.LastIndexOf(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, Char[], Int32, Int32)
  fullName: System.String.CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1524
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</p>\n"
  remarks: "\n<p>This method copies <em>count</em> characters from the <em>sourceIndex</em> position of this instance to the <em>destinationIndex</em> position of <em>destination</em> character array. This method does not resize the <em>destination</em> character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>\n<em>sourceIndex</em> and <em>destinationIndex</em> are zero-based.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>stringcopyto#1"
  syntax:
    content: public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
    content.vb: Public Sub CopyTo(sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)
    parameters:
    - id: sourceIndex
      type: System.Int32
      description: "\n<p>The index of the first character in this instance to copy. </p>\n"
    - id: destination
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to which characters in this instance are copied. </p>\n"
    - id: destinationIndex
      type: System.Int32
      description: "\n<p>The index in <em>destination</em> at which the copy operation begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters in this instance to copy to <em>destination</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em> is negative </p>\n<p>-or- </p>\n<p>\n<em>sourceIndex</em> does not identify a position in the current instance. </p>\n<p>-or-</p>\n<p>\n<em>destinationIndex</em> does not identify a valid index in the <em>destination</em> array. </p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of the substring from <em>startIndex</em> to the end of this instance </p>\n<p>-or- </p>\n<p>\n<em>count</em> is greater than the length of the subarray from <em>destinationIndex</em> to the end of the <em>destination</em> array. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.CopyTo(System.Int32, System.Char(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Char(), Int32, Int32)
- uid: System.String.EndsWith(System.String)
  commentId: M:System.String.EndsWith(System.String)
  id: EndsWith(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: EndsWith(String)
  fullName: System.String.EndsWith(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndsWith
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1525
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the end of this string instance matches the specified string.</p>\n"
  remarks: "\n<p>This method compares <em>value</em> to the substring at the end of this instance that is the same length as <em>value</em>, and returns an indication whether they are equal. To be equal, <em>value</em> must be a reference to this same instance or match the end of this instance.</p>\n<p>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</p>\n"
  example:
  - "\n<p>The following example indicates whether each string in an array ends with a period (\".\"). </p>System.String.EndsWith#1"
  - "\n<p>The following example defines a <code>StripEndTags</code> method that uses the <xref href=\"System.String.EndsWith(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to remove HTML end tags from the end of a line. Note that the  <code>StripEndTags</code> method is called recursively to ensure that multiple HTML end tags at the end of the line are removed. </p>stringendswith#1"
  syntax:
    content: public bool EndsWith(string value)
    content.vb: Public Function EndsWith(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to the substring at the end of this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> matches the end of this instance; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.StartsWith(System.String)
    commentId: M:System.String.StartsWith(System.String)
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.EndsWith(System.String,System.StringComparison)
  commentId: M:System.String.EndsWith(System.String,System.StringComparison)
  id: EndsWith(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: EndsWith(String, StringComparison)
  fullName: System.String.EndsWith(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndsWith
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1526
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.EndsWith(System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method compares the <em>value</em> parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, <em>value</em> must be a reference to this same string, must be the empty string (\"\"), or must match the end of this string. The type of comparison performed by the <xref href=\"System.String.EndsWith(System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method depends on the value of the <em>comparisonType</em>parameter.</p>\n"
  example:
  - "\n<p>The following example determines whether a string ends with a particular substring. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</p>System.String.EndsWithCmp#1"
  syntax:
    content: public bool EndsWith(string value, StringComparison comparisonType)
    content.vb: Public Function EndsWith(value As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to the substring at the end of this instance. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter matches the end of this string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.StringComparison
    commentId: T:System.StringComparison
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Equals(System.Object)
  commentId: M:System.String.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.String.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1527
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this instance and a specified object, which must also be a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object, have the same value.</p>\n"
  remarks: "\n<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>string.equals#1"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The string to compare to this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and its value is the same as this instance; otherwise, <strong>false</strong>.  If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.String.Equals(System.String)
  commentId: M:System.String.Equals(System.String)
  id: Equals(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String)
  fullName: System.String.Equals(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1528
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this instance and another specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object have the same value.</p>\n"
  remarks: "\n<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.It compares the title-cased word \"File\" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069). Because the <xref href=\"System.String.Equals(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method performs an ordinal comparison, only the comparison with an identical word returns <code>true</code>.</p>System.String.Equals#2"
  syntax:
    content: public bool Equals(string value)
    content.vb: Public Function Equals(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as the value of this instance; otherwise, <strong>false</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  implements:
  - System.IEquatable{System.String}.Equals(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Equals(System.String,System.String)
  commentId: M:System.String.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String, String)
  fullName: System.String.Equals(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1529
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects have the same value.</p>\n"
  remarks: "\n<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>string.equals#1"
  syntax:
    content: public static bool Equals(string a, string b)
    content.vb: Public Shared Function Equals(a As String, b As String) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>. If both <em>a</em> and <em>b</em> are <strong>null</strong>, the method returns <strong>true</strong>.</p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Equals(System.String,System.String,System.StringComparison)
  commentId: M:System.String.Equals(System.String,System.String,System.StringComparison)
  id: Equals(System.String,System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String, String, StringComparison)
  fullName: System.String.Equals(System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1530
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n"
  remarks: "\n<p>The <em>comparisonType</em> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</p>\n"
  example:
  - "\n<p>The following example compares four sets of words by using each member of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration.  The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures. Note that the strings \"encyclopædia\" and \"encyclopedia\" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</p>System.String.Equals#3"
  syntax:
    content: public static bool Equals(string a, string b, StringComparison comparisonType)
    content.vb: Public Shared Function Equals(a As String, b As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the comparison. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <em>a</em> parameter is equal to the value of the <em>b</em> parameter; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Equals(System.String,System.StringComparison)
  commentId: M:System.String.Equals(System.String,System.StringComparison)
  id: Equals(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String, StringComparison)
  fullName: System.String.Equals(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1531
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this string and a specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n"
  remarks: "\n<p>The <em>comparisonType</em> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</p>\n"
  example:
  - "\n<p>The following example creates a string array that consists of an uppercase \"I\", a lowercase \"i\", and a dotless \"ı\". It then calls the <xref href=\"System.String.Equals(System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method to compare them by using each possible <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration value. </p>System.String.Equals#1"
  - "\n<p>The following example compares four sets of words by using each member of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration.  The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures. Note that the strings \"encyclopædia\" and \"encyclopedia\" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture. </p>System.String.Equals#4"
  syntax:
    content: public bool Equals(string value, StringComparison comparisonType)
    content.vb: Public Function Equals(value As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to this instance.</p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies how the strings will be compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as this string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object)
  id: Format(System.IFormatProvider,System.String,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object)
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1532
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information. </p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, object arg0)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format item or items have been replaced by the string representation of <em>arg0</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>arg0</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to one. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)
  id: Format(System.IFormatProvider,System.String,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object, Object)
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1533
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, object arg0, object arg1)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em>, <em>arg0</em>, or <em>arg1</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to two. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  id: Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object, Object, Object)
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1534
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information. </p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em>, <em>arg0</em>, <em>arg1</em>, or <em>arg2</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to three. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object[])
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object[])
  id: Format(System.IFormatProvider,System.String,System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object[])
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1535
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, params object[] args)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, ParamArray args As Object()) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An object array that contains zero or more objects to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array. </p>\n"
  seealso:
  - type: System.Globalization.DateTimeFormatInfo
    commentId: T:System.Globalization.DateTimeFormatInfo
  - type: System.ICustomFormatter
    commentId: T:System.ICustomFormatter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  - type: System.Globalization.NumberFormatInfo
    commentId: T:System.Globalization.NumberFormatInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Format(System.IFormatProvider, System.String, System.Object())
  name.vb: Format(IFormatProvider, String, Object())
- uid: System.String.Format(System.String,System.Object)
  commentId: M:System.String.Format(System.String,System.Object)
  id: Format(System.String,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object)
  fullName: System.String.Format(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1536
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces one or more format items in a specified string with the string representation of a specified object.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(string format, object arg0)
    content.vb: Public Shared Function Format(format As String, arg0 As Object) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which any format items are replaced by the string representation of <em>arg0</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format item in <em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is not zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Format(System.String,System.Object,System.Object)
  commentId: M:System.String.Format(System.String,System.Object,System.Object)
  id: Format(System.String,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object, Object)
  fullName: System.String.Format(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1537
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of two specified objects.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(string format, object arg0, object arg1)
    content.vb: Public Shared Function Format(format As String, arg0 As Object, arg1 As Object) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is not zero or one. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Format(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.String.Format(System.String,System.Object,System.Object,System.Object)
  id: Format(System.String,System.Object,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object, Object, Object)
  fullName: System.String.Format(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1538
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of three specified objects.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(string format, object arg0, object arg1, object arg2)
    content.vb: Public Shared Function Format(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string.</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than two. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Format(System.String,System.Object[])
  commentId: M:System.String.Format(System.String,System.Object[])
  id: Format(System.String,System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object[])
  fullName: System.String.Format(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1539
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</p>\n"
  remarks: "\n<p>For examples and comprehensive usage information about this and other overloads of the <strong>Format</strong> method, see the <see cref=\"Overload:System.String.Format\"></see> overload summary. </p>\n"
  syntax:
    content: public static string Format(string format, params object[] args)
    content.vb: Public Shared Function Format(format As String, ParamArray args As Object()) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An object array that contains zero or more objects to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Format(System.String, System.Object())
  name.vb: Format(String, Object())
- uid: System.String.GetHashCode
  commentId: M:System.String.GetHashCode
  id: GetHashCode
  parent: System.String
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.String.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1540
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this string.</p>\n"
  remarks: "\n<p>The behavior of <xref href=\"System.String.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of <xref href=\"System.String.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If two string objects are equal, the <xref href=\"System.String.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code. </p>\n<p>The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain. </p>\n<p>As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted. </p>\n<p>Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>For more information about hash codes, see <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In desktop apps, you can use the \n<UseRandomizedStringHashAlgorithm> element to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the \n      <UseRandomizedStringHashAlgorithm> element. It defines a  to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the . It defines a <code>DisplayString</code> class that includes a private string constant, <code>s</code>, whose value is \"This is a string.\" It also includes a <code>ShowStringHashCode</code> method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</p>System.String.GetHashCode#2<p>When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains. </p><pre><code>String 'This is a string.' in domain 'PerDomain.exe': 941BCEAC\nString 'This is a string.' in domain 'NewDomain': 941BCEAC</code></pre><p>However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain. </p><pre><code><?xml version =\"1.0\"?>\n<configuration>\n   <runtime>\n      <UseRandomizedStringHashAlgorithm enabled=\"1\" />\n   </runtime>\n</configuration></code></pre><p>When the configuration file is present, the example displays the following output: </p><pre><code>String 'This is a string.' in domain 'PerDomain.exe': 5435776D\nString 'This is a string.' in domain 'NewDomain': 75CC8236</code></pre><p>Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</p><p>For additional information about the use of hash codes and the <strong>GetHashCode</strong> method, see <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method using various input strings.</p>system.string.gethashcode#1"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.String.IndexOf(System.Char)
  commentId: M:System.String.IndexOf(System.Char)
  id: IndexOf(System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(Char)
  fullName: System.String.IndexOf(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1541
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example demonstrates how you can search a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> for a character using the <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.IndexOf#5"
  syntax:
    content: public int IndexOf(char value)
    content.vb: Public Function IndexOf(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A Unicode character to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.Char,System.Int32)
  commentId: M:System.String.IndexOf(System.Char,System.Int32)
  id: IndexOf(System.Char,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32)
  fullName: System.String.IndexOf(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1542
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</p>\n"
  remarks: "\n<p>Index numbering starts from 0. The <em>startIndex</em> parameter can range from 0 to the length of the string instance. If <em>startIndex</em> equals the length of the string instance, the method returns -1.</p>\n<p>The search ranges from <em>startIndex</em> to the end of the string.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>string.indexof1#1"
  syntax:
    content: public int IndexOf(char value, int startIndex)
    content.vb: Public Function IndexOf(value As Char, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than 0 (zero) or greater than the length of the string. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.Char,System.Int32,System.Int32)
  commentId: M:System.String.IndexOf(System.Char,System.Int32,System.Int32)
  id: IndexOf(System.Char,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32, Int32)
  fullName: System.String.IndexOf(System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1543
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n"
  remarks: "\n<p>The search begins at <em>startIndex</em> and continues to <em>startIndex</em> + <em>count</em> -1. The character at <em>startIndex</em> + <em>count</em> is not included in the search.</p>\n<p>Index numbering starts from 0 (zero). The <em>startIndex</em> parameter can range from 0 to the length of the string instance.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>system.string.indexof#1"
  syntax:
    content: public int IndexOf(char value, int startIndex, int count)
    content.vb: Public Function IndexOf(value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the length of this string.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.String)
  commentId: M:System.String.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String)
  fullName: System.String.IndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1544
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.</p>\n<p>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <em>value</em> contains an ignorable character, the result is equivalent to searching with that character removed. If <em>value</em> consists only of one or more ignorable characters, the<xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance. In the following example, the <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <em>value</em>. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</p>System.String.IndexOf#21"
  example:
  - "\n<p>The following example searches for the \"n\" in \"animal\". Because string indexes begin at zero rather than one, the <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method indicates that the \"n\" is at position 1. </p>System.String.IndexOf#12"
  - "\n<p>The following example uses the <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the starting position of an animal name in a sentence. It then uses this position to insert an adjective that describes the animal into the sentence.</p>stringinsert#1"
  syntax:
    content: public int IndexOf(string value)
    content.vb: Public Function IndexOf(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is 0.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.String,System.Int32)
  commentId: M:System.String.IndexOf(System.String,System.Int32)
  id: IndexOf(System.String,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32)
  fullName: System.String.IndexOf(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1545
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</p>\n"
  remarks: "\n<p>Index numbering starts from 0. The <em>startIndex</em> parameter can range from 0 to the length of the string instance. If <em>startIndex</em> equals the length of the string instance, the method returns -1.</p>\n<p>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the <em>startIndex</em> character position of this instance and continues until the last character position.</p>\n<p>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <em>value</em> contains an ignorable character, the result is equivalent to searching with that character removed. If <em>value</em> consists only of one or more ignorable characters, the <xref href=\"System.String.IndexOf(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method always returns <em>startIndex</em>, which is the character position at which the search begins. In the following example, the <xref href=\"System.String.IndexOf(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" in two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".</p>System.String.IndexOf#22"
  example:
  - "\n<p>The following example searches for all occurrences of a specified string within a target string.</p>stringindexof4#1"
  syntax:
    content: public int IndexOf(string value, int startIndex)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.String,System.Int32,System.Int32)
  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32)
  id: IndexOf(System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32, Int32)
  fullName: System.String.IndexOf(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1546
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n"
  remarks: "\n<p>Index numbering starts from 0 (zero). The <em>startIndex</em> parameter can range from 0 to the length of the string instance.</p>\n<p>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at <em>startIndex</em> and continues to <em>startIndex</em> + <em>count</em> -1. The character at <em>startIndex</em> + <em>count</em> is not included in the search.</p>\n<p>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <em>value</em> contains an ignorable character, the result is equivalent to searching with that character removed. If <em>value</em> consists only of one or more ignorable characters, the <xref href=\"System.String.IndexOf(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method always returns <em>startIndex</em>, which is the character position at which the search begins. In the following example, the <xref href=\"System.String.IndexOf(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".</p>System.String.IndexOf#23"
  example:
  - "\n<p>The following example finds the index of all occurrences of the string \"he\" within a substring of another string. Note that the number of characters to be searched must be recalculated for each search iteration.</p>string.indexof8#1"
  syntax:
    content: public int IndexOf(string value, int startIndex, int count)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the length of this string.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  id: IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32, Int32, StringComparison)
  fullName: System.String.IndexOf(System.String, System.Int32, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1547
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</p>\n"
  remarks: "\n<p>Index numbering starts from 0 (zero). The <em>startIndex</em> parameter can range from 0 to the length of the string instance.</p>\n<p>The search begins at <em>startIndex</em> and continues to <em>startIndex</em> + <em>count</em> -1. The character at <em>startIndex</em> + <em>count</em> is not included in the search.</p>\n<p>The <em>comparisonType</em> parameter specifies to search for the <em>value</em> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n"
  example:
  - "\n<p>The following exampledemonstrates three overloads of the <see cref=\"Overload:System.String.IndexOf\"></see> method that find the first occurrence of a string within another string using different values of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>system.string.IndexOfCmp#1"
  syntax:
    content: public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the <em>value</em> parameter from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.String,System.Int32,System.StringComparison)
  commentId: M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)
  id: IndexOf(System.String,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32, StringComparison)
  fullName: System.String.IndexOf(System.String, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1548
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</p>\n"
  remarks: "\n<p>Index numbering starts from 0. The <em>startIndex</em> parameter can range from 0 to the length of the string instance. If <em>startIndex</em> equals the length of the string instance, the method returns -1.</p>\n<p>The <em>comparisonType</em> parameter specifies to search for the <em>value</em> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n"
  example:
  - "\n<p>The following exampledemonstrates three overloads of the <see cref=\"Overload:System.String.IndexOf\"></see> method that find the first occurrence of a string within another string using different values of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>system.string.IndexOfCmp#1"
  syntax:
    content: public int IndexOf(string value, int startIndex, StringComparison comparisonType)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the <em>value</em> parameter from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOf(System.String,System.StringComparison)
  commentId: M:System.String.IndexOf(System.String,System.StringComparison)
  id: IndexOf(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, StringComparison)
  fullName: System.String.IndexOf(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1549
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. A parameter specifies the type of search to use for the specified string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>The <em>comparisonType</em> parameter specifies to search for the <em>value</em> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n"
  example:
  - "\n<p>The following exampledemonstrates three overloads of the <see cref=\"Overload:System.String.IndexOf\"></see> method that find the first occurrence of a string within another string using different values of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>system.string.IndexOfCmp#1"
  syntax:
    content: public int IndexOf(string value, StringComparison comparisonType)
    content.vb: Public Function IndexOf(value As String, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the <em>value</em> parameter if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is 0.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IndexOfAny(System.Char[])
  commentId: M:System.String.IndexOfAny(System.Char[])
  id: IndexOfAny(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOfAny(Char[])
  fullName: System.String.IndexOfAny(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfAny
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1550
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>The search for <em>anyOf</em> is case-sensitive. If <em>anyOf</em> is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the first vowel in a string. </p>System.String.IndexOfAny#1"
  syntax:
    content: public int IndexOfAny(char[] anyOf)
    content.vb: Public Function IndexOfAny(anyOf As Char()) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.IndexOfAny(System.Char())
  name.vb: IndexOfAny(Char())
- uid: System.String.IndexOfAny(System.Char[],System.Int32)
  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32)
  id: IndexOfAny(System.Char[],System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOfAny(Char[], Int32)
  fullName: System.String.IndexOfAny(System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfAny
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1551
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. The <em>startIndex</em> parameter can range from 0 to one less than the length of the string instance.</p>\n<p>The search ranges from <em>startIndex</em> to the end of the string.</p>\n<p>The search for <em>anyOf</em> is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of the occurrence of any character of the string \"is\" within a substring of another string.</p>string.indexofany2#1"
  syntax:
    content: public int IndexOfAny(char[] anyOf, int startIndex)
    content.vb: Public Function IndexOfAny(anyOf As Char(), startIndex As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the number of characters in this instance. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.IndexOfAny(System.Char(), System.Int32)
  name.vb: IndexOfAny(Char(), Int32)
- uid: System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)
  id: IndexOfAny(System.Char[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOfAny(Char[], Int32, Int32)
  fullName: System.String.IndexOfAny(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfAny
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1552
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</p>\n"
  remarks: "\n<p>The search begins at <em>startIndex</em> and continues to <em>startIndex</em> + <em>count</em> -1. The character at <em>startIndex</em> + <em>count</em> is not included in the search.</p>\n<p>Index numbering starts from zero. The <em>startIndex</em> parameter can range from 0 to one less than the length of the string instance.</p>\n<p>The search for <em>anyOf</em> is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of the occurrence of any character of the string \"aid\" within a substring of another string.</p>string.indexofany3#1"
  syntax:
    content: public int IndexOfAny(char[] anyOf, int startIndex, int count)
    content.vb: Public Function IndexOfAny(anyOf As Char(), startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>count</em> + <em>startIndex</em> is greater than the number of characters in this instance. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.IndexOfAny(System.Char(), System.Int32, System.Int32)
  name.vb: IndexOfAny(Char(), Int32, Int32)
- uid: System.String.Insert(System.Int32,System.String)
  commentId: M:System.String.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Insert(Int32, String)
  fullName: System.String.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1553
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which a specified string is inserted at a specified index position in this instance.</p>\n"
  remarks: "\n<p>If <em>startIndex</em> is equal to the length of this instance, <em>value</em> is appended to the end of this instance.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which <em>value</em> is inserted into the current instance.</p>\n<p>For example, the return value of <code>\"abc\".Insert(2, \"XYZ\")</code> is \"abXYZc\".</p>\n"
  example:
  - "\n<p>The following example inserts a space character in the fourth character position (the character at index 3) of a string.</p>System.String.Insert#1"
  - "\n<p>The following console application prompts the users to enter one or more adjectives to describe two animals. It then calls the <xref href=\"System.String.Insert(System.Int32,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to insert the text entered by the user into a string.</p>stringinsert#1"
  syntax:
    content: public string Insert(int startIndex, string value)
    content.vb: Public Function Insert(startIndex As Integer, value As String) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index position of the insertion. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but with <em>value</em> inserted at position <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is negative or greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
    commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.IsNullOrEmpty(System.String)
  commentId: M:System.String.IsNullOrEmpty(System.String)
  id: IsNullOrEmpty(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(String)
  fullName: System.String.IsNullOrEmpty(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNullOrEmpty
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1554
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified string is <strong>null</strong> or an <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.String.IsNullOrEmpty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that enables you to simultaneously test whether a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. It is equivalent to the following code:</p>System.String.IsNullOrEmpty#1<p>You can use the <xref href=\"System.String.IsNullOrWhiteSpace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a string is <strong>null</strong>, its value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>,  or it consists only of white-space characters. </p>"
  example:
  - <p>The following example examines three strings and determines whether each string has a value, is an empty string, or is <strong>null</strong>.</p>String.IsNullOrEmpty#1
  syntax:
    content: public static bool IsNullOrEmpty(string value)
    content.vb: Public Shared Function IsNullOrEmpty(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to test. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter is <strong>null</strong> or an empty string (\"\"); otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.String.IsNullOrWhiteSpace(System.String)
    commentId: M:System.String.IsNullOrWhiteSpace(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.IsNullOrWhiteSpace(System.String)
  commentId: M:System.String.IsNullOrWhiteSpace(System.String)
  id: IsNullOrWhiteSpace(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IsNullOrWhiteSpace(String)
  fullName: System.String.IsNullOrWhiteSpace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNullOrWhiteSpace
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1555
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a specified string is <strong>null</strong>, empty, or consists only of white-space characters.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.String.IsNullOrWhiteSpace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that is similar to the following  code, except that it offers superior performance:</p>System.String.IsNullOrWhitespace#2<p>White-space characters are defined by the Unicode standard. The <xref href=\"System.String.IsNullOrWhiteSpace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method interprets any character that returns a value of <strong>true</strong> when it is passed to the <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method as a white-space character.</p>"
  example:
  - "\n<p>The following example creates a string array, and then passes each element of the array to the <xref href=\"System.String.IsNullOrWhiteSpace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.IsNullOrWhiteSpace#1"
  syntax:
    content: public static bool IsNullOrWhiteSpace(string value)
    content.vb: Public Shared Function IsNullOrWhiteSpace(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to test.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, or if <em>value</em> consists exclusively of white-space characters. </p>\n"
  seealso:
  - type: System.String.IsNullOrEmpty(System.String)
    commentId: M:System.String.IsNullOrEmpty(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, IEnumerable<String>)
  fullName: System.String.Join(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1556
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, using the specified separator between each member.</p>\n"
  remarks: "\n<p>If <em>separator</em> is <strong>null</strong>, an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>) is used instead. If any member of <em>values</em> is <strong>null</strong>, an empty string is used instead.</p>\n<p>\n<xref href=\"System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that lets you concatenate each element in an <strong>IEnumerable(Of String)</strong> collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a <strong>List(Of String)</strong> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\"). The <strong>IEnumerable(Of String)</strong> collection returned by the <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method is passed to the <xref href=\"System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method to display the result as a single string. </p>System.String.Join#4"
  example:
  - "\n<p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, which it then passes to the <xref href=\"System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.Join#3"
  syntax:
    content: public static string Join(string separator, IEnumerable<string> values)
    content.vb: Public Shared Function Join(separator As String, values As IEnumerable(Of String)) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\n"
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\n<p>A collection that contains the strings to concatenate.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the members of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Join(String, IEnumerable(Of String))
- uid: System.String.Join(System.String,System.Object[])
  commentId: M:System.String.Join(System.String,System.Object[])
  id: Join(System.String,System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, Object[])
  fullName: System.String.Join(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1557
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the elements of an object array, using the specified separator between each element.</p>\n"
  remarks: "\n<p>If <em>separator</em> is <strong>null</strong> or if any element of <em>values</em> other than the first element is <strong>null</strong>, an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>) is used instead. See the Notes for Callers section if the first element of <em>values</em> is <strong>null</strong>.</p>\n<p>\n<xref href=\"System.String.Join(System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings. The string representation of each object in the array is derived by calling that object's <strong>ToString</strong> method. </p>\n"
  example:
  - "\n<p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a integer array, which it then passes to the <xref href=\"System.String.Join(System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.Join#1"
  syntax:
    content: public static string Join(string separator, params object[] values)
    content.vb: Public Shared Function Join(separator As String, ParamArray values As Object()) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\n"
    - id: values
      type: System.Object[]
      description: "\n<p>An array that contains the elements to concatenate.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the elements of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> is an empty array, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.Object())
  name.vb: Join(String, Object())
- uid: System.String.Join(System.String,System.String[])
  commentId: M:System.String.Join(System.String,System.String[])
  id: Join(System.String,System.String[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, String[])
  fullName: System.String.Join(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1558
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates all the elements of a string array, using the specified separator between each element. </p>\n"
  remarks: "\n<p>For example, if <em>separator</em> is \", \" and the elements of <em>value</em> are \"apple\", \"orange\", \"grape\", and \"pear\", <code>Join(separator, value)</code> returns \"apple, orange, grape, pear\".</p>\n<p>If <em>separator</em> is <strong>null</strong>, an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>) is used instead. If any element in <em>value</em> is <strong>null</strong>, an empty string is used instead.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Join(System.String,System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>stringjoin#1"
  syntax:
    content: public static string Join(string separator, params string[] value)
    content.vb: Public Shared Function Join(separator As String, ParamArray value As String()) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator. <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\n"
    - id: value
      type: System.String[]
      description: "\n<p>An array that contains the elements to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the elements in <em>value</em> delimited by the <em>separator</em> string. If <em>value</em> is an empty array, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.String())
  name.vb: Join(String, String())
- uid: System.String.Join(System.String,System.String[],System.Int32,System.Int32)
  commentId: M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)
  id: Join(System.String,System.String[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, String[], Int32, Int32)
  fullName: System.String.Join(System.String, System.String[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1559
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the specified elements of a string array, using the specified separator between each element. </p>\n"
  remarks: "\n<p>For example, if <em>separator</em> is \", \" and the elements of <em>value</em> are \"apple\", \"orange\", \"grape\", and \"pear\", <code>Join(separator, value, 1, 2)</code> returns \"orange, grape\".</p>\n<p>If <em>separator</em> is <strong>null</strong>, an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>) is used instead. If any element in <em>value</em> is <strong>null</strong>, an empty string is used instead.</p>\n"
  example:
  - "\n<p>The following example concatenates two elements from an array of names of fruit.</p>string.join2#1"
  syntax:
    content: public static string Join(string separator, string[] value, int startIndex, int count)
    content.vb: Public Shared Function Join(separator As String, value As String(), startIndex As Integer, count As Integer) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator. <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\n"
    - id: value
      type: System.String[]
      description: "\n<p>An array that contains the elements to concatenate. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The first element in <em>value</em> to use. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements of <em>value</em> to use. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the strings in <em>value</em> delimited by the <em>separator</em> string. </p>\n<p>-or-</p>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>count</em> is zero, <em>value</em> has no elements, or <em>separator</em> and all the elements of <em>value</em> are <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>count</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>count</em> is greater than the number of elements in <em>value</em>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.String(), System.Int32, System.Int32)
  name.vb: Join(String, String(), Int32, Int32)
- uid: System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  id: Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join<T>(String, IEnumerable<T>)
  fullName: System.String.Join<T>(System.String, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1560
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of a collection, using the specified separator between each member.</p>\n"
  remarks: "\n<p>If <em>separator</em> is <strong>null</strong>, an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>) is used instead. If any member of <em>values</em> is <strong>null</strong>, an empty string is used instead.</p>\n<p>\n<xref href=\"System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that lets you concatenate each member of an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection without first converting them to strings. The string representation of each object in the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection is derived by calling that object's <strong>ToString</strong> method. </p>\n<p>This method is particular useful with Language-Integrated Query (LINQ) query expressions. For example, the following code defines a very simple <code>Animal</code> class that contains the name of an animal and the order to which it belongs. It then defines a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object that contains a number of <code>Animal</code> objects. The <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> extension method is called to extract the <code>Animal</code> objects whose <code>Order</code> property equals \"Rodent\". The result is passed to the <xref href=\"System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.Join#5"
  example:
  - "\n<p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object of type integer, which it then passes to the <xref href=\"System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.String.Join#2"
  syntax:
    content: public static string Join<T>(string separator, IEnumerable<T> values)
    content.vb: Public Shared Function Join(Of T)(separator As String, values As IEnumerable(Of T)) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\n"
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection that contains the objects to concatenate.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the members of <em>values</em>.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the members of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(Of T)(System.String, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Join(Of T)(String, IEnumerable(Of T))
- uid: System.String.LastIndexOf(System.Char)
  commentId: M:System.String.LastIndexOf(System.Char)
  id: LastIndexOf(System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(Char)
  fullName: System.String.LastIndexOf(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1561
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either <em>value</em> is found or the first character position has been examined. The search is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example defines an <code>ExtractFilename</code> method that uses the <xref href=\"System.String.LastIndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method to find the last directory separator character in a string and to extract the string's file name. If the file exists, the method returns the file name without its path.</p>System.String.LastIndexOf#1"
  syntax:
    content: public int LastIndexOf(char value)
    content.vb: Public Function LastIndexOf(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.Char,System.Int32)
  commentId: M:System.String.LastIndexOf(System.Char,System.Int32)
  id: LastIndexOf(System.Char,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(Char, Int32)
  fullName: System.String.LastIndexOf(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1562
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.This method begins searching at the <em>startIndex</em> character position of this instance and proceeds backward toward the beginning of the current instance until either <em>value</em> is found or the first character position has been examined. For example, if <em>startIndex</em> is <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1, the method searches every character from the last character in the string to the beginning. The search is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string. </p>string.lastindexof1#1"
  syntax:
    content: public int LastIndexOf(char value, int startIndex)
    content.vb: Public Function LastIndexOf(value As Char, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the search. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than or equal to the length of this instance.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.Char,System.Int32,System.Int32)
  commentId: M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)
  id: LastIndexOf(System.Char,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(Char, Int32, Int32)
  fullName: System.String.LastIndexOf(System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1563
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>This method begins searching at the <em>startIndex</em> character position and proceeds backward toward the beginning of this instance until either <em>value</em> is found or <em>count</em> character positions have been examined. For example, if <em>startIndex</em> is <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1, the method searches backward <em>count</em> characters from the last character in the string. The search is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring. </p>string.lastindexof2#1"
  syntax:
    content: public int LastIndexOf(char value, int startIndex, int count)
    content.vb: Public Function LastIndexOf(value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the search. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than or equal to the length of this instance.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> - <em>count</em> + 1 is less than zero.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.String)
  commentId: M:System.String.LastIndexOf(System.String)
  id: LastIndexOf(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String)
  fullName: System.String.LastIndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1564
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>The search begins at the last character position of this instance and proceeds backward toward the beginning until either <em>value</em> is found or the first character position has been examined.</p>\n<p>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. </p>\n<p>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <em>value</em> contains an ignorable character, the result is equivalent to searching with that character removed. If <em>value</em> consists only of one or more ignorable characters, the <xref href=\"System.String.LastIndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method always returns <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> – 1, which represents the last index position in the current instance. In the following example, the <xref href=\"System.String.LastIndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <em>value</em>. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.</p>System.String.LastIndexOf#21"
  example:
  - "\n<p>The following example removes opening and closing HTML tags from a string if the tags begin and end the string. If a string ends with a closing bracket character (\">\"), the example uses the <xref href=\"System.String.LastIndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to locate the start of the end tag. </p>System.String.LastIndexOf#2"
  syntax:
    content: public int LastIndexOf(string value)
    content.vb: Public Function LastIndexOf(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.String,System.Int32)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32)
  id: LastIndexOf(System.String,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32)
  fullName: System.String.LastIndexOf(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1565
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>The search begins at the <em>startIndex</em> character position of this instance and proceeds backward toward the beginning until either <em>value</em> is found or the first character position has been examined. For example, if <em>startIndex</em> is <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1, the method searches every character from the last character in the string to the beginning. </p>\n<p>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. </p>\n<p>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <em>value</em> contains an ignorable character, the result is equivalent to searching with that character removed. If <em>value</em> consists only of one or more ignorable characters, the <xref href=\"System.String.LastIndexOf(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method always returns <em>startIndex</em>, which is the character position at which the search begins. In the following example, the <xref href=\"System.String.LastIndexOf(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final \"m\" in a string. If the example is run on the .NET Framework 4 or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and \"m\" returns the position of the \"m\" in the string, whereas calling it to find a substring that consists of the soft hyphen and \"n\" returns the position of the \"n\". When the search string contains only the soft hyphen, the method returns the index of the \"m\", which represents the value of <em>startIndex</em>.</p>System.String.LastIndexOf#22"
  example:
  - "\n<p>The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string. </p>string.lastindexof7#1"
  syntax:
    content: public int LastIndexOf(string value, int startIndex)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than the length of the current instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than -1 or greater than zero.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)
  id: LastIndexOf(System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32, Int32)
  fullName: System.String.LastIndexOf(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1566
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>The search begins at the <em>startIndex</em> character position of this instance and proceeds backward toward the beginning until either <em>value</em> is found or <em>count</em> character positions have been examined. For example, if <em>startIndex</em> is <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1, the method searches backward <em>count</em> characters from the last character in the string. </p>\n<p>This method performs a word (case-sensitive and culture-sensitive) search using the current culture. </p>\n<p>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <em>value</em> contains an ignorable character, the result is equivalent to searching with that character removed. If <em>value</em> consists only of one or more ignorable characters, the <xref href=\"System.String.LastIndexOf(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method always returns <em>startIndex</em>, which is the character position at which the search begins. In the following example, the <xref href=\"System.String.LastIndexOf(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final \"m\" of two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".</p>System.String.LastIndexOf#23"
  example:
  - "\n<p>The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring. </p>string.lastindexof8#1"
  syntax:
    content: public int LastIndexOf(string value, int startIndex, int count)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> - <em>count</em>+ 1 specifies a position that is not within this instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>start</em> is less than -1 or greater than zero. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>count</em> is greater than 1. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  id: LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32, Int32, StringComparison)
  fullName: System.String.LastIndexOf(System.String, System.Int32, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1567
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>The search begins at the <em>startIndex</em> character position and proceeds backward until either <em>value</em> is found or <em>count</em> character positions have been examined. For example, if <em>startIndex</em> is <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1, the method searches backward <em>count</em> characters from the last character in the string. </p>\n<p>The <em>comparisonType</em> parameter specifies to search for the <em>value</em> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n<p></p>\n"
  example:
  - "\n<p>The following exampledemonstrates three overloads of the <see cref=\"Overload:System.String.LastIndexOf\"></see> method that find the last occurrence of a string within another string using different values of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>system.string.LastIndexOfCmp#1"
  syntax:
    content: public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> + 1 - <em>count</em> specifies a position that is not within this instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>start</em> is less than -1 or greater than zero. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>count</em> is greater than 1. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)
  id: LastIndexOf(System.String,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32, StringComparison)
  fullName: System.String.LastIndexOf(System.String, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1568
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>The search begins at the <em>startIndex</em> character position and proceeds backward until either <em>value</em> is found or the first character position has been examined. For example, if <em>startIndex</em> is <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1, the method searches every character from the last character in the string to the beginning. </p>\n<p>The <em>comparisonType</em> parameter specifies to search for the <em>value</em> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n"
  example:
  - "\n<p>The following exampledemonstrates three overloads of the <see cref=\"Overload:System.String.LastIndexOf\"></see> method that find the last occurrence of a string within another string using different values of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>system.string.LastIndexOfCmp#1"
  syntax:
    content: public int LastIndexOf(string value, int startIndex, StringComparison comparisonType)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than the length of the current instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than -1 or greater than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOf(System.String,System.StringComparison)
  commentId: M:System.String.LastIndexOf(System.String,System.StringComparison)
  id: LastIndexOf(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, StringComparison)
  fullName: System.String.LastIndexOf(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1569
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. A parameter specifies the type of search to use for the specified string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>The <em>comparisonType</em> parameter specifies to search for the <em>value</em> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n<p>The search begins at the last character position of this instance and proceeds backward toward the beginning until either <em>value</em> is found or the first character position has been examined.</p>\n"
  example:
  - "\n<p>The following exampledemonstrates three overloads of the <see cref=\"Overload:System.String.LastIndexOf\"></see> method that find the last occurrence of a string within another string using different values of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>system.string.LastIndexOfCmp#1"
  syntax:
    content: public int LastIndexOf(string value, StringComparison comparisonType)
    content.vb: Public Function LastIndexOf(value As String, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.LastIndexOfAny(System.Char[])
  commentId: M:System.String.LastIndexOfAny(System.Char[])
  id: LastIndexOfAny(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOfAny(Char[])
  fullName: System.String.LastIndexOfAny(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOfAny
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1570
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in <em>anyOf</em> is found or the first character position has been examined. The search is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of the last occurrence of any character in the string \"is\" within another string. </p>string.lastindexofany1#1"
  syntax:
    content: public int LastIndexOfAny(char[] anyOf)
    content.vb: Public Function LastIndexOfAny(anyOf As Char()) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.LastIndexOfAny(System.Char())
  name.vb: LastIndexOfAny(Char())
- uid: System.String.LastIndexOfAny(System.Char[],System.Int32)
  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32)
  id: LastIndexOfAny(System.Char[],System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOfAny(Char[], Int32)
  fullName: System.String.LastIndexOfAny(System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOfAny
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1571
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>This method begins searching at the <em>startIndex</em> character position of this instance and proceeds backward toward the beginning until either a character in <em>anyOf</em> is found or the first character position has been examined. The search is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of the last occurrence of any character in the string \"is\" within a substring of another string. </p>string.lastindexofany2#1"
  syntax:
    content: public int LastIndexOfAny(char[] anyOf, int startIndex)
    content.vb: Public Function LastIndexOfAny(anyOf As Char(), startIndex As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> specifies a position that is not within this instance. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.LastIndexOfAny(System.Char(), System.Int32)
  name.vb: LastIndexOfAny(Char(), Int32)
- uid: System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  id: LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOfAny(Char[], Int32, Int32)
  fullName: System.String.LastIndexOfAny(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOfAny
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1572
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n"
  remarks: "\n<p>Index numbering starts from zero.</p>\n<p>This method begins searching at the <em>startIndex</em> character position of this instance and proceeds backward toward the beginning until either a character in <em>anyOf</em> is found or <em>count</em> character positions have been examined. The search is case-sensitive.</p>\n<p>This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.</p>\n"
  example:
  - "\n<p>The following example finds the index of the last occurrence of any character in the string \"aid\" within a substring of another string. </p>string.lastindexofany3#1"
  syntax:
    content: public int LastIndexOfAny(char[] anyOf, int startIndex, int count)
    content.vb: Public Function LastIndexOfAny(anyOf As Char(), startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> minus <em>count</em> + 1 is less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.LastIndexOfAny(System.Char(), System.Int32, System.Int32)
  name.vb: LastIndexOfAny(Char(), Int32, Int32)
- uid: System.String.op_Equality(System.String,System.String)
  commentId: M:System.String.op_Equality(System.String,System.String)
  id: op_Equality(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equality(String, String)
  fullName: System.String.Equality(System.String, System.String)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1573
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified strings have the same value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.op_Equality(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <xref href=\"System.String.Equals(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison. </p>\n<p>The Visual Basic compiler does not resolve the equality operator as a call to the <xref href=\"System.String.op_Equality(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead, the equality operator wraps a call to the <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example demonstrates the equality operator.</p>system.string.equality#1"
  syntax:
    content: public static bool operator ==(string a, string b)
    content.vb: Public Shared Operator =(a As String, b As String) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.op_Inequality(System.String,System.String)
  commentId: M:System.String.op_Inequality(System.String,System.String)
  id: op_Inequality(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Inequality(String, String)
  fullName: System.String.Inequality(System.String, System.String)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1574
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified strings have different values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.op_Inequality(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class.   It enables code such as that shown in the Examples section. </p>\n<p>The <xref href=\"System.String.op_Inequality(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> operator in turn calls the static <xref href=\"System.String.Equals(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n<p>   The Visual Basic compiler does not resolve the inequality operator as a call to the <xref href=\"System.String.op_Inequality(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead, the inequality operator wraps a call to the <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example demonstrates the inequality operator.</p>system.string.inequality#1"
  syntax:
    content: public static bool operator !=(string a, string b)
    content.vb: Public Shared Operator <>(a As String, b As String) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>a</em> is different from the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.String.PadLeft(System.Int32)
  commentId: M:System.String.PadLeft(System.Int32)
  id: PadLeft(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadLeft(Int32)
  fullName: System.String.PadLeft(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PadLeft
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1575
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</p>\n"
  remarks: "\n<p>A Unicode space is defined as hexadecimal 0x0020.</p>\n<p>The <xref href=\"System.String.PadLeft(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.</p>\n<p>If the <xref href=\"System.String.PadLeft(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is <em>totalWidth</em> characters.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.PadLeft(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic String.PadLeft Example#1"
  syntax:
    content: public string PadLeft(int totalWidth)
    content.vb: Public Function PadLeft(totalWidth As Integer) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadRight(System.Int32)
    commentId: M:System.String.PadRight(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.PadLeft(System.Int32,System.Char)
  commentId: M:System.String.PadLeft(System.Int32,System.Char)
  id: PadLeft(System.Int32,System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadLeft(Int32, Char)
  fullName: System.String.PadLeft(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PadLeft
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1576
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.PadLeft(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.</p>\n<p> If the <xref href=\"System.String.PadLeft(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading <em>paddingChar</em> characters so that its total length is <em>totalWidth</em> characters.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.PadLeft(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic String.PadLeft1 Example#1"
  syntax:
    content: public string PadLeft(int totalWidth, char paddingChar)
    content.vb: Public Function PadLeft(totalWidth As Integer, paddingChar As Char) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    - id: paddingChar
      type: System.Char
      description: "\n<p>A Unicode padding character. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadRight(System.Int32)
    commentId: M:System.String.PadRight(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.PadRight(System.Int32)
  commentId: M:System.String.PadRight(System.Int32)
  id: PadRight(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadRight(Int32)
  fullName: System.String.PadRight(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PadRight
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1577
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</p>\n"
  remarks: "\n<p>A Unicode space is defined as hexadecimal 0x0020.</p>\n<p>The <xref href=\"System.String.PadRight(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.</p>\n<p>If the<xref href=\"System.String.PadRight(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is <em>totalWidth</em> characters.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.PadRight(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic String.PadRight Example#1"
  syntax:
    content: public string PadRight(int totalWidth)
    content.vb: Public Function PadRight(totalWidth As Integer) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadLeft(System.Int32)
    commentId: M:System.String.PadLeft(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.PadRight(System.Int32,System.Char)
  commentId: M:System.String.PadRight(System.Int32,System.Char)
  id: PadRight(System.Int32,System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadRight(Int32, Char)
  fullName: System.String.PadRight(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PadRight
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1578
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.PadRight(System.Int32,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.</p>\n<p>If the <xref href=\"System.String.PadRight(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing <em>paddingChar</em> characters so that its total length is <em>totalWidth</em> characters.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.PadRight(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic String.PadRight1 Example#1"
  syntax:
    content: public string PadRight(int totalWidth, char paddingChar)
    content.vb: Public Function PadRight(totalWidth As Integer, paddingChar As Char) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    - id: paddingChar
      type: System.Char
      description: "\n<p>A Unicode padding character. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadLeft(System.Int32)
    commentId: M:System.String.PadLeft(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Remove(System.Int32)
  commentId: M:System.String.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Remove(Int32)
  fullName: System.String.Remove(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1579
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</p>\n"
  remarks: "\n<p>In the .NET Framework, strings are zero-based. The value of the <em>startIndex</em> parameter can range from zero to one less than the length of the string instance.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position <em>startIndex</em> to the end of the original string have been removed.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.Remove(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The next-to-last case removes all text starting from the specified index through the end of the string. The last case removes three characters starting from the specified index.</p>string.remove#1"
  syntax:
    content: public string Remove(int startIndex)
    content.vb: Public Function Remove(startIndex As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based position to begin deleting characters. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this string except for the removed characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> specifies a position that is not within this string. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Remove(System.Int32,System.Int32)
  commentId: M:System.String.Remove(System.Int32,System.Int32)
  id: Remove(System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Remove(Int32, Int32)
  fullName: System.String.Remove(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1580
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</p>\n"
  remarks: "\n<p>In the .NET Framework, strings are zero-based. The value of the <em>startIndex</em> parameter can range from zero to one less than the length of the string instance.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the <em>count</em> parameter have been removed. The characters are removed at the position specified by <em>startIndex</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how you can remove the middle name from a complete name.</p>stringremove#1"
  syntax:
    content: public string Remove(int startIndex, int count)
    content.vb: Public Function Remove(startIndex As Integer, count As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based position to begin deleting characters. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to delete. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance except for the removed characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Either <em>startIndex</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>count</em> specify a position outside this instance. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Replace(System.Char,System.Char)
  commentId: M:System.String.Replace(System.Char,System.Char)
  id: Replace(System.Char,System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Replace(Char, Char)
  fullName: System.String.Replace(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1581
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</p>\n"
  remarks: "\n<p>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <em>oldChar</em>.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of <em>oldChar</em> are replaced by <em>newChar</em>.</p>\n<p>Because this method returns the modified string, you can chain together successive calls to the <xref href=\"System.String.Replace(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration. </p>System.String.Replace#2"
  example:
  - "\n<p>The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</p>string.replace1#1"
  syntax:
    content: public string Replace(char oldChar, char newChar)
    content.vb: Public Function Replace(oldChar As Char, newChar As Char) As String
    parameters:
    - id: oldChar
      type: System.Char
      description: "\n<p>The Unicode character to be replaced. </p>\n"
    - id: newChar
      type: System.Char
      description: "\n<p>The Unicode character to replace all occurrences of <em>oldChar</em>. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to this instance except that all instances of <em>oldChar</em> are replaced with <em>newChar</em>. If <em>oldChar</em> is not found in the current instance, the method returns the current instance unchanged. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Replace(System.String,System.String)
  commentId: M:System.String.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Replace(String, String)
  fullName: System.String.Replace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replace
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1582
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</p>\n"
  remarks: "\n<p>If <em>newValue</em> is <strong>null</strong>, all occurrences of <em>oldValue</em> are removed.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of <em>oldValue</em> are replaced by <em>newValue</em>.</p>\n<p>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <em>oldValue</em>.</p>\n<p>Because this method returns the modified string, you can chain together successive calls to the <xref href=\"System.String.Replace(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration. </p>System.String.Replace#1"
  example:
  - "\n<p>The following example demonstrates how you can use the <xref href=\"System.String.Replace(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method to correct a spelling error.</p>stringreplace#1"
  syntax:
    content: public string Replace(string oldValue, string newValue)
    content.vb: Public Function Replace(oldValue As String, newValue As String) As String
    parameters:
    - id: oldValue
      type: System.String
      description: "\n<p>The string to be replaced. </p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The string to replace all occurrences of <em>oldValue</em>. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to the current string except that all instances of <em>oldValue</em> are replaced with <em>newValue</em>. If <em>oldValue</em> is not found in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>oldValue</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>oldValue</em> is the empty string (\"\"). </p>\n"
  seealso:
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Split(System.Char[])
  commentId: M:System.String.Split(System.Char[])
  id: Split(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[])
  fullName: System.String.Split(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1583
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into substrings that are based on the characters in an array. </p>\n"
  remarks: "\n<p>When a string is delimited by a known set of characters, you can use the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method to separate it into substrings. For other ways to extract substrings from a string, see the Alternatives to String.Split section. </p>\n"
  example:
  - <p>The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters. The character array passed to the <em>separator</em> parameter of the <xref href="System.String.Split(System.Char[])" data-throw-if-not-resolved="false"></xref> method consists of a space character and a tab character, together with some common punctuation symbols.</p>System.String.Split#2
  syntax:
    content: public string[] Split(params char[] separator)
    content.vb: Public Function Split(ParamArray separator As Char()) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char())
  name.vb: Split(Char())
- uid: System.String.Split(System.Char[],System.Int32)
  commentId: M:System.String.Split(System.Char[],System.Int32)
  id: Split(System.Char[],System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[], Int32)
  fullName: System.String.Split(System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1584
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</p>\n"
  remarks: "\n<p>Delimiter characters are not included in the elements of the returned array. </p>\n<p>If this instance does not contain any of the characters in <em>separator</em>, the returned array consists of a single element that contains this instance. If <em>count</em> is zero, an empty array is returned.</p>\n<p>If the <em>separator</em> parameter is <strong>null</strong> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <strong>true</strong> if they are passed to the <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Each element of <em>separator</em> defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If there are more than <em>count</em> substrings in this instance, the first <em>count</em> minus 1 substrings are returned in the first <em>count</em> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</p>\n<p>If <em>count</em> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</p>\n<p>The following table provides examples. </p>\n<p>String value </p>\n<p>Separator  </p>\n<p>Count</p>\n<p>Returned array</p>\n"
  example:
  - <p>The following example demonstrates how <em>count</em> affects the number of strings returned by <xref href="System.String.Split(System.Char[])" data-throw-if-not-resolved="false"></xref>.</p>StringSplit2#10
  syntax:
    content: public string[] Split(char[] separator, int count)
    content.vb: Public Function Split(separator As Char(), count As Integer) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of substrings to return. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Array
    commentId: T:System.Array
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char(), System.Int32)
  name.vb: Split(Char(), Int32)
- uid: System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)
  commentId: M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)
  id: Split(System.Char[],System.Int32,System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[], Int32, StringSplitOptions)
  fullName: System.String.Split(System.Char[], System.Int32, System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1585
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into a maximum number of substrings based on the characters in an array.</p>\n"
  remarks: "\n<p>Delimiter characters are not included in the elements of the returned array. </p>\n<p>If this instance does not contain any of the characters in <em>separator</em>, or the <em>count</em> parameter is 1, the returned array consists of a single element that contains this instance. If the <em>separator</em> parameter is <strong>null</strong> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <strong>true</strong> if they are passed to the <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method. However, if the <em>separator</em> parameter in the call to this method overload is <strong>null</strong>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the null. The following example shows several ways to unambiguously identify this overload. </p>System.String.Split#3<p>If the <em>count</em> parameter is zero, or the <em>options</em> parameter is <xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> and the length of this instance is zero, an empty array is returned.</p><p>Each element of <em>separator</em> defines a separate delimiter character. If the <em>options</em> parameter is <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p><p>If there are more than <em>count</em> substrings in this instance, the first <em>count</em> minus 1 substrings are returned in the first <em>count</em> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</p><p>If <em>count</em> is greater than the number of substrings, the available substrings are returned and no exception is thrown.</p>"
  example:
  - <p>The following example uses the <xref href="System.StringSplitOptions" data-throw-if-not-resolved="false"></xref> enumeration to include or exclude substrings generated by the <see cref="Overload:System.String.Split"></see> method.</p>string.split3#1
  syntax:
    content: public string[] Split(char[] separator, int count, StringSplitOptions options)
    content.vb: Public Function Split(separator As Char(), count As Integer, options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of substrings to return. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char(), System.Int32, System.StringSplitOptions)
  name.vb: Split(Char(), Int32, StringSplitOptions)
- uid: System.String.Split(System.Char[],System.StringSplitOptions)
  commentId: M:System.String.Split(System.Char[],System.StringSplitOptions)
  id: Split(System.Char[],System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[], StringSplitOptions)
  fullName: System.String.Split(System.Char[], System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1586
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</p>\n"
  example:
  - <p>The following example uses the <xref href="System.StringSplitOptions" data-throw-if-not-resolved="false"></xref> enumeration to include or exclude substrings generated by the <see cref="Overload:System.String.Split"></see> method.</p>string.split3#1
  syntax:
    content: public string[] Split(char[] separator, StringSplitOptions options)
    content.vb: Public Function Split(separator As Char(), options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char(), System.StringSplitOptions)
  name.vb: Split(Char(), StringSplitOptions)
- uid: System.String.Split(System.String[],System.Int32,System.StringSplitOptions)
  commentId: M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)
  id: Split(System.String[],System.Int32,System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(String[], Int32, StringSplitOptions)
  fullName: System.String.Split(System.String[], System.Int32, System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1587
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n"
  example:
  - <p>The following example uses the <xref href="System.StringSplitOptions" data-throw-if-not-resolved="false"></xref> enumeration to include or exclude substrings generated by the <see cref="Overload:System.String.Split"></see> method.</p>string.split3#1
  syntax:
    content: public string[] Split(string[] separator, int count, StringSplitOptions options)
    content.vb: Public Function Split(separator As String(), count As Integer, options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.String[]
      description: "\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of substrings to return. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.String(), System.Int32, System.StringSplitOptions)
  name.vb: Split(String(), Int32, StringSplitOptions)
- uid: System.String.Split(System.String[],System.StringSplitOptions)
  commentId: M:System.String.Split(System.String[],System.StringSplitOptions)
  id: Split(System.String[],System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(String[], StringSplitOptions)
  fullName: System.String.Split(System.String[], System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Split
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1588
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n"
  remarks: "\n<p>When a string is delimited by a known set of strings, you can use the <xref href=\"System.String.Split(System.String[],System.StringSplitOptions)\" data-throw-if-not-resolved=\"false\"></xref> method to separate it into substrings.  </p>\n"
  example:
  - <p>The following example illustrates the difference in the arrays returned by calling a string's <xref href="System.String.Split(System.String[],System.StringSplitOptions)" data-throw-if-not-resolved="false"></xref> method with its <em>options</em> parameter equal to <xref href="System.StringSplitOptions.None" data-throw-if-not-resolved="false"></xref> and <xref href="System.StringSplitOptions.RemoveEmptyEntries" data-throw-if-not-resolved="false"></xref>. </p>System.String.Split#1
  - <p>The following example defines an array of separators that include punctuation and white-space characters. Passing this array along with a value of <xref href="System.StringSplitOptions.RemoveEmptyEntries" data-throw-if-not-resolved="false"></xref> to the <xref href="System.String.Split(System.String[],System.StringSplitOptions)" data-throw-if-not-resolved="false"></xref> method returns an array that consists of the individual words from the string. </p>System.String.Split#7<p>Note that the method is called with the <em>options</em> argument set to <xref href="System.StringSplitOptions.RemoveEmptyEntries" data-throw-if-not-resolved="false"></xref>. This prevents the returned array from including<xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref> values that represent empty substring matches between punctuation marks and white-space characters. </p>
  syntax:
    content: public string[] Split(string[] separator, StringSplitOptions options)
    content.vb: Public Function Split(separator As String(), options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.String[]
      description: "\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.String(), System.StringSplitOptions)
  name.vb: Split(String(), StringSplitOptions)
- uid: System.String.StartsWith(System.String)
  commentId: M:System.String.StartsWith(System.String)
  id: StartsWith(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: StartsWith(String)
  fullName: System.String.StartsWith(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartsWith
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1589
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the beginning of this string instance matches the specified string.</p>\n"
  remarks: "\n<p>This method compares <em>value</em> to the substring at the beginning of this instance that is the same length as <em>value</em>, and returns an indication whether they are equal. To be equal, <em>value</em> must be an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>), must be a reference to this same instance, or must match the beginning of this instance.</p>\n<p>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</p>\n"
  example:
  - "\n<p>The following example defines a <code>StripStartTags</code> method that uses the <xref href=\"System.String.StartsWith(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to remove HTML start tags from the beginning of a string. Note that the <code>StripStartTags</code> method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed. The example does not remove HTML tags embedded in a string. </p>stringstartswith#1"
  syntax:
    content: public bool StartsWith(string value)
    content.vb: Public Function StartsWith(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> matches the beginning of this string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.EndsWith(System.String)
    commentId: M:System.String.EndsWith(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.StartsWith(System.String,System.StringComparison)
  commentId: M:System.String.StartsWith(System.String,System.StringComparison)
  id: StartsWith(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: StartsWith(String, StringComparison)
  fullName: System.String.StartsWith(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartsWith
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1590
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.StartsWith(System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method compares the <em>value</em> parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, <em>value</em> must be a reference to this same string, must be the empty string (\"\"), or must match the beginning of this string. The type of comparison performed by the <xref href=\"System.String.StartsWith(System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method depends on the value of the <em>comparisonType</em> parameter. The comparison can use the conventions of the current culture (<xref href=\"System.StringComparison.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.StringComparison.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>) or the invariant culture (<xref href=\"System.StringComparison.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.StringComparison.InvariantCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>), or it can consist of a character-by-character comparison of code points (<xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.StringComparison.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>). The comparison can also be case-sensitive (<xref href=\"System.StringComparison.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.StringComparison.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>), or it can ignore case (<xref href=\"System.StringComparison.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.StringComparison.InvariantCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.StringComparison.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - "\n<p>The following example searches for the string \"the\" at the beginning of a longer string that begins with the word \"The\". As the output from the example shows, a call to the <xref href=\"System.String.StartsWith(System.String,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string. </p>System.String.StartsWith#2"
  - "\n<p>The following example determines whether a string starts with a particular substring. It initializes a two-dimensional string array. The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed. Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</p>System.String.StartsWith#1"
  syntax:
    content: public bool StartsWith(string value, StringComparison comparisonType)
    content.vb: Public Function StartsWith(value As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this instance begins with <em>value</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.StringComparison
    commentId: T:System.StringComparison
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Substring(System.Int32)
  commentId: M:System.String.Substring(System.Int32)
  id: Substring(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Substring(Int32)
  fullName: System.String.Substring(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Substring
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1591
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</p>\n"
  remarks: "\n<p>You call the <xref href=\"System.String.Substring(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string that begins at the <em>startIndex</em> position in the current string.</p>\n<p>To extract a substring that begins with a particular character or character sequence, call a method such as  <see cref=\"Overload:System.String.IndexOf\"></see> or <see cref=\"Overload:System.String.IndexOf\"></see> to get the value of <em>startIndex</em>. The second example illustrates this; it extracts a key value that begins one character position after the \"=\" character.  </p>\n<p>If <em>startIndex</em> is equal to zero, the method returns the original string unchanged. </p>\n"
  example:
  - "\n<p>The following example demonstrates obtaining a substring from a string.</p>System.String.Substring#10"
  - "\n<p>The following example uses the <see cref=\"Overload:System.String.Substring\"></see> method to separate key/value pairs that are delimited by an equals (\"=\") character. </p>System.String.Substring#1<p>The <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is used to get the position of the equals character in the string.. The call to the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. The call to the <xref href=\"System.String.Substring(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then extracts the value assigned to the key. It starts at one character position beyond the equals character and extends to the end of the string.</p>"
  syntax:
    content: public string Substring(int startIndex)
    content.vb: Public Function Substring(startIndex As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting character position of a substring in this instance. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to the substring that begins at <em>startIndex</em> in this instance, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>startIndex</em> is equal to the length of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Substring(System.Int32,System.Int32)
  commentId: M:System.String.Substring(System.Int32,System.Int32)
  id: Substring(System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Substring(Int32, Int32)
  fullName: System.String.Substring(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Substring
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1592
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</p>\n"
  remarks: "\n<p>You call the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref href=\"System.String.Substring(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string with <em>length</em> characters starting from the <em>startIndex</em> position in the current string.</p>\n<p>The <em>length</em> parameter represents the total number of characters to extract from the current string instance. This includes the starting character found at index  <em>startIndex</em>.  In other words, the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method attempts to extract characters from index <em>startIndex</em> to index <em>startIndex</em> + <em>length</em> - 1.</p>\n<p>To extract a substring that begins with a particular character or character sequence, call a method such as  <see cref=\"Overload:System.String.IndexOf\"></see> or <see cref=\"Overload:System.String.LastIndexOf\"></see> to get the value of <em>startIndex</em>.</p>\n<p>If the substring extends from <em>startIndex</em> to a specified character sequence, you can call a method such as  <see cref=\"Overload:System.String.IndexOf\"></see> or <see cref=\"Overload:System.String.LastIndexOf\"></see> to get the index of the ending character or character sequence.  You can then convert that value to an index position in the string as follows: </p>\n<ul><li>\n<p>If you've searched for a single character that is to mark the end of the substring, the <em>length</em> parameter equals  <em>endIndex</em> - <em>startIndex</em> + 1, where <em>endIndex</em> is the return value of the <see cref=\"Overload:System.String.IndexOf\"></see> or <see cref=\"Overload:System.String.IndexOf\"></see> method. The following example extracts a continuous block of \"b\" characters from a string.</p>System.String.Substring#2</li><li>\n<p>If you've searched for multiple characters that are to mark the end of the substring, the <em>length</em> parameter equals  <em>endIndex</em> + <em>endMatchLength</em> - <em>startIndex</em>, where <em>endIndex</em> is the return value of the <see cref=\"Overload:System.String.IndexOf\"></see> or <see cref=\"Overload:System.String.IndexOf\"></see> method., and <em>endMatchLength</em> is the length of the character sequence that marks the end of the substring. The following example extracts a block of text that contains an XML <strong><definition></strong> element.</p>System.String.Substring#3</li><li>\n<p>If the character or character sequence is not included in the end of the substring, the <em>length</em> parameter equals <em>endIndex</em> - <em>startIndex</em>, where <em>endIndex</em> is the return value of the <see cref=\"Overload:System.String.IndexOf\"></see> or <see cref=\"Overload:System.String.IndexOf\"></see> method. </p>\n</li></ul>\n<p>If <em>startIndex</em> is equal to zero and  equals the length of the current string, the method returns the original string unchanged. </p>\n"
  example:
  - "\n<p>The following example illustrates a simple call to the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method that extracts two characters from a string starting at the sixth character position (that is, at index five).  </p>System.String.Substring#4"
  - "\n<p>The following example uses the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method in the following three cases to isolate substrings within a string. In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</p>\n<ul><li>\n<p>It extracts the single character and the third position in the string (at index 2) and compares it with a \"c\". This comparison returns <strong>true</strong>.</p>\n</li><li>\n<p>It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref href=\"System.String.IsNullOrEmpty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. This returns true because the call to the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>It attempts to extract one character starting at the fourth position in the string. Because there is no character at that position, the method call throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception.</p>\n</li></ul>Classic String.Substring1 Example#1"
  - "\n<p>The following example uses the <see cref=\"Overload:System.String.Substring\"></see> method to separate key/value pairs that are delimited by an equals (\"=\") character. </p>System.String.Substring#1<p>The <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is used to get the position of the equals character in the string.. The call to the <xref href=\"System.String.Substring(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. The call to the <xref href=\"System.String.Substring(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method then extracts the value assigned to the key. It starts at one character position beyond the equals character and extends to the end of the string.</p>"
  syntax:
    content: public string Substring(int startIndex, int length)
    content.vb: Public Function Substring(startIndex As Integer, length As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting character position of a substring in this instance. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters in the substring. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to the substring of length <em>length</em> that begins at <em>startIndex</em> in this instance, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>startIndex</em> is equal to the length of this instance and <em>length</em> is zero.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> plus <em>length</em> indicates a position not within this instance.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero. </p>\n"
  seealso:
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator
  commentId: M:System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IEnumerable<Char>.GetEnumerator()
  fullName: System.String.System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1593
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an enumerator that iterates through the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface object. For more information, see the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: IEnumerator<char> IEnumerable<char>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator As IEnumerator(Of Char) Implements IEnumerable(Of Char).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.Char}
      description: "\n<p>A strongly-typed enumerator that can be used to iterate through the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  implements:
  - System.Collections.Generic.IEnumerable{System.Char}.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
- uid: System.String.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.String.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.String.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1594
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an enumerator that iterates through the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface. For more information, see the <xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator that can be used to iterate through the current string.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.String.System#IComparable#CompareTo(System.Object)
  commentId: M:System.String.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.String.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1595
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object value)
    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.String.System#IConvertible#GetTypeCode
  commentId: M:System.String.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.GetTypeCode()
  fullName: System.String.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1596
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
- uid: System.String.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToBoolean(IFormatProvider)
  fullName: System.String.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToBoolean
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1597
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToBoolean(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the current string is <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref>; <strong>false</strong> if the value of the current string is <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current string is not <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.String.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToByte(IFormatProvider)
  fullName: System.String.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1598
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToByte(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
- uid: System.String.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToChar(IFormatProvider)
  fullName: System.String.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToChar
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1599
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToChar(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The character at index 0 in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
- uid: System.String.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToDateTime(IFormatProvider)
  fullName: System.String.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDateTime
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1600
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToDateTime(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.String.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToDecimal(IFormatProvider)
  fullName: System.String.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDecimal
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1601
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToDecimal(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> greater. </p>\n"
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.String.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToDouble(IFormatProvider)
  fullName: System.String.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDouble
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1602
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToDouble(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
- uid: System.String.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt16(IFormatProvider)
  fullName: System.String.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt16
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1603
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt16(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
- uid: System.String.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt32(IFormatProvider)
  fullName: System.String.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1604
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt32(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p></p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
- uid: System.String.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt64(IFormatProvider)
  fullName: System.String.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt64
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1605
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt64(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
- uid: System.String.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToSByte(IFormatProvider)
  fullName: System.String.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToSByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1606
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToSByte(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
- uid: System.String.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToSingle(IFormatProvider)
  fullName: System.String.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToSingle
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1607
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToSingle(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
- uid: System.String.System#IConvertible#ToString(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToString(System.IFormatProvider)
  id: System#IConvertible#ToString(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToString(IFormatProvider)
  fullName: System.String.System.IConvertible.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1608
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: string IConvertible.ToString(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  name.vb: System.IConvertible.ToString(IFormatProvider)
- uid: System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToType(Type, IFormatProvider)
  fullName: System.String.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToType
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1609
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the returned object. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be converted to the type specified by the <em>type</em> parameter. </p>\n"
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.String.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt16(IFormatProvider)
  fullName: System.String.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt16
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1610
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt16(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.String.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt32(IFormatProvider)
  fullName: System.String.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1611
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt32(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.String.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt64(IFormatProvider)
  fullName: System.String.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt64
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1612
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt64(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.String.ToCharArray
  commentId: M:System.String.ToCharArray
  id: ToCharArray
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToCharArray()
  fullName: System.String.ToCharArray()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToCharArray
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1613
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies the characters in this instance to a Unicode character array. </p>\n"
  remarks: "\n<p>This method copies each character (that is, each <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <xref href=\"System.Array.Length\" data-throw-if-not-resolved=\"false\"></xref> – 1. </p>\n<p>To create a string from the characters in a character array, call the <xref href=\"System.String.#ctor(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n<p>To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object and call its <xref href=\"System.Text.Encoding.GetBytes(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. Some of the standard encodings available in the .NET Framework include the following:    </p>\n<p>Encoding</p>\n<p>Object</p>\n<table><tbody><tr><td>\n<p>ASCII</p>\n</td><td>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-7</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-8</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-16</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-32</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n<p>For more information, see Character Encoding in the .NET Framework. </p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.String.ToCharArray\" data-throw-if-not-resolved=\"false\"></xref> method to extract the characters in a string to a character array. It then displays the original string and the elements in the array.</p>System.String.ToCharArray#1"
  - "\n<p>The following example defines a string containing the characters that serve as delimiters in a delimited string. It then calls the <xref href=\"System.String.ToCharArray\" data-throw-if-not-resolved=\"false\"></xref> method to create a character array that can be passed to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method to separate the delimited string into its individual substrings.</p>StringSplit2#1"
  syntax:
    content: public char[] ToCharArray()
    content.vb: Public Function ToCharArray As Char()
    return:
      type: System.Char[]
      description: "\n<p>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Array
    commentId: T:System.Array
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.ToCharArray(System.Int32,System.Int32)
  commentId: M:System.String.ToCharArray(System.Int32,System.Int32)
  id: ToCharArray(System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToCharArray(Int32, Int32)
  fullName: System.String.ToCharArray(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToCharArray
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1614
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies the characters in a specified substring in this instance to a Unicode character array.</p>\n"
  remarks: "\n<p>This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  <xref href=\"System.String.#ctor(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n<p>The <em>startIndex</em> parameter is zero-based. That is, the index of the first character in the string instance is zero.</p>\n<p>If <em>length</em> is zero, the returned array is empty and has a zero length. If this instance is <strong>null</strong> or an empty string (\"\"), the returned array is empty and has a zero length.</p>\n<p>To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object and call its <xref href=\"System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Some of the standard encodings available in the .NET Framework include the following:    </p>\n<p>Encoding</p>\n<p>Object</p>\n<table><tbody><tr><td>\n<p>ASCII</p>\n</td><td>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-7</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-8</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-16</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>UTF-32</p>\n</td><td>\n<p>\n<xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n<p>For more information, see Character Encoding in the .NET Framework. </p>\n"
  example:
  - "\n<p>The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</p>string.tochararray1#1"
  syntax:
    content: public char[] ToCharArray(int startIndex, int length)
    content.vb: Public Function ToCharArray(startIndex As Integer, length As Integer) As Char()
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of a substring in this instance. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the substring in this instance. </p>\n"
    return:
      type: System.Char[]
      description: "\n<p>A Unicode character array whose elements are the <em>length</em> number of characters in this instance starting from character position <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>length</em> is greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.ToLower
  commentId: M:System.String.ToLower
  id: ToLower
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToLower()
  fullName: System.String.ToLower()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLower
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1615
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this string converted to lowercase.</p>\n"
  remarks: "\n<p>This method takes into account the casing rules of the current culture.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</p>\n"
  example:
  - <p>The following example converts several mixed case strings to lowercase.</p>stringlowerupper#1
  syntax:
    content: public string ToLower()
    content.vb: Public Function ToLower As String
    return:
      type: System.String
      description: "\n<p>A string in lowercase.</p>\n"
  seealso:
  - type: System.String.ToLowerInvariant
    commentId: M:System.String.ToLowerInvariant
  - type: System.String.ToUpper
    commentId: M:System.String.ToUpper
  - type: System.String.ToUpperInvariant
    commentId: M:System.String.ToUpperInvariant
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.ToLowerInvariant
  commentId: M:System.String.ToLowerInvariant
  id: ToLowerInvariant
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToLowerInvariant()
  fullName: System.String.ToLowerInvariant()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLowerInvariant
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1616
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object converted to lowercase using the casing rules of the invariant culture.</p>\n"
  remarks: "\n<p>The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to <code>ToLower(CultureInfo.InvariantCulture)</code>. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</p>\n"
  example:
  - <p>The following example defines a string array that contains a single word in a number of languages. The <xref href="System.String.ToLowerInvariant" data-throw-if-not-resolved="false"></xref> method is used to populate the elements of a parallel array with the case-insensitive version of each word. The <xref href="System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})" data-throw-if-not-resolved="false"></xref> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language. </p>System.String.ToLowerInvariant#1
  syntax:
    content: public string ToLowerInvariant()
    content.vb: Public Function ToLowerInvariant As String
    return:
      type: System.String
      description: "\n<p>The lowercase equivalent of the current string.</p>\n"
  seealso:
  - type: System.String.ToUpperInvariant
    commentId: M:System.String.ToUpperInvariant
  - type: System.String.ToLower(System.Globalization.CultureInfo)
    commentId: M:System.String.ToLower(System.Globalization.CultureInfo)
  - type: System.String.ToLower
    commentId: M:System.String.ToLower
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.ToString
  commentId: M:System.String.ToString
  id: ToString
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.String.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1617
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns this instance of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>; no actual conversion is performed.</p>\n"
  remarks: "\n<p>Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows. </p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.String.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.Note that the example does not explicitly call the <xref href=\"System.String.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. Instead, the method is called implicitly by the composite formatting feature.</p>string.tostring#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The current string.</p>\n"
  overridden: System.Object.ToString
  seealso:
  - type: System.String.Clone
    commentId: M:System.String.Clone
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.String.ToUpper
  commentId: M:System.String.ToUpper
  id: ToUpper
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToUpper()
  fullName: System.String.ToUpper()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUpper
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1618
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this string converted to uppercase.</p>\n"
  remarks: "\n<p>This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</p>\n<p>The <xref href=\"System.String.ToUpper\" data-throw-if-not-resolved=\"false\"></xref> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> parameter whose value you set to <xref href=\"System.StringComparison.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for a culture-sensitive, case-insensitive comparison.</p>\n"
  example:
  - <p>The following example calls the <xref href="System.String.ToUpper" data-throw-if-not-resolved="false"></xref> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets. It then displays each string whose uppercase character is different from its lowercase character.</p>System.String.ToUpper#1
  syntax:
    content: public string ToUpper()
    content.vb: Public Function ToUpper As String
    return:
      type: System.String
      description: "\n<p>The uppercase equivalent of the current string.</p>\n"
  seealso:
  - type: System.String.ToLower
    commentId: M:System.String.ToLower
  - type: System.String.ToLowerInvariant
    commentId: M:System.String.ToLowerInvariant
  - type: System.String.ToUpperInvariant
    commentId: M:System.String.ToUpperInvariant
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.ToUpperInvariant
  commentId: M:System.String.ToUpperInvariant
  id: ToUpperInvariant
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToUpperInvariant()
  fullName: System.String.ToUpperInvariant()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUpperInvariant
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1619
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object converted to uppercase using the casing rules of the invariant culture.</p>\n"
  remarks: "\n<p>The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref href=\"System.String.ToUpperInvariant\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.String.ToUpperInvariant\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to <code>ToUpper(CultureInfo.InvariantCulture)</code>. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</p>\n<p>This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</p>\n"
  example:
  - <p>The following example defines a string array that contains a single word in a number of languages. The <xref href="System.String.ToUpperInvariant" data-throw-if-not-resolved="false"></xref> method is used to populate the elements of a parallel array with the case-insensitive version of each word. The <xref href="System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})" data-throw-if-not-resolved="false"></xref> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language. </p>System.String.ToUpperInvariant#1
  syntax:
    content: public string ToUpperInvariant()
    content.vb: Public Function ToUpperInvariant As String
    return:
      type: System.String
      description: "\n<p>The uppercase equivalent of the current string.</p>\n"
  seealso:
  - type: System.String.ToLowerInvariant
    commentId: M:System.String.ToLowerInvariant
  - type: System.String.ToUpper
    commentId: M:System.String.ToUpper
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Trim
  commentId: M:System.String.Trim
  id: Trim
  parent: System.String
  langs:
  - csharp
  - vb
  name: Trim()
  fullName: System.String.Trim()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Trim
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1620
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all leading and trailing white-space characters from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.Trim\" data-throw-if-not-resolved=\"false\"></xref> method removes from the current string all leading and trailing white-space characters. Each leading and trailing trim operation stops when a non-white-space character is encountered. For example, if the current string is \"   abc   xyz   \", the <xref href=\"System.String.Trim\" data-throw-if-not-resolved=\"false\"></xref> method returns \"abc   xyz\". To remove white-space characters between words in a string, use a .NET Framework Regular Expressions. </p>\n<p>If the <xref href=\"System.String.Trim\" data-throw-if-not-resolved=\"false\"></xref> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</p>\n<p>If the current string equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or all the characters in the current instance consist of white-space characters, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>White-space characters are defined by the Unicode standard. The <xref href=\"System.String.Trim\" data-throw-if-not-resolved=\"false\"></xref> method removes any leading and trailing characters that produce a return value of <strong>true</strong> when they are passed to the <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.String.Trim\" data-throw-if-not-resolved=\"false\"></xref> method to remove any extra white space from strings entered by the user before concatenating them.</p>System.String.Trim#2"
  syntax:
    content: public string Trim()
    content.vb: Public Function Trim As String
    return:
      type: System.String
      description: "\n<p>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </p>\n"
  seealso:
  - type: System.String.TrimEnd(System.Char[])
    commentId: M:System.String.TrimEnd(System.Char[])
  - type: System.String.TrimStart(System.Char[])
    commentId: M:System.String.TrimStart(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.String.Trim(System.Char[])
  commentId: M:System.String.Trim(System.Char[])
  id: Trim(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Trim(Char[])
  fullName: System.String.Trim(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Trim
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1621
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.Trim(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method removes from the current string all leading and trailing characters that are in the <em>trimChars</em> parameter. Each leading and trailing trim operation stops when a character that is not in <em>trimChars</em> is encountered. For example, if the current string is \"123abc456xyz789\" and <em>trimChars</em> contains the digits from \"1\" through \"9\", the <xref href=\"System.String.Trim(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method returns \"abc456xyz\".</p>\n<p>If the <xref href=\"System.String.Trim(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing <em>trimChars</em> characters found in the current instance are removed.</p>\n<p>If the current string equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or all the characters in the current instance consist of characters in the <em>trimChars</em> array, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>trimChars</em> is <strong>null</strong> or an empty array, this method removes any leading or trailing characters that result in the method returning <strong>true</strong> when they are passed to the <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method,</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.String.Trim(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method to remove space, asterisk (*), and apostrophe (') characters from a string.</p>System.String.Trim#1"
  syntax:
    content: public string Trim(params char[] trimChars)
    content.vb: Public Function Trim(ParamArray trimChars As Char()) As String
    parameters:
    - id: trimChars
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the start and end of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.TrimEnd(System.Char[])
    commentId: M:System.String.TrimEnd(System.Char[])
  - type: System.String.TrimStart(System.Char[])
    commentId: M:System.String.TrimStart(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Trim(System.Char())
  name.vb: Trim(Char())
- uid: System.String.TrimEnd(System.Char[])
  commentId: M:System.String.TrimEnd(System.Char[])
  id: TrimEnd(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: TrimEnd(Char[])
  fullName: System.String.TrimEnd(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimEnd
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1622
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.TrimEnd(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method removes from the current string all trailing characters that are in the <em>trimChars</em> parameter. The trim operation stops when the first character that is not in <em>trimChars</em> is encountered at the end of the string. For example, if the current string is \"123abc456xyz789\" and <em>trimChars</em> contains the digits from \"1\" through \"9\", the <xref href=\"System.String.TrimEnd(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method returns \"123abc456xyz\".</p>\n<p>If the <xref href=\"System.String.TrimEnd(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in <em>trimChars</em> are removed from the current string.</p>\n"
  example:
  - "\n<p>The following example demonstrates how you can use the <xref href=\"System.String.TrimEnd(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method to trim white space or punctuation marks from the end of a string.</p>System.String.TrimEnd#2"
  syntax:
    content: public string TrimEnd(params char[] trimChars)
    content.vb: Public Function TrimEnd(ParamArray trimChars As Char()) As String
    parameters:
    - id: trimChars
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the end of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  - type: System.String.TrimStart(System.Char[])
    commentId: M:System.String.TrimStart(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.TrimEnd(System.Char())
  name.vb: TrimEnd(Char())
- uid: System.String.TrimStart(System.Char[])
  commentId: M:System.String.TrimStart(System.Char[])
  id: TrimStart(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: TrimStart(Char[])
  fullName: System.String.TrimStart(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimStart
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1623
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all leading occurrences of a set of characters specified in an array from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method removes from the current string all leading characters that are in the <em>trimChars</em> parameter. The trim operation stops when a character that is not in <em>trimChars</em> is encountered. For example, if the current string is \"123abc456xyz789\" and <em>trimChars</em> contains the digits from \"1\" through \"9\", the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method returns \"abc456xyz789\".</p>\n<p>If the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method to trim white space and comment characters from lines of source code. The <code>StripComments</code> method wraps a call to <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#. The <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method is also called to remove leading white space when evaluating whether a string is a comment.</p>System.String.TrimStart#1<p>The following example then illustrates a call to the <code>StripComments</code> method.</p>System.String.TrimStart#2"
  syntax:
    content: public string TrimStart(params char[] trimChars)
    content.vb: Public Function TrimStart(ParamArray trimChars As Char()) As String
    parameters:
    - id: trimChars
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that remains after all occurrences of characters in the <em>trimChars</em> parameter are removed from the start of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  - type: System.String.TrimEnd(System.Char[])
    commentId: M:System.String.TrimEnd(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.TrimStart(System.Char())
  name.vb: TrimStart(Char())
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Char>
  fullName: System.Collections.Generic.IEnumerable<System.Char>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Char)
  name.vb: IEnumerable(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.String}
  parent: System
  definition: System.IComparable`1
  name: IComparable<String>
  fullName: System.IComparable<System.String>
  fullname.vb: System.IComparable(Of System.String)
  name.vb: IComparable(Of String)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: IConvertible
  fullName: System.IConvertible
- uid: System.IEquatable{System.String}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<String>
  fullName: System.IEquatable<System.String>
  fullname.vb: System.IEquatable(Of System.String)
  name.vb: IEquatable(Of String)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Char*
  isExternal: false
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.StringComparison
  parent: System
  isExternal: false
  name: StringComparison
  fullName: System.StringComparison
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IComparable{System.String}.CompareTo(System.String)
  parent: System.IComparable{System.String}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(String)
  fullName: System.IComparable<System.String>.CompareTo(System.String)
  fullname.vb: System.IComparable(Of System.String).CompareTo(System.String)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.String>.CompareTo
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.String).CompareTo
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: Collections.Generic.IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IEquatable{System.String}.Equals(System.String)
  parent: System.IEquatable{System.String}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(String)
  fullName: System.IEquatable<System.String>.Equals(System.String)
  fullname.vb: System.IEquatable(Of System.String).Equals(System.String)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.String>.Equals
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.String).Equals
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.StringSplitOptions
  parent: System
  isExternal: false
  name: StringSplitOptions
  fullName: System.StringSplitOptions
- uid: System.Collections.Generic.IEnumerable{System.Char}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Char}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Char).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Char).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Char>
  fullName: System.Collections.Generic.IEnumerator<System.Char>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Char)
  name.vb: IEnumerator(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: GetTypeCode()
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToBoolean(IFormatProvider)
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToByte(IFormatProvider)
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToChar(IFormatProvider)
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDateTime(IFormatProvider)
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDecimal(IFormatProvider)
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDouble(IFormatProvider)
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt16(IFormatProvider)
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt32(IFormatProvider)
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt64(IFormatProvider)
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSByte(IFormatProvider)
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSingle(IFormatProvider)
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToString(IFormatProvider)
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToType(Type, IFormatProvider)
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt16(IFormatProvider)
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt32(IFormatProvider)
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt64(IFormatProvider)
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
