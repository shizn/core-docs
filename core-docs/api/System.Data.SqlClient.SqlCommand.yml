items:
- uid: System.Data.SqlClient.SqlCommand
  commentId: T:System.Data.SqlClient.SqlCommand
  id: SqlCommand
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlCommand.#ctor
  - System.Data.SqlClient.SqlCommand.#ctor(System.String)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlCommand.Cancel
  - System.Data.SqlClient.SqlCommand.CommandText
  - System.Data.SqlClient.SqlCommand.CommandTimeout
  - System.Data.SqlClient.SqlCommand.CommandType
  - System.Data.SqlClient.SqlCommand.Connection
  - System.Data.SqlClient.SqlCommand.CreateDbParameter
  - System.Data.SqlClient.SqlCommand.CreateParameter
  - System.Data.SqlClient.SqlCommand.DbConnection
  - System.Data.SqlClient.SqlCommand.DbParameterCollection
  - System.Data.SqlClient.SqlCommand.DbTransaction
  - System.Data.SqlClient.SqlCommand.DesignTimeVisible
  - System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  - System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteReader
  - System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteScalar
  - System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.Parameters
  - System.Data.SqlClient.SqlCommand.Prepare
  - System.Data.SqlClient.SqlCommand.StatementCompleted
  - System.Data.SqlClient.SqlCommand.Transaction
  - System.Data.SqlClient.SqlCommand.UpdatedRowSource
  langs:
  - csharp
  - vb
  name: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlCommand
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 17
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. This class cannot be inherited.</p>\n"
  remarks: "\n<p>When an instance of <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> is created, the read/write properties are set to their initial values. For a list of these values, see the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> features the following methods for executing commands at a SQL Server database: </p>\n<p>Item </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, generally executing commands such as INSERT, DELETE, UPDATE, and SET statements. Each call to <xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref> must be paired with a call to <xref href=\"System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> which finishes the operation, typically on a separate thread.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and retrieves one or more results sets from the server. Each call to <xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> must be paired with a call to <xref href=\"System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> which finishes the operation, typically on a separate thread.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>. Each call to <strong>BeginExecuteXmlReader</strong> must be paired with a call to <strong>EndExecuteXmlReader</strong>, which finishes the operation, typically on a separate thread, and returns an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Executes commands that return rows. For increased performance, <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> invokes commands using the Transact-SQL <strong>sp_executesql</strong> system stored procedure. Therefore, <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> might not have the effect that you want if used to execute commands such as Transact-SQL SET statements. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Executes commands such as Transact-SQL INSERT, DELETE, UPDATE, and SET statements. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalar\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Retrieves a single value (for example, an aggregate value) from a database. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</td></tr></tbody></table>\n<p>You can reset the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property and reuse the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> object. However, you must close the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> before you can execute a new or previous command.</p>\n<p>If a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is generated by the method executing a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>. However, the user can reopen the connection and continue.</p>\n<p>Nameless, also called ordinal, parameters are not supported by the .NET Framework Data Provider for SQL Server.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, and a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. The example reads through the data, writing it to the console. Finally, the example closes the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> and then the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> as it exits the <strong>Using</strong> code blocks.</p>Classic WebData SqlCommand Example#1"
  - "\n<p>The following sample shows how to create and execute different types of SqlCommand objects.</p>\n<p>First you must create the sample database, by executing the following script: </p>\n<pre><code>USE [master]\nGO\n\nCREATE DATABASE [MySchool]\nGO\n\nUSE [MySchool]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE procedure [dbo].[CourseExtInfo] @CourseId int\nas\nselect c.CourseID,c.Title,c.Credits,d.Name as DepartmentName\nfrom Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID\nwhere c.CourseID=@CourseId\n\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\ncreate procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output\nas\nselect @CourseCount=Count(c.CourseID)\nfrom course as c\nwhere c.DepartmentID=@DepartmentId\n\nselect d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator\nfrom Department as d\nwhere d.DepartmentID=@DepartmentId\n\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCreate PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear] \n@Year int,@BudgetSum money output\nAS\nBEGIN\nSELECT @BudgetSum=SUM([Budget])\nFROM [MySchool].[dbo].[Department]\nWhere YEAR([StartDate])=@Year \n\nSELECT [DepartmentID]\n,[Name]\n,[Budget]\n,[StartDate]\n,[Administrator]\nFROM [MySchool].[dbo].[Department]\nWhere YEAR([StartDate])=@Year\n\nEND\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Course](\n[CourseID] [nvarchar](10) NOT NULL,\n[Year] [smallint] NOT NULL,\n[Title] [nvarchar](100) NOT NULL,\n[Credits] [int] NOT NULL,\n[DepartmentID] [int] NOT NULL,\nCONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED \n(\n[CourseID] ASC,\n[Year] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY]\n\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Department](\n[DepartmentID] [int] IDENTITY(1,1) NOT NULL,\n[Name] [nvarchar](50) NOT NULL,\n[Budget] [money] NOT NULL,\n[StartDate] [datetime] NOT NULL,\n[Administrator] [int] NULL,\nCONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED \n(\n[DepartmentID] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY]\n\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Person](\n[PersonID] [int] IDENTITY(1,1) NOT NULL,\n[LastName] [nvarchar](50) NOT NULL,\n[FirstName] [nvarchar](50) NOT NULL,\n[HireDate] [datetime] NULL,\n[EnrollmentDate] [datetime] NULL,\nCONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED \n(\n[PersonID] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY]\n\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[StudentGrade](\n[EnrollmentID] [int] IDENTITY(1,1) NOT NULL,\n[CourseID] [nvarchar](10) NOT NULL,\n[StudentID] [int] NOT NULL,\n[Grade] [decimal](3, 2) NOT NULL,\nCONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED \n(\n[EnrollmentID] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY]\n\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\ncreate view [dbo].[EnglishCourse]\nas\nselect c.CourseID,c.Title,c.Credits,c.DepartmentID\nfrom Course as c join Department as d on c.DepartmentID=d.DepartmentID\nwhere d.Name=N'English'\n\nGO\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)\nSET IDENTITY_INSERT [dbo].[Department] ON \n\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)\nSET IDENTITY_INSERT [dbo].[Department] OFF\nSET IDENTITY_INSERT [dbo].[Person] ON \n\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)\nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)\nSET IDENTITY_INSERT [dbo].[Person] OFF\nSET IDENTITY_INSERT [dbo].[StudentGrade] ON \n\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))\nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))\nSET IDENTITY_INSERT [dbo].[StudentGrade] OFF\nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])\nREFERENCES [dbo].[Department] ([DepartmentID])\nGO\nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]\nGO\nALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])\nREFERENCES [dbo].[Person] ([PersonID])\nGO\nALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]\nGO</code></pre>\n<p>Next, compile and execute the following:</p>\n<pre><code>using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Threading.Tasks;\n\nclass Program {\n\nstatic class SqlHelper {\n// Set the connection, command, and then execute the command with non query.\npublic static Int32 ExecuteNonQuery(String connectionString, String commandText,\n  CommandType commandType, params SqlParameter[] parameters) {\n using (SqlConnection conn = new SqlConnection(connectionString)) {\n    using (SqlCommand cmd = new SqlCommand(commandText, conn)) {\n       // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect \n       // type is only for OLE DB.  \n       cmd.CommandType = commandType;\n       cmd.Parameters.AddRange(parameters);\n\n       conn.Open();\n       return cmd.ExecuteNonQuery();\n    }\n }\n}\n\n// Set the connection, command, and then execute the command and only return one value.\npublic static Object ExecuteScalar(String connectionString, String commandText,\n  CommandType commandType, params SqlParameter[] parameters) {\n using (SqlConnection conn = new SqlConnection(connectionString)) {\n    using (SqlCommand cmd = new SqlCommand(commandText, conn)) {\n       cmd.CommandType = commandType;\n       cmd.Parameters.AddRange(parameters);\n\n       conn.Open();\n       return cmd.ExecuteScalar();\n    }\n }\n}\n\n// Set the connection, command, and then execute the command with query and return the reader.\npublic static SqlDataReader ExecuteReader(String connectionString, String commandText,\n  CommandType commandType, params SqlParameter[] parameters) {\n SqlConnection conn = new SqlConnection(connectionString);\n\n using (SqlCommand cmd = new SqlCommand(commandText, conn)) {\n    cmd.CommandType = commandType;\n    cmd.Parameters.AddRange(parameters);\n\n    conn.Open();\n    // When using CommandBehavior.CloseConnection, the connection will be closed when the \n    // IDataReader is closed.\n    SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);\n\n    return reader;\n }\n}\n}\n\nstatic void Main(string[] args) {\nString connectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;\";\n\nCountCourses(connectionString, 2012);\nConsole.WriteLine();\n\nConsole.WriteLine(\"Following result is the departments that started from 2007:\");\nGetDepartments(connectionString, 2007);\nConsole.WriteLine();\n\nConsole.WriteLine(\"Add the credits when the credits of course is lower than 4.\");\nAddCredits(connectionString, 4);\nConsole.WriteLine();\n\nConsole.WriteLine(\"Please press any key to exit...\");\nConsole.ReadKey();\n}\n\nstatic void CountCourses(String connectionString, Int32 year) {\nString commandText = \"Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year\";\nSqlParameter parameterYear = new SqlParameter(\"@Year\", SqlDbType.Int);\nparameterYear.Value = year;\n\nObject oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);\nInt32 count;\nif (Int32.TryParse(oValue.ToString(), out count))\n Console.WriteLine(\"There {0} {1} course{2} in {3}.\", count > 1 ? \"are\" : \"is\", count, count > 1 ? \"s\" : null, year);\n}\n\n// Display the Departments that start from the specified year.\nstatic void GetDepartments(String connectionString, Int32 year) {\nString commandText = \"dbo.GetDepartmentsOfSpecifiedYear\";\n\n// Specify the year of StartDate\nSqlParameter parameterYear = new SqlParameter(\"@Year\", SqlDbType.Int);\nparameterYear.Value = year;\n\n// When the direction of parameter is set as Output, you can get the value after \n// executing the command.\nSqlParameter parameterBudget = new SqlParameter(\"@BudgetSum\", SqlDbType.Money);\nparameterBudget.Direction = ParameterDirection.Output;\n\nusing (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,\n  CommandType.StoredProcedure, parameterYear, parameterBudget)) {\n Console.WriteLine(\"{0,-20}{1,-20}{2,-20}{3,-20}\", \"Name\", \"Budget\", \"StartDate\",\n     \"Administrator\");\n while (reader.Read()) {\n    Console.WriteLine(\"{0,-20}{1,-20:C}{2,-20:d}{3,-20}\", reader[\"Name\"],\n        reader[\"Budget\"], reader[\"StartDate\"], reader[\"Administrator\"]);\n }\n}\nConsole.WriteLine(\"{0,-20}{1,-20:C}\", \"Sum:\", parameterBudget.Value);\n}\n\n// If credits of course is lower than the certain value, the method will add the credits.\nstatic void AddCredits(String connectionString, Int32 creditsLow) {\nString commandText = \"Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits\";\n\nSqlParameter parameterCredits = new SqlParameter(\"@Credits\", creditsLow);\n\nInt32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);\n\nConsole.WriteLine(\"{0} row{1} {2} updated.\", rows, rows > 1 ? \"s\" : null, rows > 1 ? \"are\" : \"is\");\n}\n}</code></pre>\n"
  syntax:
    content: 'public sealed class SqlCommand : DbCommand'
    content.vb: >-
      Public NotInheritable Class SqlCommand
          Inherits DbCommand
  inheritance:
  - System.Object
  implements:
  - System.Data.Common.DbCommand
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlCommand.#ctor
  commentId: M:System.Data.SqlClient.SqlCommand.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: SqlCommand()
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand()
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 202
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Properties </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>30 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>CommandType.Text</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Null </p>\n</td></tr></tbody></table>\n<p>You can change the value for any of these properties through a separate call to the property.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and sets the <strong>CommandTimeout</strong> property.</p>Classic WebData IDbCommand.CommandTimeout Example#1"
  syntax:
    content: public SqlCommand()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String)
  commentId: M:System.Data.SqlClient.SqlCommand.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: SqlCommand(String)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 207
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> class with the text of the query.</p>\n"
  remarks: "\n<p>When an instance of <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> is created, the following read/write properties are set to initial values.</p>\n<p>Properties </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>cmdText</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>30 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>CommandType.Text</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>null </p>\n</td></tr></tbody></table>\n<p>You can change the value for any of these properties through a separate call to the property.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, passing in the connection string and command text.</p>Classic WebData SqlCommand.SqlCommand1 Example#1"
  syntax:
    content: public SqlCommand(string cmdText)
    content.vb: Public Sub New(cmdText As String)
    parameters:
    - id: cmdText
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  commentId: M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: SqlCommand(String, SqlConnection)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(System.String, System.Data.SqlClient.SqlConnection)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 212
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> class with the text of the query and a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Properties </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>cmdText</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>30 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>CommandType.Text</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A new <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> that is the value for the <em>connection</em> parameter. </p>\n</td></tr></tbody></table>\n<p>You can change the value for any of these parameters by setting the related property.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlCommand.SqlCommand2 Example#1"
  syntax:
    content: public SqlCommand(string cmdText, SqlConnection connection)
    content.vb: Public Sub New(cmdText As String, connection As SqlConnection)
    parameters:
    - id: cmdText
      type: System.String
    - id: connection
      type: System.Data.SqlClient.SqlConnection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  commentId: M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: SqlCommand(String, SqlConnection, SqlTransaction)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(System.String, System.Data.SqlClient.SqlConnection, System.Data.SqlClient.SqlTransaction)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 218
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> class with the text of the query, a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Properties </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>cmdText</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>30 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>CommandType.Text</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A new <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> that is the value for the <em>connection</em> parameter. </p>\n</td></tr></tbody></table>\n<p>You can change the value for any of these parameters by setting the related property.</p>\n"
  syntax:
    content: public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction)
    content.vb: Public Sub New(cmdText As String, connection As SqlConnection, transaction As SqlTransaction)
    parameters:
    - id: cmdText
      type: System.String
    - id: connection
      type: System.Data.SqlClient.SqlConnection
    - id: transaction
      type: System.Data.SqlClient.SqlTransaction
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.CommandText
  commentId: P:System.Data.SqlClient.SqlCommand.CommandText
  id: CommandText
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: CommandText
  fullName: System.Data.SqlClient.SqlCommand.CommandText
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CommandText
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 343
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the Transact-SQL statement, table name or stored procedure to execute at the data source.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>StoredProcedure</strong>, the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the <strong>Execute</strong> methods.</p>\n<p>The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a Transact-SQL statement or a stored procedure called by a command of <strong>CommandType.Text</strong>. In this case, named parameters must be used. For example: </p>\n<pre><code> SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID</code></pre>\n<p>For more information, see Configuring Parameters and Parameter Data Types.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlCommand.CommandText Example#1"
  syntax:
    content: public override string CommandText { get; set; }
    content.vb: Public Overrides Property CommandText As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout
  commentId: P:System.Data.SqlClient.SqlCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: CommandTimeout
  fullName: System.Data.SqlClient.SqlCommand.CommandTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CommandTimeout
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 360
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</p>\n"
  remarks: "\n<p>A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref> property will be ignored during asynchronous method calls such as <xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref> has no effect when the command is executed against a context connection (a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> opened with \"context connection=true\" in the connection string).</p>\n<p>This property is the cumulative time-out (for all network packets that are read during the invocation of a method) for all network reads during command execution or processing of the results. A time-out can still occur after the first row is returned, and does not include user processing time, only network read time.</p>\n<p>For example, with a 30 second time out, if <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> requires two network packets, then it has 30 seconds to read both network packets. If you call <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> again, it will have another 30 seconds to read any data that it requires.</p>\n<pre><code>using System;\nusing System.Data.SqlClient;\n/// \npublic class A {\n/// \npublic static void Main() {\nstring connectionString = \"\";\n// Wait for 5 second delay in the command\nstring queryString = \"waitfor delay '00:00:05'\";\nusing (SqlConnection connection = new SqlConnection(connectionString)) {\n connection.Open();\n SqlCommand command = new SqlCommand(queryString, connection);\n // Setting command timeout to 1 second\n command.CommandTimeout = 1;\n try {\n    command.ExecuteNonQuery();\n }\n catch (SqlException e) {\n    Console.WriteLine(\"Got expected SqlException due to command timeout \");\n    Console.WriteLine(e);\n }\n}\n}\n}</code></pre>\n"
  syntax:
    content: public override int CommandTimeout { get; set; }
    content.vb: Public Overrides Property CommandTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.CommandType
  commentId: P:System.Data.SqlClient.SqlCommand.CommandType
  id: CommandType
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: CommandType
  fullName: System.Data.SqlClient.SqlCommand.CommandType
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CommandType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 389
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a value indicating how the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property is to be interpreted.</p>\n"
  remarks: "\n<p>When you set the <xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>StoredProcedure</strong>, you should set the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.</p>\n<p>The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called with a <xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Data.CommandType.Text\" data-throw-if-not-resolved=\"false\"></xref>. In this case, named parameters must be used. For example: </p>\n<p>SELECT * FROM Customers WHERE CustomerID = @CustomerID </p>\n<p>For more information, see Configuring Parameters and Parameter Data Types.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData IDbCommand.CommandTimeout Example#1"
  syntax:
    content: public override CommandType CommandType { get; set; }
    content.vb: Public Overrides Property CommandType As CommandType
    parameters: []
    return:
      type: CommandType
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value was not a valid <xref href=\"System.Data.CommandType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.Connection
  commentId: P:System.Data.SqlClient.SqlCommand.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: Connection
  fullName: System.Data.SqlClient.SqlCommand.Connection
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 225
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> used by this instance of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the command is enlisted in an existing transaction, and the connection is changed, trying to execute the command will throw an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the <xref href=\"System.Data.SqlClient.SqlCommand.Transaction\" data-throw-if-not-resolved=\"false\"></xref> property is not null and the transaction has already been committed or rolled back, <xref href=\"System.Data.SqlClient.SqlCommand.Transaction\" data-throw-if-not-resolved=\"false\"></xref> is set to null.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlCommand.Connection Example#1"
  syntax:
    content: public SqlConnection Connection { get; set; }
    content.vb: Public Property Connection As SqlConnection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlConnection
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> property was changed while the command was enlisted in a transaction.. </p>\n"
  seealso:
  - type: System.Data.SqlClient.SqlCommand.CommandText
    commentId: P:System.Data.SqlClient.SqlCommand.CommandText
  - type: System.Data.SqlClient.SqlCommand.CommandTimeout
    commentId: P:System.Data.SqlClient.SqlCommand.CommandTimeout
  - type: System.Data.SqlClient.SqlCommand.CommandType
    commentId: P:System.Data.SqlClient.SqlCommand.CommandType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.DbConnection
  commentId: P:System.Data.SqlClient.SqlCommand.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: DbConnection
  fullName: System.Data.SqlClient.SqlCommand.DbConnection
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbConnection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 277
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override DbConnection DbConnection { get; set; }
    content.vb: Protected Overrides Property DbConnection As DbConnection
    parameters: []
    return:
      type: DbConnection
  modifiers.csharp:
  - protected
  - override
  - get
  - set
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection
  commentId: P:System.Data.SqlClient.SqlCommand.DbParameterCollection
  id: DbParameterCollection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: DbParameterCollection
  fullName: System.Data.SqlClient.SqlCommand.DbParameterCollection
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbParameterCollection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 446
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override DbParameterCollection DbParameterCollection { get; }
    content.vb: Protected Overrides ReadOnly Property DbParameterCollection As DbParameterCollection
    parameters: []
    return:
      type: DbParameterCollection
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlCommand.DbTransaction
  commentId: P:System.Data.SqlClient.SqlCommand.DbTransaction
  id: DbTransaction
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: DbTransaction
  fullName: System.Data.SqlClient.SqlCommand.DbTransaction
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbTransaction
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 331
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override DbTransaction DbTransaction { get; set; }
    content.vb: Protected Overrides Property DbTransaction As DbTransaction
    parameters: []
    return:
      type: DbTransaction
  modifiers.csharp:
  - protected
  - override
  - get
  - set
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  commentId: P:System.Data.SqlClient.SqlCommand.DesignTimeVisible
  id: DesignTimeVisible
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: DesignTimeVisible
  fullName: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DesignTimeVisible
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 420
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a value indicating whether the command object should be visible in a Windows Form Designer control.</p>\n"
  syntax:
    content: public override bool DesignTimeVisible { get; set; }
    content.vb: Public Overrides Property DesignTimeVisible As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.Parameters
  commentId: P:System.Data.SqlClient.SqlCommand.Parameters
  id: Parameters
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: Parameters
  fullName: System.Data.SqlClient.SqlCommand.Parameters
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameters
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 432
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the <xref href=\"System.Data.SqlClient.SqlParameterCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called by a command of <strong>CommandType.Text</strong>. In this case, named parameters must be used. For example: </p>\n<p>SELECT * FROM Customers WHERE CustomerID = @CustomerID </p>\n<p>If the parameters in the collection do not match the requirements of the query to be executed, an error may result.</p>\n<p>For more information, see Configuring Parameters and Parameter Data Types.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and add parameters to the <xref href=\"System.Data.SqlClient.SqlParameterCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>DataWorks SqlParameterCollection.AddWithValue#1"
  syntax:
    content: public SqlParameterCollection Parameters { get; }
    content.vb: Public ReadOnly Property Parameters As SqlParameterCollection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlParameterCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlCommand.Transaction
  commentId: P:System.Data.SqlClient.SqlCommand.Transaction
  id: Transaction
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: Transaction
  fullName: System.Data.SqlClient.SqlCommand.Transaction
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Transaction
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 305
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref> within which the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> executes.</p>\n"
  remarks: "\n<p>You cannot set the <xref href=\"System.Data.SqlClient.SqlCommand.Transaction\" data-throw-if-not-resolved=\"false\"></xref> property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref> object that is not connected to the same <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> as the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> object, an exception is thrown the next time that you attempt to execute a statement.</p>\n"
  syntax:
    content: public SqlTransaction Transaction { get; set; }
    content.vb: Public Property Transaction As SqlTransaction
    parameters: []
    return:
      type: System.Data.SqlClient.SqlTransaction
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  commentId: P:System.Data.SqlClient.SqlCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: UpdatedRowSource
  fullName: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UpdatedRowSource
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 454
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets how command results are applied to the <xref href=\"System.Data.DataRow\" data-throw-if-not-resolved=\"false\"></xref> when used by the <strong>Update </strong>method of the <xref href=\"System.Data.Common.DbDataAdapter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The default <xref href=\"System.Data.UpdateRowSource\" data-throw-if-not-resolved=\"false\"></xref> value is <strong>Both</strong> unless the command is automatically generated (as in the case of the <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref>), in which case the default is <strong>None</strong>.</p>\n<p>For more information about using the <strong>UpdatedRowSource</strong> property, see DataAdapter Parameters.</p>\n"
  syntax:
    content: public override UpdateRowSource UpdatedRowSource { get; set; }
    content.vb: Public Overrides Property UpdatedRowSource As UpdateRowSource
    parameters: []
    return:
      type: UpdateRowSource
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.StatementCompleted
  commentId: E:System.Data.SqlClient.SqlCommand.StatementCompleted
  id: StatementCompleted
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: StatementCompleted
  fullName: System.Data.SqlClient.SqlCommand.StatementCompleted
  type: Event
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StatementCompleted
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 476
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Occurs when the execution of a Transact-SQL statement completes.</p>\n"
  syntax:
    content: public event StatementCompletedEventHandler StatementCompleted
    content.vb: Public Event StatementCompleted As StatementCompletedEventHandler
    return:
      type: System.Data.StatementCompletedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.Cancel
  commentId: M:System.Data.SqlClient.SqlCommand.Cancel
  id: Cancel
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: Cancel()
  fullName: System.Data.SqlClient.SqlCommand.Cancel()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cancel
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 637
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Tries to cancel the execution of a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If there is nothing to cancel, nothing occurs. However, if there is a command in process, and the attempt to cancel fails, no exception is generated. </p>\n<p>In some, rare, cases, if you call <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> then call <xref href=\"System.Data.SqlClient.SqlDataReader.Close\" data-throw-if-not-resolved=\"false\"></xref> (implicitily or explicitly) before calling <xref href=\"System.Data.SqlClient.SqlCommand.Cancel\" data-throw-if-not-resolved=\"false\"></xref>, and then call <xref href=\"System.Data.SqlClient.SqlCommand.Cancel\" data-throw-if-not-resolved=\"false\"></xref>, the cancel command will not be sent to SQL Server and the result set can continue to stream after you call <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref>. To avoid this, make sure that you call <xref href=\"System.Data.SqlClient.SqlCommand.Cancel\" data-throw-if-not-resolved=\"false\"></xref> before closing the reader or connection.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Data.SqlClient.SqlCommand.Cancel\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic WebData SqlCommand.Cancel#1"
  syntax:
    content: public override void Cancel()
    content.vb: Public Overrides Sub Cancel
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter
  commentId: M:System.Data.SqlClient.SqlCommand.CreateDbParameter
  id: CreateDbParameter
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: CreateDbParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateDbParameter()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDbParameter
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 723
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override DbParameter CreateDbParameter()
    content.vb: Protected Overrides Function CreateDbParameter As DbParameter
    return:
      type: DbParameter
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.CreateParameter
  commentId: M:System.Data.SqlClient.SqlCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: CreateParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateParameter()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateParameter
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 718
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new instance of a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlCommand.CreateParameter\" data-throw-if-not-resolved=\"false\"></xref> method is a strongly-typed version of <xref href=\"System.Data.IDbCommand.CreateParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlParameter CreateParameter()
    content.vb: Public Function CreateParameter As SqlParameter
    return:
      type: System.Data.SqlClient.SqlParameter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  id: ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteDbDataReader
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 305
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override Common.DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
    content.vb: Protected Overrides Function ExecuteDbDataReader(behavior As CommandBehavior) As Common.DbDataReader
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
    return:
      type: System.Data.Common.DbDataReader
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  id: ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteDbDataReaderAsync
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 306
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override Task<Common.DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
    content.vb: Protected Overrides Function ExecuteDbDataReaderAsync(behavior As CommandBehavior, cancellationToken As CancellationToken) As Task(Of Common.DbDataReader)
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteNonQuery
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 806
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Executes a Transact-SQL statement against the connection and returns the number of rows affected.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref> to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> by executing UPDATE, INSERT, or DELETE statements.</p>\n<p>Although the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref> returns no rows, any output parameters or return values mapped to parameters are populated with data.</p>\n<p>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. When a trigger exists on a table being inserted or updated, the return value includes the number of rows affected by both the insert or update operation and the number of rows affected by the trigger or triggers. For all other types of statements, the return value is -1. If a rollback occurs, the return value is also -1.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and then executes it using <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref>. The example is passed a string that is a Transact-SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.</p>Classic WebData SqlCommand.ExecuteNonQuery Example#1"
  syntax:
    content: public override int ExecuteNonQuery()
    content.vb: Public Overrides Function ExecuteNonQuery As Integer
    return:
      type: System.Int32
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  id: ExecuteNonQueryAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteNonQueryAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteNonQueryAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1511
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref>, which executes a Transact-SQL statement against the connection and returns the number of rows affected. The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken)
    content.vb: Public Overrides Function ExecuteNonQueryAsync(cancellationToken As CancellationToken) As Task(Of Integer)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteReader
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1324
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>StoredProcedure</strong>, the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a transaction is deadlocked, an exception may not be thrown until <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>The multiple active result set (MARS) feature allows for multiple actions using the same connection.</p>\n<p>If you use <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <see cref=\"Overload:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader\"></see> to read FOR XML queries. For more information, see article Q310378, \"PRB: XML Data Is Truncated When You Use SqlDataReader,\" in the Microsoft Knowledge Base at http://support.microsoft.com.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source.</p>Classic WebData SqlCommand.ExecuteReader Example#1"
  syntax:
    content: public SqlDataReader ExecuteReader()
    content.vb: Public Function ExecuteReader As SqlDataReader
    return:
      type: System.Data.SqlClient.SqlDataReader
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current state of the connection is closed. <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> requires an open <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteReader
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 310
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, and builds a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> using one of the <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>StoredProcedure</strong>, the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref> to retrieve large values and binary data. Otherwise, an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> might occur and the connection will be closed.</p>\n<p>The multiple active result set (MARS) feature allows for multiple actions using the same connection.</p>\n<p>If you use <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <see cref=\"Overload:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader\"></see> to read FOR XML queries. For more information, see article Q310378, \"PRB: XML Data Is Truncated When You Use SqlDataReader,\" in the Microsoft Knowledge Base at http://support.microsoft.com.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source. <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Data.CommandBehavior.CloseConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic WebData SqlCommand.ExecuteReader2#1"
  syntax:
    content: public SqlDataReader ExecuteReader(CommandBehavior behavior)
    content.vb: Public Function ExecuteReader(behavior As CommandBehavior) As SqlDataReader
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "\n<p>One of the <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  id: ExecuteReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteReaderAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1577
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>, which sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public Task<SqlDataReader> ExecuteReaderAsync()
    content.vb: Public Function ExecuteReaderAsync As Task(Of SqlDataReader)
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReaderAsync\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  id: ExecuteReaderAsync(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteReaderAsync(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteReaderAsync
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 312
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)\" data-throw-if-not-resolved=\"false\"></xref>, which sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, and builds a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public Task<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior)
    content.vb: Public Function ExecuteReaderAsync(behavior As CommandBehavior) As Task(Of SqlDataReader)
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "\n<p>Options for statement execution and data retrieval.  When is set to <strong>Default</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> reads the entire row before returning a complete Task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  id: ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteReaderAsync(CommandBehavior, CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteReaderAsync
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 313
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)\" data-throw-if-not-resolved=\"false\"></xref>, which sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, and builds a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public Task<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
    content.vb: Public Function ExecuteReaderAsync(behavior As CommandBehavior, cancellationToken As CancellationToken) As Task(Of SqlDataReader)
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "\n<p>Options for statement execution and data retrieval.  When is set to <strong>Default</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> reads the entire row before returning a complete Task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  id: ExecuteReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteReaderAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1587
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>, which sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public Task<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken)
    content.vb: Public Function ExecuteReaderAsync(cancellationToken As CancellationToken) As Task(Of SqlDataReader)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteScalar()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalar()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteScalar
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 738
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalar\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> method, and then performing the operations that you need to generate the single value using the data returned by a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A typical <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalar\" data-throw-if-not-resolved=\"false\"></xref> query can be formatted as in the following C# example: </p>\n<pre><code> cmd.CommandText = \"SELECT COUNT(*) FROM dbo.region\";\nInt32 count = (Int32) cmd.ExecuteScalar();</code></pre>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and then executes it using <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalar\" data-throw-if-not-resolved=\"false\"></xref>. The example is passed a string representing a new value to be inserted into a table, and a string to use to connect to the data source. The function returns the new <strong>Identity</strong> column value if a new row was inserted, 0 on failure.</p>DataWorks SqlCommand.ExecuteScalar#1"
  syntax:
    content: public override object ExecuteScalar()
    content.vb: Public Overrides Function ExecuteScalar As Object
    return:
      type: System.Object
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  id: ExecuteScalarAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteScalarAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteScalarAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1652
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalar\" data-throw-if-not-resolved=\"false\"></xref>, which executes the query asynchronously and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.</p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public override Task<object> ExecuteScalarAsync(CancellationToken cancellationToken)
    content.vb: Public Overrides Function ExecuteScalarAsync(cancellationToken As CancellationToken) As Task(Of Object)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  id: ExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReader()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteXmlReader
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1125
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> property ordinarily specifies a Transact-SQL statement with a valid FOR XML clause. However, <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> can also specify a statement that returns <strong>ntext</strong> or <strong>nvarchar</strong> data that contains valid XML, or the contents of a column defined with the <strong>xml</strong> data type. </p>\n<p>A typical <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref> query can be formatted as in the following Microsoft Visual C# example: </p>\n<pre><code>SqlCommand command = new SqlCommand(\"SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA\", SqlConn);</code></pre>\n<p>This method can also be used to retrieve a single-row, single-column result set that contains XML data. In this case, if more than one row is returned, the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref> method attaches the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to the value on the first row, and discards the rest of the result set.</p>\n<p>The multiple active result set (MARS) feature allows for multiple actions using the same connection.</p>\n<p>If you use <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <see cref=\"Overload:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader\"></see> to read FOR XML queries. For more information, see article Q310378, \"PRB: XML Data Is Truncated When You Use SqlDataReader,\" in the Microsoft Knowledge Base at http://support.microsoft.com.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and then executes it using <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref>. The example is passed a string that is a Transact-SQL FOR XML SELECT statement, and a string to use to connect to the data source.</p>Classic WebData SqlCommand.ExecuteXmlReader#1"
  syntax:
    content: public XmlReader ExecuteXmlReader()
    content.vb: Public Function ExecuteXmlReader As XmlReader
    return:
      type: XmlReader
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  id: ExecuteXmlReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteXmlReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteXmlReaderAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1734
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref>, which sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public Task<XmlReader> ExecuteXmlReaderAsync()
    content.vb: Public Function ExecuteXmlReaderAsync As Task(Of XmlReader)
    return:
      type: System.Threading.Tasks.Task{XmlReader}
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  id: ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: ExecuteXmlReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteXmlReaderAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 1739
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\" data-throw-if-not-resolved=\"false\"></xref>, which sends the <xref href=\"System.Data.SqlClient.SqlCommand.CommandText\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> and builds an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public Task<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken)
    content.vb: Public Function ExecuteXmlReaderAsync(cancellationToken As CancellationToken) As Task(Of XmlReader)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{XmlReader}
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Binary or VarBinary was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> other than Xml was used when <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> was set to <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> closed or dropped during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n<p>A timeout occurred during a streaming operation. For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred in a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object was closed during a streaming operation.  For more information about streaming, see SqlClient Streaming Support.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlCommand.Prepare
  commentId: M:System.Data.SqlClient.SqlCommand.Prepare
  id: Prepare
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: Prepare()
  fullName: System.Data.SqlClient.SqlCommand.Prepare()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prepare
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 515
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a prepared version of the command on an instance of SQL Server.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Data.SqlClient.SqlCommand.CommandType\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>StoredProcedure</strong>, the call to <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref> should succeed, although it may cause a no-op.</p>\n<p>Before you call <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref>, specify the data type of each parameter in the statement to be prepared. For each parameter that has a variable length data type, you must set the <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> property to the maximum size needed. <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref> returns an error if these conditions are not met.</p>\n<p>If the database context is changed by executing the Transact-SQL <strong>USE <database></strong> statement, or by calling the <xref href=\"System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, then <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref> must be called a second time.</p>\n<p>If you call an <strong>Execute</strong> method after calling <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref>, any parameter value that is larger than the value specified by the <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.</p>\n<p>Output parameters (whether prepared or not) must have a user-specified data type. If you specify a variable length data type, you must also specify the maximum <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Prior to Visual Studio 2010, <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref> threw an exception.  Beginning in Visual Studio 2010, this method does not throw an exception.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Data.SqlClient.SqlCommand.Prepare\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic WebData SqlCommand.Prepare#1"
  syntax:
    content: public override void Prepare()
    content.vb: Public Overrides Sub Prepare
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  commentId: M:System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs
    startLine: 728
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  fullName: System.Data.CommandType
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Common.DbParameterCollection
  parent: System.Data.Common
  isExternal: false
  name: DbParameterCollection
  fullName: System.Data.Common.DbParameterCollection
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlParameterCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlParameterCollection
  fullName: System.Data.SqlClient.SqlParameterCollection
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.StatementCompletedEventHandler
  parent: System.Data
  isExternal: false
  name: StatementCompletedEventHandler
  fullName: System.Data.StatementCompletedEventHandler
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.SqlClient.SqlParameter
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlParameter
  fullName: System.Data.SqlClient.SqlParameter
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DbDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.Common.DbDataReader>
  fullname.vb: System.Threading.Tasks.Task(Of System.Data.Common.DbDataReader)
  name.vb: Task(Of DbDataReader)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    fullName: System.Data.Common.DbDataReader
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    fullName: System.Data.Common.DbDataReader
  - name: )
    fullName: )
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Data.SqlClient.SqlDataReader
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
- uid: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SqlDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>
  fullname.vb: System.Threading.Tasks.Task(Of System.Data.SqlClient.SqlDataReader)
  name.vb: Task(Of SqlDataReader)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Data.SqlClient.SqlDataReader
    name: SqlDataReader
    fullName: System.Data.SqlClient.SqlDataReader
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Data.SqlClient.SqlDataReader
    name: SqlDataReader
    fullName: System.Data.SqlClient.SqlDataReader
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Threading.Tasks.Task{System.Xml.XmlReader}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Xml.XmlReader>
  fullName: System.Threading.Tasks.Task<System.Xml.XmlReader>
  fullname.vb: System.Threading.Tasks.Task(Of System.Xml.XmlReader)
  name.vb: Task(Of Xml.XmlReader)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.XmlReader
    name: Xml.XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.XmlReader
    name: Xml.XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Data.SqlClient.SqlException
  isExternal: false
  name: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
