items:
- uid: System.Threading.SpinLock
  commentId: T:System.Threading.SpinLock
  id: SpinLock
  parent: System.Threading
  children:
  - System.Threading.SpinLock.#ctor(System.Boolean)
  - System.Threading.SpinLock.Enter(System.Boolean@)
  - System.Threading.SpinLock.Exit
  - System.Threading.SpinLock.Exit(System.Boolean)
  - System.Threading.SpinLock.IsHeld
  - System.Threading.SpinLock.IsHeldByCurrentThread
  - System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  - System.Threading.SpinLock.TryEnter(System.Boolean@)
  - System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)
  - System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)
  langs:
  - csharp
  - vb
  name: SpinLock
  fullName: System.Threading.SpinLock
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinLock
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 56
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</p>\n"
  remarks: "\n<p>For an example of how to use a Spin Lock, see How to: Use SpinLock for Low-Level Synchronization.</p>\n<p>Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>, in size or due to garbage collection pressure, is overly expensive. A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning. Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short. In general, while holding a spin lock, one should avoid any of these actions:</p>\n<ul><li>\n<p>blocking, </p>\n</li><li>\n<p>calling anything that itself may block, </p>\n</li><li>\n<p>holding more than one spin lock at once, </p>\n</li><li>\n<p>making dynamically dispatched calls (interface and virtuals), </p>\n</li><li>\n<p>making statically dispatched calls into any code one doesn't own, or </p>\n</li><li>\n<p>allocating memory. </p>\n</li></ul>\n<p>\n<xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> should only be used after you have been determined that doing so will improve an application's performance. It is also important to note that <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> is a value type, for performance reasons. For this reason, you must be very careful not to accidentally copy a <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application. If a <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> instance must be passed around, it should be passed by reference rather than by value. </p>\n<p>Do not store <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> instances in readonly fields. </p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref>:</p>System.Threading.SpinLock#01"
  syntax:
    content: >-
      [ComVisible(false)]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [DebuggerTypeProxy(typeof (SpinLock.SystemThreading_SpinLockDebugView))]

      [DebuggerDisplay("IsHeld = {IsHeld}")]

      public struct SpinLock
    content.vb: >-
      <ComVisible(False)>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <DebuggerTypeProxy(GetType(SpinLock.SystemThreading_SpinLockDebugView))>

      <DebuggerDisplay("IsHeld = {IsHeld}")>

      Public Structure SpinLock
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Threading.SpinLock.#ctor(System.Boolean)
  commentId: M:System.Threading.SpinLock.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: SpinLock(Boolean)
  fullName: System.Threading.SpinLock.SpinLock(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 119
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> structure with the option to track thread IDs to improve debugging.</p>\n"
  remarks: "\n<p>The default constructor for <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> tracks thread ownership.</p>\n"
  example:
  - "\n<p>The following example demonstrates how a SpinLock may be used.</p>\n<pre><code>// C#\npublic class MyType\n{\nprivate SpinLock _spinLock = new SpinLock();\n\npublic void DoWork()\n{\nbool lockTaken = false; \ntry\n{\n   _spinLock.Enter(ref lockTaken);\n   // do work here protected by the lock\n}\nfinally\n{\n    if (lockTaken) _spinLock.Exit();\n}\n}\n}</code></pre>\n<pre><code>' Visual Basic\n\nClass MyType\nPrivate _spinLock As New SpinLock()\n\nPublic Sub DoWork()\nDim lockTaken As Boolean = False\nTry\n _spinLock.Enter(lockTaken)\n ' do work here protected by the lock\nFinally\n If lockTaken Then _spinLock.Exit()\nEnd Try\nEnd Sub\nEnd Class</code></pre>\n"
  syntax:
    content: public SpinLock(bool enableThreadOwnerTracking)
    content.vb: Public Sub New(enableThreadOwnerTracking As Boolean)
    parameters:
    - id: enableThreadOwnerTracking
      type: System.Boolean
      description: >-
        Whether to capture and use thread IDs for debugging

        purposes.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SpinLock.IsHeld
  commentId: P:System.Threading.SpinLock.IsHeld
  id: IsHeld
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: IsHeld
  fullName: System.Threading.SpinLock.IsHeld
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsHeld
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 635
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether the lock is currently held by any thread.</p>\n"
  example:
  - 
  syntax:
    content: >-
      public bool IsHeld

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public ReadOnly Property IsHeld As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SpinLock.IsHeldByCurrentThread
  commentId: P:System.Threading.SpinLock.IsHeldByCurrentThread
  id: IsHeldByCurrentThread
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: IsHeldByCurrentThread
  fullName: System.Threading.SpinLock.IsHeldByCurrentThread
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsHeldByCurrentThread
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 661
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether the lock is held by the current thread.</p>\n"
  remarks: "\n<p>If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread. It is invalid to use this property when the lock was initialized to not track thread ownership.</p>\n"
  example:
  - 
  syntax:
    content: >-
      public bool IsHeldByCurrentThread

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public ReadOnly Property IsHeldByCurrentThread As Boolean
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Thread ownership tracking is disabled.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  commentId: P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  id: IsThreadOwnerTrackingEnabled
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: IsThreadOwnerTrackingEnabled
  fullName: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsThreadOwnerTrackingEnabled
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 675
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether thread ownership tracking is enabled for this instance.</p>\n"
  example:
  - 
  syntax:
    content: >-
      public bool IsThreadOwnerTrackingEnabled

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SpinLock.Enter(System.Boolean@)
  commentId: M:System.Threading.SpinLock.Enter(System.Boolean@)
  id: Enter(System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: Enter(ref Boolean)
  fullName: System.Threading.SpinLock.Enter(ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Enter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 157
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again. If thread ownership tracking is enabled (whether it's enabled is available through <xref href=\"System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\" data-throw-if-not-resolved=\"false\"></xref>), an exception will be thrown when a thread tries to re-enter a lock it already holds. However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</p>\n<p>If you call <xref href=\"System.Threading.SpinLock.Exit\" data-throw-if-not-resolved=\"false\"></xref> without having first called <xref href=\"System.Threading.SpinLock.Enter(System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> the internal state of the <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> can become corrupted.</p>\n"
  example:
  - 
  syntax:
    content: public void Enter(ref bool lockTaken)
    content.vb: Public Sub Enter(ByRef lockTaken As Boolean)
    parameters:
    - id: lockTaken
      type: System.Boolean
      description: True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling Enter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.Enter(ByRef System.Boolean)
  name.vb: Enter(ByRef Boolean)
- uid: System.Threading.SpinLock.Exit
  commentId: M:System.Threading.SpinLock.Exit
  id: Exit
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: Exit()
  fullName: System.Threading.SpinLock.Exit()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exit
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 544
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock.</p>\n"
  remarks: "\n<p>The default overload of <xref href=\"System.Threading.SpinLock.Exit\" data-throw-if-not-resolved=\"false\"></xref> provides the same behavior as if calling <xref href=\"System.Threading.SpinLock.Exit(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> using true as the argument.</p>\n<p>If you call <xref href=\"System.Threading.SpinLock.Exit\" data-throw-if-not-resolved=\"false\"></xref> without having first called <xref href=\"System.Threading.SpinLock.Enter(System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>  the internal state of the <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> can become corrupted.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public void Exit()
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Sub Exit
  exceptions:
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SpinLock.Exit(System.Boolean)
  commentId: M:System.Threading.SpinLock.Exit(System.Boolean)
  id: Exit(System.Boolean)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: Exit(Boolean)
  fullName: System.Threading.SpinLock.Exit(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exit
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 575
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock.</p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Threading.SpinLock.Exit(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with the <em>useMemoryBarrier</em> argument set to true will improve the fairness of the lock at the expense of some performance. The default <xref href=\"System.Threading.SpinLock.Exit\" data-throw-if-not-resolved=\"false\"></xref> overload behaves as if specifying true for <em>useMemoryBarrier</em>.</p>\n<p>If you call <xref href=\"System.Threading.SpinLock.Exit\" data-throw-if-not-resolved=\"false\"></xref> without having first called <xref href=\"System.Threading.SpinLock.Enter(System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> the internal state of the <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> can become corrupted.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public void Exit(bool useMemoryBarrier)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Sub Exit(useMemoryBarrier As Boolean)
    parameters:
    - id: useMemoryBarrier
      type: System.Boolean
      description: "\nA Boolean value that indicates whether a memory fence should be issued in order to immediately\npublish the exit operation to other threads.\n"
  exceptions:
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SpinLock.TryEnter(System.Boolean@)
  commentId: M:System.Threading.SpinLock.TryEnter(System.Boolean@)
  id: TryEnter(System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: TryEnter(ref Boolean)
  fullName: System.Threading.SpinLock.TryEnter(ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 189
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  remarks: "\n<p>Unlike <xref href=\"System.Threading.SpinLock.Enter(System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, TryEnter will not block waiting for the lock to be available. If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</p>\n"
  example:
  - 
  syntax:
    content: public void TryEnter(ref bool lockTaken)
    content.vb: Public Sub TryEnter(ByRef lockTaken As Boolean)
    parameters:
    - id: lockTaken
      type: System.Boolean
      description: True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.TryEnter(ByRef System.Boolean)
  name.vb: TryEnter(ByRef Boolean)
- uid: System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)
  commentId: M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)
  id: TryEnter(System.Int32,System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: TryEnter(Int32, ref Boolean)
  fullName: System.Threading.SpinLock.TryEnter(System.Int32, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 256
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  remarks: "\n<p>Unlike <xref href=\"System.Threading.SpinLock.Enter(System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, TryEnter will not block indefinitely waiting for the lock to be available. It will block until either the lock is available or until the <em>millisecondsTimeout</em> has expired.</p>\n"
  example:
  - 
  syntax:
    content: public void TryEnter(int millisecondsTimeout, ref bool lockTaken)
    content.vb: Public Sub TryEnter(millisecondsTimeout As Integer, ByRef lockTaken As Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: lockTaken
      type: System.Boolean
      description: True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.TryEnter(System.Int32, ByRef System.Boolean)
  name.vb: TryEnter(Int32, ByRef Boolean)
- uid: System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)
  commentId: M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)
  id: TryEnter(System.TimeSpan,System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: TryEnter(TimeSpan, ref Boolean)
  fullName: System.Threading.SpinLock.TryEnter(System.TimeSpan, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 220
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  remarks: "\n<p>Unlike <xref href=\"System.Threading.SpinLock.Enter(System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, TryEnter will not block indefinitely waiting for the lock to be available. It will block until either the lock is available or until the <em>timeout</em> has expired.</p>\n"
  example:
  - 
  syntax:
    content: public void TryEnter(TimeSpan timeout, ref bool lockTaken)
    content.vb: Public Sub TryEnter(timeout As TimeSpan, ByRef lockTaken As Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >
        A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds

        to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    - id: lockTaken
      type: System.Boolean
      description: True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> milliseconds.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.TryEnter(System.TimeSpan, ByRef System.Boolean)
  name.vb: TryEnter(TimeSpan, ByRef Boolean)
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.LockRecursionException
  isExternal: false
  name: LockRecursionException
  fullName: System.Threading.LockRecursionException
- uid: System.Threading.SynchronizationLockException
  isExternal: false
  name: SynchronizationLockException
  fullName: System.Threading.SynchronizationLockException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
