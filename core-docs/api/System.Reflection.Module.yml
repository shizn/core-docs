items:
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  id: Module
  parent: System.Reflection
  children:
  - System.Reflection.Module.Assembly
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.Equals(System.Object)
  - System.Reflection.Module.FullyQualifiedName
  - System.Reflection.Module.GetHashCode
  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Module.Name
  - System.Reflection.Module.ToString
  langs:
  - csharp
  - vb
  name: Module
  fullName: System.Reflection.Module
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Module
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 57
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Performs reflection on a module.
  syntax:
    content: 'public abstract class Module : object'
    content.vb: >-
      Public MustInherit Class Module
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.Module.Assembly
  commentId: P:System.Reflection.Module.Assembly
  id: Assembly
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.Module.Assembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 515
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the appropriate <xref href="System.Reflection.Assembly" data-throw-if-not-resolved="false"></xref> for this instance of <xref href="System.Reflection.Module" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public virtual Assembly Assembly { get; }
    content.vb: Public Overridable ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: An Assembly object.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.CustomAttributes
  commentId: P:System.Reflection.Module.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: CustomAttributes
  fullName: System.Reflection.Module.CustomAttributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributes
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 129
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection that contains this module's custom attributes.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As Collections.Generic.IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: A collection that contains this module's custom attributes.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.FullyQualifiedName
  commentId: P:System.Reflection.Module.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: FullyQualifiedName
  fullName: System.Reflection.Module.FullyQualifiedName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullyQualifiedName
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 301
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a string representing the fully qualified name and path to this module.
  syntax:
    content: public virtual string FullyQualifiedName { get; }
    content.vb: Public Overridable ReadOnly Property FullyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: The fully qualified module name.
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: 'The caller does not have the required permissions. '
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.Name
  commentId: P:System.Reflection.Module.Name
  id: Name
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Module.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 500
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a String representing the name of the module with the path removed.
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The module name with no path.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.Equals(System.Object)
  commentId: M:System.Reflection.Module.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Module.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 107
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Determines whether this module and the specified object are equal.
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: 'The object to compare with this instance. '
    return:
      type: System.Boolean
      description: true if <em>o</em> is equal to this instance; otherwise, false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Module.GetHashCode
  commentId: M:System.Reflection.Module.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Module.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 112
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 295
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.
  syntax:
    content: public virtual Type GetType(string className, bool throwOnError, bool ignoreCase)
    content.vb: Public Overridable Function GetType(className As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: className
      type: System.String
      description: 'The name of the type to locate. The name must be fully qualified with the namespace. '
    - id: throwOnError
      type: System.Boolean
      description: 'true to throw an exception if the type cannot be found; false to return null. '
    - id: ignoreCase
      type: System.Boolean
      description: 'true for case-insensitive search; otherwise, false. '
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing the specified type, if the type is declared in this module; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>className</em> is null. "
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: 'The class initializers are invoked and an exception is thrown. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>className</em> is a zero-length string. "
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<em>throwOnError</em> is true, and the type cannot be found. "
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>className</em> requires a dependent assembly that could not be found. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<em>className</em> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded. "
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly. -or-<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Module.ToString
  commentId: M:System.Reflection.Module.ToString
  id: ToString
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Module.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 123
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the name of the module.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A String representing the name of this module.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.FileLoadException
  isExternal: false
  name: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.BadImageFormatException
  isExternal: false
  name: BadImageFormatException
  fullName: System.BadImageFormatException
