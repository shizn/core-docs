items:
- uid: System.Diagnostics.ProcessPriorityClass
  commentId: T:System.Diagnostics.ProcessPriorityClass
  id: ProcessPriorityClass
  parent: System.Diagnostics
  children:
  - System.Diagnostics.ProcessPriorityClass.AboveNormal
  - System.Diagnostics.ProcessPriorityClass.BelowNormal
  - System.Diagnostics.ProcessPriorityClass.High
  - System.Diagnostics.ProcessPriorityClass.Idle
  - System.Diagnostics.ProcessPriorityClass.Normal
  - System.Diagnostics.ProcessPriorityClass.RealTime
  langs:
  - csharp
  - vb
  name: ProcessPriorityClass
  fullName: System.Diagnostics.ProcessPriorityClass
  type: Enum
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessPriorityClass
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 10
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Indicates the priority that the system associates with a process. This value, together with the priority value of each thread of the process, determines each thread's base priority level.</p>\n"
  remarks: "\n<p>A process priority class encompasses a range of thread priority levels. Threads with different priorities running in the process run relative to the process's priority class. The operating system uses the base-priority level of all executable threads to determine which thread gets the next slice of processor time.</p>\n<p>Win32 uses four priority classes with seven base priority levels per class. Based on time elapsed or other boosts, the operating system can change the base priority level when a process needs to be put ahead of others for access to the processor. In addition, you can set <xref href=\"System.Diagnostics.Process.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> to temporarily boost the priority level of threads that have been taken out of the wait state. The priority is reset when the process returns to the wait state.</p>\n"
  syntax:
    content: public enum ProcessPriorityClass
    content.vb: Public Enum ProcessPriorityClass
  seealso:
  - type: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Diagnostics.ProcessPriorityClass.AboveNormal
  commentId: F:System.Diagnostics.ProcessPriorityClass.AboveNormal
  id: AboveNormal
  parent: System.Diagnostics.ProcessPriorityClass
  langs:
  - csharp
  - vb
  name: AboveNormal
  fullName: System.Diagnostics.ProcessPriorityClass.AboveNormal
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AboveNormal
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 52
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Specifies that the process has priority above <strong>Normal</strong> but below <xref href=\"System.Diagnostics.ProcessPriorityClass.High\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: AboveNormal = 32768
    return:
      type: System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.ProcessPriorityClass.BelowNormal
  commentId: F:System.Diagnostics.ProcessPriorityClass.BelowNormal
  id: BelowNormal
  parent: System.Diagnostics.ProcessPriorityClass
  langs:
  - csharp
  - vb
  name: BelowNormal
  fullName: System.Diagnostics.ProcessPriorityClass.BelowNormal
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BelowNormal
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 47
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Specifies that the process has priority above <strong>Idle</strong> but below <strong>Normal</strong>.</p>\n"
  syntax:
    content: BelowNormal = 16384
    return:
      type: System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.ProcessPriorityClass.High
  commentId: F:System.Diagnostics.ProcessPriorityClass.High
  id: High
  parent: System.Diagnostics.ProcessPriorityClass
  langs:
  - csharp
  - vb
  name: High
  fullName: System.Diagnostics.ProcessPriorityClass.High
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: High
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 33
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Specifies that the process performs time-critical tasks that must be executed immediately, such as the <strong>Task List</strong> dialog, which must respond quickly when called by the user, regardless of the load on the operating system. The threads of the process preempt the threads of normal or idle priority class processes.</p>\n"
  remarks: "\n<p>Use extreme care when specifying <strong>High</strong> for the process's priority class, because a high priority class application can use nearly all available processor time.</p>\n"
  syntax:
    content: High = 128
    return:
      type: System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.ProcessPriorityClass.Idle
  commentId: F:System.Diagnostics.ProcessPriorityClass.Idle
  id: Idle
  parent: System.Diagnostics.ProcessPriorityClass
  langs:
  - csharp
  - vb
  name: Idle
  fullName: System.Diagnostics.ProcessPriorityClass.Idle
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Idle
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 23
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Specifies that the threads of this process run only when the system is idle, such as a screen saver. The threads of the process are preempted by the threads of any process running in a higher priority class.</p>\n"
  remarks: "\n<p>The idle priority class is inherited by child processes.</p>\n"
  syntax:
    content: Idle = 64
    return:
      type: System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.ProcessPriorityClass.Normal
  commentId: F:System.Diagnostics.ProcessPriorityClass.Normal
  id: Normal
  parent: System.Diagnostics.ProcessPriorityClass
  langs:
  - csharp
  - vb
  name: Normal
  fullName: System.Diagnostics.ProcessPriorityClass.Normal
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Normal
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 15
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Specifies that the process has no special scheduling needs.</p>\n"
  syntax:
    content: Normal = 32
    return:
      type: System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.ProcessPriorityClass.RealTime
  commentId: F:System.Diagnostics.ProcessPriorityClass.RealTime
  id: RealTime
  parent: System.Diagnostics.ProcessPriorityClass
  langs:
  - csharp
  - vb
  name: RealTime
  fullName: System.Diagnostics.ProcessPriorityClass.RealTime
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RealTime
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessPriorityClass.cs
    startLine: 42
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Specifies that the process has the highest possible priority.</p>\n"
  remarks: "\n<p>The threads of a process with <strong>RealTime</strong> priority preempt the threads of all other processes, including operating system processes performing important tasks. Thus, a <strong>RealTime</strong> priority process that executes for more than a very brief interval can cause disk caches not to flush or cause the mouse to be unresponsive.</p>\n"
  syntax:
    content: RealTime = 256
    return:
      type: System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Diagnostics.ProcessPriorityClass
  parent: System.Diagnostics
  isExternal: false
  name: ProcessPriorityClass
  fullName: System.Diagnostics.ProcessPriorityClass
