items:
- uid: System.Data.SqlTypes.INullable
  commentId: T:System.Data.SqlTypes.INullable
  id: INullable
  parent: System.Data.SqlTypes
  children:
  - System.Data.SqlTypes.INullable.IsNull
  langs:
  - csharp
  - vb
  name: INullable
  fullName: System.Data.SqlTypes.INullable
  type: Interface
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/INullable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: INullable
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/INullable.cs
    startLine: 10
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>All the <xref href=\"System.Data.SqlTypes\" data-throw-if-not-resolved=\"false\"></xref> objects and structures implement the <strong>INullable</strong> interface. </p>\n"
  remarks: "\n<p>\n<strong>SqlTypes</strong> can contain the value null and use database semantics for evaluating nulls. Nulls are used in a database to indicate an unknown or missing value.</p>\n"
  syntax:
    content: public interface INullable
    content.vb: Public Interface INullable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Data.SqlTypes.INullable.IsNull
  commentId: P:System.Data.SqlTypes.INullable.IsNull
  id: IsNull
  parent: System.Data.SqlTypes.INullable
  langs:
  - csharp
  - vb
  name: IsNull
  fullName: System.Data.SqlTypes.INullable.IsNull
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/INullable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNull
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/INullable.cs
    startLine: 12
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Indicates whether a structure is null. This property is read-only.</p>\n"
  remarks: "\n<p>The default value for any <xref href=\"System.Data.SqlTypes\" data-throw-if-not-resolved=\"false\"></xref> instance is null. Use <xref href=\"System.Data.SqlTypes.INullable.IsNull\" data-throw-if-not-resolved=\"false\"></xref> property to test for null values.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with two columns defined as <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref>. The code adds one row of known values, one row of null values and then iterates through the <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>, assigning the values to variables and displaying the output in the console window. </p>DataWorks SqlTypes.IsNull#1<p>This example displays the following results:</p><pre><code>isColumnNull=False, ID=123, Description=Side Mirror\nisColumnNull=True, ID=Null, Description=Null</code></pre>"
  syntax:
    content: bool IsNull { get; }
    content.vb: ReadOnly Property IsNull As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: System.Data.SqlTypes
  isExternal: false
  name: System.Data.SqlTypes
  fullName: System.Data.SqlTypes
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
