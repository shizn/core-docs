items:
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  id: ReadOnlyDictionary`2.ValueCollection
  parent: System.Collections.ObjectModel
  children:
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator
  langs:
  - csharp
  - vb
  name: ReadOnlyDictionary<TKey, TValue>.ValueCollection
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ValueCollection
  type: Class
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueCollection
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
    startLine: 523
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Represents a read-only collection of the values of a <xref href=\"System.Collections.ObjectModel.ReadOnlyDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: 'public sealed class ValueCollection : ICollection<TValue>, ICollection, IReadOnlyCollection<TValue>'
    content.vb: >-
      Public NotInheritable Class ValueCollection
          Inherits ICollection(Of TValue)
          Implements ICollection, IReadOnlyCollection(Of TValue)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{{TValue}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).ValueCollection
  name.vb: ReadOnlyDictionary(Of TKey, TValue).ValueCollection
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count
  commentId: P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count
  id: Count
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ValueCollection.Count
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
    startLine: 561
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Gets the number of elements in the collection.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).ValueCollection.Count
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: CopyTo(TValue[], Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ValueCollection.CopyTo(TValue[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
    startLine: 556
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Copies the elements of the collection to an array, starting at a specific array index.</p>\n"
  syntax:
    content: public void CopyTo(TValue[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As TValue(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{TValue}[]'
    - id: arrayIndex
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or-</p>\n<p>The number of elements in the source collection is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\n<p>-or-</p>\n<p>Type <em>T</em> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).ValueCollection.CopyTo(TValue(), System.Int32)
  name.vb: CopyTo(TValue(), Int32)
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator
  commentId: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ValueCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ReadOnlyDictionary.cs
    startLine: 580
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Returns an enumerator that iterates through the collection.</p>\n"
  syntax:
    content: public IEnumerator<TValue> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of TValue)
    return:
      type: IEnumerator{{TValue}}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).ValueCollection.GetEnumerator()
references:
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: Generic.IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{TValue}}
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<TValue>
  fullName: System.Collections.Generic.IReadOnlyCollection<TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of TValue)
  name.vb: Generic.IReadOnlyCollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{TValue}[]'
  isExternal: false
  name: TValue[]
  fullName: TValue[]
  fullname.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    fullName: TValue
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    fullName: TValue
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerator{{TValue}}
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<TValue>
  fullName: System.Collections.Generic.IEnumerator<TValue>
  fullname.vb: System.Collections.Generic.IEnumerator(Of TValue)
  name.vb: Generic.IEnumerator(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
