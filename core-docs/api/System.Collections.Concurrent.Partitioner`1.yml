items:
- uid: System.Collections.Concurrent.Partitioner`1
  commentId: T:System.Collections.Concurrent.Partitioner`1
  id: Partitioner`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.Partitioner`1.#ctor
  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  langs:
  - csharp
  - vb
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Partitioner
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 46
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Represents a particular manner of splitting a data source into multiple partitions.</p>\n"
  remarks: "\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - "\n<p>The following example shows how to implement a partitioner that returns a single element at a time:</p>System.Collections.Concurrent.Partitioner#1"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public abstract class Partitioner<TSource>
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public MustInherit Class Partitioner(Of TSource)
    typeParameters:
    - id: TSource
      description: Type of the elements in the collection.
  seealso:
  - type: System.Collections.Concurrent.OrderablePartitioner`1
    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  - type: System.Collections.Concurrent.Partitioner
    commentId: T:System.Collections.Concurrent.Partitioner
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  commentId: M:System.Collections.Concurrent.Partitioner`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  - vb
  name: Partitioner()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 204
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Creates a new partitioner instance.</p>\n"
  example:
  - 
  syntax:
    content: protected Partitioner()
    content.vb: Protected Sub New
  seealso:
  - type: System.Collections.Concurrent.OrderablePartitioner`1
    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  - type: System.Collections.Concurrent.Partitioner
    commentId: T:System.Collections.Concurrent.Partitioner
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).Partitioner()
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  commentId: P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  id: SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  - vb
  name: SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SupportsDynamicPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 71
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether additional partitions can be created dynamically.</p>\n"
  remarks: "\n<p> If a derived class does not override and implement <xref href=\"System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> should return false. The value of <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> should not vary over the lifetime of this instance. For more information, see Custom Partitioners for PLINQ and TPL.</p>\n<p></p>\n"
  example:
  - 
  syntax:
    content: public virtual bool SupportsDynamicPartitions { get; }
    content.vb: Public Overridable ReadOnly Property SupportsDynamicPartitions As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"System.Collections.Concurrent.Partitioner`1\" data-throw-if-not-resolved=\"false\"></xref> can create partitions dynamically as they are\nrequested; false if the <xref href=\"System.Collections.Concurrent.Partitioner`1\" data-throw-if-not-resolved=\"false\"></xref> can only allocate\npartitions statically.\n"
  seealso:
  - type: System.Collections.Concurrent.OrderablePartitioner`1
    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  - type: System.Collections.Concurrent.Partitioner
    commentId: T:System.Collections.Concurrent.Partitioner
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  commentId: M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  - vb
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDynamicPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 96
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Creates an object that can partition the underlying collection into a variable number of partitions.</p>\n"
  remarks: "\n<p> The returned object implements the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>interface. Calling <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> on the object creates another partition over the sequence.</p>\n<p>  The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> method is only supported if the <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property returns true. For more information, see Custom Partitioners for PLINQ and TPL. </p>\n"
  example:
  - 
  syntax:
    content: public virtual IEnumerable<TSource> GetDynamicPartitions()
    content.vb: Public Overridable Function GetDynamicPartitions As IEnumerable(Of TSource)
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An object that can create partitions over the underlying data source.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Dynamic partitioning is not supported by the base class. You must implement it in a derived class.</p>\n"
  seealso:
  - type: System.Collections.Concurrent.OrderablePartitioner`1
    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  - type: System.Collections.Concurrent.Partitioner
    commentId: T:System.Collections.Concurrent.Partitioner
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  - vb
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 54
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Partitions the underlying collection into the given number of partitions.</p>\n"
  remarks: "\n<p>A class that implements this method is expected to return exactly the number of partitions that are specified in <em>partitionCount</em>. If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic). For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public abstract IList<IEnumerator<TSource>> GetPartitions(int partitionCount)
    content.vb: Public MustOverride Function GetPartitions(partitionCount As Integer) As IList(Of IEnumerator(Of TSource))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
      description: A list containing <em>partitionCount</em> enumerators.
  seealso:
  - type: System.Collections.Concurrent.OrderablePartitioner`1
    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  - type: System.Collections.Concurrent.Partitioner
    commentId: T:System.Collections.Concurrent.Partitioner
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEnumerator<TSource>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  fullname.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of TSource))
  name.vb: IList(Of IEnumerator(Of TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
