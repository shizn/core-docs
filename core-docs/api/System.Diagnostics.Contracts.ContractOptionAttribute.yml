items:
- uid: System.Diagnostics.Contracts.ContractOptionAttribute
  commentId: T:System.Diagnostics.Contracts.ContractOptionAttribute
  id: ContractOptionAttribute
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)
  - System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.Contracts.ContractOptionAttribute.Category
  - System.Diagnostics.Contracts.ContractOptionAttribute.Enabled
  - System.Diagnostics.Contracts.ContractOptionAttribute.Setting
  - System.Diagnostics.Contracts.ContractOptionAttribute.Value
  langs:
  - csharp
  - vb
  name: ContractOptionAttribute
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContractOptionAttribute
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 109
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Enables you to set contract and tool options at assembly, type, or method granularity.</p>\n"
  remarks: "\n<p>The following table shows the currently supported options.</p>\n<p>Category</p>\n<p>Setting</p>\n<p>Value/effect</p>\n<p>You can use this attribute as illustrated in the following examples.</p>\n<p>To turn off run-time checking for the entire assembly:</p>\n<pre><code>[assembly:ContractOption(\"runtime\", \"checking\", false)]</code></pre>\n<p>To turn run-time contract checking on for a specific type:</p>\n<pre><code>   [ContractOption(\"runtime\", \"checking\", true)]\nclass TypeWithRuntimeChecking {\n\n...</code></pre>\n<p>To turn run-time checking off for a specific method:</p>\n<pre><code>// Turn off all contract inheritance from interface IList<T>\n[ContractOption(\"contract\", \"inheritance\", false)]\nclass MyConcurrentList<T> : IList<T> {\n...\n}\n\n[ContractOption(\"runtime\", \"checking\", false)]\npublic override MyMethod(int x) {\n// no inherited contracts checked at runtime,\n// no invariants checked at runtime.\n...\n}\n\n[ContractOption(\"runtime\", \"checking\", false)]\npublic void MethodWithoutRuntimeChecking(...) {\n  ...\n}\n}</code></pre>\n"
  syntax:
    content: 'public sealed class ContractOptionAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class ContractOptionAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)
  commentId: M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.Contracts.ContractOptionAttribute
  langs:
  - csharp
  - vb
  name: ContractOptionAttribute(String, String, Boolean)
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute.ContractOptionAttribute(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 113
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Contracts.ContractOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using the provided category, setting, and enable/disable value.</p>\n"
  syntax:
    content: public ContractOptionAttribute(string category, string setting, bool enabled)
    content.vb: Public Sub New(category As String, setting As String, enabled As Boolean)
    parameters:
    - id: category
      type: System.String
      description: "\n<p>The category for the option to be set.</p>\n"
    - id: setting
      type: System.String
      description: "\n<p>The option setting.</p>\n"
    - id: enabled
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to enable the option; <strong>false</strong> to disable the option.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)
  commentId: M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.Contracts.ContractOptionAttribute
  langs:
  - csharp
  - vb
  name: ContractOptionAttribute(String, String, String)
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute.ContractOptionAttribute(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 114
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Contracts.ContractOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using the provided category, setting, and value.</p>\n"
  remarks: "\n<p>There are only two category/setting options, and they can be set by either of the constructor overloads. You can use this overload with the same settings as the <xref href=\"System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> overload by specifying \"true\" or \"false\" in string format; for example:</p>\n<pre><code>[ContractOption(\"contract\", \"inheritance\", “false”)]\nclass MyConcurrentList<T> : IList<T> {\n...\n}</code></pre>\n"
  syntax:
    content: public ContractOptionAttribute(string category, string setting, string value)
    content.vb: Public Sub New(category As String, setting As String, value As String)
    parameters:
    - id: category
      type: System.String
      description: "\n<p>The category of the option to be set.</p>\n"
    - id: setting
      type: System.String
      description: "\n<p>The option setting.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value for the setting.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Contracts.ContractOptionAttribute.Category
  commentId: P:System.Diagnostics.Contracts.ContractOptionAttribute.Category
  id: Category
  parent: System.Diagnostics.Contracts.ContractOptionAttribute
  langs:
  - csharp
  - vb
  name: Category
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute.Category
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Category
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 115
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the category of the option.</p>\n"
  syntax:
    content: public string Category { get; }
    content.vb: Public ReadOnly Property Category As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The category of the option.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractOptionAttribute.Enabled
  commentId: P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled
  id: Enabled
  parent: System.Diagnostics.Contracts.ContractOptionAttribute
  langs:
  - csharp
  - vb
  name: Enabled
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute.Enabled
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enabled
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 116
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines if an option is enabled.</p>\n"
  syntax:
    content: public bool Enabled { get; }
    content.vb: Public ReadOnly Property Enabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the option is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractOptionAttribute.Setting
  commentId: P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting
  id: Setting
  parent: System.Diagnostics.Contracts.ContractOptionAttribute
  langs:
  - csharp
  - vb
  name: Setting
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute.Setting
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Setting
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 117
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the setting for the option.</p>\n"
  syntax:
    content: public string Setting { get; }
    content.vb: Public ReadOnly Property Setting As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The setting for the option.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractOptionAttribute.Value
  commentId: P:System.Diagnostics.Contracts.ContractOptionAttribute.Value
  id: Value
  parent: System.Diagnostics.Contracts.ContractOptionAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Diagnostics.Contracts.ContractOptionAttribute.Value
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 118
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the value for the option.</p>\n"
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value for the option.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
