items:
- uid: System.Threading.RegisteredWaitHandle
  commentId: T:System.Threading.RegisteredWaitHandle
  id: RegisteredWaitHandle
  parent: System.Threading
  children:
  - System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  langs:
  - csharp
  - vb
  name: RegisteredWaitHandle
  fullName: System.Threading.RegisteredWaitHandle
  type: Class
  source:
    remote:
      path: src/System.Threading.ThreadPool/ref/System.Threading.ThreadPool.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegisteredWaitHandle
    path: src/System.Threading.ThreadPool/ref/System.Threading.ThreadPool.cs
    startLine: 10
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: "\n<p>Represents a handle that has been registered when calling <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. This class cannot be inherited.</p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</p>\n<p>The example also shows how to use the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is <code>WaitProc</code>, and the wait handle is an <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The example defines a <code>TaskInfo</code> class to hold the information that is passed to the callback when it executes. The example creates a <code>TaskInfo</code> object and assigns it some string data. The <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that is returned by the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is assigned to the <code>Handle</code> field of the <code>TaskInfo</code> object so that the callback method has access to the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>In addition to specifying <code>TaskInfo</code> as the object to pass to the callback method, the call to the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method specifies the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> that the task will wait for, a <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that represents the <code>WaitProc</code> callback method, a one second time-out interval, and multiple callbacks. </p>\n<p>When the main thread signals the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> by calling its <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate is invoked. The <code>WaitProc</code> method tests <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the <code>WaitProc</code> method unregisters the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>, stopping additional callbacks. In the case of a time-out, the task continues to wait. The <code>WaitProc</code> method ends by printing a message to the console.</p>System.Threading.ThreadPool RegisterWaitForSingleObject0#1"
  syntax:
    content: 'public sealed class RegisteredWaitHandle : object'
    content.vb: >-
      Public NotInheritable Class RegisteredWaitHandle
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  commentId: M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  id: Unregister(System.Threading.WaitHandle)
  parent: System.Threading.RegisteredWaitHandle
  langs:
  - csharp
  - vb
  name: Unregister(WaitHandle)
  fullName: System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  type: Method
  source:
    remote:
      path: src/System.Threading.ThreadPool/ref/System.Threading.ThreadPool.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unregister
    path: src/System.Threading.ThreadPool/ref/System.Threading.ThreadPool.cs
    startLine: 13
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: "\n<p>Cancels a registered wait operation issued by the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>If <em>waitObject</em> is specified, it is signaled only if the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> is successfully unregistered. If a callback method is in progress when <xref href=\"System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)\" data-throw-if-not-resolved=\"false\"></xref> executes, <em>waitObject</em> is not signaled until the callback method completes. In particular, if a callback method executes <xref href=\"System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)\" data-throw-if-not-resolved=\"false\"></xref>, <em>waitObject</em> is not signaled until that callback method completes.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)\" data-throw-if-not-resolved=\"false\"></xref> method to unregister a task if a callback occurred because the wait handle was signaled.</p>\n<p>The example also shows how to use the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is <code>WaitProc</code>, and the wait handle is an <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The example defines a <code>TaskInfo</code> class to hold the information that is passed to the callback when it executes. The example creates a <code>TaskInfo</code> object and assigns it some string data. The <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that is returned by the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is assigned to the <code>Handle</code> field of the <code>TaskInfo</code> object so that the callback method has access to the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>In addition to specifying <code>TaskInfo</code> as the object to pass to the callback method, the call to the <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method specifies the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> that the task will wait for, a <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that represents the <code>WaitProc</code> callback method, a one second time-out interval, and multiple callbacks. </p>\n<p>When the main thread signals the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> by calling its <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate is invoked. The <code>WaitProc</code> method tests <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the <code>WaitProc</code> method unregisters the <xref href=\"System.Threading.RegisteredWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>, stopping additional callbacks. In the case of a time-out, the task continues to wait. The <code>WaitProc</code> method ends by printing a message to the console.</p>System.Threading.ThreadPool RegisterWaitForSingleObject0#1"
  syntax:
    content: public bool Unregister(WaitHandle waitObject)
    content.vb: Public Function Unregister(waitObject As WaitHandle) As Boolean
    parameters:
    - id: waitObject
      type: System.Threading.WaitHandle
      description: "\n<p>The <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to be signaled. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the function succeeds; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
