items:
- uid: System.Text.RegularExpressions.CaptureCollection
  commentId: T:System.Text.RegularExpressions.CaptureCollection
  id: CaptureCollection
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.CaptureCollection.Count
  - System.Text.RegularExpressions.CaptureCollection.GetEnumerator
  - System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  - System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#IsSynchronized
  - System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  - vb
  name: CaptureCollection
  fullName: System.Text.RegularExpressions.CaptureCollection
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CaptureCollection
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 18
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Represents the set of captures made by a single capturing group. </p>\n"
  remarks: "\n<p>The collection is immutable (read-only) and has no public constructor. The <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object contains one or more <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>Instances of the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> class are returned by the following properties:</p>\n<ul><li>\n<p>The <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property. Each member of the collection represents a substring captured by a capturing group. If a quantifier is not applied to a capturing group, the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> includes a single <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object that represents the same captured substring as the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object. If a quantifier is applied to a capturing group, the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> includes one <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object for each captured substring, and the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object provides information only about the last captured substring.</p>\n</li><li>\n<p>The <strong>Match.Captures</strong> property. In this case, the collection consists of a single <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the match as a whole. That is, the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object provides the same information as the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</li></ul>\n<p>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <strong>foreach</strong> in C# and <strong>For Each</strong>â€¦<strong>Next</strong> in Visual Basic) instead of retrieving the enumerator that is returned by the <xref href=\"System.Text.RegularExpressions.CaptureCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example compares the <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> and <strong>Match.Captures</strong> properties. It also compares <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> objects with the <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property. The example uses the following two regular expressions to find matches in a single input string:</p>\n<ul><li>\n<p>\n<code>\\b\\w+\\W{1,2}</code>\n</p>\n<p>This regular expression pattern identifies a word that consists of one or more word characters, followed by either one or two non-word characters such as white space or punctuation. The regular expression does not include any capturing groups. The output from the example shows that both the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object and the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> objects returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> and <strong>Match.Captures</strong> properties contain information about the same match.</p>\n</li><li>\n<p>\n<code>(\\b\\w+\\W{1,2})+</code>\n</p>\n<p>This regular expression pattern identifies the words in a sentence. The pattern defines a single capturing group that consists of one or more word characters followed by one or two non-word characters. The regular expression pattern uses the <strong>+</strong> quantifier to match one or more occurrences of this group. The output from this example shows that the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object and the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <strong>Match.Captures</strong> property contain information about the same match. The second <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object, which corresponds to the only capturing group in the regular expression, identifies only the last captured string, whereas the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by the first capturing group's <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property includes all captured substrings.</p>\n</li></ul>System.Text.RegularExpressions.CaptureCollection#1"
  syntax:
    content: 'public class CaptureCollection : ICollection, IEnumerable'
    content.vb: >-
      Public Class CaptureCollection
          Implements ICollection, IEnumerable
  seealso:
  - type: System.Text.RegularExpressions.Capture
    commentId: T:System.Text.RegularExpressions.Capture
  - type: System.Text.RegularExpressions.Group
    commentId: T:System.Text.RegularExpressions.Group
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.RegularExpressions.CaptureCollection.Count
  commentId: P:System.Text.RegularExpressions.CaptureCollection.Count
  id: Count
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Text.RegularExpressions.CaptureCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 21
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the number of substrings captured by the group.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of items in the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  commentId: P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Text.RegularExpressions.CaptureCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 22
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets an individual member of the collection.</p>\n"
  syntax:
    content: public Capture this[int i] { get; }
    content.vb: Public ReadOnly Property Item(i As Integer) As Capture
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>Index into the capture collection. </p>\n"
    return:
      type: System.Text.RegularExpressions.Capture
      description: "\n<p>The captured substring at position <em>i</em> in the collection.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>i</em> is less than 0 or greater than <xref href=\"System.Text.RegularExpressions.CaptureCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Text.RegularExpressions.CaptureCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 23
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Text.RegularExpressions.CaptureCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 24
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Text.RegularExpressions.CaptureCollection.GetEnumerator
  commentId: M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Text.RegularExpressions.CaptureCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 25
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Provides an enumerator that iterates through the collection.</p>\n"
  remarks: "\n<p>Instead of calling the <xref href=\"System.Text.RegularExpressions.GroupCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve an enumerator that lets you iterate through the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> objects in the collection, you should use the group iteration construct (such as <strong>foreach</strong> in C# and <strong>For Each</strong>â€¦<strong>Next</strong> in Visual Basic) that is provided by your programming language.</p>\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An object that contains all <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects within the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Text.RegularExpressions.CaptureCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 26
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void ICollection.CopyTo(Array array, int arrayIndex)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, arrayIndex As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: arrayIndex
      type: System.Int32
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.RegularExpressions.Capture
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Capture
  fullName: System.Text.RegularExpressions.Capture
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
