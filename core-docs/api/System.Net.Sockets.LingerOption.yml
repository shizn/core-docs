items:
- uid: System.Net.Sockets.LingerOption
  commentId: T:System.Net.Sockets.LingerOption
  id: LingerOption
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)
  - System.Net.Sockets.LingerOption.Enabled
  - System.Net.Sockets.LingerOption.LingerTime
  langs:
  - csharp
  - vb
  name: LingerOption
  fullName: System.Net.Sockets.LingerOption
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LingerOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 71
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Specifies whether a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will remain connected after a call to the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.TcpClient.Close\" data-throw-if-not-resolved=\"false\"></xref> methods and the length of time it will remain connected, if data remains to be sent.</p>\n"
  remarks: "\n<p>There may still be data available in the outgoing network buffer after an application calls the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.TcpClient\" data-throw-if-not-resolved=\"false\"></xref> method. If you want to specify the amount of time that the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will attempt to transmit unsent data after closing, create a <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> with the <em>enable</em> parameter set to <strong>true</strong>, and the <em>seconds</em> parameter set to the desired amount of time. The <em>seconds</em> parameter is used to indicate how long you would like the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to remain connected before timing out. If you do not want the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to stay connected for any length of time after closing, create a <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> instance with the <em>enable</em> parameter set to <strong>true</strong> and the <em>seconds</em> parameter set to zero. In this case, the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will close immediately and any unsent data will be lost. Once created, pass the <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. If you are sending and receiving data with a <xref href=\"System.Net.Sockets.TcpClient\" data-throw-if-not-resolved=\"false\"></xref>, then set the <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> instance in the <xref href=\"System.Net.Sockets.TcpClient.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> when the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is not set and for a <xref href=\"System.Net.Sockets.TcpClient\" data-throw-if-not-resolved=\"false\"></xref> when the <xref href=\"System.Net.Sockets.TcpClient.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is not set.</p>\n"
  example:
  - "\n<p>The following example sets a previously created <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to linger one second after calling the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic LingerOption Example#1"
  syntax:
    content: public class LingerOption
    content.vb: Public Class LingerOption
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)
  commentId: M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)
  id: '#ctor(System.Boolean,System.Int32)'
  parent: System.Net.Sockets.LingerOption
  langs:
  - csharp
  - vb
  name: LingerOption(Boolean, Int32)
  fullName: System.Net.Sockets.LingerOption.LingerOption(System.Boolean, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 73
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>There may still be data available in the outgoing network buffer after you close the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. Use the <em>enable</em> parameter to specify whether you would like the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to continue transmitting unsent data after the close method is called. Use the <em>seconds</em> parameter to indicate how long you would like the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to attempt transferring unsent data before timing out. If you specify <strong>true</strong> for the <em>enable</em> parameter and 0 for the <em>seconds</em> parameter, the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will attempt to send data until there is no data left in the outgoing network buffer. If you specify <strong>false</strong> for the <em>enable</em> parameter, the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will close immediately and any unsent data will be lost.</p>\n<p>The following table describes the behavior on the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.TcpClient.Close\" data-throw-if-not-resolved=\"false\"></xref> methods based on the possible values of the <em>enable</em> and <em>seconds</em> parameters when an T:System.Net.Sockets.LingerOption instance is created and set in the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.TcpClient.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>\n<em>enable</em>\n</p>\n<p>\n<em>seconds</em>\n</p>\n<p>Behavior</p>\n<p>The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is not set.</p>\n<p>When the <xref href=\"System.Net.Sockets.LingerOption.LingerTime\" data-throw-if-not-resolved=\"false\"></xref> property stored in the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</p>\n"
  example:
  - "\n<p>The following example sets a previously created <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to linger one second after calling the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic LingerOption Example#1"
  syntax:
    content: public LingerOption(bool enable, int seconds)
    content.vb: Public Sub New(enable As Boolean, seconds As Integer)
    parameters:
    - id: enable
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to remain connected after the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called; otherwise, <strong>false</strong>. </p>\n"
    - id: seconds
      type: System.Int32
      description: "\n<p>The number of seconds to remain connected after the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.LingerOption.Enabled
  commentId: P:System.Net.Sockets.LingerOption.Enabled
  id: Enabled
  parent: System.Net.Sockets.LingerOption
  langs:
  - csharp
  - vb
  name: Enabled
  fullName: System.Net.Sockets.LingerOption.Enabled
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enabled
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 74
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that indicates whether to linger after the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Net.Sockets.LingerOption.Enabled\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will linger after closing. Change this value to <strong>true</strong> or <strong>false</strong> and pass the altered <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method or set the <xref href=\"System.Net.Sockets.TcpClient.LingerState\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property.to disable or enable lingering.</p>\n<p>The following table describes the behavior for the possible values of the <xref href=\"System.Net.Sockets.LingerOption.Enabled\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Net.Sockets.LingerOption.LingerTime\" data-throw-if-not-resolved=\"false\"></xref> property stored in the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>\n<em>enable</em>\n</p>\n<p>\n<em>seconds</em>\n</p>\n<p>Behavior</p>\n<p>The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is not set.</p>\n<p>When the <xref href=\"System.Net.Sockets.LingerOption.LingerTime\" data-throw-if-not-resolved=\"false\"></xref> property stored in the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</p>\n"
  syntax:
    content: public bool Enabled { get; set; }
    content.vb: Public Property Enabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> should linger after <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> is called; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.LingerOption.LingerTime
  commentId: P:System.Net.Sockets.LingerOption.LingerTime
  id: LingerTime
  parent: System.Net.Sockets.LingerOption
  langs:
  - csharp
  - vb
  name: LingerTime
  fullName: System.Net.Sockets.LingerOption.LingerTime
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LingerTime
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 75
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the amount of time to remain connected after calling the <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref> method if data remains to be sent.</p>\n"
  remarks: "\n<p>Use this value if you want to determine how long a closed <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will attempt to transfer unsent data before timing out. You can also set this value to the desired time-out period, in seconds. </p>\n<p>If the <xref href=\"System.Net.Sockets.LingerOption.Enabled\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, and you set <xref href=\"System.Net.Sockets.LingerOption.LingerTime\" data-throw-if-not-resolved=\"false\"></xref> to 0, the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> discards any pending data to send in the outgoing network buffer. If you change this value, you must pass the altered <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> instance to the <xref href=\"System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method or set the <xref href=\"System.Net.Sockets.TcpClient.LingerState\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The following table describes the behavior for the possible values of the <xref href=\"System.Net.Sockets.LingerOption.Enabled\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Net.Sockets.LingerOption.LingerTime\" data-throw-if-not-resolved=\"false\"></xref> property stored in the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>\n<em>enable</em>\n</p>\n<p>\n<em>seconds</em>\n</p>\n<p>Behavior</p>\n<p>The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is not set.</p>\n<p>When the <xref href=\"System.Net.Sockets.LingerOption.LingerTime\" data-throw-if-not-resolved=\"false\"></xref> property stored in the <xref href=\"System.Net.Sockets.Socket.LingerState\" data-throw-if-not-resolved=\"false\"></xref> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</p>\n"
  example:
  - "\n<p>The following example displays the value of this property.</p>Socket_Socket_Options#2"
  syntax:
    content: public int LingerTime { get; set; }
    content.vb: Public Property LingerTime As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The amount of time, in seconds, to remain connected after calling <xref href=\"System.Net.Sockets.Socket.Close\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
