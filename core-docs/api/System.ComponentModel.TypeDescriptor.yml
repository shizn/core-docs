items:
- uid: System.ComponentModel.TypeDescriptor
  commentId: T:System.ComponentModel.TypeDescriptor
  id: TypeDescriptor
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptor.InterfaceType
  - System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  - System.ComponentModel.TypeDescriptor.Refreshed
  - System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  langs:
  - csharp
  - vb
  name: TypeDescriptor
  fullName: System.ComponentModel.TypeDescriptor
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 20
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The .NET Framework provides two ways to access metadata on a type: the reflection API provided in the <xref href=\"System.Reflection\" data-throw-if-not-resolved=\"false\"></xref> namespace, and the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class. Reflection is a general mechanism available to all types because its foundation is established in the <xref href=\"System.Object.GetType\" data-throw-if-not-resolved=\"false\"></xref> method of the root <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> class. The information it returns for a type is not extensible, in that it cannot be modified after compilation of the target type. For more information, see the topics in Reflection in the .NET Framework.</p>\n<p>In contrast, <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> is an extensible inspection mechanism for components: those classes that implement the <xref href=\"System.ComponentModel.IComponent\" data-throw-if-not-resolved=\"false\"></xref> interface. Unlike reflection, it does not inspect for methods. <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> can be dynamically extended by several services available through the target component's <xref href=\"System.ComponentModel.Component.Site\" data-throw-if-not-resolved=\"false\"></xref>. The following table shows these services.</p>\n<p>Service name</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Enables another class, such as <xref href=\"System.Windows.Forms.ToolTip\" data-throw-if-not-resolved=\"false\"></xref>, to provide extra properties to a component.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ComponentModel.Design.ITypeDescriptorFilterService\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Enables another object to modify the standard metadata that is exposed by a component. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Enables a class to completely and dynamically specify its own metadata, replacing the standard inspection mechanism of <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr></tbody></table>\n<p>The extensibility provided by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> allows the design-time representation of a component to differ from its actual run-time representation, which makes <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> useful for building design-time infrastructure.</p>\n<p>All the methods in <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> are <strong>static</strong>. You cannot create an instance of this class, and this class cannot be inherited.</p>\n<p>You can set property and event values two different ways: specify them in the component class or change them at design time. Because you can set these values two ways, the overloaded methods of <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> take two different types of parameters: a class type or an object instance. </p>\n<p>When you want to access <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> information and you have an instance of the object, use the method that calls for a component. Use the method that calls for the class type only when you do not have an instance of the object.</p>\n<p>Properties and events are cached by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> for speed. Typically, they are constant for the lifetime of an object. However, extender providers and designers can change the set of properties on an object. If this is the case, then the <see cref=\"Overload:System.ComponentModel.TypeDescriptor.Refresh\"></see> method must be called to update the cache.</p>\n"
  syntax:
    content: public sealed class TypeDescriptor
    content.vb: Public NotInheritable Class TypeDescriptor
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.Reflection
    commentId: N:System.Reflection
  - type: System.ComponentModel.IComponent
    commentId: T:System.ComponentModel.IComponent
  - type: System.ComponentModel.ISite
    commentId: T:System.ComponentModel.ISite
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  commentId: P:System.ComponentModel.TypeDescriptor.InterfaceType
  id: InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InterfaceType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 85
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a type that represents a type description provider for all interface types. </p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.InterfaceType\" data-throw-if-not-resolved=\"false\"></xref> property gets a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that you can pass to the <see cref=\"Overload:System.ComponentModel.TypeDescriptor.AddProvider\"></see> methods to define a type description provider for interface types. </p>\n"
  example:
  - 
  syntax:
    content: public static Type InterfaceType { get; }
    content.vb: Public Shared ReadOnly Property InterfaceType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  commentId: E:System.ComponentModel.TypeDescriptor.Refreshed
  id: Refreshed
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
  type: Event
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Refreshed
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 109
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Occurs when the cache for a component is cleared.</p>\n"
  remarks: "\n<p>For more information about handling events, see NIB: Consuming Events. </p>\n"
  example:
  - "\n<p>For an example of using this event, see the <xref href=\"System.ComponentModel.RefreshEventHandler\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public static event RefreshEventHandler Refreshed
    content.vb: Public Shared Event Refreshed As RefreshEventHandler
    return:
      type: System.ComponentModel.RefreshEventHandler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  id: AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddAttributes(Object, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAttributes
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 150
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds class-level attributes to the target component instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])\" data-throw-if-not-resolved=\"false\"></xref> method adds class-level attributes to the specified instance of a component. Because this is a common requirement of applications using the Visual Studio Windows Forms Designer and Properties window, this method provides a shortcut by creating a type description provider that merges the provided attributes with the attributes that already exist on the class. The return value is the type description provider that was used to add the attributes. This provider can later be passed to the <xref href=\"System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method when the added attributes are no longer needed.</p>\n"
  syntax:
    content: public static TypeDescriptionProvider AddAttributes(object instance, params Attribute[] attributes)
    content.vb: Public Shared Function AddAttributes(instance As Object, ParamArray attributes As Attribute()) As TypeDescriptionProvider
    parameters:
    - id: instance
      type: System.Object
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.TypeDescriptionProvider
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object, System.Attribute())
  name.vb: AddAttributes(Object, Attribute())
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  id: AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddAttributes(Type, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAttributes
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 121
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds class-level attributes to the target component type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])\" data-throw-if-not-resolved=\"false\"></xref> method adds class-level attributes to the specified type of a component. Because this is a common requirement of applications using the Visual Studio Windows Forms Designer and Properties window, this method provides a shortcut by creating a type description provider that merges the provided attributes with the attributes that already exist on the class. The return value is the type description provider that was used to add the attributes. This provider can later be passed to the <xref href=\"System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method when the added attributes are no longer needed.</p>\n"
  syntax:
    content: public static TypeDescriptionProvider AddAttributes(Type type, params Attribute[] attributes)
    content.vb: Public Shared Function AddAttributes(type As Type, ParamArray attributes As Attribute()) As TypeDescriptionProvider
    parameters:
    - id: type
      type: System.Type
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.TypeDescriptionProvider
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type, System.Attribute())
  name.vb: AddAttributes(Type, Attribute())
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  commentId: M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  id: AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddEditorTable(Type, Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type, System.Collections.Hashtable)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddEditorTable
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 176
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds an editor table for the given editor base type. </p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)\" data-throw-if-not-resolved=\"false\"></xref> method adds an editor table for the given editor base type. Typically, editors are specified as metadata on a component. However, if no metadata for a requested editor base type can be found on the component, the associated <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> will search an editor table for the editor type, if one can be found. Once an editor table has been added to a type descriptor, it cannot be removed and is owned by the type descriptor. The type descriptor may freely make modifications to this table.</p>\n<p>The format for an editor table uses data types as keys and editors as values. The value portion of an entry in the table represents an editor instance. It can have one of three values. If it contains a string, the type descriptor will assume this is a fully qualified name of a type, and then load the type for the object. If it contains a type, an instance of this type will be created to obtain an editor. Finally, the value portion may contain an actual editor instance. If the type descriptor resolves an editor to an instance, it will store the instance back into the table for future use.</p>\n"
  syntax:
    content: public static void AddEditorTable(Type editorBaseType, Hashtable table)
    content.vb: Public Shared Sub AddEditorTable(editorBaseType As Type, table As Hashtable)
    parameters:
    - id: editorBaseType
      type: System.Type
    - id: table
      type: System.Collections.Hashtable
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddProvider(TypeDescriptionProvider, Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 225
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds a type description provider for a single instance of a component.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method adds a type description provider that supplies type information for a single instance of a component. If a provider is added by this method, the provider's <xref href=\"System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method will not be called because the instance already exists. </p>\n<p>This method does not maintain a hard reference to the component, so it does not prevent the component from finalizing.</p>\n<p>It is possible to add multiple type description providers for the same type or object. If this occurs, the first type description provider encountered that provides type information will be used exclusively. Since type information providers are stored in a stack, the last provider added will be the first one queried. This behavior enables the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"Overload:System.ComponentModel.TypeDescriptor.RemoveProvider\"></see> methods to be used to push and pop type description providers as required for particular scenarios. </p>\n<p>If successful, this method calls the <xref href=\"System.ComponentModel.TypeDescriptor.Refresh(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method on the <em>instance</em> parameter.</p>\n<p>The two versions of this method produce results with different scopes. The <see cref=\"Overload:System.ComponentModel.TypeDescriptor.AddProvider\"></see> method that takes an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> parameter affects only that single instance of the component specified. In contrast, the other overload, which takes a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> parameter, affects all instances of the component described by that type.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method if you need to call from partially trusted code.</p>\n"
  syntax:
    content: public static void AddProvider(TypeDescriptionProvider provider, object instance)
    content.vb: Public Shared Sub AddProvider(provider As TypeDescriptionProvider, instance As Object)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: instance
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddProvider(TypeDescriptionProvider, Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 191
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds a type description provider for a component class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method adds a type description provider that supplies type information for the specified class, derived classes, and all instances of these types.</p>\n<p>The <em>type</em> parameter can be any type, including an interface. For example, to provide custom type and instance information for all components, you would specify <code>typeof(IComponent)</code>. Passing <code>typeof(object)</code> will call the provider to supply type information for all types.</p>\n<p>This method does not maintain a hard reference to any object, so it does not prevent objects from finalizing.</p>\n<p>It is possible to add multiple type description providers for the same type or object. If this occurs, the first type description provider encountered that provides type information will be used exclusively. Because type information providers are stored in a stack, the last provider added will be the first one queried. This behavior enables the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"Overload:System.ComponentModel.TypeDescriptor.RemoveProvider\"></see> methods to be used to push and pop type description providers as required for particular scenarios. </p>\n<p>If successful, this method calls the <xref href=\"System.ComponentModel.TypeDescriptor.Refresh(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method on the <em>type</em> parameter.</p>\n<p>The two versions of this method produce results with different scopes. The <see cref=\"Overload:System.ComponentModel.TypeDescriptor.AddProvider\"></see> method that takes an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> parameter affects only that single instance of the component specified. In contrast, the other overload, which takes a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> parameter, affects all instances of the component described by that type.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method if you need to call from partially trusted code.</p>\n"
  syntax:
    content: public static void AddProvider(TypeDescriptionProvider provider, Type type)
    content.vb: Public Shared Sub AddProvider(provider As TypeDescriptionProvider, type As Type)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: type
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
    commentId: M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddProviderTransparent(TypeDescriptionProvider, Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddProviderTransparent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 299
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds a type description provider for a single instance of a component.</p>\n"
  remarks: "\n<p>This method can be called from partially trusted code. If <xref href=\"System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess\" data-throw-if-not-resolved=\"false\"></xref> is defined, the caller can register a provider for the specified instance if its type is also partially trusted.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method if you do not need to call from partially trusted code.</p>\n"
  example:
  - 
  syntax:
    content: public static void AddProviderTransparent(TypeDescriptionProvider provider, object instance)
    content.vb: Public Shared Sub AddProviderTransparent(provider As TypeDescriptionProvider, instance As Object)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: instance
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.TypeDescriptorPermission
    commentId: T:System.Security.Permissions.TypeDescriptorPermission
  - type: System.Reflection.Assembly.PermissionSet
    commentId: P:System.Reflection.Assembly.PermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: AddProviderTransparent(TypeDescriptionProvider, Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddProviderTransparent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 271
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds a type description provider for a component class.</p>\n"
  remarks: "\n<p>This method can be called from partially trusted code. If <xref href=\"System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess\" data-throw-if-not-resolved=\"false\"></xref> is defined, the caller can register a provider for the specified type if it is also partially trusted. </p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method if you do not need to call from partially trusted code.</p>\n"
  example:
  - 
  syntax:
    content: public static void AddProviderTransparent(TypeDescriptionProvider provider, Type type)
    content.vb: Public Shared Sub AddProviderTransparent(provider As TypeDescriptionProvider, type As Type)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: type
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.TypeDescriptorPermission
    commentId: T:System.Security.Permissions.TypeDescriptorPermission
  - type: System.Reflection.Assembly.PermissionSet
    commentId: P:System.Reflection.Assembly.PermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  id: CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: CreateAssociation(Object, Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateAssociation
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 394
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates a primary-secondary association between two objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method creates an association between a primary and a secondary object. Once an association is created, a designer or other filtering mechanism can add properties that route to either object into the primary object's property set. When a property invocation is made against the primary object, the <xref href=\"System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method will be called to resolve the actual object instance that is related to its type parameter. </p>\n<p>A <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> is used to maintain the association between the primary and secondary object; therefore, this method does not prevent either object from being finalized and reclaimed by garbage collection.</p>\n"
  syntax:
    content: public static void CreateAssociation(object primary, object secondary)
    content.vb: Public Shared Sub CreateAssociation(primary As Object, secondary As Object)
    parameters:
    - id: primary
      type: System.Object
    - id: secondary
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>primary</em> is equal to <em>secondary</em>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - type: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  id: CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: CreateEvent(Type, EventDescriptor, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type, System.ComponentModel.EventDescriptor, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEvent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 467
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static EventDescriptor CreateEvent(Type componentType, EventDescriptor oldEventDescriptor, params Attribute[] attributes)
    content.vb: Public Shared Function CreateEvent(componentType As Type, oldEventDescriptor As EventDescriptor, ParamArray attributes As Attribute()) As EventDescriptor
    parameters:
    - id: componentType
      type: System.Type
    - id: oldEventDescriptor
      type: System.ComponentModel.EventDescriptor
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.EventDescriptor
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type, System.ComponentModel.EventDescriptor, System.Attribute())
  name.vb: CreateEvent(Type, EventDescriptor, Attribute())
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: CreateEvent(Type, String, Type, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type, System.String, System.Type, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEvent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 458
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.</p>\n"
  syntax:
    content: public static EventDescriptor CreateEvent(Type componentType, string name, Type type, params Attribute[] attributes)
    content.vb: Public Shared Function CreateEvent(componentType As Type, name As String, type As Type, ParamArray attributes As Attribute()) As EventDescriptor
    parameters:
    - id: componentType
      type: System.Type
    - id: name
      type: System.String
    - id: type
      type: System.Type
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.EventDescriptor
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type, System.String, System.Type, System.Attribute())
  name.vb: CreateEvent(Type, String, Type, Attribute())
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: CreateInstance(IServiceProvider, Type, Type[], Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 477
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates an object that can substitute for another data type. </p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method will search for a <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> that is associated with the specified <em>objectType</em> data type. This method first tries to obtain a type description provider from the <em>provider</em> parameter. If this fails, it searches its own internal tables for a provider (these entries were created through previous calls to <see cref=\"Overload:System.ComponentModel.TypeDescriptor.AddProvider\"></see>). If it finds a provider, this method will delegate the creation call to that object. </p>\n"
  syntax:
    content: public static object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args)
    content.vb: Public Shared Function CreateInstance(provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: objectType
      type: System.Type
    - id: argTypes
      type: System.Type[]
    - id: args
      type: System.Object[]
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>objectType</em> is <strong>null</strong>, or <em>args</em> is <strong>null</strong> when <em>argTypes</em> is not <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>argTypes</em> and <em>args</em> have different number of elements.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider, System.Type, System.Type(), System.Object())
  name.vb: CreateInstance(IServiceProvider, Type, Type(), Object())
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  id: CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: CreateProperty(Type, PropertyDescriptor, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type, System.ComponentModel.PropertyDescriptor, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProperty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 529
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates a new property descriptor from an existing property descriptor, using the specified existing <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> and attribute array.</p>\n"
  syntax:
    content: public static PropertyDescriptor CreateProperty(Type componentType, PropertyDescriptor oldPropertyDescriptor, params Attribute[] attributes)
    content.vb: Public Shared Function CreateProperty(componentType As Type, oldPropertyDescriptor As PropertyDescriptor, ParamArray attributes As Attribute()) As PropertyDescriptor
    parameters:
    - id: componentType
      type: System.Type
    - id: oldPropertyDescriptor
      type: System.ComponentModel.PropertyDescriptor
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.PropertyDescriptor
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type, System.ComponentModel.PropertyDescriptor, System.Attribute())
  name.vb: CreateProperty(Type, PropertyDescriptor, Attribute())
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: CreateProperty(Type, String, Type, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type, System.String, System.Type, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProperty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 520
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.</p>\n"
  syntax:
    content: public static PropertyDescriptor CreateProperty(Type componentType, string name, Type type, params Attribute[] attributes)
    content.vb: Public Shared Function CreateProperty(componentType As Type, name As String, type As Type, ParamArray attributes As Attribute()) As PropertyDescriptor
    parameters:
    - id: componentType
      type: System.Type
    - id: name
      type: System.String
    - id: type
      type: System.Type
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.PropertyDescriptor
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type, System.String, System.Type, System.Attribute())
  name.vb: CreateProperty(Type, String, Type, Attribute())
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  id: GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetAssociation(Type, Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAssociation
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 608
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an instance of the type associated with the specified primary object.</p>\n"
  remarks: "\n<p>If a previous association has been made for the <em>type</em> parameter using the <xref href=\"System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, then the <xref href=\"System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns the correct secondary object to invoke for the requested type. Otherwise, <xref href=\"System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> searches for a compatible designer for <em>type</em> and returns the designer if one is found. This method never returns <strong>null</strong>.</p>\n<p>A <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> is used to maintain the association between the primary and secondary object; therefore, this method does not prevent either the primary or secondary object from being finalized and reclaimed by garbage collection.</p>\n"
  syntax:
    content: public static object GetAssociation(Type type, object primary)
    content.vb: Public Shared Function GetAssociation(type As Type, primary As Object) As Object
    parameters:
    - id: type
      type: System.Type
    - id: primary
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)
    commentId: M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)
  - type: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - type: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  id: GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttributes
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 710
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of attributes for the specified component.</p>\n"
  remarks: "\n<p>The attributes returned by the <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetAttributes\"></see> method may be dynamically modified from the original component's source listing by extender providers (<xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref>), filter services (<xref href=\"System.ComponentModel.Design.ITypeDescriptorFilterService\" data-throw-if-not-resolved=\"false\"></xref>), and attribute filters.</p>\n<p>When you define a custom attribute with <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, you must override the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property to make it unique. If all instances of your attribute are unique, override <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> to return the object identity of your attribute. If only some instances of your attribute are unique, return a value from <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> that would return equality in those cases. For example, some attributes have a constructor parameter that acts as a unique key. For these attributes, return the value of the constructor parameter from the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> returns the type identity regardless of the value of the <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> property. In order to return multiple instances of an <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> attribute from the <xref href=\"System.ComponentModel.AttributeCollection\" data-throw-if-not-resolved=\"false\"></xref>, your attribute must override the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>For an example of this method, see the <xref href=\"System.ComponentModel.AttributeCollection.Matches(System.Attribute)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static AttributeCollection GetAttributes(object component)
    content.vb: Public Shared Function GetAttributes(component As Object) As AttributeCollection
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.ComponentModel.AttributeCollection
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.ComponentModel.AttributeCollection
    commentId: T:System.ComponentModel.AttributeCollection
  - type: System.ComponentModel.CustomTypeDescriptor.GetAttributes
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetAttributes
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  id: GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetAttributes(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttributes
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 718
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.</p>\n"
  remarks: "\n<p>The attributes returned by the <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetAttributes\"></see> method may be dynamically modified from the original components source listing by extender providers (<xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref>), filter services (<xref href=\"System.ComponentModel.Design.ITypeDescriptorFilterService\" data-throw-if-not-resolved=\"false\"></xref>), and attribute filters.</p>\n<p>When you define a custom attribute with <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, you must override the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property to make it unique. If all instances of your attribute are unique, override <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> to return the object identity of your attribute. If only some instances of your attribute are unique, return a value from <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> that would return equality in those cases. For example, some attributes have a constructor parameter that acts as a unique key. For these attributes, return the value of the constructor parameter from the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> returns the type identity regardless of the value of the <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> property. In order to return multiple instances of an <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> attribute from the <xref href=\"System.ComponentModel.AttributeCollection\" data-throw-if-not-resolved=\"false\"></xref>, your attribute must override the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public static AttributeCollection GetAttributes(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetAttributes(component As Object, noCustomTypeDesc As Boolean) As AttributeCollection
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.AttributeCollection
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.ComponentModel.AttributeCollection
    commentId: T:System.ComponentModel.AttributeCollection
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  - type: System.ComponentModel.CustomTypeDescriptor.GetAttributes
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetAttributes
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  id: GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttributes
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 695
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of attributes for the specified type of component.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>For attributes with <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, the attribute collection removes duplicate instances. These are instances in which the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property returns equal values.</p>\n<p>When you define a custom attribute with <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, you must override the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property to make it unique. If all instances of your attribute are unique, override <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> to return the object identity of your attribute. If only some instances of your attribute are unique, return a value from <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> that would return equality in those cases. For example, some attributes have a constructor parameter that acts as a unique key. For these attributes, return the value of the constructor parameter from the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> returns the type identity regardless of the value of the <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> property. In order to return multiple instances of an <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> attribute from the <xref href=\"System.ComponentModel.AttributeCollection\" data-throw-if-not-resolved=\"false\"></xref>, your attribute must override the <xref href=\"System.Attribute.TypeId\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public static AttributeCollection GetAttributes(Type componentType)
    content.vb: Public Shared Function GetAttributes(componentType As Type) As AttributeCollection
    parameters:
    - id: componentType
      type: System.Type
    return:
      type: System.ComponentModel.AttributeCollection
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.ComponentModel.AttributeCollection
    commentId: T:System.ComponentModel.AttributeCollection
  - type: System.ComponentModel.CustomTypeDescriptor.GetAttributes
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetAttributes
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  id: GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetClassName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 812
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the name of the class for the specified component using the default type descriptor.</p>\n"
  remarks: "\n<p>Typically, this method returns the full <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> name for the <em>component</em> parameter type. For example, the class name for a button is \"System.Windows.Forms.Button\". If <em>component</em> implements <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>, it can return an alternate name. </p>\n<p>This method is equivalent to the overloaded <xref href=\"System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with a second parameter of <strong>false</strong>.</p>\n"
  syntax:
    content: public static string GetClassName(object component)
    content.vb: Public Shared Function GetClassName(component As Object) As String
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.CustomTypeDescriptor.GetClassName
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetClassName
  - type: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  id: GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetClassName(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetClassName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 820
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the name of the class for the specified component using a custom type descriptor.</p>\n"
  remarks: "\n<p>Typically, this method returns the full <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> name for the <em>component</em> parameter type. For example, the class name for a button is \"System.Windows.Forms.Button\". If the <em>component</em> parameter implements <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>, it can return an alternate name. </p>\n"
  syntax:
    content: public static string GetClassName(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetClassName(component As Object, noCustomTypeDesc As Boolean) As String
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.CustomTypeDescriptor.GetClassName
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetClassName
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  - type: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetClassName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 829
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the name of the class for the specified type.</p>\n"
  remarks: "\n<p>This method uses the cached custom type descriptor for the specified type to discover the associated class name.</p>\n"
  syntax:
    content: public static string GetClassName(Type componentType)
    content.vb: Public Shared Function GetClassName(componentType As Type) As String
    parameters:
    - id: componentType
      type: System.Type
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>componentType</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.CustomTypeDescriptor.GetClassName
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetClassName
  - type: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  id: GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetComponentName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 837
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the name of the specified component using the default type descriptor.</p>\n"
  remarks: "\n<p>Typically, this method returns the name for the site of the component, if one exists. For example, the class name for a button is \"System.Windows.Forms.Button\".</p>\n<p>This method is equivalent to the overloaded <xref href=\"System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with a second parameter of <strong>false</strong>.</p>\n<p>This method is used at design time to retrieve the name of an instance of a component.</p>\n"
  syntax:
    content: public static string GetComponentName(object component)
    content.vb: Public Shared Function GetComponentName(component As Object) As String
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.CustomTypeDescriptor.GetComponentName
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetComponentName
  - type: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  id: GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetComponentName(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetComponentName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 845
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the name of the specified component using a custom type descriptor.</p>\n"
  remarks: "\n<p>This method is used at design time to retrieve the name of an instance of a component. Typically, this method returns the name for the site of the component, if one exists. For example, the class name for a button is \"System.Windows.Forms.Button\". If the component implements the <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> interface, it can return an alternate name.</p>\n"
  syntax:
    content: public static string GetComponentName(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetComponentName(component As Object, noCustomTypeDesc As Boolean) As String
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.CustomTypeDescriptor.GetComponentName
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetComponentName
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  - type: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  id: GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConverter
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 854
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a type converter for the type of the specified component.</p>\n"
  remarks: "\n<p>This method locates an appropriate type converter by looking for a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If it cannot find a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>, it traverses the base class hierarchy of the class until it finds a primitive type.</p>\n<p>This method is equivalent to the overloaded <xref href=\"System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with a second parameter of <strong>false</strong>.</p>\n"
  example:
  - "\n<p>For an example of using this method, see the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public static TypeConverter GetConverter(object component)
    content.vb: Public Shared Function GetConverter(component As Object) As TypeConverter
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.ComponentModel.TypeConverter
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeConverterAttribute
    commentId: T:System.ComponentModel.TypeConverterAttribute
  - type: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
    commentId: M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  id: GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetConverter(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConverter
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 861
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a type converter for the type of the specified component with a custom type descriptor.</p>\n"
  remarks: "\n<p>This method looks for the appropriate type converter by trying to find a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If it cannot find a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>, it traverses the base class hierarchy of the class until it finds a primitive type.</p>\n"
  syntax:
    content: public static TypeConverter GetConverter(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetConverter(component As Object, noCustomTypeDesc As Boolean) As TypeConverter
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.TypeConverter
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  - type: System.ComponentModel.TypeConverterAttribute
    commentId: T:System.ComponentModel.TypeConverterAttribute
  - type: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
    commentId: M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  id: GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConverter
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 871
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a type converter for the specified type.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>This method looks for the appropriate type converter by looking for a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If it cannot find a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>, it traverses the base class hierarchy of the class until it finds a primitive type.</p>\n"
  syntax:
    content: public static TypeConverter GetConverter(Type type)
    content.vb: Public Shared Function GetConverter(type As Type) As TypeConverter
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.ComponentModel.TypeConverter
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.TypeConverterAttribute
    commentId: T:System.ComponentModel.TypeConverterAttribute
  - type: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
    commentId: M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  id: GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultEvent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 894
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the default event for the specified component.</p>\n"
  remarks: "\n<p>This method is equivalent to the overloaded <xref href=\"System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with a second parameter of <strong>false</strong>.</p>\n"
  syntax:
    content: public static EventDescriptor GetDefaultEvent(object component)
    content.vb: Public Shared Function GetDefaultEvent(component As Object) As EventDescriptor
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.ComponentModel.EventDescriptor
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.DefaultEventAttribute
    commentId: T:System.ComponentModel.DefaultEventAttribute
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  id: GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetDefaultEvent(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultEvent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 902
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the default event for a component with a custom type descriptor.</p>\n"
  syntax:
    content: public static EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetDefaultEvent(component As Object, noCustomTypeDesc As Boolean) As EventDescriptor
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.EventDescriptor
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.DefaultEventAttribute
    commentId: T:System.ComponentModel.DefaultEventAttribute
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  - type: System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  id: GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultEvent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 880
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the default event for the specified type of component.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n"
  syntax:
    content: public static EventDescriptor GetDefaultEvent(Type componentType)
    content.vb: Public Shared Function GetDefaultEvent(componentType As Type) As EventDescriptor
    parameters:
    - id: componentType
      type: System.Type
    return:
      type: System.ComponentModel.EventDescriptor
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.DefaultEventAttribute
    commentId: T:System.ComponentModel.DefaultEventAttribute
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
    commentId: M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  id: GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultProperty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 931
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the default property for the specified component.</p>\n"
  remarks: "\n<p>If the <em>component</em> parameter is <strong>null</strong>, this method returns <strong>null</strong>.</p>\n"
  syntax:
    content: public static PropertyDescriptor GetDefaultProperty(object component)
    content.vb: Public Shared Function GetDefaultProperty(component As Object) As PropertyDescriptor
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.ComponentModel.PropertyDescriptor
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.DefaultPropertyAttribute
    commentId: T:System.ComponentModel.DefaultPropertyAttribute
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  id: GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetDefaultProperty(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultProperty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 939
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the default property for the specified component with a custom type descriptor.</p>\n"
  remarks: "\n<p>If the <em>component</em> parameter is <strong>null</strong>, this method returns <strong>null</strong>.</p>\n"
  syntax:
    content: public static PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetDefaultProperty(component As Object, noCustomTypeDesc As Boolean) As PropertyDescriptor
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.PropertyDescriptor
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.DefaultPropertyAttribute
    commentId: T:System.ComponentModel.DefaultPropertyAttribute
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  id: GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultProperty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 917
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the default property for the specified type of component.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>If the <em>componentType</em> parameter is <strong>null</strong>, this method returns <strong>null</strong>.</p>\n"
  syntax:
    content: public static PropertyDescriptor GetDefaultProperty(Type componentType)
    content.vb: Public Shared Function GetDefaultProperty(componentType As Type) As PropertyDescriptor
    parameters:
    - id: componentType
      type: System.Type
    return:
      type: System.ComponentModel.PropertyDescriptor
  seealso:
  - type: System.ComponentModel.DefaultPropertyAttribute
    commentId: T:System.ComponentModel.DefaultPropertyAttribute
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  id: GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEditor(Object, Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEditor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1011
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an editor with the specified base type for the specified component.</p>\n"
  remarks: "\n<p>The type of <em>editorBaseType</em> is usually <xref href=\"System.Drawing.Design.UITypeEditor\" data-throw-if-not-resolved=\"false\"></xref>, but you can also use other types (for example, <xref href=\"System.ComponentModel.ComponentEditor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ComponentModel.InstanceCreationEditor\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>You can define multiple editors for a property. You use this method to select the editor you want to use.</p>\n"
  syntax:
    content: public static object GetEditor(object component, Type editorBaseType)
    content.vb: Public Shared Function GetEditor(component As Object, editorBaseType As Type) As Object
    parameters:
    - id: component
      type: System.Object
    - id: editorBaseType
      type: System.Type
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> or <em>editorBaseType</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
    commentId: M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  id: GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEditor(Object, Type, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(System.Object, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEditor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1020
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an editor with the specified base type and with a custom type descriptor for the specified component.</p>\n"
  remarks: "\n<p>The type of <em>editorBaseType</em> is usually <xref href=\"System.Drawing.Design.UITypeEditor\" data-throw-if-not-resolved=\"false\"></xref>, but you can also use other types (for example <xref href=\"System.ComponentModel.ComponentEditor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ComponentModel.InstanceCreationEditor\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>You can define multiple editors for a property. You use this method to select the editor you want to use.</p>\n"
  syntax:
    content: public static object GetEditor(object component, Type editorBaseType, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetEditor(component As Object, editorBaseType As Type, noCustomTypeDesc As Boolean) As Object
    parameters:
    - id: component
      type: System.Object
    - id: editorBaseType
      type: System.Type
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> or <em>editorBaseType</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  - type: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
    commentId: M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  id: GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEditor(Type, Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEditor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1034
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an editor with the specified base type for the specified type.</p>\n"
  remarks: "\n<p>The type of <em>editorBaseType</em> is usually <xref href=\"System.Drawing.Design.UITypeEditor\" data-throw-if-not-resolved=\"false\"></xref>, but you can also use other types (for example <xref href=\"System.ComponentModel.ComponentEditor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ComponentModel.InstanceCreationEditor\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>You can define multiple editors for a type. You use this method to select the one you want to use.</p>\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n"
  syntax:
    content: public static object GetEditor(Type type, Type editorBaseType)
    content.vb: Public Shared Function GetEditor(type As Type, editorBaseType As Type) As Object
    parameters:
    - id: type
      type: System.Type
    - id: editorBaseType
      type: System.Type
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>editorBaseType</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
    commentId: M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  id: GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1087
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of events for the specified component.</p>\n"
  remarks: "\n<p>Retrieves a collection of events that the given <em>component</em> parameter instance provides. This collection can differ from the set of events the class provides. If the <em>component</em> parameter is sited, the site can add or remove additional events.</p>\n<p>If <em>component</em> is <strong>null</strong>, then an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  example:
  - "\n<p>For an example of this method, see the <xref href=\"System.ComponentModel.EventDescriptorCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public static EventDescriptorCollection GetEvents(object component)
    content.vb: Public Shared Function GetEvents(component As Object) As EventDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.ComponentModel.EventDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.EventDescriptorCollection
    commentId: T:System.ComponentModel.EventDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  id: GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEvents(Object, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(System.Object, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1105
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of events for a specified component using a specified array of attributes as a filter.</p>\n"
  remarks: "\n<p>The events for the <em>component</em> parameter can differ from the events of a class, because the site can add or remove events if the <em>component</em> parameter is sited.</p>\n<p>The <em>attributes</em> array can have a mix of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> objects. Filtering is defined by the following rules: </p>\n<ul><li>\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is treated as a wildcard; it matches any event that has the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in its set of attributes.</p>\n</li><li>\n<p>If an event does not have an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> of the same class, the event is not included in the returned array.</p>\n</li><li>\n<p>If the attribute is an instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> class, the event must be an exact match or it is not included in the returned array.</p>\n</li><li>\n<p>If an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> instance is specified and it is the default event, it is included in the returned array even if there is no instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> in the event.</p>\n</li></ul>\n<p>If <em>component</em> is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes)
    content.vb: Public Shared Function GetEvents(component As Object, attributes As Attribute()) As EventDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.EventDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.EventDescriptorCollection
    commentId: T:System.ComponentModel.EventDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.GetEvents(System.Object, System.Attribute())
  name.vb: GetEvents(Object, Attribute())
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  id: GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEvents(Object, Attribute[], Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(System.Object, System.Attribute[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1114
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.</p>\n"
  remarks: "\n<p>The events for the <em>component</em> parameter can differ from the events of a class, because the site can add or remove events if the <em>component</em> parameter is sited.</p>\n<p>The <em>attributes</em> parameter array can have a mix of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> objects. Filtering is defined by the following rules: </p>\n<ul><li>\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is treated as a wildcard; it matches any event that has the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in its set of attributes.</p>\n</li><li>\n<p>If an event does not have an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> of the same class, the event is not included in the returned array.</p>\n</li><li>\n<p>If the attribute is an instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> class, the event must be an exact match or it is not included in the returned array.</p>\n</li><li>\n<p>If an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> instance is specified and it is the default event, it is included in the returned array even if there is no instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> in the event.</p>\n</li></ul>\n<p>If <em>component</em> is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetEvents(component As Object, attributes As Attribute(), noCustomTypeDesc As Boolean) As EventDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    - id: attributes
      type: System.Attribute[]
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.EventDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.EventDescriptorCollection
    commentId: T:System.ComponentModel.EventDescriptorCollection
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.GetEvents(System.Object, System.Attribute(), System.Boolean)
  name.vb: GetEvents(Object, Attribute(), Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  id: GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEvents(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1095
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of events for a specified component with a custom type descriptor.</p>\n"
  remarks: "\n<p>This method retrieves a collection of events that the given <em>component</em> parameter instance provides. This can differ from the set of events the class provides. If the <em>component</em> parameter is sited, the site can add or remove additional events.</p>\n<p>If <em>component</em> is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetEvents(component As Object, noCustomTypeDesc As Boolean) As EventDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.EventDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.EventDescriptorCollection
    commentId: T:System.ComponentModel.EventDescriptorCollection
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1047
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of events for a specified type of component.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>If the <em>componentType</em> parameter is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static EventDescriptorCollection GetEvents(Type componentType)
    content.vb: Public Shared Function GetEvents(componentType As Type) As EventDescriptorCollection
    parameters:
    - id: componentType
      type: System.Type
    return:
      type: System.ComponentModel.EventDescriptorCollection
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.EventDescriptorCollection
    commentId: T:System.ComponentModel.EventDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  id: GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetEvents(Type, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(System.Type, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1062
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of events for a specified type of component using a specified array of attributes as a filter.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>The <em>attributes</em> parameter array can have a mix of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> objects. Filtering is defined by the following rules: </p>\n<ul><li>\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is treated as a wildcard; it matches any event that has the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in its set of attributes.</p>\n</li><li>\n<p>If an event does not have an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> of the same class, the event is not included in the returned array.</p>\n</li><li>\n<p>If the attribute is an instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> class, the event must be an exact match or it is not included in the returned array.</p>\n</li><li>\n<p>If an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> instance is specified and it is the default event, it is included in the returned array even if there is no instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> in the event.</p>\n</li></ul>\n<p>If the <em>componentType</em> parameter is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static EventDescriptorCollection GetEvents(Type componentType, Attribute[] attributes)
    content.vb: Public Shared Function GetEvents(componentType As Type, attributes As Attribute()) As EventDescriptorCollection
    parameters:
    - id: componentType
      type: System.Type
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.EventDescriptorCollection
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.EventDescriptorCollection
    commentId: T:System.ComponentModel.EventDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.GetEvents(System.Type, System.Attribute())
  name.vb: GetEvents(Type, Attribute())
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFullComponentName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1245
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the fully qualified name of the component.</p>\n"
  remarks: "\n<p>In many cases, the <xref href=\"System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method will return the same value as the <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetComponentName\"></see> method. However, if the component resides in a nested container or has other nested semantics, it may return a different fully qualified name.</p>\n"
  syntax:
    content: public static string GetFullComponentName(object component)
    content.vb: Public Shared Function GetFullComponentName(component As Object) As String
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1308
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of properties for a specified component.</p>\n"
  remarks: "\n<p>The properties for a component can differ from the properties of a class, because the site can add or remove properties if the component is sited.</p>\n<p>If the <em>component</em> parameter is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to access the properties of a control. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.Design.ComponentDesigner\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.Design.DesignerServices#8"
  syntax:
    content: public static PropertyDescriptorCollection GetProperties(object component)
    content.vb: Public Shared Function GetProperties(component As Object) As PropertyDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  id: GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProperties(Object, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(System.Object, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1327
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of properties for a specified component using a specified array of attributes as a filter.</p>\n"
  remarks: "\n<p>The properties for the <em>component</em> parameter can differ from the properties of a class, because the site can add or remove properties if the <em>component</em> parameter is sited.</p>\n<p>The <em>attributes</em> parameter array is used to filter the array. Filtering is defined by the following rules: </p>\n<ul><li>\n<p>If a property does not have an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> of the same class, the property is not included in the returned array.</p>\n</li><li>\n<p>If the attribute is an instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> class, the property must be an exact match or it is not included in the returned array.</p>\n</li><li>\n<p>If an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> instance is specified and it is the default property, it is included in the returned array even if there is no instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> in the property.</p>\n</li><li>\n<p>If <em>attributes</em> has a default attribute, the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])\" data-throw-if-not-resolved=\"false\"></xref> method matches the case when the property does not have the attribute applied.</p>\n</li></ul>\n<p>If <em>component</em> is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Windows.Forms.Design.PropertyTab.GetProperties(System.Object,System.Attribute[])\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Windows.Forms.Design.PropertyTab\" data-throw-if-not-resolved=\"false\"></xref> class.</p>PropertyTabExample#2"
  syntax:
    content: public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes)
    content.vb: Public Shared Function GetProperties(component As Object, attributes As Attribute()) As PropertyDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.GetProperties(System.Object, System.Attribute())
  name.vb: GetProperties(Object, Attribute())
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  id: GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProperties(Object, Attribute[], Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(System.Object, System.Attribute[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1337
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.</p>\n"
  remarks: "\n<p>The properties for a <em>component</em> can differ from the properties of a class, because the site can add or remove properties if the <em>component</em> is sited.</p>\n<p>The <em>attributes</em> parameter array is used to filter the array. Filtering is defined by the following rules: </p>\n<ul><li>\n<p>If a property does not have an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> of the same class, the property is not included in the returned array.</p>\n</li><li>\n<p>If the attribute is an instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> class, the property must be an exact match or it is not included in the returned array.</p>\n</li><li>\n<p>If an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> instance is specified and it is the default property, it is included in the returned array even if there is no instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> in the property.</p>\n</li><li>\n<p>If <em>attributes</em> has a default attribute, the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method matches the case when the property does not have the attribute applied.</p>\n</li></ul>\n<p>If the <em>component</em> parameter is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetProperties(component As Object, attributes As Attribute(), noCustomTypeDesc As Boolean) As PropertyDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    - id: attributes
      type: System.Attribute[]
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.GetProperties(System.Object, System.Attribute(), System.Boolean)
  name.vb: GetProperties(Object, Attribute(), Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  commentId: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  id: GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProperties(Object, Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1316
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of properties for a specified component using the default type descriptor.</p>\n"
  remarks: "\n<p>The properties for the <em>component</em> parameter can differ from the properties of a class, because the site can add or remove properties if the <em>component</em> parameter is sited.</p>\n<p>If <em>component</em> is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc)
    content.vb: Public Shared Function GetProperties(component As Object, noCustomTypeDesc As Boolean) As PropertyDescriptorCollection
    parameters:
    - id: component
      type: System.Object
    - id: noCustomTypeDesc
      type: System.Boolean
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>component</em> is a cross-process remoted object.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1268
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of properties for a specified type of component.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>If the <em>componentType</em> parameter is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  syntax:
    content: public static PropertyDescriptorCollection GetProperties(Type componentType)
    content.vb: Public Shared Function GetProperties(componentType As Type) As PropertyDescriptorCollection
    parameters:
    - id: componentType
      type: System.Type
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  commentId: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  id: GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProperties(Type, Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(System.Type, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1283
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>The <em>attributes</em> parameter array is used to filter the array. Filtering is defined by the following rules: </p>\n<ul><li>\n<p>If a property does not have an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> of the same class, the property is not included in the returned array.</p>\n</li><li>\n<p>If the attribute is an instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> class, the property must be an exact match or it is not included in the returned array.</p>\n</li><li>\n<p>If an <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> instance is specified and it is the default property, it is included in the returned array even if there is no instance of the <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> in the property.</p>\n</li><li>\n<p>If <em>attributes</em> has a default attribute, the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])\" data-throw-if-not-resolved=\"false\"></xref> method matches the case when the property does not have the attribute applied.</p>\n</li></ul>\n<p>If the <em>componentType</em> parameter is <strong>null</strong>, an empty collection is returned.</p>\n<p>The order of the returned collection is not guaranteed to be identical between calls, so always order it before use.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Windows.Forms.Design.PropertyTab.GetProperties(System.Object,System.Attribute[])\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Windows.Forms.Design.PropertyTab\" data-throw-if-not-resolved=\"false\"></xref> class.</p>PropertyTabExample#2"
  syntax:
    content: public static PropertyDescriptorCollection GetProperties(Type componentType, Attribute[] attributes)
    content.vb: Public Shared Function GetProperties(componentType As Type, attributes As Attribute()) As PropertyDescriptorCollection
    parameters:
    - id: componentType
      type: System.Type
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.ComponentModel.TypeDescriptor.GetProperties(System.Type, System.Attribute())
  name.vb: GetProperties(Type, Attribute())
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  id: GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1456
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the type description provider for the specified component.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetProvider\"></see> method will always return a type description provider. Even the default <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> implementation is built on a <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static TypeDescriptionProvider GetProvider(object instance)
    content.vb: Public Shared Function GetProvider(instance As Object) As TypeDescriptionProvider
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.ComponentModel.TypeDescriptionProvider
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider
    commentId: T:System.ComponentModel.TypeDescriptionProvider
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  id: GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1438
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the type description provider for the specified type.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetProvider\"></see> method will always return a type description provider. Even the default <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> implementation is built on a <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static TypeDescriptionProvider GetProvider(Type type)
    content.vb: Public Shared Function GetProvider(type As Type) As TypeDescriptionProvider
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.ComponentModel.TypeDescriptionProvider
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider
    commentId: T:System.ComponentModel.TypeDescriptionProvider
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1497
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that can be used to perform reflection, given an object.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetReflectionType\"></see> method is a low-level version of the <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see> method. <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetReflectionType\"></see> is typically used to perform standard reflection against an object when no custom type descriptor can be located for it.</p>\n"
  syntax:
    content: public static Type GetReflectionType(object instance)
    content.vb: Public Shared Function GetReflectionType(instance As Object) As Type
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 1482
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that can be used to perform reflection, given a class type.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetReflectionType\"></see> method is a low-level version of the <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see> method. <see cref=\"Overload:System.ComponentModel.TypeDescriptor.GetReflectionType\"></see> is typically used to perform standard reflection against a class when no custom type descriptor can be located for it.</p>\n"
  syntax:
    content: public static Type GetReflectionType(Type type)
    content.vb: Public Shared Function GetReflectionType(type As Type) As Type
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  id: Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Refresh
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2193
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Clears the properties and events for the specified component from the cache.</p>\n"
  remarks: "\n<p>Properties and events are cached by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> for speed. Typically, they are constant for the lifetime of an object. However, extender providers and designers can change the set of properties on an object. If they do, they should call this method to clear the property and event descriptors of the object. This method is used only at design time. It is not used during run time.</p>\n<p>This method also raises a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event when the properties or events of a component change. This event is only raised if there was a prior call to the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.ComponentModel.TypeDescriptor.GetEvents(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method that cached the information.</p>\n"
  example:
  - "\n<p>For an example of using this method, see the <xref href=\"System.ComponentModel.RefreshEventHandler\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public static void Refresh(object component)
    content.vb: Public Shared Sub Refresh(component As Object)
    parameters:
    - id: component
      type: System.Object
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor.Refreshed
    commentId: E:System.ComponentModel.TypeDescriptor.Refreshed
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  id: Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Refresh
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2424
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Clears the properties and events for the specified assembly from the cache.</p>\n"
  remarks: "\n<p>Properties and events are cached by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> for speed. Typically, they are constant for the lifetime of an object. However, extender providers and designers can change the set of properties on an object. If they do, they can call this method to clear the property and event descriptors of the object. This method is used only at design time. It is not used during run time.</p>\n<p>Before you make a call to the <xref href=\"System.ComponentModel.TypeDescriptor.Refresh(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cache, you need to call the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method for the specific assembly to cache the information first.</p>\n<p>This method also raises a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event to notify all classes that want to be notified when the property set of a component changes.</p>\n"
  syntax:
    content: public static void Refresh(Assembly assembly)
    content.vb: Public Shared Sub Refresh(assembly As Assembly)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
  seealso:
  - type: System.Reflection.Assembly
    commentId: T:System.Reflection.Assembly
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.IExtenderProvider
    commentId: T:System.ComponentModel.IExtenderProvider
  - type: System.ComponentModel.Design.IDesigner
    commentId: T:System.ComponentModel.Design.IDesigner
  - type: System.ComponentModel.TypeDescriptor.Refreshed
    commentId: E:System.ComponentModel.TypeDescriptor.Refreshed
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  id: Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Refresh
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2355
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Clears the properties and events for the specified module from the cache.</p>\n"
  remarks: "\n<p>Properties and events are cached by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> for speed. Typically, they are constant for the lifetime of an object. However, extender providers and designers can change the set of properties on an object. If they do, they can call this method to clear the property and event descriptors of the object. This method is used only at design time. It is not used during run time.</p>\n<p>Before you make a call to the <xref href=\"System.ComponentModel.TypeDescriptor.Refresh(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cache, you need to call the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method for the specific module to cache the information first.</p>\n<p>This method also raises a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event to notify all classes that want to be notified when the property set of a component changes.</p>\n"
  syntax:
    content: public static void Refresh(Module module)
    content.vb: Public Shared Sub Refresh(module As  Module)
    parameters:
    - id: module
      type: System.Reflection.Module
  seealso:
  - type: System.Reflection.Module
    commentId: T:System.Reflection.Module
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.IExtenderProvider
    commentId: T:System.ComponentModel.IExtenderProvider
  - type: System.ComponentModel.Design.IDesigner
    commentId: T:System.ComponentModel.Design.IDesigner
  - type: System.ComponentModel.TypeDescriptor.Refreshed
    commentId: E:System.ComponentModel.TypeDescriptor.Refreshed
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  id: Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Refresh
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2287
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Clears the properties and events for the specified type of component from the cache.</p>\n"
  remarks: "\n<p>Call this version of this method only when you do not have an instance of the object.</p>\n<p>Properties and events are cached by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> for speed. Typically, they are constant for the lifetime of an object. However, extender providers and designers can change the set of properties on an object. If they do, they can call this method to clear the property and event descriptors of the object. This method is used only at design time. It is not used during run time.</p>\n<p>This method also raises a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event when the properties or events of a component change. This event is only raised if there was a prior call to the <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.ComponentModel.TypeDescriptor.GetEvents(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method that cached the information.</p>\n"
  syntax:
    content: public static void Refresh(Type type)
    content.vb: Public Shared Sub Refresh(type As Type)
    parameters:
    - id: type
      type: System.Type
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.IExtenderProvider
    commentId: T:System.ComponentModel.IExtenderProvider
  - type: System.ComponentModel.Design.IDesigner
    commentId: T:System.ComponentModel.Design.IDesigner
  - type: System.ComponentModel.TypeDescriptor.Refreshed
    commentId: E:System.ComponentModel.TypeDescriptor.Refreshed
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  id: RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: RemoveAssociation(Object, Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAssociation
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2441
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes an association between two objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method removes an association between two objects formed by the <xref href=\"System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>A <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> is used to maintain the association between the primary and secondary object; therefore, this method does not influence when either object is finalized or reclaimed by garbage collection.</p>\n"
  syntax:
    content: public static void RemoveAssociation(object primary, object secondary)
    content.vb: Public Shared Sub RemoveAssociation(primary As Object, secondary As Object)
    parameters:
    - id: primary
      type: System.Object
    - id: secondary
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - type: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  id: RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAssociations
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2482
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes all associations for a primary object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method removes all associations between a primary object and all of its secondary objects, created by calls to the <xref href=\"System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>A <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> is used to maintain the association between the primary and secondary object; therefore, this method does not influence when either the primary of secondary objects are finalized or reclaimed by garbage collection.</p>\n"
  syntax:
    content: public static void RemoveAssociations(object primary)
    content.vb: Public Shared Sub RemoveAssociations(primary As Object)
    parameters:
    - id: primary
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>primary</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - type: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: RemoveProvider(TypeDescriptionProvider, Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2527
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes a previously added type description provider that is associated with the specified object.</p>\n"
  remarks: "\n<p>This method removes a type description provider previously added with the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. Removing a provider causes a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event to be raised for the associated object.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method if you need to call from partially trusted code.</p>\n"
  syntax:
    content: public static void RemoveProvider(TypeDescriptionProvider provider, object instance)
    content.vb: Public Shared Sub RemoveProvider(provider As TypeDescriptionProvider, instance As Object)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: instance
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider
    commentId: T:System.ComponentModel.TypeDescriptionProvider
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: RemoveProvider(TypeDescriptionProvider, Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2503
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes a previously added type description provider that is associated with the specified type.</p>\n"
  remarks: "\n<p>This method removes a type description provider previously added with the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. Removing a provider causes a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event to be raised for the associated type.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method if you need to call from partially trusted code.</p>\n"
  syntax:
    content: public static void RemoveProvider(TypeDescriptionProvider provider, Type type)
    content.vb: Public Shared Sub RemoveProvider(provider As TypeDescriptionProvider, type As Type)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: type
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider
    commentId: T:System.ComponentModel.TypeDescriptionProvider
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: RemoveProviderTransparent(TypeDescriptionProvider, Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveProviderTransparent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2584
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes a previously added type description provider that is associated with the specified object.</p>\n"
  remarks: "\n<p>This method removes a type description provider previously added with the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. Removing a provider causes a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event to be raised for the associated object.</p>\n<p>This method can be called from partially trusted code. If <xref href=\"System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess\" data-throw-if-not-resolved=\"false\"></xref> is defined, the caller can register a provider for the specified instance if its type is also partially trusted.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method if you do not need to call from partially trusted code.</p>\n"
  example:
  - 
  syntax:
    content: public static void RemoveProviderTransparent(TypeDescriptionProvider provider, object instance)
    content.vb: Public Shared Sub RemoveProviderTransparent(provider As TypeDescriptionProvider, instance As Object)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: instance
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.TypeDescriptorPermission
    commentId: T:System.Security.Permissions.TypeDescriptorPermission
  - type: System.Reflection.Assembly.PermissionSet
    commentId: P:System.Reflection.Assembly.PermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  commentId: M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: RemoveProviderTransparent(TypeDescriptionProvider, Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveProviderTransparent
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2557
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes a previously added type description provider that is associated with the specified type.</p>\n"
  remarks: "\n<p>This method removes a type description provider previously added with the <xref href=\"System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. Removing a provider causes a <xref href=\"System.ComponentModel.TypeDescriptor.Refreshed\" data-throw-if-not-resolved=\"false\"></xref> event to be raised for the associated type.</p>\n<p>This method can be called from partially trusted code. If <xref href=\"System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess\" data-throw-if-not-resolved=\"false\"></xref> is defined, the caller can unregister a provider for the specified type if it is also partially trusted.</p>\n<p>Use the <xref href=\"System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method if you do not need to call from partially trusted code.</p>\n"
  example:
  - 
  syntax:
    content: public static void RemoveProviderTransparent(TypeDescriptionProvider provider, Type type)
    content.vb: Public Shared Sub RemoveProviderTransparent(provider As TypeDescriptionProvider, type As Type)
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
    - id: type
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One or both of the parameters are <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.TypeDescriptorPermission
    commentId: T:System.Security.Permissions.TypeDescriptorPermission
  - type: System.Reflection.Assembly.PermissionSet
    commentId: P:System.Reflection.Assembly.PermissionSet
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  commentId: M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  id: SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  - vb
  name: SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortDescriptorArray
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs
    startLine: 2629
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts descriptors using the name of the descriptor.</p>\n"
  syntax:
    content: public static void SortDescriptorArray(IList infos)
    content.vb: Public Shared Sub SortDescriptorArray(infos As IList)
    parameters:
    - id: infos
      type: System.Collections.IList
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>infos</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.ComponentModel.RefreshEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RefreshEventHandler
  fullName: System.ComponentModel.RefreshEventHandler
- uid: System.Attribute[]
  isExternal: true
  name: Attribute[]
  fullName: System.Attribute[]
  fullname.vb: System.Attribute()
  name.vb: Attribute()
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IServiceProvider
  parent: System
  isExternal: false
  name: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptorCollection
  fullName: System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
