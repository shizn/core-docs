items:
- uid: System.Globalization.StringInfo
  commentId: T:System.Globalization.StringInfo
  id: StringInfo
  parent: System.Globalization
  children:
  - System.Globalization.StringInfo.#ctor
  - System.Globalization.StringInfo.#ctor(System.String)
  - System.Globalization.StringInfo.Equals(System.Object)
  - System.Globalization.StringInfo.GetHashCode
  - System.Globalization.StringInfo.GetNextTextElement(System.String)
  - System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)
  - System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
  - System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)
  - System.Globalization.StringInfo.LengthInTextElements
  - System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
  - System.Globalization.StringInfo.String
  langs:
  - csharp
  - vb
  name: StringInfo
  fullName: System.Globalization.StringInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringInfo
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 22
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Provides functionality to split a string into text elements and to iterate through those text elements.</p>\n"
  remarks: "\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character. </p>\n<p>The <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class enables you to work with a string as a series of textual elements rather than individual <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>To instantiate a <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a specified string, you can do either of the following: </p>\n<ul><li>\n<p>Call the <xref href=\"System.Globalization.StringInfo.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor and pass it the string that the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object is to represent as an argument. </p>\n</li><li>\n<p>Call the default <xref href=\"System.Globalization.StringInfo.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor, and assign the string that the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object is to represent to the <xref href=\"System.Globalization.StringInfo.String\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ul>\n<p>You can work with the individual text elements in a string in two ways:</p>\n<ul><li>\n<p>By enumerating each text element. To do this, you call the <xref href=\"System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, and then repeatedly call the <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method on the returned <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object until the method returns <strong>false</strong>.  </p>\n</li><li>\n<p>By calling the <xref href=\"System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve an array that contains the starting index of each text element. You can then retrieve individual text elements by passing these indexes to the <xref href=\"System.Globalization.StringInfo.SubstringByTextElements(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n<p>The following example illustrates both ways of working with the text elements in a string. It creates two strings: </p>\n<ul><li>\n<p>\n<code>strCombining</code>, which is a string of Arabic characters that includes three text elements with multiple <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. The first text element is the base character ARABIC LETTER ALEF (U+-627) followed by ARABIC HAMZA BELOW (U+-655) and ARABIC KASRA (U+0650). The second text element is ARABIC LETTER HEH (U+0647) followed by ARABIC FATHA (U+-64E). The third text element is ARABIC LETTTER BEH (U+0628) followed by ARABIC DAMMATAN (U+064C). </p>\n</li><li>\n<p>\n<code>strSurrogates</code>, which is a string that includes three surrogate pairs: GREEK ACROPHONIC FIVE TALENTS (U+10148) from the Supplementary Multilingual Plane, U+20026 from the Supplementary Ideographic Plane, and U+F1001 from the private user area. The UTF-16 encoding of each character is a surrogate pair that consists of a high surrogate followed by a low surrogate. </p>\n</li></ul>\n<p>Each string is parsed once by the <xref href=\"System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and then by the <xref href=\"System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. Both methods correctly parse the text elements in the two strings and display the results of the parsing operation. </p>System.Globalization.StringInfo.Class#1"
  example:
  - "\n<p>This example shows how to use the <see cref=\"Overload:System.Globalization.StringInfo.GetTextElementEnumerator\"></see> and <xref href=\"System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class to manipulate a string that contains surrogate and combining characters.</p>stringinfo#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class StringInfo
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class StringInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.StringInfo.#ctor
  commentId: M:System.Globalization.StringInfo.#ctor
  id: '#ctor'
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: StringInfo()
  fullName: System.Globalization.StringInfo.StringInfo()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 35
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>The value of the new <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object is initialized to the empty string (\"\"). You can assign another string to it by using the <xref href=\"System.Globalization.StringInfo.String\" data-throw-if-not-resolved=\"false\"></xref> property.  You can also instantiate a <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a specified string in a single step by calling the <xref href=\"System.Globalization.StringInfo.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - 
  syntax:
    content: public StringInfo()
    content.vb: Public Sub New
  seealso:
  - type: System.String.Empty
    commentId: F:System.String.Empty
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.StringInfo.#ctor(System.String)
  commentId: M:System.Globalization.StringInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: StringInfo(String)
  fullName: System.Globalization.StringInfo.StringInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 38
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class to a specified string.</p>\n"
  remarks: "\n<p>This constructor assigns the value argument to the object's <xref href=\"System.Globalization.StringInfo.String\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - 
  syntax:
    content: public StringInfo(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.StringInfo.LengthInTextElements
  commentId: P:System.Globalization.StringInfo.LengthInTextElements
  id: LengthInTextElements
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: LengthInTextElements
  fullName: System.Globalization.StringInfo.LengthInTextElements
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LengthInTextElements
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 105
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the number of text elements in the current <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public int LengthInTextElements { get; }
    content.vb: Public ReadOnly Property LengthInTextElements As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.StringInfo.String
  commentId: P:System.Globalization.StringInfo.String
  id: String
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: String
  fullName: System.Globalization.StringInfo.String
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: String
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 89
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the value of the current <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>When a <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object is instantiated, its <xref href=\"System.Globalization.StringInfo.String\" data-throw-if-not-resolved=\"false\"></xref> property is set to one of the following values:</p>\n<ul><li>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if the default  <xref href=\"System.Globalization.StringInfo.#ctor\" data-throw-if-not-resolved=\"false\"></xref> is called. You should then use the <xref href=\"System.Globalization.StringInfo.String\" data-throw-if-not-resolved=\"false\"></xref> property to assign the string that this <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object rperesents.</p>\n</li><li>\n<p>The string supplied as the <em>value</em> argument to the <xref href=\"System.Globalization.StringInfo.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref>  constructor. </p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public string String { get; set; }
    content.vb: Public Property String As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Globalization.StringInfo.Equals(System.Object)
  commentId: M:System.Globalization.StringInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Globalization.StringInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 59
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Indicates whether the current <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(false)]

      public override bool Equals(object value)
    content.vb: >-
      <ComVisible(False)>

      Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.StringInfo.GetHashCode
  commentId: M:System.Globalization.StringInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Globalization.StringInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 70
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Calculates a hash code for the value of the current <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The behavior of <xref href=\"System.Globalization.StringInfo.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> is dependent on its implementation, which might change from one version of the common language runtime to another. This might happen to improve the performance of <xref href=\"System.Globalization.StringInfo.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>. To make the behavior of <xref href=\"System.Globalization.StringInfo.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> constant, the application should override the runtime implementation of <xref href=\"System.Globalization.StringInfo.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> with an implementation known to never change.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(false)]

      public override int GetHashCode()
    content.vb: >-
      <ComVisible(False)>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  seealso:
  - type: System.String.GetHashCode
    commentId: M:System.String.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.StringInfo.GetNextTextElement(System.String)
  commentId: M:System.Globalization.StringInfo.GetNextTextElement(System.String)
  id: GetNextTextElement(System.String)
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: GetNextTextElement(String)
  fullName: System.Globalization.StringInfo.GetNextTextElement(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNextTextElement
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 169
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the first text element in a specified string.</p>\n"
  remarks: "\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.</p>\n<p>This method only returns the first text element. To iterate through the text elements of the string, the application should use the <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object generated by the <xref href=\"System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static string GetNextTextElement(string str)
    content.vb: Public Shared Function GetNextTextElement(str As String) As String
    parameters:
    - id: str
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
    commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
  - type: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
    commentId: M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)
  commentId: M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)
  id: GetNextTextElement(System.String,System.Int32)
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: GetNextTextElement(String, Int32)
  fullName: System.Globalization.StringInfo.GetNextTextElement(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNextTextElement
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 266
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the text element at the specified index of the specified string.</p>\n"
  remarks: "\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character. </p>\n<p>This method only returns the first text element of the substring that starts at the specified index. To iterate through the text elements of the string, the application should use the <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> generated by the <xref href=\"System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static string GetNextTextElement(string str, int index)
    content.vb: Public Shared Function GetNextTextElement(str As String, index As Integer) As String
    parameters:
    - id: str
      type: System.String
    - id: index
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for <em>str</em>. </p>\n"
  seealso:
  - type: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
    commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
  - type: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
    commentId: M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
  commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
  id: GetTextElementEnumerator(System.String)
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: GetTextElementEnumerator(String)
  fullName: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTextElementEnumerator
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 288
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns an enumerator that iterates through the text elements of the entire string.</p>\n"
  remarks: "\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character. </p>\n<p>The text element enumerator is used only to read data in the string; it cannot modify the underlying string. The enumerator does not have exclusive access to the string.</p>\n<p>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string. When the enumerator is in an invalid state, calling <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception.</p>\n<p>Initially, the enumerator is positioned before the first text element in the string. <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. Therefore, after an enumerator is created or after <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called, <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first text element of the string before reading the value of <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>After the end of the string is passed, the enumerator is again in an invalid state and calling <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. Calling <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception if the last call to <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates calling the <xref href=\"System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Globalization.StringInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>stringinfo#1"
  syntax:
    content: public static TextElementEnumerator GetTextElementEnumerator(string str)
    content.vb: Public Shared Function GetTextElementEnumerator(str As String) As TextElementEnumerator
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Globalization.TextElementEnumerator
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.TextElementEnumerator
    commentId: T:System.Globalization.TextElementEnumerator
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)
  commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)
  id: GetTextElementEnumerator(System.String,System.Int32)
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: GetTextElementEnumerator(String, Int32)
  fullName: System.Globalization.StringInfo.GetTextElementEnumerator(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTextElementEnumerator
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 293
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</p>\n"
  remarks: "\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character. </p>\n<p>The text element enumerator is used only to read data in the string; it cannot modify the underlying string. The enumerator does not have exclusive access to the string.</p>\n<p>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string. When the enumerator is in an invalid state, calling <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception.</p>\n<p>Initially, the enumerator is positioned before the first text element in the string. <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. Therefore, after an enumerator is created or after <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called, <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first text element of the string before reading the value of <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>After the end of the string is passed, the enumerator is again in an invalid state and calling <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. Calling <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception if the last call to <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>.</p>\n"
  syntax:
    content: public static TextElementEnumerator GetTextElementEnumerator(string str, int index)
    content.vb: Public Shared Function GetTextElementEnumerator(str As String, index As Integer) As TextElementEnumerator
    parameters:
    - id: str
      type: System.String
    - id: index
      type: System.Int32
    return:
      type: System.Globalization.TextElementEnumerator
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for <em>str</em>. </p>\n"
  seealso:
  - type: System.Globalization.TextElementEnumerator
    commentId: T:System.Globalization.TextElementEnumerator
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
  commentId: M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
  id: ParseCombiningCharacters(System.String)
  parent: System.Globalization.StringInfo
  langs:
  - csharp
  - vb
  name: ParseCombiningCharacters(String)
  fullName: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/StringInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParseCombiningCharacters
    path: src/mscorlib/src/System/Globalization/StringInfo.cs
    startLine: 325
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns the indexes of each base character, high surrogate, or control character within the specified string.</p>\n"
  remarks: "\n<p>The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. A high surrogate is a Unicode code point in the range U+D800 through U+DBFF and a low surrogate is a Unicode code point in the range U+DC00 through U+DFFF.</p>\n<p>A control character is a character for which the Unicode value is U+007F or in the range U+0000 through U+001F or U+0080 through U+009F.</p>\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character. </p>\n<p>If a combining character sequence is invalid, every combining character in that sequence is also returned.</p>\n<p>Each index in the resulting array is the beginning of a text element, that is, the index of the base character or the high surrogate.</p>\n<p>The length of each element is easily computed as the difference between successive indexes. The length of the array will always be less than or equal to the length of the string. For example, given the string \"\\u4f00\\u302a\\ud800\\udc00\\u4f01\", this method returns the indexes 0, 2, and 4.</p>\n"
  example:
  - <p>The following code example demonstrates calling the <xref href="System.Globalization.StringInfo.ParseCombiningCharacters(System.String)" data-throw-if-not-resolved="false"></xref>  method. This code example is part of a larger example provided for the <xref href="System.Globalization.StringInfo" data-throw-if-not-resolved="false"></xref> class.</p>stringinfo#1
  syntax:
    content: public static int[] ParseCombiningCharacters(string str)
    content.vb: Public Shared Function ParseCombiningCharacters(str As String) As Integer()
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Int32[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.StringInfo.LengthInTextElements
    commentId: P:System.Globalization.StringInfo.LengthInTextElements
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Globalization.TextElementEnumerator
  parent: System.Globalization
  isExternal: false
  name: TextElementEnumerator
  fullName: System.Globalization.TextElementEnumerator
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
