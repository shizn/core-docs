items:
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  id: XmlWriter
  parent: System.Xml
  children:
  - System.Xml.XmlWriter.#ctor
  - System.Xml.XmlWriter.Create(System.IO.Stream)
  - System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)
  - System.Xml.XmlWriter.Create(System.IO.TextWriter)
  - System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  - System.Xml.XmlWriter.Create(System.Text.StringBuilder)
  - System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  - System.Xml.XmlWriter.Create(System.Xml.XmlWriter)
  - System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)
  - System.Xml.XmlWriter.Dispose
  - System.Xml.XmlWriter.Dispose(System.Boolean)
  - System.Xml.XmlWriter.Flush
  - System.Xml.XmlWriter.FlushAsync
  - System.Xml.XmlWriter.LookupPrefix(System.String)
  - System.Xml.XmlWriter.Settings
  - System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)
  - System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)
  - System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)
  - System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteCData(System.String)
  - System.Xml.XmlWriter.WriteCDataAsync(System.String)
  - System.Xml.XmlWriter.WriteCharEntity(System.Char)
  - System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)
  - System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteComment(System.String)
  - System.Xml.XmlWriter.WriteCommentAsync(System.String)
  - System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteElementString(System.String,System.String)
  - System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteEndAttribute
  - System.Xml.XmlWriter.WriteEndAttributeAsync
  - System.Xml.XmlWriter.WriteEndDocument
  - System.Xml.XmlWriter.WriteEndDocumentAsync
  - System.Xml.XmlWriter.WriteEndElement
  - System.Xml.XmlWriter.WriteEndElementAsync
  - System.Xml.XmlWriter.WriteEntityRef(System.String)
  - System.Xml.XmlWriter.WriteEntityRefAsync(System.String)
  - System.Xml.XmlWriter.WriteFullEndElement
  - System.Xml.XmlWriter.WriteFullEndElementAsync
  - System.Xml.XmlWriter.WriteName(System.String)
  - System.Xml.XmlWriter.WriteNameAsync(System.String)
  - System.Xml.XmlWriter.WriteNmToken(System.String)
  - System.Xml.XmlWriter.WriteNmTokenAsync(System.String)
  - System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)
  - System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)
  - System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)
  - System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)
  - System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)
  - System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)
  - System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteRaw(System.String)
  - System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlWriter.WriteRawAsync(System.String)
  - System.Xml.XmlWriter.WriteStartAttribute(System.String)
  - System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)
  - System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteStartDocument
  - System.Xml.XmlWriter.WriteStartDocument(System.Boolean)
  - System.Xml.XmlWriter.WriteStartDocumentAsync
  - System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)
  - System.Xml.XmlWriter.WriteStartElement(System.String)
  - System.Xml.XmlWriter.WriteStartElement(System.String,System.String)
  - System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)
  - System.Xml.XmlWriter.WriteState
  - System.Xml.XmlWriter.WriteString(System.String)
  - System.Xml.XmlWriter.WriteStringAsync(System.String)
  - System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)
  - System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)
  - System.Xml.XmlWriter.WriteValue(System.Boolean)
  - System.Xml.XmlWriter.WriteValue(System.DateTime)
  - System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)
  - System.Xml.XmlWriter.WriteValue(System.Decimal)
  - System.Xml.XmlWriter.WriteValue(System.Double)
  - System.Xml.XmlWriter.WriteValue(System.Int32)
  - System.Xml.XmlWriter.WriteValue(System.Int64)
  - System.Xml.XmlWriter.WriteValue(System.Object)
  - System.Xml.XmlWriter.WriteValue(System.Single)
  - System.Xml.XmlWriter.WriteValue(System.String)
  - System.Xml.XmlWriter.WriteWhitespace(System.String)
  - System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)
  - System.Xml.XmlWriter.XmlLang
  - System.Xml.XmlWriter.XmlSpace
  langs:
  - csharp
  - vb
  name: XmlWriter
  fullName: System.Xml.XmlWriter
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlWriter
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 378
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> class writes XML data to a stream, file, text reader, or string. It supports the W3C <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\">Extensible Markup Language (XML) 1.0 (fourth edition)</see> and <see href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces in XML 1.0 (third edition)</see> recommendations.</p>\n<p>The members of the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> class enable you to:</p>\n<ul><li>\n<p>Verify that the characters are legal XML characters and that element and attribute names are valid XML names.</p>\n</li><li>\n<p>Verify that the XML document is well-formed.</p>\n</li><li>\n<p>Encode binary bytes as Base64 or BinHex, and write out the resulting text.</p>\n</li><li>\n<p>Pass values by using common language runtime types instead of strings, to avoid having to manually perform value conversions.</p>\n</li><li>\n<p>Write multiple documents to one output stream.</p>\n</li><li>\n<p>Write valid names, qualified names, and name tokens.</p>\n</li></ul>\n<p>In this section:</p>\n<p>Creating an XML writerSpecifying the output formatData conformanceWriting elementsWriting attributesHandling namespacesWriting typed dataClosing the XML writerAsynchronous programmingSecurity considerations</p>\n"
  example:
  - "<p>The following example code shows how to use the asynchronous API to generate XML.</p>\n<pre>\n<code>async Task TestWriter(Stream stream) \n{\n  XmlWriterSettings settings = new XmlWriterSettings();\n  settings.Async = true;\n\n  using (XmlWriter writer = XmlWriter.Create(stream, settings)) {\n      await writer.WriteStartElementAsync(\"pf\", \"root\", \"http://ns\");\n      await writer.WriteStartElementAsync(null, \"sub\", null);\n      await writer.WriteAttributeStringAsync(null, \"att\", null, \"val\");\n      await writer.WriteStringAsync(\"text\");\n      await writer.WriteEndElementAsync();\n      await writer.WriteProcessingInstructionAsync(\"pName\", \"pValue\");\n      await writer.WriteCommentAsync(\"cValue\");\n      await writer.WriteCDataAsync(\"cdata value\");\n      await writer.WriteEndElementAsync();\n      await writer.FlushAsync();\n  }\n}</code>\n</pre>"
  syntax:
    content: 'public abstract class XmlWriter : IDisposable'
    content.vb: >-
      Public MustInherit Class XmlWriter
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.XmlWriter.#ctor
  commentId: M:System.Xml.XmlWriter.#ctor
  id: '#ctor'
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: XmlWriter()
  fullName: System.Xml.XmlWriter.XmlWriter()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 380
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: protected XmlWriter()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Xml.XmlWriter.Settings
  commentId: P:System.Xml.XmlWriter.Settings
  id: Settings
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Settings
  fullName: System.Xml.XmlWriter.Settings
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Settings
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 381
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to create this <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> class is used to specify the set of features to support on the created writer instance. The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Xml.XmlWriter.Settings\" data-throw-if-not-resolved=\"false\"></xref> property cannot be modified. Any attempt to change individual settings results in an exception being thrown.</p>\n"
  example:
  - 
  syntax:
    content: public virtual XmlWriterSettings Settings { get; }
    content.vb: Public Overridable ReadOnly Property Settings As XmlWriterSettings
    parameters: []
    return:
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to create this writer instance. If this writer was not created using the <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method, this property returns <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlWriter.WriteState
  commentId: P:System.Xml.XmlWriter.WriteState
  id: WriteState
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteState
  fullName: System.Xml.XmlWriter.WriteState
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteState
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 382
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the state of the writer.</p>\n"
  syntax:
    content: public abstract WriteState WriteState { get; }
    content.vb: Public MustOverride ReadOnly Property WriteState As WriteState
    parameters: []
    return:
      type: System.Xml.WriteState
      description: "\n<p>One of the <xref href=\"System.Xml.WriteState\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlWriter.XmlLang
  commentId: P:System.Xml.XmlWriter.XmlLang
  id: XmlLang
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: XmlLang
  fullName: System.Xml.XmlWriter.XmlLang
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlLang
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 383
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the current <strong>xml:lang</strong> scope.</p>\n"
  remarks: "\n<p>This property allows one component to find out in what state another component has left the writer. For example, perhaps one component wants to tell another which language help text to generate. The language information is communicated by writing an <strong>xml:lang</strong> attribute.</p>\n"
  syntax:
    content: public virtual string XmlLang { get; }
    content.vb: Public Overridable ReadOnly Property XmlLang As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The current <strong>xml:lang</strong> scope.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlWriter.XmlSpace
  commentId: P:System.Xml.XmlWriter.XmlSpace
  id: XmlSpace
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: XmlSpace
  fullName: System.Xml.XmlWriter.XmlSpace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSpace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 384
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets an <xref href=\"System.Xml.XmlSpace\" data-throw-if-not-resolved=\"false\"></xref> representing the current <strong>xml:space</strong> scope.</p>\n"
  remarks: "\n<p>This allows one component to find out what state another component has left the writer in.</p>\n"
  syntax:
    content: public virtual XmlSpace XmlSpace { get; }
    content.vb: Public Overridable ReadOnly Property XmlSpace As XmlSpace
    parameters: []
    return:
      type: System.Xml.XmlSpace
      description: "\n<p>An <strong>XmlSpace</strong> representing the current <strong>xml:space</strong> scope.</p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>\n<strong>None</strong>\n</p>\n</td><td>\n<p>This is the default if no <strong>xml:space</strong> scope exists.</p>\n</td></tr><tr><td>\n<p>\n<strong>Default</strong>\n</p>\n</td><td>\n<p>The current scope is <strong>xml:space</strong>=\"default\".</p>\n</td></tr><tr><td>\n<p>\n<strong>Preserve</strong>\n</p>\n</td><td>\n<p>The current scope is <strong>xml:space</strong>=\"preserve\".</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlWriter.Create(System.IO.Stream)
  commentId: M:System.Xml.XmlWriter.Create(System.IO.Stream)
  id: Create(System.IO.Stream)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(Stream)
  fullName: System.Xml.XmlWriter.Create(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 385
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified stream.</p>\n"
  remarks: "\n<p>When you use this overload, an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the following default settings is used to create the XML writer: </p>\n<p>Setting</p>\n<p>Default</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CloseOutput\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Two spaces</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NamespaceHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NamespaceHandling.Default\" data-throw-if-not-resolved=\"false\"></xref> (no removal)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<code>\\r\\n</code> (carriage return, new line)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OutputMethod\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlOutputMethod.Xml\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr></tbody></table>\n<p>If you want to specify the features to support on the created writer, use an overload that takes an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with your custom settings.</p>\n<p>Also, XmlWriter always writes a Byte Order Mark (BOM) to the underlying data stream; however, some streams must not have a BOM. To omit the BOM, create a new <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object and set the Encoding property to be a new <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref> object with the Boolean value in the constructor set to false.</p>\n"
  example:
  - "\n<p>The following example writes an XML fragment to a memory stream. (It uses the <xref href=\"System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)\" data-throw-if-not-resolved=\"false\"></xref> overload, which also configures the settings on the new XML writer instance.)</p>XmlWriterSettings.CloseOutput#1"
  syntax:
    content: public static XmlWriter Create(Stream output)
    content.vb: Public Shared Function Create(output As Stream) As XmlWriter
    parameters:
    - id: output
      type: System.IO.Stream
      description: "\n<p>The stream to which you want to write. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> writes XML 1.0 text syntax and appends it to the specified stream.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>stream</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)
  commentId: M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)
  id: Create(System.IO.Stream,System.Xml.XmlWriterSettings)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(Stream, XmlWriterSettings)
  fullName: System.Xml.XmlWriter.Create(System.IO.Stream, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 386
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the stream and <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>XmlWriter always writes a Byte Order Mark (BOM) to the underlying data stream; however, some streams must not have a BOM. To omit the BOM, create a new <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object and set the Encoding property to be a new <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref> object with the Boolean value in the constructor set to false.</p>\n"
  example:
  - "\n<p>The following example writes an XML fragment to a memory stream.</p>XmlWriterSettings.CloseOutput#1"
  syntax:
    content: public static XmlWriter Create(Stream output, XmlWriterSettings settings)
    content.vb: Public Shared Function Create(output As Stream, settings As XmlWriterSettings) As XmlWriter
    parameters:
    - id: output
      type: System.IO.Stream
      description: "\n<p>The stream to which you want to write. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> writes XML 1.0 text syntax and appends it to the specified stream.</p>\n"
    - id: settings
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to configure the new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance. If this is <strong>null</strong>, a <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> with default settings is used.</p>\n<p>If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> is being used with the <xref href=\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref> method, you should use the <xref href=\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings. This ensures that the created <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object has the correct output settings.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>stream</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.IO.TextWriter)
  commentId: M:System.Xml.XmlWriter.Create(System.IO.TextWriter)
  id: Create(System.IO.TextWriter)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(TextWriter)
  fullName: System.Xml.XmlWriter.Create(System.IO.TextWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 387
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When you use this overload, an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with default settings is used to create the XML writer. </p>\n<p>Setting</p>\n<p>Default</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CloseOutput\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Two spaces</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NamespaceHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NamespaceHandling.Default\" data-throw-if-not-resolved=\"false\"></xref> (no removal)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<code>\\r\\n</code> (carriage return, new line)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OutputMethod\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlOutputMethod.Xml\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr></tbody></table>\n<p>If you want to specify the features to support on the created writer, use an overload that takes an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with your custom settings.</p>\n"
  example:
  - "\n<p>The following example creates a writer that outputs to the console.</p>XmlWriter_v2#3"
  syntax:
    content: public static XmlWriter Create(TextWriter output)
    content.vb: Public Shared Function Create(output As TextWriter) As XmlWriter
    parameters:
    - id: output
      type: System.IO.TextWriter
      description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> to which you want to write. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> writes XML 1.0 text syntax and appends it to the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>text</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  commentId: M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  id: Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(TextWriter, XmlWriterSettings)
  fullName: System.Xml.XmlWriter.Create(System.IO.TextWriter, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 388
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  example:
  - "\n<p>The following example writes out an XML string.</p>XmlWriter_v2#4"
  syntax:
    content: public static XmlWriter Create(TextWriter output, XmlWriterSettings settings)
    content.vb: Public Shared Function Create(output As TextWriter, settings As XmlWriterSettings) As XmlWriter
    parameters:
    - id: output
      type: System.IO.TextWriter
      description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> to which you want to write. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> writes XML 1.0 text syntax and appends it to the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: settings
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to configure the new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance. If this is <strong>null</strong>, a <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> with default settings is used.</p>\n<p>If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> is being used with the <xref href=\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref> method, you should use the <xref href=\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings. This ensures that the created <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object has the correct output settings.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>text</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.Text.StringBuilder)
  commentId: M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)
  id: Create(System.Text.StringBuilder)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(StringBuilder)
  fullName: System.Xml.XmlWriter.Create(System.Text.StringBuilder)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 389
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When you use this overload, an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with default settings is used to create the XML writer. </p>\n<p>Setting</p>\n<p>Default</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CloseOutput\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Two spaces</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NamespaceHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NamespaceHandling.Default\" data-throw-if-not-resolved=\"false\"></xref> (no removal)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<code>\\r\\n</code> (carriage return, new line)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OutputMethod\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlOutputMethod.Xml\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr></tbody></table>\n<p>If you want to specify the features to support on the created XML writer, use an overload that takes an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in a <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with your custom settings.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlWriter Create(StringBuilder output)
    content.vb: Public Shared Function Create(output As StringBuilder) As XmlWriter
    parameters:
    - id: output
      type: System.Text.StringBuilder
      description: "\n<p>The <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> to which to write to. Content written by the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> is appended to the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>builder</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  commentId: M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  id: Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(StringBuilder, XmlWriterSettings)
  fullName: System.Xml.XmlWriter.Create(System.Text.StringBuilder, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 390
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings)
    content.vb: Public Shared Function Create(output As StringBuilder, settings As XmlWriterSettings) As XmlWriter
    parameters:
    - id: output
      type: System.Text.StringBuilder
      description: "\n<p>The <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> to which to write to. Content written by the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> is appended to the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: settings
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to configure the new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance. If this is <strong>null</strong>, a <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> with default settings is used.</p>\n<p>If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> is being used with the <xref href=\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref> method, you should use the <xref href=\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings. This ensures that the created <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object has the correct output settings.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>builder</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.Xml.XmlWriter)
  commentId: M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)
  id: Create(System.Xml.XmlWriter)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(XmlWriter)
  fullName: System.Xml.XmlWriter.Create(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 391
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method allows you add features to an underlying <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object. The underlying <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object can be an object created by the <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method, or an object created using the <xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>When you use this overload, an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with default settings is used to create the XML writer. </p>\n<p>Setting</p>\n<p>Default</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CloseOutput\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Two spaces</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NamespaceHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NamespaceHandling.Default\" data-throw-if-not-resolved=\"false\"></xref> (no removal)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<code>\\r\\n</code> (carriage return, new line)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OutputMethod\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.XmlOutputMethod.Xml\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>\n</p>\n</td></tr></tbody></table>\n<p>If you want to specify the features to support on the created XML writer, use an overload that takes an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in a <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with your custom settings.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlWriter Create(XmlWriter output)
    content.vb: Public Shared Function Create(output As XmlWriter) As XmlWriter
    parameters:
    - id: output
      type: System.Xml.XmlWriter
      description: "\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that you want to use as the underlying writer.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that is wrapped around the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>writer</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)
  commentId: M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)
  id: Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Create(XmlWriter, XmlWriterSettings)
  fullName: System.Xml.XmlWriter.Create(System.Xml.XmlWriter, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 392
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>This method allows you add additional features to an underlying <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object. The underlying <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object can be an object created by the <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method, or an object created using the <xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings)
    content.vb: Public Shared Function Create(output As XmlWriter, settings As XmlWriterSettings) As XmlWriter
    parameters:
    - id: output
      type: System.Xml.XmlWriter
      description: "\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that you want to use as the underlying writer.</p>\n"
    - id: settings
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to configure the new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance. If this is <strong>null</strong>, a <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> with default settings is used.</p>\n<p>If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> is being used with the <xref href=\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref> method, you should use the <xref href=\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings. This ensures that the created <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object has the correct output settings.</p>\n"
    return:
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that is wrapped around the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>writer</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlWriter.Dispose
  commentId: M:System.Xml.XmlWriter.Dispose
  id: Dispose
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Xml.XmlWriter.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 393
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.Dispose(System.Boolean)
  commentId: M:System.Xml.XmlWriter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Xml.XmlWriter.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 394
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Xml.XmlWriter.Flush
  commentId: M:System.Xml.XmlWriter.Flush
  id: Flush
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.Xml.XmlWriter.Flush()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 395
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</p>\n"
  remarks: "\n<p>This is called instead of <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> when you want to write more to the underlying stream without losing what is still in the buffer.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.FlushAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes two XML fragments.</p>XmlWriter.Flush#1"
  syntax:
    content: public abstract void Flush()
    content.vb: Public MustOverride Sub Flush
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.FlushAsync
  commentId: M:System.Xml.XmlWriter.FlushAsync
  id: FlushAsync
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: FlushAsync()
  fullName: System.Xml.XmlWriter.FlushAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 396
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task FlushAsync()
    content.vb: Public Overridable Function FlushAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>Flush</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.LookupPrefix(System.String)
  commentId: M:System.Xml.XmlWriter.LookupPrefix(System.String)
  id: LookupPrefix(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: LookupPrefix(String)
  fullName: System.Xml.XmlWriter.LookupPrefix(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupPrefix
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 397
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</p>\n"
  example:
  - "\n<p>The following example writes out a book.</p>XmlWriter.WriteElementString#1"
  syntax:
    content: public abstract string LookupPrefix(string ns)
    content.vb: Public MustOverride Function LookupPrefix(ns As String) As String
    parameters:
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI whose prefix you want to find.</p>\n"
    return:
      type: System.String
      description: "\n<p>The matching prefix or <strong>null</strong> if no matching namespace URI is found in the current scope.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ns</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)
  id: WriteAttributes(System.Xml.XmlReader,System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteAttributes(XmlReader, Boolean)
  fullName: System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributes
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 398
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out all the attributes found at the current position in the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the reader is positioned on an <strong>element</strong> node <strong>WriteAttributes</strong> copies all the contained attributes. If the reader is positioned on an <strong>attribute</strong> node, this method writes the current attribute, then the rest of the attributes until the element closing tag. If the reader is positioned on an <strong>XmlDeclaration</strong> node, this method writes all the attributes in the declaration. If the reader is positioned on any other node type this method throws an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If this method is called using <xref href=\"System.Xml.XmlValidatingReader\" data-throw-if-not-resolved=\"false\"></xref>, to ensure well-formed XML any content (which has been expanded from the entities) that could result in an invalid document is replaced when written. For example, if an attribute includes an <strong>&gt;</strong> entity that has been expanded, to ensure a well-formed document the expanded > is replaced when written out with <strong>&gt;</strong>.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example copies all the elements to the output, changes the tag names to upper case, and copies all the attributes unchanged.</p>XmlWriter.WriteAttributes#1<p>The example uses the file, <strong>test1.xml</strong>, as input.</p>XmlWriter.WriteAttributes#2"
  syntax:
    content: public virtual void WriteAttributes(XmlReader reader, bool defattr)
    content.vb: Public Overridable Sub WriteAttributes(reader As XmlReader, defattr As Boolean)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The <strong>XmlReader</strong> from which to copy the attributes.</p>\n"
    - id: defattr
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>reader</em> is <strong>null</strong>. </p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The reader is not positioned on an <strong>element</strong>, <strong>attribute</strong> or <strong>XmlDeclaration</strong> node. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)
  id: WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteAttributesAsync(XmlReader, Boolean)
  fullName: System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributesAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 399
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out all the attributes found at the current position in the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr)
    content.vb: Public Overridable Function WriteAttributesAsync(reader As XmlReader, defattr As Boolean) As Task
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The <strong>XmlReader</strong> from which to copy the attributes.</p>\n"
    - id: defattr
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteAttributes</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)
  id: WriteAttributeString(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteAttributeString(String, String)
  fullName: System.Xml.XmlWriter.WriteAttributeString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributeString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 400
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out the attribute with the specified local name and value.</p>\n"
  remarks: "\n<p>\n<strong>WriteAttributeString</strong> does the following: </p>\n<ul><li>\n<p>If the attribute value includes double or single quotes, they are replaced with <strong>&quot;</strong> and <strong>&apos;</strong> respectively.</p>\n</li><li>\n<p>If writing an <strong>xml:space</strong> attribute, the writer verifies the attribute value is valid. (Valid values are <strong>preserve</strong> or <strong>default</strong>.) </p>\n</li><li>\n<p>If writing an <strong>xml:lang</strong> attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</p>\n</li></ul>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes out a book.</p>XmlWriter.WriteElementString#1"
  syntax:
    content: public void WriteAttributeString(string localName, string value)
    content.vb: Public Sub WriteAttributeString(localName As String, value As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)
  id: WriteAttributeString(System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteAttributeString(String, String, String)
  fullName: System.Xml.XmlWriter.WriteAttributeString(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributeString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 401
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</p>\n"
  remarks: "\n<p>This method writes out the attribute with a user defined namespace prefix and associates it with the given namespace. If <em>localName</em> is \"xmlns\" then this method also treats this as a namespace declaration. In this case, the <em>ns</em> argument can be <strong>null</strong>.</p>\n<p>\n<strong>WriteAttributeString</strong> does the following: </p>\n<ul><li>\n<p>If the attribute value includes double or single quotes, they are replaced with <strong>&quot;</strong> and <strong>&apos;</strong> respectively.</p>\n</li><li>\n<p>If writing an <strong>xml:space</strong> attribute, the writer verifies the attribute value is valid. (Valid values are <strong>preserve</strong> or <strong>default</strong>.) </p>\n</li><li>\n<p>If writing an <strong>xml:lang</strong> attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</p>\n</li></ul>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <see cref=\"Overload:System.Xml.XmlWriter.WriteAttributeString\"></see> method to write a namespace declaration.</p>XmlWriter.WriteAttributeString#1"
  syntax:
    content: public void WriteAttributeString(string localName, string ns, string value)
    content.vb: Public Sub WriteAttributeString(localName As String, ns As String, value As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI to associate with the attribute.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)
  id: WriteAttributeString(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteAttributeString(String, String, String, String)
  fullName: System.Xml.XmlWriter.WriteAttributeString(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributeString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 402
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</p>\n"
  remarks: "\n<p>This method writes out the attribute with a user defined namespace prefix and associates it with the given namespace. If the prefix is \"xmlns\" then this method also treats this as a namespace declaration and associates the declared prefix with the namespace URI provided in the given attribute value. In this case the <em>ns</em> argument can be <strong>null</strong>.</p>\n<p>\n<strong>WriteAttributeString</strong> does the following: </p>\n<ul><li>\n<p>If the attribute value includes double or single quotes, they are replaced with <strong>&quot;</strong> and <strong>&apos;</strong> respectively.</p>\n</li><li>\n<p>If writing an <strong>xml:space</strong> attribute, the writer verifies the attribute value is valid. (Valid values are <strong>preserve</strong> or <strong>default</strong>.) </p>\n</li><li>\n<p>If writing an <strong>xml:lang</strong> attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</p>\n</li></ul>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <see cref=\"Overload:System.Xml.XmlWriter.WriteAttributeString\"></see> method to write a namespace declaration.</p>XmlWriter.WriteAttributeString#1"
  syntax:
    content: public void WriteAttributeString(string prefix, string localName, string ns, string value)
    content.vb: Public Sub WriteAttributeString(prefix As String, localName As String, ns As String, value As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix of the attribute.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid. </p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The <em>localName</em> or <em>ns</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)
  id: WriteAttributeStringAsync(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteAttributeStringAsync(String, String, String, String)
  fullName: System.Xml.XmlWriter.WriteAttributeStringAsync(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributeStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 403
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value)
    content.vb: Public Function WriteAttributeStringAsync(prefix As String, localName As String, ns As String, value As String) As Task
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix of the attribute.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the attribute.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteAttributeString</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)
  id: WriteBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteBase64(Byte[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteBase64(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteBase64
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 404
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</p>\n"
  remarks: "\n<p>For example, the byte buffer may contain the binary contents of a GIF image. This clearly would not be valid XML. The <strong>Base64</strong> encoding is designed to represent arbitrary byte sequences in a text form comprised of the 65 US-ASCII characters ([A-Za-z0-9+/=]) where each character encodes 6 bits of the binary data. For more information, see Requests for Comments (RFC) 1521 located on the Request for Comments Web site at http://www.rfc-editor.org/.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to write <strong>Base64</strong> data. The <strong>Base64</strong> data is embedded within an <code><image></code> element.</p>XmlReader_Read_Write_Binary#3"
  syntax:
    content: public abstract void WriteBase64(byte[] buffer, int index, int count)
    content.vb: Public MustOverride Sub WriteBase64(buffer As Byte(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>Byte array to encode.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in the buffer indicating the start of the bytes to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero. </p>\n<p>-or-</p>\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Xml.XmlWriter.WriteBase64(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteBase64(Byte(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)
  id: WriteBase64Async(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteBase64Async(Byte[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteBase64Async(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteBase64Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 405
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteBase64Async(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function WriteBase64Async(buffer As Byte(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>Byte array to encode.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in the buffer indicating the start of the bytes to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteBase64</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlWriter.WriteBase64Async(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteBase64Async(Byte(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)
  id: WriteBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteBinHex(Byte[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteBinHex(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteBinHex
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 406
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, encodes the specified binary bytes as <strong>BinHex</strong> and writes out the resulting text.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to write <strong>BinHex</strong> data. The <strong>BinHex</strong> data is embedded within an <code><image></code> element.</p>XmlReader_Read_Write_Binary#1"
  syntax:
    content: public virtual void WriteBinHex(byte[] buffer, int index, int count)
    content.vb: Public Overridable Sub WriteBinHex(buffer As Byte(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>Byte array to encode.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in the buffer indicating the start of the bytes to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is closed or in error state.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero. </p>\n<p>-or-</p>\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlWriter.WriteBinHex(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteBinHex(Byte(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)
  id: WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteBinHexAsync(Byte[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteBinHexAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 407
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously encodes the specified binary bytes as <strong>BinHex</strong> and writes out the resulting text.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteBinHexAsync(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function WriteBinHexAsync(buffer As Byte(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>Byte array to encode.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in the buffer indicating the start of the bytes to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteBinHex</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlWriter.WriteBinHexAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteBinHexAsync(Byte(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteCData(System.String)
  commentId: M:System.Xml.XmlWriter.WriteCData(System.String)
  id: WriteCData(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteCData(String)
  fullName: System.Xml.XmlWriter.WriteCData(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteCData
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 408
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out a <![CDATA[...]]> block containing the specified text.</p>\n"
  remarks: "\n<p>If <em>text</em> is either <strong>null</strong> or <strong>String.Empty</strong>, this method writes an empty CDATA block, for example <![CDATA[]]>.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteCDataAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML file representing a book.</p>XmlWriter.WriteStartDocument#1"
  syntax:
    content: public abstract void WriteCData(string text)
    content.vb: Public MustOverride Sub WriteCData(text As String)
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The text to place inside the CDATA block.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The text would result in a non-well formed XML document.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteCDataAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteCDataAsync(System.String)
  id: WriteCDataAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteCDataAsync(String)
  fullName: System.Xml.XmlWriter.WriteCDataAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteCDataAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 409
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out a <![CDATA[...]]> block containing the specified text.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteCData(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteCDataAsync(string text)
    content.vb: Public Overridable Function WriteCDataAsync(text As String) As Task
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The text to place inside the CDATA block.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteCData</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteCharEntity(System.Char)
  commentId: M:System.Xml.XmlWriter.WriteCharEntity(System.Char)
  id: WriteCharEntity(System.Char)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteCharEntity(Char)
  fullName: System.Xml.XmlWriter.WriteCharEntity(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteCharEntity
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 410
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</p>\n"
  remarks: "\n<p>This method writes the Unicode character in hexadecimal character entity reference format.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextWriter.WriteCharEntity(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> for an example using this method.</p>\n"
  syntax:
    content: public abstract void WriteCharEntity(char ch)
    content.vb: Public MustOverride Sub WriteCharEntity(ch As Char)
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The Unicode character for which to generate a character entity.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The character is in the surrogate pair character range, <strong>0xd800</strong> - <strong>0xdfff</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)
  commentId: M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)
  id: WriteCharEntityAsync(System.Char)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteCharEntityAsync(Char)
  fullName: System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteCharEntityAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 411
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously forces the generation of a character entity for the specified Unicode character value.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteCharEntity(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteCharEntityAsync(char ch)
    content.vb: Public Overridable Function WriteCharEntityAsync(ch As Char) As Task
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The Unicode character for which to generate a character entity.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteCharEntity</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)
  id: WriteChars(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteChars(Char[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteChars(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteChars
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 412
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes text one buffer at a time.</p>\n"
  remarks: "\n<p>This method can be used to write large amounts of text one buffer at a time.</p>\n<p>Special handling must be done to ensure the <strong>WriteChars</strong> method does not split surrogate pair characters across multiple buffer writes. The XML specification defines the valid ranges for surrogate pairs.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - XmlWriter.WriteChars#1
  syntax:
    content: public abstract void WriteChars(char[] buffer, int index, int count)
    content.vb: Public MustOverride Sub WriteChars(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>Character array containing the text to write.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in the buffer indicating the start of the text to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>The buffer length minus <em>index</em> is less than <em>count</em>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>buffer</em> parameter value is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Xml.XmlWriter.WriteChars(System.Char(), System.Int32, System.Int32)
  name.vb: WriteChars(Char(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)
  id: WriteCharsAsync(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteCharsAsync(Char[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteCharsAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteCharsAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 413
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes text one buffer at a time.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteCharsAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function WriteCharsAsync(buffer As Char(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>Character array containing the text to write.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in the buffer indicating the start of the text to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteChars</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlWriter.WriteCharsAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteCharsAsync(Char(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteComment(System.String)
  commentId: M:System.Xml.XmlWriter.WriteComment(System.String)
  id: WriteComment(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteComment(String)
  fullName: System.Xml.XmlWriter.WriteComment(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteComment
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 414
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out a comment <!--...--> containing the specified text.</p>\n"
  remarks: "\n<p>If <em>text</em> is either <strong>null</strong> or <strong>String.Empty</strong>, this method writes a comment with no data content, for example <!---->.</p>\n<p>If <em>text</em> contains an invalid sequence of two dashes \"--\" the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> can either throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> (<xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> objects) or insert a space between the dashes \"- -\" so that the text is a valid XML comment (<xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> objects created by the <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method).</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteCommentAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML file representing a book.</p>XmlWriter.WriteStartDocument#1"
  syntax:
    content: public abstract void WriteComment(string text)
    content.vb: Public MustOverride Sub WriteComment(text As String)
    parameters:
    - id: text
      type: System.String
      description: "\n<p>Text to place inside the comment.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The text would result in a non-well-formed XML document.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteCommentAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteCommentAsync(System.String)
  id: WriteCommentAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteCommentAsync(String)
  fullName: System.Xml.XmlWriter.WriteCommentAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteCommentAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 415
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out a comment <!--...--> containing the specified text.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteComment(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteCommentAsync(string text)
    content.vb: Public Overridable Function WriteCommentAsync(text As String) As Task
    parameters:
    - id: text
      type: System.String
      description: "\n<p>Text to place inside the comment.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteComment</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)
  id: WriteDocType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteDocType(String, String, String, String)
  fullName: System.Xml.XmlWriter.WriteDocType(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteDocType
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 416
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</p>\n"
  remarks: "\n<p>This method does not check for invalid characters in <em>pubid</em>, <em>sysid</em> or <em>subset</em>. It also does not check that the internal subset is well-formed.</p>\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> does not validate the data that is passed to the <xref href=\"System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. You should not pass arbitrary data to this method.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML file representing a book.</p>XmlWriter.WriteStartDocument#1"
  syntax:
    content: public abstract void WriteDocType(string name, string pubid, string sysid, string subset)
    content.vb: Public MustOverride Sub WriteDocType(name As String, pubid As String, sysid As String, subset As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the DOCTYPE. This must be non-empty.</p>\n"
    - id: pubid
      type: System.String
      description: "\n<p>If non-null it also writes PUBLIC \"pubid\" \"sysid\" where <em>pubid</em> and <em>sysid</em> are replaced with the value of the given arguments.</p>\n"
    - id: sysid
      type: System.String
      description: "\n<p>If <em>pubid</em> is <strong>null</strong> and <em>sysid</em> is non-null it writes SYSTEM \"sysid\" where <em>sysid</em> is replaced with the value of this argument.</p>\n"
    - id: subset
      type: System.String
      description: "\n<p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method was called outside the prolog (after the root element). </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value for <em>name</em> would result in invalid XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)
  id: WriteDocTypeAsync(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteDocTypeAsync(String, String, String, String)
  fullName: System.Xml.XmlWriter.WriteDocTypeAsync(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteDocTypeAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 417
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
    content.vb: Public Overridable Function WriteDocTypeAsync(name As String, pubid As String, sysid As String, subset As String) As Task
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the DOCTYPE. This must be non-empty.</p>\n"
    - id: pubid
      type: System.String
      description: "\n<p>If non-null it also writes PUBLIC \"pubid\" \"sysid\" where <em>pubid</em> and <em>sysid</em> are replaced with the value of the given arguments.</p>\n"
    - id: sysid
      type: System.String
      description: "\n<p>If <em>pubid</em> is <strong>null</strong> and <em>sysid</em> is non-null it writes SYSTEM \"sysid\" where <em>sysid</em> is replaced with the value of this argument.</p>\n"
    - id: subset
      type: System.String
      description: "\n<p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteDocType</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteElementString(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)
  id: WriteElementString(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteElementString(String, String)
  fullName: System.Xml.XmlWriter.WriteElementString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteElementString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 418
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes an element with the specified local name and value.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses several write methods to create an XML fragment.</p>XmlWriter.WriteElementString#1"
  syntax:
    content: public void WriteElementString(string localName, string value)
    content.vb: Public Sub WriteElementString(localName As String, value As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the element.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\n<p>-or-</p>\n<p>The parameter values are not valid.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)
  id: WriteElementString(System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteElementString(String, String, String)
  fullName: System.Xml.XmlWriter.WriteElementString(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteElementString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 419
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes an element with the specified local name, namespace URI, and value.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses several write methods to create an XML fragment.</p>XmlWriter.WriteElementString#1"
  syntax:
    content: public void WriteElementString(string localName, string ns, string value)
    content.vb: Public Sub WriteElementString(localName As String, ns As String, value As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI to associate with the element.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the element.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\n<p>-or-</p>\n<p>The parameter values are not valid.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)
  id: WriteElementString(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteElementString(String, String, String, String)
  fullName: System.Xml.XmlWriter.WriteElementString(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteElementString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 420
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes an element with the specified prefix, local name, namespace URI, and value.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void WriteElementString(string prefix, string localName, string ns, string value)
    content.vb: Public Sub WriteElementString(prefix As String, localName As String, ns As String, value As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the element.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the element.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\n<p>-or-</p>\n<p>The parameter values are not valid.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)
  id: WriteElementStringAsync(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteElementStringAsync(String, String, String, String)
  fullName: System.Xml.XmlWriter.WriteElementStringAsync(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteElementStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 421
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public Task WriteElementStringAsync(string prefix, string localName, string ns, string value)
    content.vb: Public Function WriteElementStringAsync(prefix As String, localName As String, ns As String, value As String) As Task
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the element.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the element.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteElementString</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteEndAttribute
  commentId: M:System.Xml.XmlWriter.WriteEndAttribute
  id: WriteEndAttribute
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEndAttribute()
  fullName: System.Xml.XmlWriter.WriteEndAttribute()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 422
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, closes the previous <xref href=\"System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> call.</p>\n"
  remarks: "\n<p>If you call <strong>WriteStartAttribute</strong>, you can close the attribute with this method.</p>\n<p>You can also close the attribute by calling <strong>WriteStartAttribute</strong> again, calling <xref href=\"System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, or calling <xref href=\"System.Xml.XmlWriter.WriteEndElement\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you use the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> methods to output XML, the elements and attributes will not be written until you call the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method. For example, if you are using the XmlWriter to populate an <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref>, until you close the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>, you will not be able to observe the written elements and attributes in the target document.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteEndAttributeAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public abstract void WriteEndAttribute()
    content.vb: Public MustOverride Sub WriteEndAttribute
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteEndAttributeAsync
  commentId: M:System.Xml.XmlWriter.WriteEndAttributeAsync
  id: WriteEndAttributeAsync
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEndAttributeAsync()
  fullName: System.Xml.XmlWriter.WriteEndAttributeAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndAttributeAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 423
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously closes the previous <xref href=\"System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> call.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteEndAttribute\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: protected virtual Task WriteEndAttributeAsync()
    content.vb: Protected Overridable Function WriteEndAttributeAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteEndAttribute</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Xml.XmlWriter.WriteEndDocument
  commentId: M:System.Xml.XmlWriter.WriteEndDocument
  id: WriteEndDocument
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEndDocument()
  fullName: System.Xml.XmlWriter.WriteEndDocument()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndDocument
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 424
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</p>\n"
  remarks: "\n<p>When you use the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> methods to output XML, the elements and attributes will not be written until you call the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method. For example, if you are using the XmlWriter to populate an <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref>, until you close the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>, you will not be able to observe the written elements and attributes in the target document.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteEndDocumentAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML file representing a book.</p>XmlWriter.WriteStartDocument#1"
  syntax:
    content: public abstract void WriteEndDocument()
    content.vb: Public MustOverride Sub WriteEndDocument
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The XML document is invalid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteEndDocumentAsync
  commentId: M:System.Xml.XmlWriter.WriteEndDocumentAsync
  id: WriteEndDocumentAsync
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEndDocumentAsync()
  fullName: System.Xml.XmlWriter.WriteEndDocumentAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndDocumentAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 425
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously closes any open elements or attributes and puts the writer back in the Start state.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteEndDocument\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteEndDocumentAsync()
    content.vb: Public Overridable Function WriteEndDocumentAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteEndDocument</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteEndElement
  commentId: M:System.Xml.XmlWriter.WriteEndElement
  id: WriteEndElement
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEndElement()
  fullName: System.Xml.XmlWriter.WriteEndElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 426
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</p>\n"
  remarks: "\n<p>If the element contains no content, a short end tag \"/>\" is written; otherwise, a full end tag is written.</p>\n<p>When you use the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> methods to output XML, the elements and attributes will not be written until you call the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method. For example, if you are using the XmlWwriter to populate an <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref>, until you close the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>, you will not be able to observe the written elements and attributes in the target document.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteEndElementAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlWriter.WriteEndElement\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.XmlWriter.WriteFullEndElement\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>XmlWriter.WriteFullEndElement#1"
  syntax:
    content: public abstract void WriteEndElement()
    content.vb: Public MustOverride Sub WriteEndElement
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This results in an invalid XML document.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteEndElementAsync
  commentId: M:System.Xml.XmlWriter.WriteEndElementAsync
  id: WriteEndElementAsync
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEndElementAsync()
  fullName: System.Xml.XmlWriter.WriteEndElementAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndElementAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 427
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously closes one element and pops the corresponding namespace scope.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteEndElement\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteEndElementAsync()
    content.vb: Public Overridable Function WriteEndElementAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteEndElement</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteEntityRef(System.String)
  commentId: M:System.Xml.XmlWriter.WriteEntityRef(System.String)
  id: WriteEntityRef(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEntityRef(String)
  fullName: System.Xml.XmlWriter.WriteEntityRef(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEntityRef
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 428
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out an entity reference as <strong>&name;</strong>.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteEntityRefAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML file representing a book.</p>XmlWriter.WriteStartDocument#1"
  syntax:
    content: public abstract void WriteEntityRef(string name)
    content.vb: Public MustOverride Sub WriteEntityRef(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the entity reference.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteEntityRefAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)
  id: WriteEntityRefAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteEntityRefAsync(String)
  fullName: System.Xml.XmlWriter.WriteEntityRefAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEntityRefAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 429
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out an entity reference as <strong>&name;</strong>.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteEntityRef(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteEntityRefAsync(string name)
    content.vb: Public Overridable Function WriteEntityRefAsync(name As String) As Task
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the entity reference.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteEntityRef</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteFullEndElement
  commentId: M:System.Xml.XmlWriter.WriteFullEndElement
  id: WriteFullEndElement
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteFullEndElement()
  fullName: System.Xml.XmlWriter.WriteFullEndElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteFullEndElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 430
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</p>\n"
  remarks: "\n<p>This method always writes the full end tag. This is useful when dealing with elements that must include a full end tag. For example, browsers expect HTML script blocks to be closed with \"</script>\".</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteFullEndElementAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlWriter.WriteEndElement\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.XmlWriter.WriteFullEndElement\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>XmlWriter.WriteFullEndElement#1"
  syntax:
    content: public abstract void WriteFullEndElement()
    content.vb: Public MustOverride Sub WriteFullEndElement
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteFullEndElementAsync
  commentId: M:System.Xml.XmlWriter.WriteFullEndElementAsync
  id: WriteFullEndElementAsync
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteFullEndElementAsync()
  fullName: System.Xml.XmlWriter.WriteFullEndElementAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteFullEndElementAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 431
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously closes one element and pops the corresponding namespace scope.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteFullEndElement\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteFullEndElementAsync()
    content.vb: Public Overridable Function WriteFullEndElementAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteFullEndElement</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteName(System.String)
  commentId: M:System.Xml.XmlWriter.WriteName(System.String)
  id: WriteName(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteName(String)
  fullName: System.Xml.XmlWriter.WriteName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 432
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\n"
  remarks: "\n<p>If <xref href=\"System.Xml.XmlTextWriter.Namespaces\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>, <strong>WriteName</strong> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteNameAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void WriteName(string name)
    content.vb: Public Overridable Sub WriteName(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid XML name; or <em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteNameAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteNameAsync(System.String)
  id: WriteNameAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteNameAsync(String)
  fullName: System.Xml.XmlWriter.WriteNameAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteNameAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 433
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteName(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteNameAsync(string name)
    content.vb: Public Overridable Function WriteNameAsync(name As String) As Task
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteName</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteNmToken(System.String)
  commentId: M:System.Xml.XmlWriter.WriteNmToken(System.String)
  id: WriteNmToken(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteNmToken(String)
  fullName: System.Xml.XmlWriter.WriteNmToken(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteNmToken
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 434
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteNmTokenAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void WriteNmToken(string name)
    content.vb: Public Overridable Sub WriteNmToken(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid NmToken; or <em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteNmTokenAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)
  id: WriteNmTokenAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteNmTokenAsync(String)
  fullName: System.Xml.XmlWriter.WriteNmTokenAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteNmTokenAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 435
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteNmToken(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteNmTokenAsync(string name)
    content.vb: Public Overridable Function WriteNmTokenAsync(name As String) As Task
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteNmToken</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)
  id: WriteNode(System.Xml.XmlReader,System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteNode(XmlReader, Boolean)
  fullName: System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteNode
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 436
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</p>\n"
  remarks: "\n<p>The following table shows the supported node types for this method.</p>\n<p>NodeType </p>\n<p>WriteNode Behavior </p>\n<table><tbody><tr><td>\n<p>\n<strong>None</strong>\n</p>\n</td><td>\n<p>Writes out all the nodes irrespective of type. That is, the writer consumes the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> and writes out all the nodes read including attributes, processing instructions, comments, and so on. </p>\n<p>This situation occurs when the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an initial state. (The <xref href=\"System.Xml.XmlReader.ReadState\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>ReaderState.Initial</strong>).</p>\n</td></tr><tr><td>\n<p>\n<strong>Element </strong>\n</p>\n</td><td>\n<p>Writes out the element node and any attribute nodes.</p>\n</td></tr><tr><td>\n<p>\n<strong>Attribute </strong>\n</p>\n</td><td>\n<p>No operation. Use <xref href=\"System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n</td></tr><tr><td>\n<p>\n<strong>Text </strong>\n</p>\n</td><td>\n<p>Writes out the text node.</p>\n</td></tr><tr><td>\n<p>\n<strong>CDATA </strong>\n</p>\n</td><td>\n<p>Writes out the CDATA section node.</p>\n</td></tr><tr><td>\n<p>\n<strong>EntityReference </strong>\n</p>\n</td><td>\n<p>Writes out the entity reference node.</p>\n</td></tr><tr><td>\n<p>\n<strong>ProcessingInstruction </strong>\n</p>\n</td><td>\n<p>Writes out the processing instruction node.</p>\n</td></tr><tr><td>\n<p>\n<strong>Comment </strong>\n</p>\n</td><td>\n<p>Writes out the comment node.</p>\n</td></tr><tr><td>\n<p>\n<strong>DocumentType </strong>\n</p>\n</td><td>\n<p>Writes out the document type node.</p>\n</td></tr><tr><td>\n<p>\n<strong>SignificantWhitespace </strong>\n</p>\n</td><td>\n<p>Writes out the significant white space node.</p>\n</td></tr><tr><td>\n<p>\n<strong>Whitespace </strong>\n</p>\n</td><td>\n<p>Writes out the white space node.</p>\n</td></tr><tr><td>\n<p>\n<strong>EndElement </strong>\n</p>\n</td><td>\n<p>Writes out the end element tag.</p>\n</td></tr><tr><td>\n<p>\n<strong>EndEntity </strong>\n</p>\n</td><td>\n<p>No operation.</p>\n</td></tr><tr><td>\n<p>\n<strong>XmlDeclaration </strong>\n</p>\n</td><td>\n<p>Writes out the XML declaration node.</p>\n</td></tr></tbody></table>\n<p>If the reader is in the initial state, this method moves the reader to the end of file. If the reader is already at the end of file or in a closed state, this method is non-operational.</p>\n<p>The following C# code copies an entire XML input document to the console: </p>\n<pre><code>XmlReader reader = XmlReader.Create(myfile);\nXmlWriter writer = XmlWriter.Create(Console.Out);\nwriter.WriteNode(reader, false);</code></pre>\n<p>If you have moved off the root node and are positioned elsewhere in the document the following C# example correctly writes out the nodes.</p>\n<pre><code>XmlReader reader = XmlReader.Create(myfile);\nreader.Read(); // Read PI\nreader.Read(); // Read Comment\nreader.Read(); // Read DOCType\nXmlWriter writer = XmlWriter.Create(Console.Out);\nwhile (!reader.EOF){\nwriter.WriteNode(reader, false);\n}</code></pre>\n<p>If the reader is configured to return white space and the writer has is configured to indent output, <strong>WriteNode</strong> may produce strange output. You will essentially be getting double formatting.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes the first and last book nodes out to the console.</p>XmlWriter.WriteNode#1<p>The example uses the file, <strong>books.xml</strong>, as input.</p>XmlWriter.WriteNode#2"
  syntax:
    content: public virtual void WriteNode(XmlReader reader, bool defattr)
    content.vb: Public Overridable Sub WriteNode(reader As XmlReader, defattr As Boolean)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to read from.</p>\n"
    - id: defattr
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>reader</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>reader</em> contains invalid characters.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)
  id: WriteNodeAsync(System.Xml.XmlReader,System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteNodeAsync(XmlReader, Boolean)
  fullName: System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteNodeAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 437
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteNodeAsync(XmlReader reader, bool defattr)
    content.vb: Public Overridable Function WriteNodeAsync(reader As XmlReader, defattr As Boolean) As Task
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to read from.</p>\n"
    - id: defattr
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteNode</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)
  id: WriteProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteProcessingInstruction(String, String)
  fullName: System.Xml.XmlWriter.WriteProcessingInstruction(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteProcessingInstruction
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 438
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: <?name text?>.</p>\n"
  remarks: "\n<p>This method can be used to write the XML declaration (rather than <xref href=\"System.Xml.XmlWriter.WriteStartDocument\" data-throw-if-not-resolved=\"false\"></xref>). This could result in the encoding attribute being incorrectly written. For example, the following C# code would result in an invalid XML document because the default encoding is UTF-8.</p>\n<pre><code>XmlWriter writer = XmlWriter.Create(\"output.xml\");\nwriter.WriteProcessingInstruction(\"xml\", \"version='1.0' encoding='UTF-16'\");\nwriter.WriteStartElement(\"root\");\nwriter.Close();</code></pre>\n<p>If <em>text</em> is either <strong>null</strong> or <strong>String.Empty</strong>, this method writes a <strong>ProcessingInstruction</strong> with no data content, for example <?name?>.</p>\n<p>If text contains an invalid sequence of \"?>\", the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> can either throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> (<xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> objects) or insert a space \"? >\" to avoid writing invalid XML (<xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> objects created by the <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method).</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML file representing a book.</p>XmlWriter.WriteStartDocument#1"
  syntax:
    content: public abstract void WriteProcessingInstruction(string name, string text)
    content.vb: Public MustOverride Sub WriteProcessingInstruction(name As String, text As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the processing instruction.</p>\n"
    - id: text
      type: System.String
      description: "\n<p>The text to include in the processing instruction.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The text would result in a non-well formed XML document.</p>\n<p>\n<em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n<p>This method is being used to create an XML declaration after <xref href=\"System.Xml.XmlWriter.WriteStartDocument\" data-throw-if-not-resolved=\"false\"></xref> has already been called. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)
  id: WriteProcessingInstructionAsync(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteProcessingInstructionAsync(String, String)
  fullName: System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteProcessingInstructionAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 439
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out a processing instruction with a space between the name and text as follows: <?name text?>.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteProcessingInstructionAsync(string name, string text)
    content.vb: Public Overridable Function WriteProcessingInstructionAsync(name As String, text As String) As Task
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the processing instruction.</p>\n"
    - id: text
      type: System.String
      description: "\n<p>The text to include in the processing instruction.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteProcessingInstruction</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)
  id: WriteQualifiedName(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteQualifiedName(String, String)
  fullName: System.Xml.XmlWriter.WriteQualifiedName(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteQualifiedName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 440
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\n"
  remarks: "\n<p>If <em>ns</em> maps to the current default namespace, no prefix is generated.</p>\n<p>When writing attribute values, this method generates a prefix if <em>ns</em> is not found. When writing element content, it throws an exception if <em>ns</em> is not found.</p>\n<p> If a class derived from the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> does not override this method <em>localName</em> is not checked to be a valid W3C XML name. In such case, before calling this method, the validity of the string can be checked by <xref href=\"System.Xml.XmlReader.IsName(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The example writes the following element:</p>\n<pre><code><root xmlns:x=\"urn:abc\">\n<item href=\"#x:test\"/>\n</root></code></pre>XmlWriter_v2#5"
  syntax:
    content: public virtual void WriteQualifiedName(string localName, string ns)
    content.vb: Public Overridable Sub WriteQualifiedName(localName As String, ns As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name to write.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI for the name.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>localName</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n<p>\n<em>localName</em> is not a valid name. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)
  id: WriteQualifiedNameAsync(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteQualifiedNameAsync(String, String)
  fullName: System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteQualifiedNameAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 441
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteQualifiedNameAsync(string localName, string ns)
    content.vb: Public Overridable Function WriteQualifiedNameAsync(localName As String, ns As String) As Task
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name to write.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI for the name.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteQualifiedName</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)
  id: WriteRaw(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteRaw(Char[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteRaw(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteRaw
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 442
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes raw markup manually from a character buffer.</p>\n"
  remarks: "\n<p>This method does not escape special characters.</p>\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> does not validate the data that is passed to the <xref href=\"System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. You should not pass arbitrary data to this method.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void WriteRaw(char[] buffer, int index, int count)
    content.vb: Public MustOverride Sub WriteRaw(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>Character array containing the text to write.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position within the buffer indicating the start of the text to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero. </p>\n<p>-or-</p>\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Xml.XmlWriter.WriteRaw(System.Char(), System.Int32, System.Int32)
  name.vb: WriteRaw(Char(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteRaw(System.String)
  commentId: M:System.Xml.XmlWriter.WriteRaw(System.String)
  id: WriteRaw(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteRaw(String)
  fullName: System.Xml.XmlWriter.WriteRaw(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteRaw
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 443
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes raw markup manually from a string.</p>\n"
  remarks: "\n<p>This method does not escape special characters.</p>\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> does not validate the data that is passed to the <xref href=\"System.Xml.XmlWriter.WriteRaw(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. You should not pass arbitrary data to this method.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteRawAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for an example using this method.</p>\n"
  syntax:
    content: public abstract void WriteRaw(string data)
    content.vb: Public MustOverride Sub WriteRaw(data As String)
    parameters:
    - id: data
      type: System.String
      description: "\n<p>String containing the text to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>data</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)
  id: WriteRawAsync(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteRawAsync(Char[], Int32, Int32)
  fullName: System.Xml.XmlWriter.WriteRawAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteRawAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 444
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes raw markup manually from a character buffer.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteRawAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function WriteRawAsync(buffer As Char(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>Character array containing the text to write.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position within the buffer indicating the start of the text to write.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteRaw</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlWriter.WriteRawAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteRawAsync(Char(), Int32, Int32)
- uid: System.Xml.XmlWriter.WriteRawAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteRawAsync(System.String)
  id: WriteRawAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteRawAsync(String)
  fullName: System.Xml.XmlWriter.WriteRawAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteRawAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 445
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes raw markup manually from a string.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteRaw(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteRawAsync(string data)
    content.vb: Public Overridable Function WriteRawAsync(data As String) As Task
    parameters:
    - id: data
      type: System.String
      description: "\n<p>String containing the text to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteRaw</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteStartAttribute(System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartAttribute(System.String)
  id: WriteStartAttribute(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartAttribute(String)
  fullName: System.Xml.XmlWriter.WriteStartAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 446
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes the start of an attribute with the specified local name.</p>\n"
  remarks: "\n<p>This method enables you to write a value using multiple Write methods.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void WriteStartAttribute(string localName)
    content.vb: Public Sub WriteStartAttribute(localName As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is closed.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)
  id: WriteStartAttribute(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartAttribute(String, String)
  fullName: System.Xml.XmlWriter.WriteStartAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 447
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes the start of an attribute with the specified local name and namespace URI.</p>\n"
  remarks: "\n<p>This is a more advanced version of <xref href=\"System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> that allows you to write an attribute value using multiple write methods, such as <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, and so on.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> for an example using this method.</p>\n"
  syntax:
    content: public void WriteStartAttribute(string localName, string ns)
    content.vb: Public Sub WriteStartAttribute(localName As String, ns As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
  exceptions:
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlWriter.WriteEndAttribute
    commentId: M:System.Xml.XmlWriter.WriteEndAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)
  id: WriteStartAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartAttribute(String, String, String)
  fullName: System.Xml.XmlWriter.WriteStartAttribute(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 448
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</p>\n"
  remarks: "\n<p>This method enables you to write a value using multiple Write methods.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void WriteStartAttribute(string prefix, string localName, string ns)
    content.vb: Public MustOverride Sub WriteStartAttribute(prefix As String, localName As String, ns As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix of the attribute.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI for the attribute.</p>\n"
  exceptions:
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)
  id: WriteStartAttributeAsync(System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartAttributeAsync(String, String, String)
  fullName: System.Xml.XmlWriter.WriteStartAttributeAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartAttributeAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 449
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes the start of an attribute with the specified prefix, local name, and namespace URI.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: protected virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns)
    content.vb: Protected Overridable Function WriteStartAttributeAsync(prefix As String, localName As String, ns As String) As Task
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix of the attribute.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI for the attribute.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteStartAttribute</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Xml.XmlWriter.WriteStartDocument
  commentId: M:System.Xml.XmlWriter.WriteStartDocument
  id: WriteStartDocument
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartDocument()
  fullName: System.Xml.XmlWriter.WriteStartDocument()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartDocument
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 450
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the XML declaration with the version \"1.0\".</p>\n"
  remarks: "\n<p>The encoding level of the document is determined by how the writer is implemented. For example, if an <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object is specified in the <strong>XmlTextWriter</strong> constructor, this determines the value of the encoding attribute. This method does not create a standalone attribute.</p>\n<p>When <strong>WriteStartDocument</strong> is called the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</p>\n<p>If <strong>WriteStartDocument</strong> has been called and then the <xref href=\"System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is used to create another XML declaration, an exception will be thrown.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartDocumentAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public abstract void WriteStartDocument()
    content.vb: Public MustOverride Sub WriteStartDocument
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This is not the first write method called after the constructor.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteStartDocument(System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)
  id: WriteStartDocument(System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartDocument(Boolean)
  fullName: System.Xml.XmlWriter.WriteStartDocument(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartDocument
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 451
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the XML declaration with the version \"1.0\" and the standalone attribute.</p>\n"
  remarks: "\n<p>The encoding level of the document is determined by how the writer is implemented. For example, if an <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object is specified in the <strong>XmlTextWriter</strong> constructor, this determines the value of the encoding attribute.</p>\n<p>When <strong>WriteStartDocument</strong> is called, the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</p>\n<p>If <strong>WriteStartDocument</strong> has been called and then the <xref href=\"System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is used to create another XML declaration, an exception will be thrown.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void WriteStartDocument(bool standalone)
    content.vb: Public MustOverride Sub WriteStartDocument(standalone As Boolean)
    parameters:
    - id: standalone
      type: System.Boolean
      description: "\n<p>If <strong>true</strong>, it writes \"standalone=yes\"; if <strong>false</strong>, it writes \"standalone=no\".</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This is not the first write method called after the constructor. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteStartDocumentAsync
  commentId: M:System.Xml.XmlWriter.WriteStartDocumentAsync
  id: WriteStartDocumentAsync
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartDocumentAsync()
  fullName: System.Xml.XmlWriter.WriteStartDocumentAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartDocumentAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 452
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes the XML declaration with the version \"1.0\".</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteStartDocument\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteStartDocumentAsync()
    content.vb: Public Overridable Function WriteStartDocumentAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteStartDocument</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)
  id: WriteStartDocumentAsync(System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartDocumentAsync(Boolean)
  fullName: System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartDocumentAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 453
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes the XML declaration with the version \"1.0\" and the standalone attribute.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteStartDocument(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteStartDocumentAsync(bool standalone)
    content.vb: Public Overridable Function WriteStartDocumentAsync(standalone As Boolean) As Task
    parameters:
    - id: standalone
      type: System.Boolean
      description: "\n<p>If <strong>true</strong>, it writes \"standalone=yes\"; if <strong>false</strong>, it writes \"standalone=no\".</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteStartDocument</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteStartElement(System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartElement(System.String)
  id: WriteStartElement(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartElement(String)
  fullName: System.Xml.XmlWriter.WriteStartElement(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 454
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out a start tag with the specified local name.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML node.</p>XmlWriter.Close#1"
  syntax:
    content: public void WriteStartElement(string localName)
    content.vb: Public Sub WriteStartElement(localName As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is closed.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteStartElement(System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)
  id: WriteStartElement(System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartElement(String, String)
  fullName: System.Xml.XmlWriter.WriteStartElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 455
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</p>\n"
  remarks: "\n<p>After calling this method you can either write attributes, or create content using <xref href=\"System.Xml.XmlWriter.WriteComment(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>WriteStartElement</strong> for child elements. You can close the element with either <xref href=\"System.Xml.XmlWriter.WriteEndElement\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.XmlWriter.WriteFullEndElement\" data-throw-if-not-resolved=\"false\"></xref>. For example, the following C# code: </p>\n<pre><code> writer.WriteStartElement(\"item\",null);\nwriter.WriteString(\"some text\");\nwriter.WriteEndElement();</code></pre>\n<p>Generates the following output: </p>\n<pre><code> <item>some text</item></code></pre>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void WriteStartElement(string localName, string ns)
    content.vb: Public Sub WriteStartElement(localName As String, ns As String)
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is closed.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)
  id: WriteStartElement(System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartElement(String, String, String)
  fullName: System.Xml.XmlWriter.WriteStartElement(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 456
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</p>\n"
  remarks: "\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes out an XML fragment.</p>XmlWriter.WriteElementString#1"
  syntax:
    content: public abstract void WriteStartElement(string prefix, string localName, string ns)
    content.vb: Public MustOverride Sub WriteStartElement(prefix As String, localName As String, ns As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix of the element.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI to associate with the element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is closed.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)
  id: WriteStartElementAsync(System.String,System.String,System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStartElementAsync(String, String, String)
  fullName: System.Xml.XmlWriter.WriteStartElementAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStartElementAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 457
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes the specified start tag and associates it with the given namespace and prefix.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteStartElementAsync(string prefix, string localName, string ns)
    content.vb: Public Overridable Function WriteStartElementAsync(prefix As String, localName As String, ns As String) As Task
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The namespace prefix of the element.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI to associate with the element.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteStartElement</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteString(System.String)
  commentId: M:System.Xml.XmlWriter.WriteString(System.String)
  id: WriteString(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteString(String)
  fullName: System.Xml.XmlWriter.WriteString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 458
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes the given text content.</p>\n"
  remarks: "\n<p>\n<strong>WriteString</strong> does the following:</p>\n<ul><li>\n<p>The characters <strong>&</strong>, <strong><</strong>, and <strong>></strong> are replaced with <strong>&amp;</strong>, <strong>&lt;</strong>, and <strong>&gt;</strong>, respectively.</p>\n</li><li>\n<p>The default behavior of an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> created using <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> is to throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to write character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD). These invalid XML characters can be written by creating the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref> property set to <strong>false</strong>. Doing so will result in the characters being replaced with numeric character entities (&#0; through &#0x1F). Additionally, an <xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref> created with the <strong>new</strong> operator will replace the invalid characters with numeric character entities by default.</p>\n</li></ul>\n<p>Note   Microsoft does not encourage the practice of writing invalid XML characters since many applications that consume XML are not designed to handle invalid characters.</p>\n<ul><li>\n<p>If <strong>WriteString</strong> is called in the context of an attribute value, double and single quotes are replaced with <strong>&quot;</strong> and <strong>&apos;</strong> respectively.</p>\n</li></ul>\n<p>For example, this input string <code>test<item>test</code> is written out as </p>\n<pre><code> test&lt;item&gt;test</code></pre>\n<p>If <em>text</em> is either <strong>null</strong> or <strong>String.Empty</strong>, this method writes a text node with no data content.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example writes an XML node.</p>XmlWriter.Close#1"
  syntax:
    content: public abstract void WriteString(string text)
    content.vb: Public MustOverride Sub WriteString(text As String)
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The text to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The text string contains an invalid surrogate pair.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteStringAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteStringAsync(System.String)
  id: WriteStringAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteStringAsync(String)
  fullName: System.Xml.XmlWriter.WriteStringAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 459
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes the given text content.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteStringAsync(string text)
    content.vb: Public Overridable Function WriteStringAsync(text As String) As Task
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The text to write.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteString</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)
  commentId: M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)
  id: WriteSurrogateCharEntity(System.Char,System.Char)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteSurrogateCharEntity(Char, Char)
  fullName: System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteSurrogateCharEntity
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 460
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</p>\n"
  remarks: "\n<p>This method is only applicable on systems that use UTF-16 encoding.</p>\n<p>The surrogate character entity is written in hexadecimal format. The range for surrogate characters is #x10000 to #x10FFFF. The following formula is used to generate the surrogate character entity: (<em>highChar</em> -0xD800) * 0x400 + (<em>lowChar</em> -0xDC00) + 0x10000 </p>\n<p>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646]. A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate). These 16-bit units are referred to as a surrogate pair.</p>\n<p>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at http://www.unicode.org, or section 2.2 of the W3C XML 1.0 Recommendation located at http://www.w3.org/TR/REC-xml#charsets.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void WriteSurrogateCharEntity(char lowChar, char highChar)
    content.vb: Public MustOverride Sub WriteSurrogateCharEntity(lowChar As Char, highChar As Char)
    parameters:
    - id: lowChar
      type: System.Char
      description: "\n<p>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</p>\n"
    - id: highChar
      type: System.Char
      description: "\n<p>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid surrogate character pair was passed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)
  commentId: M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)
  id: WriteSurrogateCharEntityAsync(System.Char,System.Char)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteSurrogateCharEntityAsync(Char, Char)
  fullName: System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteSurrogateCharEntityAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 461
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously generates and writes the surrogate character entity for the surrogate character pair.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
    content.vb: Public Overridable Function WriteSurrogateCharEntityAsync(lowChar As Char, highChar As Char) As Task
    parameters:
    - id: lowChar
      type: System.Char
      description: "\n<p>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</p>\n"
    - id: highChar
      type: System.Char
      description: "\n<p>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteSurrogateCharEntity</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Boolean)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Boolean)
  id: WriteValue(System.Boolean)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Boolean)
  fullName: System.Xml.XmlWriter.WriteValue(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 462
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(bool value)
    content.vb: Public Overridable Sub WriteValue(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.DateTime)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.DateTime)
  id: WriteValue(System.DateTime)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(DateTime)
  fullName: System.Xml.XmlWriter.WriteValue(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 463
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example writes a book node using typed data.</p>XmlWriter_v2#1"
  syntax:
    content: public virtual void WriteValue(DateTime value)
    content.vb: Public Overridable Sub WriteValue(value As Date)
    parameters:
    - id: value
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)
  id: WriteValue(System.DateTimeOffset)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(DateTimeOffset)
  fullName: System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 464
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual void WriteValue(DateTimeOffset value)
    content.vb: Public Overridable Sub WriteValue(value As DateTimeOffset)
    parameters:
    - id: value
      type: System.DateTimeOffset
      description: "\n<p>The <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Decimal)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Decimal)
  id: WriteValue(System.Decimal)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Decimal)
  fullName: System.Xml.XmlWriter.WriteValue(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 465
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(decimal value)
    content.vb: Public Overridable Sub WriteValue(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Double)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Double)
  id: WriteValue(System.Double)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Double)
  fullName: System.Xml.XmlWriter.WriteValue(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 466
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example writes a book node using typed data.</p>XmlWriter_v2#1"
  syntax:
    content: public virtual void WriteValue(double value)
    content.vb: Public Overridable Sub WriteValue(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Int32)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Int32)
  id: WriteValue(System.Int32)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Int32)
  fullName: System.Xml.XmlWriter.WriteValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 467
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(int value)
    content.vb: Public Overridable Sub WriteValue(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Int64)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Int64)
  id: WriteValue(System.Int64)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Int64)
  fullName: System.Xml.XmlWriter.WriteValue(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 468
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(long value)
    content.vb: Public Overridable Sub WriteValue(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Object)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Object)
  id: WriteValue(System.Object)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Object)
  fullName: System.Xml.XmlWriter.WriteValue(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 469
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes the object value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime (CLR) object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>If the CLR object is a list type such as <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>, it is treated as an array of the value type. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(object value)
    content.vb: Public Overridable Sub WriteValue(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object value to write.</p>\n<p>Note   With the release of the .NET Framework 3.5, this method accepts <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is closed or in error state.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.Single)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.Single)
  id: WriteValue(System.Single)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(Single)
  fullName: System.Xml.XmlWriter.WriteValue(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 470
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a single-precision floating-point number.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>When the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, convert the return value of this method to a string and use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(float value)
    content.vb: Public Overridable Sub WriteValue(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteValue(System.String)
  commentId: M:System.Xml.XmlWriter.WriteValue(System.String)
  id: WriteValue(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteValue(String)
  fullName: System.Xml.XmlWriter.WriteValue(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 471
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Writes a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</p>\n<p>If <xref href=\"System.Xml.XmlWriter.WriteValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> is called multiple times in succession, the values are not delimited by a space. You must call <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> between calls to <xref href=\"System.Xml.XmlWriter.WriteValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to insert white space. Pass an array type to the <xref href=\"System.Xml.XmlWriter.WriteValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload to write out an array of distinct values.</p>\n<p>If this method is called on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance that outputs text-only, the typed value is serialized to text.</p>\n<p>For asynchronous operations, use the <xref href=\"System.Xml.XmlWriter.WriteStringAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void WriteValue(string value)
    content.vb: Public Overridable Sub WriteValue(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> value to write.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid value was specified.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlWriter.WriteWhitespace(System.String)
  commentId: M:System.Xml.XmlWriter.WriteWhitespace(System.String)
  id: WriteWhitespace(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteWhitespace(String)
  fullName: System.Xml.XmlWriter.WriteWhitespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteWhitespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 472
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, writes out the given white space.</p>\n"
  remarks: "\n<p>This method is used to manually format your document.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void WriteWhitespace(string ws)
    content.vb: Public MustOverride Sub WriteWhitespace(ws As String)
    parameters:
    - id: ws
      type: System.String
      description: "\n<p>The string of white space characters.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The string contains non-white space characters.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)
  commentId: M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)
  id: WriteWhitespaceAsync(System.String)
  parent: System.Xml.XmlWriter
  langs:
  - csharp
  - vb
  name: WriteWhitespaceAsync(String)
  fullName: System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteWhitespaceAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 473
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously writes out the given white space.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task WriteWhitespaceAsync(string ws)
    content.vb: Public Overridable Function WriteWhitespaceAsync(ws As String) As Task
    parameters:
    - id: ws
      type: System.String
      description: "\n<p>The string of white space characters.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task that represents the asynchronous <strong>WriteWhitespace</strong> operation.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: false
  name: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.Xml.WriteState
  parent: System.Xml
  isExternal: false
  name: WriteState
  fullName: System.Xml.WriteState
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.XmlSpace
  parent: System.Xml
  isExternal: false
  name: XmlSpace
  fullName: System.Xml.XmlSpace
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Xml.XmlException
  isExternal: false
  name: XmlException
  fullName: System.Xml.XmlException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
