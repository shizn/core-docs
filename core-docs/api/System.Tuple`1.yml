items:
- uid: System.Tuple`1
  commentId: T:System.Tuple`1
  id: Tuple`1
  parent: System
  children:
  - System.Tuple`1.#ctor(`0)
  - System.Tuple`1.Equals(System.Object)
  - System.Tuple`1.GetHashCode
  - System.Tuple`1.Item1
  - System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Tuple`1.System#IComparable#CompareTo(System.Object)
  - System.Tuple`1.ToString
  langs:
  - csharp
  - vb
  name: Tuple<T1>
  fullName: System.Tuple<T1>
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tuple
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1758
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a 1-tuple, or singleton. </p>\n"
  remarks: "\n<p>A tuple is a data structure that has a specific number and sequence of values. The <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> class represents a 1-tuple, or singleton, which is a tuple that has a single component. A singleton is used comparatively rarely in application development.</p>\n<p>You can instantiate a <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object by calling either the <xref href=\"System.Tuple`1.#ctor(`0)\" data-throw-if-not-resolved=\"false\"></xref> constructor or the static <xref href=\"System.Tuple.Create``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> method. You can retrieve the value of the tuple's single component by using the read-only <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> instance property.</p>\n"
  example:
  - 
  syntax:
    content: 'public class Tuple<T1> : IStructuralComparable, IStructuralEquatable, IComparable'
    content.vb: >-
      Public Class Tuple(Of T1)
          Implements IStructuralComparable, IStructuralEquatable, IComparable
    typeParameters:
    - id: T1
      description: "\n<p>The type of the tuple's only component.</p>\n"
  seealso:
  - type: System.Tuple
    commentId: T:System.Tuple
  - type: System.Tuple`2
    commentId: T:System.Tuple`2
  - type: System.Tuple`3
    commentId: T:System.Tuple`3
  - type: System.Tuple`4
    commentId: T:System.Tuple`4
  - type: System.Tuple`5
    commentId: T:System.Tuple`5
  - type: System.Tuple`6
    commentId: T:System.Tuple`6
  - type: System.Tuple`7
    commentId: T:System.Tuple`7
  - type: System.Tuple`8
    commentId: T:System.Tuple`8
  inheritance:
  - System.Object
  implements:
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Tuple(Of T1)
  name.vb: Tuple(Of T1)
- uid: System.Tuple`1.#ctor(`0)
  commentId: M:System.Tuple`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: Tuple(T1)
  fullName: System.Tuple<T1>.Tuple(T1)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1760
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You can also use the static <xref href=\"System.Tuple.Create``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 1-tuple object without having to explicitly specify the type of its component. The following example uses the <xref href=\"System.Tuple.Create``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 1-tuple whose component is of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Tuple.Create#1<p>This is equivalent to the following call to the <xref href=\"System.Tuple`1.#ctor(`0)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#2"
  example:
  - 
  syntax:
    content: public Tuple(T1 item1)
    content.vb: Public Sub New(item1 As T1)
    parameters:
    - id: item1
      type: '{T1}'
      description: "\n<p>The value of the tuple's only component.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Tuple(Of T1).Tuple(T1)
- uid: System.Tuple`1.Item1
  commentId: P:System.Tuple`1.Item1
  id: Item1
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: Item1
  fullName: System.Tuple<T1>.Item1
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item1
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1761
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object's single component. </p>\n"
  remarks: "\n<p>You can determine the type of the <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n<p>The example illustrates both approaches.</p>\n"
  example:
  - "\n<p>The following example displays information about two singletons and their components. </p>System.Tuple`1.Item1#1"
  syntax:
    content: public T1 Item1 { get; }
    content.vb: Public ReadOnly Property Item1 As T1
    parameters: []
    return:
      type: '{T1}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object's single component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1).Item1
- uid: System.Tuple`1.Equals(System.Object)
  commentId: M:System.Tuple`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Tuple<T1>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1762
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  remarks: "\n<p>The <em>obj</em> parameter is considered to be equal to the current instance under the following conditions:</p>\n<ul><li>\n<p>It is a <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li><li>\n<p>Its single component is of the same type as the current instance.</p>\n</li><li>\n<p>Its single component is equal to that of the current instance. Equality is determined by the default object equality comparer for each component. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Tuple`1.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to compare a <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object whose component is a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value with three <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> objects whose components have the following characteristics:</p>\n<ul><li>\n<p>Same type (<xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>) and same value.</p>\n</li><li>\n<p>Same type (<xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>), but different value.</p>\n</li><li>\n<p>Different type (<xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>), but same value. </p>\n</li></ul>System.Tuple`1.Equals#1"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1).Equals(System.Object)
- uid: System.Tuple`1.GetHashCode
  commentId: M:System.Tuple`1.GetHashCode
  id: GetHashCode
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Tuple<T1>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1763
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1).GetHashCode()
- uid: System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Tuple<T1>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1764
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n"
  remarks: "\n<p>Although this method can be called directly, it is most commonly called by collection sorting methods that include <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> parameters to order the members of a collection. For example, it is called by the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object that is instantiated by using the <xref href=\"System.Collections.SortedList.#ctor(System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>The <xref href=\"System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref href=\"System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example defines a generic class named <code>DescendingComparer</code> that implements the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> interface. <code>DescendingComparer</code> sorts objects in descending rather than ascending order by reversing the value returned by the default comparer for a particular type. An instance of the generic <code>DescendingComparer</code> class is then passed to the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method to sort an array of <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> objects in descending order. Note that the example does not directly call the <xref href=\"System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method. This method is called implicitly by the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method for each element in the array.</p>System.Tuple`1.CompareTo#2"
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>An object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>An object that provides custom rules for comparison.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>A negative integer</p>\n</td><td>\n<p>This instance precedes <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\n</td></tr><tr><td>\n<p>A positive integer</p>\n</td><td>\n<p>This instance follows <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>other</em> is not a <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
    commentId: M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  fullName.vb: System.Tuple(Of T1).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Tuple<T1>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1765
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object based on a specified comparison method.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation is called only if <em>other</em> is not <strong>null</strong>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object whose single component is of the same type as the current instance. The method is passed the <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> component of the current instance and the <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> component of the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object represented by the <em>other</em> parameter.</p>\n"
  example:
  - "\n<p>The following example defines an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation that considers two floating-point values to be equal if they are approximately equal to each other (that is, if one value is within .01 percent of the other). </p>System.Tuple`1.Equals#2"
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  fullName.vb: System.Tuple(Of T1).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1766
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the hash code for the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object by using a specified computation method.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The method simply wraps a call to the <em>comparer</em> object's <xref href=\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>The algorithm used to compute the hash code should return the same hash code for two <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> objects that are considered to be equal.</p>\n"
  example:
  - 
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object whose <xref href=\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>  method calculates the hash code of the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  fullName.vb: System.Tuple(Of T1).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Tuple`1.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Tuple`1.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Tuple<T1>.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1767
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>This method provides the <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation for the <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, to order the members of a collection.</p>\n<p>The <xref href=\"System.Tuple`1.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref href=\"System.Tuple`1.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The <xref href=\"System.Tuple`1.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method uses the default object  comparer.</p>\n"
  example:
  - "\n<p>The following example creates an array of singletons whose component is a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value. It displays the value of each tuple component in unsorted order, sorts the array, and then displays the values in sorted order. Note that the example does not directly call the <xref href=\"System.Tuple`1.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This method is called implicitly by the <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> method for each element in the array.</p>System.Tuple`1.CompareTo#1"
  syntax:
    content: int IComparable.CompareTo(object obj)
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with the current instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>A negative integer</p>\n</td><td>\n<p>This instance precedes <em>obj</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\n</td></tr><tr><td>\n<p>A positive integer</p>\n</td><td>\n<p>This instance follows <em>obj</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>obj</em> is not a <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Tuple`1.Equals(System.Object)
    commentId: M:System.Tuple`1.Equals(System.Object)
  implements:
  - System.IComparable.CompareTo(System.Object)
  fullName.vb: System.Tuple(Of T1).System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Tuple`1.ToString
  commentId: M:System.Tuple`1.ToString
  id: ToString
  parent: System.Tuple`1
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Tuple<T1>.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1768
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a string that represents the value of this <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The string returned by this method takes the form (Item1), where Item1 represents the value of the <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> property. If the value of <xref href=\"System.Tuple`1.Item1\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>, it is represented as <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Tuple`1.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Tuple`1.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of this <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1).ToString()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: false
  name: CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
