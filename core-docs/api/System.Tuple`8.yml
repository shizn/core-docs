items:
- uid: System.Tuple`8
  commentId: T:System.Tuple`8
  id: Tuple`8
  parent: System
  children:
  - System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)
  - System.Tuple`8.Equals(System.Object)
  - System.Tuple`8.GetHashCode
  - System.Tuple`8.Item1
  - System.Tuple`8.Item2
  - System.Tuple`8.Item3
  - System.Tuple`8.Item4
  - System.Tuple`8.Item5
  - System.Tuple`8.Item6
  - System.Tuple`8.Item7
  - System.Tuple`8.Rest
  - System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Tuple`8.System#IComparable#CompareTo(System.Object)
  - System.Tuple`8.ToString
  langs:
  - csharp
  - vb
  name: Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tuple
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1863
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents an n-tuple, where n is 8 or greater.</p>\n"
  remarks: "\n<p>A tuple is a data structure that has a specific number and sequence of values. The <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> class represents an n-tuple that has eight or more components. </p>\n<p>You can instantiate a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object with exactly eight components by calling the static <xref href=\"System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)\" data-throw-if-not-resolved=\"false\"></xref> method. The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20. Note that it uses type inference to determine the type of each component. </p>System.Tuple.Create#17<p>You can also instantiate an n-tuple object with eight or more components by calling the <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor. The following example uses the <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example. </p>System.Tuple`8.Class#1<p>To create an n-tuple with nine or more components, you must call the  <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor. The static factory methods of the <xref href=\"System.Tuple\" data-throw-if-not-resolved=\"false\"></xref> class do not support the creation of <strong>Tuple</strong> objects with more than eight components.</p><p>To instantiate an n-tuple that has eight or more components with the <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor, you supply a generic <strong>Tuple</strong> object as the <em>rest</em> parameter to define the eighth through nth components of the tuple. By nesting generic <strong>Tuple</strong> objects in this way, you can create a tuple that has no practical limitation on the number of its components. </p><p>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000. The first component of the tuple is the city name. The second component is the start date of the data series, and the third component is the population at the start date. Each subsequent component provides the population at decade intervals. The 17-tuple is created by nesting a <xref href=\"System.Tuple`3\" data-throw-if-not-resolved=\"false\"></xref> object inside a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object. (That is, the <xref href=\"System.Tuple`3\" data-throw-if-not-resolved=\"false\"></xref> object is supplied as the value of the <em>rest</em> parameter in the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> class constructor.) This <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object is, in turn, nested in an outer <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object. (That is, the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object is supplied as the value of the <em>rest</em> parameter in the outer <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's class constructor.)</p>System.Tuple.Create#19<p>You can retrieve the value of the tuple's first seven components by using the read-only <xref href=\"System.Tuple`7.Item1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`7.Item2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`7.Item3\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`7.Item4\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`7.Item5\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`7.Item6\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Tuple`7.Item7\" data-throw-if-not-resolved=\"false\"></xref> instance properties. Any additional components are nested and can be retrieved from the <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property. In the previous example, the <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref> through <xref href=\"System.Tuple`8.Item7\" data-throw-if-not-resolved=\"false\"></xref> properties retrieve the first through seventh components of the tuple. The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <strong>Rest.Item1</strong> through <strong>Rest.Item7</strong> properties. The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <strong>Rest.Rest.Item1</strong> though <strong>Rest.Rest.Item3</strong> properties.</p><p>Tuples are commonly used in four different ways:</p><ul><li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.</p></li><li><p>To provide easy access to, and manipulation of, a data set. </p></li><li><p>To return multiple values from a method without the use of <strong>out</strong> parameters (in C#) or <strong>ByRef</strong> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the city name, in a <xref href=\"System.Tuple`7\" data-throw-if-not-resolved=\"false\"></xref> object.</p></li><li><p>To pass multiple values to a method through a single parameter. For example, the <xref href=\"System.Threading.Thread.Start(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a <xref href=\"System.Tuple`7\" data-throw-if-not-resolved=\"false\"></xref> object as the method argument, you can supply the threadâ€™s startup routine with seven items of data.</p></li></ul>"
  example:
  - 
  syntax:
    content: 'public class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : IStructuralComparable, IStructuralEquatable, IComparable'
    content.vb: >-
      Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)
          Implements IStructuralComparable, IStructuralEquatable, IComparable
    typeParameters:
    - id: T1
      description: "\n<p>The type of the tuple's first component.</p>\n"
    - id: T2
      description: "\n<p>The type of the tuple's second component.</p>\n"
    - id: T3
      description: "\n<p>The type of the tuple's third component.</p>\n"
    - id: T4
      description: "\n<p>The type of the tuple's fourth component.</p>\n"
    - id: T5
      description: "\n<p>The type of the tuple's fifth component.</p>\n"
    - id: T6
      description: "\n<p>The type of the tuple's sixth component.</p>\n"
    - id: T7
      description: "\n<p>The type of the tuple's seventh component.</p>\n"
    - id: TRest
      description: "\n<p>Any generic <strong>Tuple</strong> object that defines the types of the tuple's remaining components.</p>\n"
  seealso:
  - type: System.Tuple
    commentId: T:System.Tuple
  - type: System.Tuple`1
    commentId: T:System.Tuple`1
  - type: System.Tuple`2
    commentId: T:System.Tuple`2
  - type: System.Tuple`3
    commentId: T:System.Tuple`3
  - type: System.Tuple`4
    commentId: T:System.Tuple`4
  - type: System.Tuple`5
    commentId: T:System.Tuple`5
  - type: System.Tuple`6
    commentId: T:System.Tuple`6
  - type: System.Tuple`7
    commentId: T:System.Tuple`7
  inheritance:
  - System.Object
  implements:
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)
- uid: System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)
  commentId: M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)
  id: '#ctor(`0,`1,`2,`3,`4,`5,`6,`7)'
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Tuple(T1, T2, T3, T4, T5, T6, T7, TRest)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Tuple(T1, T2, T3, T4, T5, T6, T7, TRest)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1865
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You can also use the static <xref href=\"System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</p>System.Tuple.Create#17<p>This is equivalent to the following call to the <xref href=\"System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple`8.Class#1<p>However, the static <xref href=\"System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)\" data-throw-if-not-resolved=\"false\"></xref> method cannot be used to create a tuple object with more than eight components. </p><p>When using the <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor to create an n-tuple with eight or more components, you use the <em>rest</em> parameter to create a nested n-tuple that has from one to seven components. By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components. For example, to create a 25-tuple, you instantiate a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object with three levels of nesting, as follows:</p><ul><li><p>The outermost <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object contains the first through seventh components. Its <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property provides access to an <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object at the first level of nesting. </p></li><li><p>The outermost nested <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object contains the eighth through fourteenth components, and its <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property provides access to an <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object at the second level of nesting. </p></li><li><p>The <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property provides access to an <xref href=\"System.Tuple`4\" data-throw-if-not-resolved=\"false\"></xref> object at the third level of nesting.</p></li><li><p>The innermost tuple is a <xref href=\"System.Tuple`4\" data-throw-if-not-resolved=\"false\"></xref> object that contains the twenty-second through twenty-fifth components.</p></li></ul>"
  example:
  - "\n<p>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000. The first component of the tuple is the city name. The second component is the start date of the series of data, and the third component is the population at the start date. Each subsequent component provides the population at decade intervals. The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000. </p>System.Tuple.Create#19"
  syntax:
    content: public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest)
    content.vb: Public Sub New(item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)
    parameters:
    - id: item1
      type: '{T1}'
      description: "\n<p>The value of the tuple's first component.</p>\n"
    - id: item2
      type: '{T2}'
      description: "\n<p>The value of the tuple's second component.</p>\n"
    - id: item3
      type: '{T3}'
      description: "\n<p>The value of the tuple's third component.</p>\n"
    - id: item4
      type: '{T4}'
      description: "\n<p>The value of the tuple's fourth component</p>\n"
    - id: item5
      type: '{T5}'
      description: "\n<p>The value of the tuple's fifth component.</p>\n"
    - id: item6
      type: '{T6}'
      description: "\n<p>The value of the tuple's sixth component.</p>\n"
    - id: item7
      type: '{T7}'
      description: "\n<p>The value of the tuple's seventh component.</p>\n"
    - id: rest
      type: '{TRest}'
      description: "\n<p>Any generic <strong>Tuple</strong> object that contains the values of the tuple's remaining components.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>rest</em> is not a generic <strong>Tuple</strong> object.</p>\n"
  seealso:
  - type: System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
    commentId: M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Tuple(T1, T2, T3, T4, T5, T6, T7, TRest)
- uid: System.Tuple`8.Item1
  commentId: P:System.Tuple`8.Item1
  id: Item1
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item1
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item1
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item1
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1866
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's first component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The first component of the 17-tuple is the city name. The example uses the <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref> property to display the city name in the table header before displaying the population data.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T1 Item1 { get; }
    content.vb: Public ReadOnly Property Item1 As T1
    parameters: []
    return:
      type: '{T1}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's first component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item1
- uid: System.Tuple`8.Item2
  commentId: P:System.Tuple`8.Item2
  id: Item2
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item2
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item2
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item2
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1867
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's second component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item2\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item2\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the second element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The second component of the 17-tuple is the first year of the data series. The example assigns the value of the <xref href=\"System.Tuple`8.Item2\" data-throw-if-not-resolved=\"false\"></xref> property to a variable, and then uses that variable to represent the year whose data is displayed.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T2 Item2 { get; }
    content.vb: Public ReadOnly Property Item2 As T2
    parameters: []
    return:
      type: '{T2}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's second component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item2
- uid: System.Tuple`8.Item3
  commentId: P:System.Tuple`8.Item3
  id: Item3
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item3
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item3
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item3
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1868
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's third component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item3\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item3\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the third element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The third component of the 17-tuple is the population in 1860. The example uses the <xref href=\"System.Tuple`8.Item3\" data-throw-if-not-resolved=\"false\"></xref> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T3 Item3 { get; }
    content.vb: Public ReadOnly Property Item3 As T3
    parameters: []
    return:
      type: '{T3}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's third component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item3
- uid: System.Tuple`8.Item4
  commentId: P:System.Tuple`8.Item4
  id: Item4
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item4
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item4
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item4
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1869
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's fourth component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item4\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item4\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the fourth element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The fourth component of the 17-tuple is the population in 1870. The example uses the <xref href=\"System.Tuple`8.Item4\" data-throw-if-not-resolved=\"false\"></xref> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T4 Item4 { get; }
    content.vb: Public ReadOnly Property Item4 As T4
    parameters: []
    return:
      type: '{T4}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's fourth component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item4
- uid: System.Tuple`8.Item5
  commentId: P:System.Tuple`8.Item5
  id: Item5
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item5
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item5
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item5
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1870
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's fifth component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item5\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item5\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the fifth element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The fifth component of the 17-tuple is the population in 1880. The example uses the <xref href=\"System.Tuple`8.Item5\" data-throw-if-not-resolved=\"false\"></xref> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T5 Item5 { get; }
    content.vb: Public ReadOnly Property Item5 As T5
    parameters: []
    return:
      type: '{T5}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's fifth component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item5
- uid: System.Tuple`8.Item6
  commentId: P:System.Tuple`8.Item6
  id: Item6
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item6
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item6
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item6
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1871
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's sixth component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item6\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item6\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the sixth element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The sixth component of the 17-tuple is the population in 1890. The example uses the <xref href=\"System.Tuple`8.Item6\" data-throw-if-not-resolved=\"false\"></xref> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T6 Item6 { get; }
    content.vb: Public ReadOnly Property Item6 As T6
    parameters: []
    return:
      type: '{T6}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's sixth component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item6
- uid: System.Tuple`8.Item7
  commentId: P:System.Tuple`8.Item7
  id: Item7
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Item7
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Item7
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item7
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1872
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's seventh component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`8.Item7\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`8.Item7\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the seventh element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The seventh component of the 17-tuple is the population in 1900. The example uses the <xref href=\"System.Tuple`8.Item7\" data-throw-if-not-resolved=\"false\"></xref> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public T7 Item7 { get; }
    content.vb: Public ReadOnly Property Item7 As T7
    parameters: []
    return:
      type: '{T7}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's seventh component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Item7
- uid: System.Tuple`8.Rest
  commentId: P:System.Tuple`8.Rest
  id: Rest
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Rest
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Rest
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rest
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1873
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's remaining components.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property returns a nested <strong>Tuple</strong> object that allows access to the eighth though nth components of the tuple. Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <strong>Tuple</strong> object's <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref> through <xref href=\"System.Tuple`8.Item7\" data-throw-if-not-resolved=\"false\"></xref> properties. You can then use the <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property of a nested <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object to retrieve the <strong>Tuple</strong> object at the next level of nesting.</p>\n<p>You can dynamically determine the number of components in a nested <strong>Tuple</strong> object that is returned by the <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property by extracting the digit from its type name. The following example provides an illustration.</p>System.Tuple`8.Item1#2"
  example:
  - "\n<p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The seventh component of the 17-tuple is the population in 1900. The example uses the <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve the values of the eighth through fourteenth components, and it uses the <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property of the nested <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object to retrieve the values of the remaining components.</p>System.Tuple`8.Item1#1"
  syntax:
    content: public TRest Rest { get; }
    content.vb: Public ReadOnly Property Rest As TRest
    parameters: []
    return:
      type: '{TRest}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's remaining components.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Rest
- uid: System.Tuple`8.Equals(System.Object)
  commentId: M:System.Tuple`8.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1874
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  remarks: "\n<p>The <em>obj</em> parameter is considered to be equal to the current instance if it meets all the following conditions:</p>\n<ul><li>\n<p>It is a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li><li>\n<p>It has the same total number of components that are of the same types as the current instance.</p>\n</li><li>\n<p>Its components (including its nested components) are equal to those of the current instance. Equality is determined by the default equality comparer for each component. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines five <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects that contain prime numbers. It then compares the first object with each of the remaining objects. As the output shows, only the first and the last <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects are equal, because they have an identical number of components with identical values.</p>System.Tuple`8.Equals#1"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).Equals(System.Object)
- uid: System.Tuple`8.GetHashCode
  commentId: M:System.Tuple`8.GetHashCode
  id: GetHashCode
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1875
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the hash code for the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).GetHashCode()
- uid: System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1876
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n"
  remarks: "\n<p>This member is an explicit interface implementation. It can be used only when the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>This method lets you define customized comparisons of <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects. For example, you can use this method to order <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects based on the value of a specific component.</p>\n<p>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> parameters to order the members of a collection. For example, it is called by the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object that is instantiated by using the <xref href=\"System.Collections.SortedList.#ctor(System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>The <xref href=\"System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref href=\"System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects that contains population data for four U.S. cities from 1940 to 2000. The octuple's first component is the city name. The remaining six components represent the population at 10-year intervals from 1940 to 2000. </p>\n<p>The <code>PopulationComparer</code> class provides an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation that allows the array of octuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: The position of the component that defines the sort order, and a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the tuple objects should be sorted in ascending or descending order. </p>\n<p>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</p>System.Tuple`8.CompareTo#2"
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>An object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>An object that provides custom rules for comparison.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>A negative integer</p>\n</td><td>\n<p>This instance precedes <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\n</td></tr><tr><td>\n<p>A positive integer</p>\n</td><td>\n<p>This instance follows <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>other</em> is not a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1877
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object based on a specified comparison method.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation is called only if <em>other</em> is not <strong>null</strong>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object that has the same total number of components (including those in nested <strong>Tuple</strong> objects) of the same types as the current instance. The <xref href=\"System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method first passes the <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref> values of the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects to be compared to the <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation. If this method call returns <strong>true</strong>, the method is called again and passed the <xref href=\"System.Tuple`8.Item2\" data-throw-if-not-resolved=\"false\"></xref> values of the two <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects. This continues until the method call returns <strong>false</strong> when it compares a specific pair of values, or the two <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> values are passed to the method. </p>\n"
  example:
  - 
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1878
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the hash code for the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object by using a specified computation method.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The method simply wraps a call to the <em>comparer</em> object's <xref href=\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>The algorithm used to compute the hash code should return the same hash code for two <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> objects that are considered to be equal.</p>\n"
  example:
  - 
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object whose <xref href=\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>  method calculates the hash code of the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Tuple`8.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Tuple`8.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1879
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>This method provides the <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation for the <xref href=\"System.Tuple`7\" data-throw-if-not-resolved=\"false\"></xref> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, to order the members of a collection.</p>\n<p>The <xref href=\"System.Tuple`7.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref href=\"System.Tuple`7.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method uses the default object comparer to compare each component.</p>\n"
  example:
  - "\n<p>The following example creates an array of octuples whose components are integers that contain a range of prime numbers. The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order. The output shows that the array has been sorted by <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref>, or the tuple's first component. Note that the example does not directly call the <xref href=\"System.Tuple`7.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This method is called implicitly by the <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> method for each element in the array.</p>System.Tuple`8.CompareTo#1"
  syntax:
    content: int IComparable.CompareTo(object obj)
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with the current instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>A negative integer</p>\n</td><td>\n<p>This instance precedes <em>obj</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\n</td></tr><tr><td>\n<p>A positive integer</p>\n</td><td>\n<p>This instance follows <em>obj</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>obj</em> is not a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IComparable.CompareTo(System.Object)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Tuple`8.ToString
  commentId: M:System.Tuple`8.ToString
  id: ToString
  parent: System.Tuple`8
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1880
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a string that represents the value of this <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The string returned by this method takes the form (Item1, Item2, Item3, Item4, <em>Item5, Item6, Item7</em>, Item8â€¦), where Item1, Item2, Item3, Item4, Item5, Item6, and Item7 represent the values of the <xref href=\"System.Tuple`8.Item1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`8.Item2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`8.Item3\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`8.Item4\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`8.Item5\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`8.Item6\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Tuple`8.Item7\" data-throw-if-not-resolved=\"false\"></xref> properties. Item8 represents the value of the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Next.Item1</strong> property. The value of any additional nested components follow Item8. If any of the property values is <strong>null</strong>, it is represented as <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900. It then uses the <xref href=\"System.Tuple`8.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to display the tuple's data.</p>System.Tuple`8.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of this <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest).ToString()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
- uid: '{T3}'
  isExternal: false
  name: T3
  fullName: T3
- uid: '{T4}'
  isExternal: false
  name: T4
  fullName: T4
- uid: '{T5}'
  isExternal: false
  name: T5
  fullName: T5
- uid: '{T6}'
  isExternal: false
  name: T6
  fullName: T6
- uid: '{T7}'
  isExternal: false
  name: T7
  fullName: T7
- uid: '{TRest}'
  isExternal: false
  name: TRest
  fullName: TRest
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: false
  name: CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
