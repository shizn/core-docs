items:
- uid: System.Security.Cryptography.HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.HashAlgorithm.#ctor
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.Initialize
  langs:
  - csharp
  - vb
  name: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashAlgorithm
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 10
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the base class from which all implementations of cryptographic hash algorithms must derive.</p>\n"
  remarks: "\n<p>Hash functions are fundamental to modern cryptography. These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Hash functions are commonly used with digital signatures and for data integrity.</p>\n<p>The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.</p>\n"
  example:
  - "\n<p>The following code example computes the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> hash for an array. This example assumes that there is a predefined byte array <code>dataArray[]</code>. <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> is a derived class of <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic HashAlgorithm Example#1"
  syntax:
    content: 'public abstract class HashAlgorithm : IDisposable'
    content.vb: >-
      Public MustInherit Class HashAlgorithm
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.HashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.</p>\n"
  syntax:
    content: protected HashAlgorithm()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashSize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the size, in bits, of the computed hash code.</p>\n"
  syntax:
    content: public virtual int HashSize { get; }
    content.vb: Public Overridable ReadOnly Property HashSize As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComputeHash
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 24
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value for the specified byte array.</p>\n"
  example:
  - "\n<p>The following example computes the <xref href=\"System.Security.Cryptography.MD5\" data-throw-if-not-resolved=\"false\"></xref> hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.</p>Security.Cryptography.MD5#1"
  syntax:
    content: public byte[] ComputeHash(byte[] buffer)
    content.vb: Public Function ComputeHash(buffer As Byte()) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())
  name.vb: ComputeHash(Byte())
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  id: ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComputeHash
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 35
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value for the specified region of the specified byte array.</p>\n"
  syntax:
    content: public byte[] ComputeHash(byte[] buffer, int offset, int count)
    content.vb: Public Function ComputeHash(buffer As Byte(), offset As Integer, count As Integer) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>count</em> is an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>buffer</em> length is invalid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is out of range. This parameter requires a non-negative number.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)
  name.vb: ComputeHash(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  id: ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(IO.Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComputeHash
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 65
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value for the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following example calculates the <xref href=\"System.Security.Cryptography.RIPEMD160\" data-throw-if-not-resolved=\"false\"></xref> hash for all files in a directory.</p>RIPEMD160#1"
  syntax:
    content: public byte[] ComputeHash(IO.Stream inputStream)
    content.vb: Public Function ComputeHash(inputStream As IO.Stream) As Byte()
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "\n<p>The input to compute the hash code for. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The computed hash code.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 78
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 84
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <strong>Finalize</strong> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <strong>Finalize</strong> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashCore(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashCore
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 96
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</p>\n"
  remarks: "\n<p>This method is not called by application code.</p>\n<p>This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.</p>\n"
  syntax:
    content: protected abstract void HashCore(byte[] array, int ibStart, int cbSize)
    content.vb: Protected MustOverride Sub HashCore(array As Byte(), ibStart As Integer, cbSize As Integer)
    parameters:
    - id: array
      type: System.Byte[]
    - id: ibStart
      type: System.Int32
    - id: cbSize
      type: System.Int32
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte(), System.Int32, System.Int32)
  name.vb: HashCore(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  commentId: M:System.Security.Cryptography.HashAlgorithm.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashFinal
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 97
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</p>\n"
  remarks: "\n<p>This method finalizes any partial computation and returns the correct hash value for the data stream.</p>\n"
  syntax:
    content: protected abstract byte[] HashFinal()
    content.vb: Protected MustOverride Function HashFinal As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  commentId: M:System.Security.Cryptography.HashAlgorithm.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Initialize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 98
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes an implementation of the <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public abstract void Initialize()
    content.vb: Public MustOverride Sub Initialize
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
