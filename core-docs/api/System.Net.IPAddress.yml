items:
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  id: IPAddress
  parent: System.Net
  children:
  - System.Net.IPAddress.#ctor(System.Byte[])
  - System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  - System.Net.IPAddress.#ctor(System.Int64)
  - System.Net.IPAddress.AddressFamily
  - System.Net.IPAddress.Any
  - System.Net.IPAddress.Broadcast
  - System.Net.IPAddress.Equals(System.Object)
  - System.Net.IPAddress.GetAddressBytes
  - System.Net.IPAddress.GetHashCode
  - System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  - System.Net.IPAddress.IPv6Any
  - System.Net.IPAddress.IPv6Loopback
  - System.Net.IPAddress.IPv6None
  - System.Net.IPAddress.IsIPv4MappedToIPv6
  - System.Net.IPAddress.IsIPv6LinkLocal
  - System.Net.IPAddress.IsIPv6Multicast
  - System.Net.IPAddress.IsIPv6SiteLocal
  - System.Net.IPAddress.IsIPv6Teredo
  - System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  - System.Net.IPAddress.Loopback
  - System.Net.IPAddress.MapToIPv4
  - System.Net.IPAddress.MapToIPv6
  - System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  - System.Net.IPAddress.None
  - System.Net.IPAddress.Parse(System.String)
  - System.Net.IPAddress.ScopeId
  - System.Net.IPAddress.ToString
  - System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  langs:
  - csharp
  - vb
  name: IPAddress
  fullName: System.Net.IPAddress
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPAddress
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 173
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an Internet Protocol (IP) address.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class contains the address of a computer on an IP network.</p>\n"
  example:
  - "\n<p>The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</p>System.Net.IPAddress#1"
  syntax:
    content: public class IPAddress
    content.vb: Public Class IPAddress
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.IPAddress.Any
  commentId: F:System.Net.IPAddress.Any
  id: Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Any
  fullName: System.Net.IPAddress.Any
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 175
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Net.IPAddress.Any\" data-throw-if-not-resolved=\"false\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> instance must listen for client activity on all network interfaces.</p>\n<p>The <xref href=\"System.Net.IPAddress.Any\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 0.0.0.0 in dotted-quad notation.</p>\n"
  syntax:
    content: public static readonly IPAddress Any
    content.vb: Public Shared ReadOnly Any As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.Broadcast
  commentId: F:System.Net.IPAddress.Broadcast
  id: Broadcast
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Broadcast
  fullName: System.Net.IPAddress.Broadcast
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Broadcast
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 176
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides the IP broadcast address. This field is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.Broadcast\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 255.255.255.255 in dotted-quad notation.</p>\n"
  example:
  - "\n<p>The following example prints the <xref href=\"System.Net.IPAddress.Broadcast\" data-throw-if-not-resolved=\"false\"></xref> address to the console.</p>IPAddress_Broadcast_Loopback#2"
  syntax:
    content: public static readonly IPAddress Broadcast
    content.vb: Public Shared ReadOnly Broadcast As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.IPv6Any
  commentId: F:System.Net.IPAddress.IPv6Any
  id: IPv6Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPv6Any
  fullName: System.Net.IPAddress.IPv6Any
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6Any
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 177
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Net.IPAddress.IPv6Any\" data-throw-if-not-resolved=\"false\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> must listen for client activity on all network interfaces.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.IPv6Any\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</p>\n"
  example:
  - "\n<p>The following code example displays the value of the current host's Any address in standard compressed format.</p>System.Net.IPAddress.IPv6NoneAnyLoopback#2"
  syntax:
    content: public static readonly IPAddress IPv6Any
    content.vb: Public Shared ReadOnly IPv6Any As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.IPv6Loopback
  commentId: F:System.Net.IPAddress.IPv6Loopback
  id: IPv6Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPv6Loopback
  fullName: System.Net.IPAddress.IPv6Loopback
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6Loopback
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 178
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides the IP loopback address. This property is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.IPv6Loopback\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</p>\n"
  example:
  - "\n<p>The following code example displays the value of the current host's loopback address in standard compressed format.</p>System.Net.IPAddress.IPv6NoneAnyLoopback#1"
  syntax:
    content: public static readonly IPAddress IPv6Loopback
    content.vb: Public Shared ReadOnly IPv6Loopback As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.IPv6None
  commentId: F:System.Net.IPAddress.IPv6None
  id: IPv6None
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPv6None
  fullName: System.Net.IPAddress.IPv6None
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6None
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 179
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an IP address that indicates that no network interface should be used. This property is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Net.IPAddress.IPv6None\" data-throw-if-not-resolved=\"false\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> must not listen for client activity. The <xref href=\"System.Net.IPAddress.IPv6None\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</p>\n"
  example:
  - "\n<p>The following code example displays the value of the current host's None address in standard compressed format.</p>System.Net.IPAddress.IPv6NoneAnyLoopback#3"
  syntax:
    content: public static readonly IPAddress IPv6None
    content.vb: Public Shared ReadOnly IPv6None As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.Loopback
  commentId: F:System.Net.IPAddress.Loopback
  id: Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Loopback
  fullName: System.Net.IPAddress.Loopback
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loopback
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 180
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides the IP loopback address. This field is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.Loopback\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 127.0.0.1 in dotted-quad notation.</p>\n"
  example:
  - "\n<p>The following example prints the <xref href=\"System.Net.IPAddress.Loopback\" data-throw-if-not-resolved=\"false\"></xref> address to the console.</p>IPAddress_Broadcast_Loopback#1"
  syntax:
    content: public static readonly IPAddress Loopback
    content.vb: Public Shared ReadOnly Loopback As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.None
  commentId: F:System.Net.IPAddress.None
  id: None
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Net.IPAddress.None
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 181
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an IP address that indicates that no network interface should be used. This field is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Net.IPAddress.None\" data-throw-if-not-resolved=\"false\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> must not listen for client activity. The <xref href=\"System.Net.IPAddress.None\" data-throw-if-not-resolved=\"false\"></xref> field is equivalent to 255.255.255.255 in dotted-quad notation.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPAddress.None\" data-throw-if-not-resolved=\"false\"></xref> property to indicate that no network interface should be used.</p>IPAddress_None#1"
  syntax:
    content: public static readonly IPAddress None
    content.vb: Public Shared ReadOnly None As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.#ctor(System.Byte[])
  commentId: M:System.Net.IPAddress.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPAddress(Byte[])
  fullName: System.Net.IPAddress.IPAddress(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 182
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class with the address specified as a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> is created with the <xref href=\"System.Net.IPAddress.Address\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>address</em>.</p>\n<p>If the length of <em>address</em> is 4, <xref href=\"System.Net.IPAddress.#ctor(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</p>\n<p>The <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array is assumed to be in network byte order with the most significant byte first in index position 0.</p>\n"
  syntax:
    content: public IPAddress(byte[] address)
    content.vb: Public Sub New(address As Byte())
    parameters:
    - id: address
      type: System.Byte[]
      description: "\n<p>The byte array value of the IP address. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>address</em> contains a bad IP address. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.IPAddress.IPAddress(System.Byte())
  name.vb: IPAddress(Byte())
- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  commentId: M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  id: '#ctor(System.Byte[],System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPAddress(Byte[], Int64)
  fullName: System.Net.IPAddress.IPAddress(System.Byte[], System.Int64)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 183
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class with the address specified as a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array and the specified scope identifier.</p>\n"
  remarks: "\n<p>This constructor instantiates an IPv6 address. The <em>scopeid</em> identifies a network interface in the case of a link-local address. The scope is valid only for link-local and site-local addresses.</p>\n<p>The <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array is assumed to be in network byte order with the most significant byte first in index position 0.</p>\n"
  syntax:
    content: public IPAddress(byte[] address, long scopeid)
    content.vb: Public Sub New(address As Byte(), scopeid As Long)
    parameters:
    - id: address
      type: System.Byte[]
      description: "\n<p>The byte array value of the IP address. </p>\n"
    - id: scopeid
      type: System.Int64
      description: "\n<p>The long value of the scope identifier. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>address</em> contains a bad IP address. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>scopeid</em> < 0 or </p>\n<p>\n<em>scopeid</em> > 0x00000000FFFFFFFF </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.IPAddress.IPAddress(System.Byte(), System.Int64)
  name.vb: IPAddress(Byte(), Int64)
- uid: System.Net.IPAddress.#ctor(System.Int64)
  commentId: M:System.Net.IPAddress.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPAddress(Int64)
  fullName: System.Net.IPAddress.IPAddress(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 184
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class with the address specified as an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance is created with the <xref href=\"System.Net.IPAddress.Address\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>newAddress</em>.</p>\n<p>The <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value is assumed to be in network byte order.</p>\n"
  syntax:
    content: public IPAddress(long newAddress)
    content.vb: Public Sub New(newAddress As Long)
    parameters:
    - id: newAddress
      type: System.Int64
      description: "\n<p>The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\". </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>newAddress</em> < 0 or </p>\n<p>\n<em>newAddress</em> > 0x00000000FFFFFFFF </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.AddressFamily
  commentId: P:System.Net.IPAddress.AddressFamily
  id: AddressFamily
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: AddressFamily
  fullName: System.Net.IPAddress.AddressFamily
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressFamily
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 185
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the address family of the IP address.</p>\n"
  example:
  - "\n<p>Refer to the example in the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>System.Net.IPAddress#3"
  syntax:
    content: public AddressFamily AddressFamily { get; }
    content.vb: Public ReadOnly Property AddressFamily As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>Returns <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> for IPv4 or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> for IPv6.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv4MappedToIPv6
  commentId: P:System.Net.IPAddress.IsIPv4MappedToIPv6
  id: IsIPv4MappedToIPv6
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv4MappedToIPv6
  fullName: System.Net.IPAddress.IsIPv4MappedToIPv6
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv4MappedToIPv6
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 186
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the IP address is an IPv4-mapped IPv6 address.</p>\n"
  remarks: "\n<p>Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see <see href=\"http://go.microsoft.com/fwlink/?LinkID=92231\">www.ietf.org/rfc/rfc4291.txt</see>.</p>\n"
  syntax:
    content: public bool IsIPv4MappedToIPv6 { get; }
    content.vb: Public ReadOnly Property IsIPv4MappedToIPv6 As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the IP address is an IPv4-mapped IPv6 address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6LinkLocal
  commentId: P:System.Net.IPAddress.IsIPv6LinkLocal
  id: IsIPv6LinkLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6LinkLocal
  fullName: System.Net.IPAddress.IsIPv6LinkLocal
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6LinkLocal
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 187
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 link local address.</p>\n"
  syntax:
    content: public bool IsIPv6LinkLocal { get; }
    content.vb: Public ReadOnly Property IsIPv6LinkLocal As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 link local address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6Multicast
  commentId: P:System.Net.IPAddress.IsIPv6Multicast
  id: IsIPv6Multicast
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6Multicast
  fullName: System.Net.IPAddress.IsIPv6Multicast
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6Multicast
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 188
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 multicast global address.</p>\n"
  syntax:
    content: public bool IsIPv6Multicast { get; }
    content.vb: Public ReadOnly Property IsIPv6Multicast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 multicast global address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6SiteLocal
  commentId: P:System.Net.IPAddress.IsIPv6SiteLocal
  id: IsIPv6SiteLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6SiteLocal
  fullName: System.Net.IPAddress.IsIPv6SiteLocal
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6SiteLocal
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 189
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 site local address.</p>\n"
  syntax:
    content: public bool IsIPv6SiteLocal { get; }
    content.vb: Public ReadOnly Property IsIPv6SiteLocal As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 site local address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6Teredo
  commentId: P:System.Net.IPAddress.IsIPv6Teredo
  id: IsIPv6Teredo
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6Teredo
  fullName: System.Net.IPAddress.IsIPv6Teredo
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6Teredo
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 190
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 Teredo address.</p>\n"
  remarks: "\n<p>A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsIPv6Teredo { get; }
    content.vb: Public ReadOnly Property IsIPv6Teredo As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 Teredo address; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
  - type: System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
  - type: System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
  - type: System.Net.Sockets.IPProtectionLevel
    commentId: T:System.Net.Sockets.IPProtectionLevel
  - type: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
    commentId: M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  - type: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
    commentId: M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  - type: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
    commentId: M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.ScopeId
  commentId: P:System.Net.IPAddress.ScopeId
  id: ScopeId
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: ScopeId
  fullName: System.Net.IPAddress.ScopeId
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ScopeId
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 191
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the IPv6 address scope identifier.</p>\n"
  remarks: "\n<p>The meaning of <xref href=\"System.Net.IPAddress.ScopeId\" data-throw-if-not-resolved=\"false\"></xref> changes depending on the context in which it is used.</p>\n<ul><li>\n<p>Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</p>\n</li></ul>\n<p>Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</p>\n<ul><li>\n<p>Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.</p>\n</li></ul>\n<p>Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</p>\n<p>The notation that is used to specify the <em>ScopeId</em> with an address is <code>Address%ScopeId</code>. For example, <code>FE80::5EFE:192.168.41.30%2.</code></p>\n"
  example:
  - System.Net.IPAddress#3
  syntax:
    content: public long ScopeId { get; set; }
    content.vb: Public Property ScopeId As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>A long integer that specifies the scope of the address.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<strong>AddressFamily</strong> = <strong>InterNetwork</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>scopeId</em> < 0</p>\n<p>- or -</p>\n<ul><li>\n<p>\n<em>scopeId</em> > 0x00000000FFFFFFFF  </p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.Equals(System.Object)
  commentId: M:System.Net.IPAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.IPAddress.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 192
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Compares two IP addresses.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method compares the current <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance with the <em>comparand</em> parameter and returns <strong>true</strong> if the two instances contain the same IP address.</p>\n"
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance to compare to the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two addresses are equal; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPAddress.GetAddressBytes
  commentId: M:System.Net.IPAddress.GetAddressBytes
  id: GetAddressBytes
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: GetAddressBytes()
  fullName: System.Net.IPAddress.GetAddressBytes()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAddressBytes
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 193
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides a copy of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> as an array of bytes.</p>\n"
  example:
  - "\n<p>The following code example shows how to get a server IP address in byte format.</p>System.Net.IPAddress#2"
  syntax:
    content: public byte[] GetAddressBytes()
    content.vb: Public Function GetAddressBytes As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.GetHashCode
  commentId: M:System.Net.IPAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.IPAddress.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 194
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns a hash value for an IP address.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method returns a hash code of the IP address. This value can be used as a key in hash tables.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An integer hash value.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  id: HostToNetworkOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: HostToNetworkOrder(Int16)
  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostToNetworkOrder
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 195
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a short value from host byte order to network byte order.</p>\n"
  remarks: "\n<p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</p>\n<p>The <xref href=\"System.Net.IPAddress.HostToNetworkOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</p>\n"
  syntax:
    content: public static short HostToNetworkOrder(short host)
    content.vb: Public Shared Function HostToNetworkOrder(host As Short) As Short
    parameters:
    - id: host
      type: System.Int16
      description: "\n<p>The number to convert, expressed in host byte order. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A short value, expressed in network byte order.</p>\n"
  seealso:
  - type: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  id: HostToNetworkOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: HostToNetworkOrder(Int32)
  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostToNetworkOrder
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 196
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an integer value from host byte order to network byte order.</p>\n"
  remarks: "\n<p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</p>\n<p>The <xref href=\"System.Net.IPAddress.HostToNetworkOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</p>\n"
  syntax:
    content: public static int HostToNetworkOrder(int host)
    content.vb: Public Shared Function HostToNetworkOrder(host As Integer) As Integer
    parameters:
    - id: host
      type: System.Int32
      description: "\n<p>The number to convert, expressed in host byte order. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer value, expressed in network byte order.</p>\n"
  seealso:
  - type: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  id: HostToNetworkOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: HostToNetworkOrder(Int64)
  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostToNetworkOrder
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 197
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a long value from host byte order to network byte order.</p>\n"
  remarks: "\n<p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</p>\n<p>The <xref href=\"System.Net.IPAddress.HostToNetworkOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</p>\n"
  syntax:
    content: public static long HostToNetworkOrder(long host)
    content.vb: Public Shared Function HostToNetworkOrder(host As Long) As Long
    parameters:
    - id: host
      type: System.Int64
      description: "\n<p>The number to convert, expressed in host byte order. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A long value, expressed in network byte order.</p>\n"
  seealso:
  - type: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  commentId: M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  id: IsLoopback(System.Net.IPAddress)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsLoopback(IPAddress)
  fullName: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLoopback
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 198
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Indicates whether the specified IP address is the loopback address.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method compares <em>address</em> to <xref href=\"System.Net.IPAddress.Loopback\" data-throw-if-not-resolved=\"false\"></xref> and returns <strong>true</strong> if the two IP addresses are the same.</p>\n<p>In the case of IPv4, that the <xref href=\"System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong> for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref href=\"System.Net.IPAddress.Loopback\" data-throw-if-not-resolved=\"false\"></xref> (127.0.0.1).</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether the specified address is a loopback address.</p>System.Net.IPAddress.IsLoopback#1"
  syntax:
    content: public static bool IsLoopback(IPAddress address)
    content.vb: Public Shared Function IsLoopback(address As IPAddress) As Boolean
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>address</em> is the loopback address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.MapToIPv4
  commentId: M:System.Net.IPAddress.MapToIPv4
  id: MapToIPv4
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: MapToIPv4()
  fullName: System.Net.IPAddress.MapToIPv4()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapToIPv4
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 199
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Maps the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object to an IPv4 address.</p>\n"
  remarks: "\n<p>Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see <see href=\"http://go.microsoft.com/fwlink/?LinkID=92231\">www.ietf.org/rfc/rfc4291.txt</see>.</p>\n<p>\nIf you want to use <xref href=\"System.Net.IPAddress.MapToIPv4\" data-throw-if-not-resolved=\"false\"></xref> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address. Call <xref href=\"System.Net.IPAddress.IsIPv4MappedToIPv6\" data-throw-if-not-resolved=\"false\"></xref>, which will return <strong>true</strong> if the IP address is originally IPv4 written as IPv6, or <strong>false</strong> otherwise. If <xref href=\"System.Net.IPAddress.IsIPv4MappedToIPv6\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>, use <xref href=\"System.Net.IPAddress.MapToIPv4\" data-throw-if-not-resolved=\"false\"></xref> to make the conversion.</p>\n"
  syntax:
    content: public IPAddress MapToIPv4()
    content.vb: Public Function MapToIPv4 As IPAddress
    return:
      type: System.Net.IPAddress
      description: "\n<p>Returns <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An IPv4 address.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.MapToIPv6
  commentId: M:System.Net.IPAddress.MapToIPv6
  id: MapToIPv6
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: MapToIPv6()
  fullName: System.Net.IPAddress.MapToIPv6()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapToIPv6
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 200
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Maps the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object to an IPv6 address.</p>\n"
  remarks: "\n<p>Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see <see href=\"http://go.microsoft.com/fwlink/?LinkID=92231\">www.ietf.org/rfc/rfc4291.txt</see>.</p>\n"
  syntax:
    content: public IPAddress MapToIPv6()
    content.vb: Public Function MapToIPv6 As IPAddress
    return:
      type: System.Net.IPAddress
      description: "\n<p>Returns <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An IPv6 address.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  id: NetworkToHostOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: NetworkToHostOrder(Int16)
  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkToHostOrder
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 201
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a short value from network byte order to host byte order.</p>\n"
  remarks: "\n<p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</p>\n<p>The <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a short value from network byte order to host byte order.</p>IPAddress_NetworkToHost#1"
  syntax:
    content: public static short NetworkToHostOrder(short network)
    content.vb: Public Shared Function NetworkToHostOrder(network As Short) As Short
    parameters:
    - id: network
      type: System.Int16
      description: "\n<p>The number to convert, expressed in network byte order. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A short value, expressed in host byte order.</p>\n"
  seealso:
  - type: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  id: NetworkToHostOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: NetworkToHostOrder(Int32)
  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkToHostOrder
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 202
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an integer value from network byte order to host byte order.</p>\n"
  remarks: "\n<p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</p>\n<p>The <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an integer value from network byte order to host byte order.</p>IPAddress_NetworkToHost#2"
  syntax:
    content: public static int NetworkToHostOrder(int network)
    content.vb: Public Shared Function NetworkToHostOrder(network As Integer) As Integer
    parameters:
    - id: network
      type: System.Int32
      description: "\n<p>The number to convert, expressed in network byte order. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer value, expressed in host byte order.</p>\n"
  seealso:
  - type: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  id: NetworkToHostOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: NetworkToHostOrder(Int64)
  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkToHostOrder
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 203
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a long value from network byte order to host byte order.</p>\n"
  remarks: "\n<p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</p>\n<p>The <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a long value from network byte order to host byte order.</p>IPAddress_NetworkToHost#3"
  syntax:
    content: public static long NetworkToHostOrder(long network)
    content.vb: Public Shared Function NetworkToHostOrder(network As Long) As Long
    parameters:
    - id: network
      type: System.Int64
      description: "\n<p>The number to convert, expressed in network byte order. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A long value, expressed in host byte order.</p>\n"
  seealso:
  - type: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.Parse(System.String)
  commentId: M:System.Net.IPAddress.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Net.IPAddress.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 204
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an IP address string to an <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The static <xref href=\"System.Net.IPAddress.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method creates an <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</p>\n<p>The number of parts (each part is separated by a period) in <em>ipString</em> determines how the IP address is constructed. A one part address is stored directly in the network address. A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address. A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address. For example:</p>\n<p>Number of parts and example <em>ipString</em></p>\n<p>IPv4 address for IPAddress</p>\n<table><tbody><tr><td>\n<p>1 -- \"65536\"</p>\n</td><td>\n<p>0.0.255.255</p>\n</td></tr><tr><td>\n<p>2 -- \"20.2\"</p>\n</td><td>\n<p>20.0.0.2</p>\n</td></tr><tr><td>\n<p>2 -- \"20.65535\"</p>\n</td><td>\n<p>20.0.255.255</p>\n</td></tr><tr><td>\n<p>3 -- \"128.1.2\"</p>\n</td><td>\n<p>128.1.0.2</p>\n</td></tr></tbody></table>\n<p></p>\n"
  example:
  - "\n<p>The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class. Then it uses the overloaded <xref href=\"System.Net.IPAddress.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to display the address in standard notation.</p>System.Net.IPAddress.Parse#1"
  syntax:
    content: public static IPAddress Parse(string ipString)
    content.vb: Public Shared Function Parse(ipString As String) As IPAddress
    parameters:
    - id: ipString
      type: System.String
      description: "\n<p>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6. </p>\n"
    return:
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ipString</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>ipString</em> is not a valid IP address. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.ToString
  commentId: M:System.Net.IPAddress.ToString
  id: ToString
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Net.IPAddress.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 205
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an Internet address to its standard notation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPAddress.ToString\" data-throw-if-not-resolved=\"false\"></xref> method converts the IP address that is stored in the <xref href=\"System.Net.IPAddress.Address\" data-throw-if-not-resolved=\"false\"></xref> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</p>\n"
  overridden: System.Object.ToString
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> and the address is bad. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  commentId: M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  id: TryParse(System.String,System.Net.IPAddress@)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: TryParse(String, out IPAddress)
  fullName: System.Net.IPAddress.TryParse(System.String, out System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 206
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Determines whether a string is a valid IP address.</p>\n"
  remarks: "\n<p>Note that <xref href=\"System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong> if it parsed the input successfully, but that this does not necessarily mean that the resulting IP address is a valid one. Do not use this method to validate IP addresses. </p>\n"
  example:
  - 
  syntax:
    content: public static bool TryParse(string ipString, out IPAddress address)
    content.vb: Public Shared Function TryParse(ipString As String, ByRef address As IPAddress) As Boolean
    parameters:
    - id: ipString
      type: System.String
      description: "\n<p>The string to validate.</p>\n"
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> version of the string.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>ipString</em> was able to be parsed as an IP address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.IPAddress.TryParse(System.String, ByRef System.Net.IPAddress)
  name.vb: TryParse(String, ByRef IPAddress)
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
