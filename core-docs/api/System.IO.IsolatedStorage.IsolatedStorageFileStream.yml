items:
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageFileStream
  id: IsolatedStorageFileStream
  parent: System.IO.IsolatedStorage
  children:
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream
  type: Class
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsolatedStorageFileStream
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 14
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: 'Exposes a file within isolated storage. '
  syntax:
    content: 'public class IsolatedStorageFileStream : Stream'
    content.vb: >-
      Public Class IsolatedStorageFileStream
          Inherits Stream
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, FileAccess, FileShare, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 44
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Initializes a new instance of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> class giving access to the file designated by <em>path</em>, in the specified <em>mode</em>, with the specified file <em>access</em>, using the file sharing mode specified by <em>share</em>, and in the context of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFile" data-throw-if-not-resolved="false"></xref> specified by <em>isf</em>.
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: 'The relative path of the file within isolated storage. '
    - id: mode
      type: System.IO.FileMode
      description: 'One of the <xref href="System.IO.FileMode" data-throw-if-not-resolved="false"></xref> values. '
    - id: access
      type: System.IO.FileAccess
      description: 'A bitwise combination of the <xref href="System.IO.FileAccess" data-throw-if-not-resolved="false"></xref> values. '
    - id: share
      type: System.IO.FileShare
      description: 'A bitwise combination of the <xref href="System.IO.FileShare" data-throw-if-not-resolved="false"></xref> values. '
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: 'The <xref href="System.IO.IsolatedStorage.IsolatedStorageFile" data-throw-if-not-resolved="false"></xref> in which to open the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref>. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>path</em> is badly formed. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>path</em> is null. '
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: 'No file was found and the <em>mode</em> is set to <xref href="System.IO.FileMode.Open" data-throw-if-not-resolved="false"></xref>. '
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<em>isf</em> does not have a quota. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, FileAccess, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 45
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Initializes a new instance of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> class giving access to the file designated by <em>path</em> in the specified <em>mode</em>, with the specified file <em>access</em>, and in the context of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFile" data-throw-if-not-resolved="false"></xref> specified by <em>isf</em>.
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: 'The relative path of the file within isolated storage. '
    - id: mode
      type: System.IO.FileMode
      description: 'One of the <xref href="System.IO.FileMode" data-throw-if-not-resolved="false"></xref> values. '
    - id: access
      type: System.IO.FileAccess
      description: 'A bitwise combination of the <xref href="System.IO.FileAccess" data-throw-if-not-resolved="false"></xref> values. '
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: 'The <xref href="System.IO.IsolatedStorage.IsolatedStorageFile" data-throw-if-not-resolved="false"></xref> in which to open the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref>. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>path</em> is badly formed. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>path</em> is null. '
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The isolated store is closed.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: 'No file was found and the <em>mode</em> is set to <xref href="System.IO.FileMode.Open" data-throw-if-not-resolved="false"></xref>. '
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<em>isf</em> does not have a quota. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 46
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Initializes a new instance of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> class giving access to the file designated by <em>path</em>, in the specified <em>mode</em>, and in the context of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFile" data-throw-if-not-resolved="false"></xref> specified by <em>isf</em>.
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: 'The relative path of the file within isolated storage. '
    - id: mode
      type: System.IO.FileMode
      description: 'One of the <xref href="System.IO.FileMode" data-throw-if-not-resolved="false"></xref> values. '
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: 'The <xref href="System.IO.IsolatedStorage.IsolatedStorageFile" data-throw-if-not-resolved="false"></xref> in which to open the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref>. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>path</em> is badly formed. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>path</em> is null. '
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: 'No file was found and the <em>mode</em> is set to <xref href="System.IO.FileMode.Open" data-throw-if-not-resolved="false"></xref>. '
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<em>isf</em> does not have a quota. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  id: CanRead
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 101
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Gets a Boolean value indicating whether the file can be read.
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if an <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object can be read; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  id: CanSeek
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 119
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Gets a Boolean value indicating whether seek operations are supported.
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if an <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object supports seek operations; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  id: CanWrite
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 110
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Gets a Boolean value indicating whether you can write to the file.
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if an <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object can be written; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  id: Length
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 128
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Gets the length of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: The length of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object in bytes.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  id: Position
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 136
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Gets or sets the current position of the current <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: The current position of this <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The position cannot be set to a negative number. '
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 158
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Releases the unmanaged resources used by the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources '
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  id: Flush
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 174
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Clears buffers for this stream and causes any buffered data to be written to the file.
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 54
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 189
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Copies bytes from the current buffered <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object to an array.
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: 'The buffer to read. '
    - id: offset
      type: System.Int32
      description: 'The offset in the buffer at which to begin writing. '
    - id: count
      type: System.Int32
      description: 'The maximum number of bytes to read. '
    return:
      type: System.Int32
      description: The total number of bytes read into the <em>buffer</em>. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream is reached.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 56
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  id: ReadByte
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadByte
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 199
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Reads a single byte from the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object in isolated storage.
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
      description: The 8-bit unsigned integer value read from the isolated storage file.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 58
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Sets the current position of this <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object to the specified value.
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: 'The new position of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object. '
    - id: origin
      type: System.IO.SeekOrigin
      description: 'One of the <xref href="System.IO.SeekOrigin" data-throw-if-not-resolved="false"></xref> values. '
    return:
      type: System.Int64
      description: The new position in the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>origin</em> must be one of the <xref href="System.IO.SeekOrigin" data-throw-if-not-resolved="false"></xref> values. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 184
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Sets the length of this <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object to the specified <em>value</em>.
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: 'The new length of the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>value</em> is a negative number."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 211
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Writes a block of bytes to the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object using data read from a byte array.
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: 'The buffer to write. '
    - id: offset
      type: System.Int32
      description: 'The byte offset in buffer from which to begin. '
    - id: count
      type: System.Int32
      description: 'The maximum number of bytes to write. '
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: 'The write attempt exceeds the quota for the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 61
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteByte
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 221
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: Writes a single byte to the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: 'The byte value to write to the isolated storage file. '
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: 'The write attempt exceeds the quota for the <xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream" data-throw-if-not-resolved="false"></xref> object. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO.IsolatedStorage
  isExternal: false
  name: System.IO.IsolatedStorage
  fullName: System.IO.IsolatedStorage
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.IsolatedStorage.IsolatedStorageFile
  parent: System.IO.IsolatedStorage
  isExternal: false
  name: IsolatedStorageFile
  fullName: System.IO.IsolatedStorage.IsolatedStorageFile
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.IsolatedStorage.IsolatedStorageException
  isExternal: false
  name: IsolatedStorageException
  fullName: System.IO.IsolatedStorage.IsolatedStorageException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
