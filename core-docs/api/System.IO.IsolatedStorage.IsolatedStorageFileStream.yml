items:
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageFileStream
  id: IsolatedStorageFileStream
  parent: System.IO.IsolatedStorage
  children:
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream
  type: Class
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsolatedStorageFileStream
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 14
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Exposes a file within isolated storage. </p>\n"
  remarks: "\n<p>Use this class to read, write and create files in isolated storage. </p>\n<p>Since this class extends <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>, you can use an instance of <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> in most situations where a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> might otherwise be used, such as to construct a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>Isolated storage is not available for Windows 8.x Store apps. Instead, use the application data classes in the <strong>Windows.Storage</strong> namespaces included in the Windows Runtime API to store local data and files. For more information, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=229175\">Application data</see> in the Windows Dev Center.</p>\n"
  example:
  - "\n<p>The following console application demonstrates how you can use <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> to write data to an Isolated Storage file. The user is requested to log in. If the user is a new user, a News URL and a Sports URL are recorded as personal preferences in Isolated Storage. If the user is a returning user, the user's current preferences are displayed. The code examples used throughout this namespace are presented in the context of this sample application. You can use the Storeadm.exe (Isolated Storage Tool) utility to list and remove the Isolated Storage files that are created with this console application.</p>System.IO.IsolatedStorage.IsolatedStorage#1"
  syntax:
    content: 'public class IsolatedStorageFileStream : Stream'
    content.vb: >-
      Public Class IsolatedStorageFileStream
          Inherits Stream
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, FileAccess, FileShare, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 44
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> class giving access to the file designated by <em>path</em>, in the specified <em>mode</em>, with the specified file <em>access</em>, using the file sharing mode specified by <em>share</em>, and in the context of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> specified by <em>isf</em>.</p>\n"
  remarks: "\n<p>The <em>mode</em> parameter indicates whether a new file should be created or an existing one used. The <em>access</em> parameter includes read-only, read/write, and write-only.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#11"
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The relative path of the file within isolated storage. </p>\n"
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>One of the <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: access
      type: System.IO.FileAccess
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: share
      type: System.IO.FileShare
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> in which to open the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> is badly formed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>No file was found and the <em>mode</em> is set to <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>\n<em>isf</em> does not have a quota. </p>\n"
  see:
  - type: System.Security.Permissions.IsolatedStorageFilePermission
    commentId: T:System.Security.Permissions.IsolatedStorageFilePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, FileAccess, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 45
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> class giving access to the file designated by <em>path</em> in the specified <em>mode</em>, with the specified file <em>access</em>, and in the context of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> specified by <em>isf</em>.</p>\n"
  remarks: "\n<p>The <em>mode</em> parameter indicates whether a new file should be created or an existing one used. The <em>access</em> parameter includes read-only, read/write, and write-only.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#10"
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The relative path of the file within isolated storage. </p>\n"
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>One of the <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: access
      type: System.IO.FileAccess
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> in which to open the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> is badly formed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The isolated store is closed.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>No file was found and the <em>mode</em> is set to <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>\n<em>isf</em> does not have a quota. </p>\n"
  see:
  - type: System.Security.Permissions.IsolatedStorageFilePermission
    commentId: T:System.Security.Permissions.IsolatedStorageFilePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 46
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> class giving access to the file designated by <em>path</em>, in the specified <em>mode</em>, and in the context of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> specified by <em>isf</em>.</p>\n"
  remarks: "\n<p>The <em>mode</em> parameter indicates whether a new file should be created, an existing one used, and so on.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#11"
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The relative path of the file within isolated storage. </p>\n"
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>One of the <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> in which to open the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> is badly formed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>No file was found and the <em>mode</em> is set to <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>\n<em>isf</em> does not have a quota. </p>\n"
  see:
  - type: System.Security.Permissions.IsolatedStorageFilePermission
    commentId: T:System.Security.Permissions.IsolatedStorageFilePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  id: CanRead
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 101
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets a Boolean value indicating whether the file can be read.</p>\n"
  remarks: "\n<p>Use this property to determine whether the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object can be read.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how you could use the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property, as a check to see whether a stream can be read before calling the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#11"
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  id: CanSeek
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 119
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets a Boolean value indicating whether seek operations are supported.</p>\n"
  remarks: "\n<p>Use this property to determine whether the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object supports seek operations.</p>\n"
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  id: CanWrite
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 110
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets a Boolean value indicating whether you can write to the file.</p>\n"
  remarks: "\n<p>Use this property to determine whether the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object can be written.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how you could use the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property, as a check to see whether a stream can be read before calling the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#13"
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  id: Length
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 128
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets the length of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Length\" data-throw-if-not-resolved=\"false\"></xref> represents the number of bytes currently in the file. It is not affected by isolated storage quota.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Length\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.IO.IsolatedStorage.IsolatedStorage#14"
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  id: Position
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 136
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets or sets the current position of the current <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Setting this property works when the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property to write data to a file.</p>System.IO.IsolatedStorage.IsolatedStorage#14"
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The position cannot be set to a negative number. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 158
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to true. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to false.</p>\n<p>When the <em>disposing</em> parameter is true, this method releases all resources held by any managed objects that this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  id: Flush
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 174
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Clears buffers for this stream and causes any buffered data to be written to the file.</p>\n"
  remarks: "\n<p>Because a buffer can be used for either reading or writing, but not both simultaneously, <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> performs two functions. First, any data previously written to the buffer is copied to the file and the buffer is cleared. Second, if <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.</p>\n<p>Use the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</p>\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  seealso:
  - type: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
    commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 54
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 189
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Copies bytes from the current buffered <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object to an array.</p>\n"
  remarks: "\n<p>The <em>buffer</em> parameter can be an instance of the <xref href=\"System.Buffer\" data-throw-if-not-resolved=\"false\"></xref> class, or an array of one of the following types: <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>. The <em>offset</em> parameter gives the offset of the byte in buffer at which to begin writing (index in the buffer), and the <em>count</em> parameter gives the maximum number of bytes that will be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.</p>\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method treats the <em>buffer</em> parameter as a block of bytes, regardless of its actual type. Likewise, the <em>offset</em> and <em>count</em> parameters are always specified in bytes. For <em>buffer</em> parameters other than byte arrays, this means that an element index must be multiplied by the element size in bytes to form a correct value for <em>offset</em> or <em>count</em>.</p>\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method will return zero only if the end of the stream is reached. In all other cases, <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> always reads at least one byte from the stream before returning. If no data is available from the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object upon a call to <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, the method will block until at least one byte of data can be returned.</p>\n"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 56
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  id: ReadByte
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadByte
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 199
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Reads a single byte from the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object in isolated storage.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref> method can be used to read data from an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#14"
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 58
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Sets the current position of this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object to the specified value.</p>\n"
  remarks: "\n<p>Some <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> objects support positioning beyond the length of the stream, others will throw an exception in this case.</p>\n"
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>The new position of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>One of the <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new position in the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>origin</em> must be one of the <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 184
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Sets the length of this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object to the specified <em>value</em>.</p>\n"
  remarks: "\n<p>If the specified <em>value</em> is less than the current length of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object, the stream is truncated. If the specified <em>value</em> is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are undefined. In order to use this method, an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object must support both writing and seeking.</p>\n"
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is a negative number.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 211
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Writes a block of bytes to the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object using data read from a byte array.</p>\n"
  remarks: "\n<p>The <em>offset</em> parameter gives the offset of the byte in the <em>buffer</em> at which to begin reading, and the <em>count</em> parameter gives the number of bytes that will be written to this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. If the write operation is successful, the current position of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object is advanced by the number of bytes written. If an exception occurs, the current position of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object is unchanged.</p>\n"
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>The write attempt exceeds the quota for the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO.IsolatedStorage/ref/System.IO.IsolatedStorage.cs
    startLine: 61
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteByte
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 221
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Writes a single byte to the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> method can be used to read data from an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. For the complete context of this example, see the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> overview.</p>System.IO.IsolatedStorage.IsolatedStorage#14"
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>The write attempt exceeds the quota for the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO.IsolatedStorage
  isExternal: false
  name: System.IO.IsolatedStorage
  fullName: System.IO.IsolatedStorage
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.IsolatedStorage.IsolatedStorageFile
  parent: System.IO.IsolatedStorage
  isExternal: false
  name: IsolatedStorageFile
  fullName: System.IO.IsolatedStorage.IsolatedStorageFile
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.IsolatedStorage.IsolatedStorageException
  isExternal: false
  name: IsolatedStorageException
  fullName: System.IO.IsolatedStorage.IsolatedStorageException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
