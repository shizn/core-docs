items:
- uid: System.Text.NormalizationForm
  commentId: T:System.Text.NormalizationForm
  id: NormalizationForm
  parent: System.Text
  children:
  - System.Text.NormalizationForm.FormC
  - System.Text.NormalizationForm.FormD
  - System.Text.NormalizationForm.FormKC
  - System.Text.NormalizationForm.FormKD
  langs:
  - csharp
  - vb
  name: NormalizationForm
  fullName: System.Text.NormalizationForm
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Text/Normalization.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NormalizationForm
    path: src/mscorlib/src/System/Text/Normalization.cs
    startLine: 16
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Text
  summary: "\n<p>Defines the type of normalization to perform.</p>\n"
  remarks: "\n<p>Some Unicode sequences are considered equivalent because they represent the same character. For example, the following are considered equivalent because any of these can be used to represent \"áº¯\": </p>\n<ul><li>\n<p>\"\\u1EAF\" </p>\n</li><li>\n<p>\"\\u0103\\u0301\" </p>\n</li><li>\n<p>\"\\u0061\\u0306\\u0301\" </p>\n</li></ul>\n<p>However, ordinal, that is, binary, comparisons consider these sequences different because they contain different Unicode code values. Before performing ordinal comparisons, applications must normalize these strings to decompose them into their basic components.</p>\n<p>Each composite Unicode character is mapped to a more basic sequence of one or more characters. The process of decomposition replaces composite characters in a string with their more basic mappings. A full decomposition recursively performs this replacement until none of the characters in the string can be decomposed further.</p>\n<p>Unicode defines two types of decompositions: compatibility decomposition and canonical decomposition. In compatibility decomposition, formatting information might be lost. In canonical decomposition, which is a subset of compatibility decomposition, formatting information is preserved.</p>\n<p>Two sets of characters are considered to have canonical equivalence if their full canonical decompositions are identical. Likewise, two sets of characters are considered to have compatibility equivalence if their full compatibility decompositions are identical.</p>\n<p>For more information about normalization, decompositions and equivalence, see <see href=\"http://unicode.org/reports/tr15/\">Unicode Standard Annex #15: Unicode Normalization Forms</see> at unicode.org.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public enum NormalizationForm
    content.vb: >-
      <ComVisible(True)>

      Public Enum NormalizationForm
  seealso:
  - type: System.Text.Encoding.IsAlwaysNormalized
    commentId: M:System.Text.Encoding.IsAlwaysNormalized
  - type: System.String.Normalize
    commentId: M:System.String.Normalize
  - type: System.String.IsNormalized
    commentId: M:System.String.IsNormalized
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Text.NormalizationForm.FormC
  commentId: F:System.Text.NormalizationForm.FormC
  id: FormC
  parent: System.Text.NormalizationForm
  langs:
  - csharp
  - vb
  name: FormC
  fullName: System.Text.NormalizationForm.FormC
  type: Field
  source:
    remote:
      path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FormC
    path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
    startLine: 29
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Text
  summary: "\n<p>Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</p>\n"
  syntax:
    content: FormC = 1
    return:
      type: System.Text.NormalizationForm
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Text.NormalizationForm.FormD
  commentId: F:System.Text.NormalizationForm.FormD
  id: FormD
  parent: System.Text.NormalizationForm
  langs:
  - csharp
  - vb
  name: FormD
  fullName: System.Text.NormalizationForm.FormD
  type: Field
  source:
    remote:
      path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FormD
    path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
    startLine: 30
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Text
  summary: "\n<p>Indicates that a Unicode string is normalized using full canonical decomposition.</p>\n"
  syntax:
    content: FormD = 2
    return:
      type: System.Text.NormalizationForm
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Text.NormalizationForm.FormKC
  commentId: F:System.Text.NormalizationForm.FormKC
  id: FormKC
  parent: System.Text.NormalizationForm
  langs:
  - csharp
  - vb
  name: FormKC
  fullName: System.Text.NormalizationForm.FormKC
  type: Field
  source:
    remote:
      path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FormKC
    path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
    startLine: 31
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Text
  summary: "\n<p>Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.</p>\n"
  syntax:
    content: FormKC = 5
    return:
      type: System.Text.NormalizationForm
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Text.NormalizationForm.FormKD
  commentId: F:System.Text.NormalizationForm.FormKD
  id: FormKD
  parent: System.Text.NormalizationForm
  langs:
  - csharp
  - vb
  name: FormKD
  fullName: System.Text.NormalizationForm.FormKD
  type: Field
  source:
    remote:
      path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FormKD
    path: src/System.Globalization.Extensions/ref/System.Globalization.Extensions.cs
    startLine: 32
  assemblies:
  - System.Globalization.Extensions
  namespace: System.Text
  summary: "\n<p>Indicates that a Unicode string is normalized using full compatibility decomposition.</p>\n"
  syntax:
    content: FormKD = 6
    return:
      type: System.Text.NormalizationForm
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Text.NormalizationForm
  parent: System.Text
  isExternal: false
  name: NormalizationForm
  fullName: System.Text.NormalizationForm
