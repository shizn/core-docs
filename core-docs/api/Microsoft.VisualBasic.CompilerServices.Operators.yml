items:
- uid: Microsoft.VisualBasic.CompilerServices.Operators
  commentId: T:Microsoft.VisualBasic.CompilerServices.Operators
  id: Operators
  parent: Microsoft.VisualBasic.CompilerServices
  children:
  - Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  - Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)
  - Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: Operators
  fullName: Microsoft.VisualBasic.CompilerServices.Operators
  type: Class
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Operators
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 150
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Provides late-bound math operators, such as <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, which the Visual Basic compiler uses internally. </p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public sealed class Operators
    content.vb: Public NotInheritable Class Operators
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)
  id: AddObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: AddObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 154
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic addition (+) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object AddObject(object Left, object Right)
    content.vb: Public Shared Function AddObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The sum of <em>Left</em> and <em>Right</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)
  id: AndObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: AndObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 155
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic <strong>And</strong> operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object AndObject(object Left, object Right)
    content.vb: Public Shared Function AndObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>For <strong>Boolean</strong> operations, <strong>True</strong> if both <em>Left</em> and <em>Right</em> evaluate to <strong>True</strong>; otherwise, <strong>False</strong>. For bitwise operations, 1 if both <em>Left</em> and <em>Right</em> evaluate to 1; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)
  id: CompareObjectEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareObjectEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareObjectEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 156
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic equal (=) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object CompareObjectEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function CompareObjectEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>True</strong> if <em>Left</em> and <em>Right</em> are equal; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)
  id: CompareObjectGreater(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareObjectGreater(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareObjectGreater
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 157
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic greater-than (>) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object CompareObjectGreater(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function CompareObjectGreater(Left As Object, Right As Object, TextCompare As Boolean) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>True</strong> if <em>Left</em> is greater than <em>Right</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  id: CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareObjectGreaterEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareObjectGreaterEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 158
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic greater-than or equal-to (>=) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function CompareObjectGreaterEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>True</strong> if <em>Left</em> is greater than or equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)
  id: CompareObjectLess(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareObjectLess(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareObjectLess
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 159
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic less-than (<) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object CompareObjectLess(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function CompareObjectLess(Left As Object, Right As Object, TextCompare As Boolean) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>True</strong> if <em>Left</em> is less than <em>Right</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  id: CompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareObjectLessEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareObjectLessEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 160
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic less-than or equal-to (<=) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function CompareObjectLessEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>True</strong> if <em>Left</em> is less than or equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  id: CompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareObjectNotEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareObjectNotEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 161
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic not-equal (<>) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function CompareObjectNotEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>True</strong> if <em>Left</em> is not equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)
  id: CompareString(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: CompareString(String, String, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareString
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 162
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Performs binary or text string comparison when given two strings.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n<p>When the Visual Basic equality operator is used to compare two strings, it passes the strings to the <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method along with a value of <strong>False</strong> for the <em>TextCompare</em> argument. This performs a case-sensitive comparison that is either ordinal or based on the current culture, depending on the value of the  statement. </p>\n"
  syntax:
    content: public static int CompareString(string Left, string Right, bool TextCompare)
    content.vb: Public Shared Function CompareString(Left As String, Right As String, TextCompare As Boolean) As Integer
    parameters:
    - id: Left
      type: System.String
      description: "\n<p>Required. Any <strong>String</strong> expression.</p>\n"
    - id: Right
      type: System.String
      description: "\n<p>Required. Any <strong>String</strong> expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>-1 </p>\n</td><td>\n<p>\n<em>Left</em> is less than <em>Right</em>. </p>\n</td></tr><tr><td>\n<p>0</p>\n</td><td>\n<p>\n<em>Left</em> is equal to <em>Right</em>. </p>\n</td></tr><tr><td>\n<p>1 </p>\n</td><td>\n<p>\n<em>Left</em> is greater than <em>Right</em>. </p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)
  id: ConcatenateObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConcatenateObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConcatenateObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 163
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic concatenation (&) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object ConcatenateObject(object Left, object Right)
    content.vb: Public Shared Function ConcatenateObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>A string representing the concatenation of <em>Left</em> and <em>Right</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)
  id: ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConditionalCompareObjectEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalCompareObjectEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 164
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the overloaded Visual Basic equals (=) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function ConditionalCompareObjectEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The result of the overloaded equals operator. <strong>False</strong> if operator overloading is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)
  id: ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConditionalCompareObjectGreater(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalCompareObjectGreater
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 165
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the overloaded Visual Basic greater-than (>) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function ConditionalCompareObjectGreater(Left As Object, Right As Object, TextCompare As Boolean) As Boolean
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The result of the overloaded greater-than operator. <strong>False</strong> if operator overloading is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  id: ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalCompareObjectGreaterEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 166
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the overloaded Visual Basic greater-than or equal-to (>=) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function ConditionalCompareObjectGreaterEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The result of the overloaded greater-than or equal-to operator. <strong>False</strong> if operator overloading is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)
  id: ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConditionalCompareObjectLess(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalCompareObjectLess
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 167
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the overloaded Visual Basic less-than (<) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function ConditionalCompareObjectLess(Left As Object, Right As Object, TextCompare As Boolean) As Boolean
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The result of the overloaded less-than operator. <strong>False</strong> if operator overloading is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  id: ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConditionalCompareObjectLessEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalCompareObjectLessEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 168
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the overloaded Visual Basic less-than or equal-to (<=) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function ConditionalCompareObjectLessEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The result of the overloaded less-than or equal-to operator. <strong>False</strong> if operator overloading is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  id: ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ConditionalCompareObjectNotEqual(Object, Object, Boolean)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalCompareObjectNotEqual
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 169
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the overloaded Visual Basic not-equal (<>) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare)
    content.vb: Public Shared Function ConditionalCompareObjectNotEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any expression.</p>\n"
    - id: TextCompare
      type: System.Boolean
      description: "\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The result of the overloaded not-equal operator. <strong>False</strong> if operator overloading is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)
  id: DivideObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: DivideObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 170
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic division (/) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object DivideObject(object Left, object Right)
    content.vb: Public Shared Function DivideObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The full quotient of <em>Left</em> divided by <em>Right</em>, including any remainder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)
  id: ExponentObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ExponentObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExponentObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 171
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic exponent (^) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object ExponentObject(object Left, object Right)
    content.vb: Public Shared Function ExponentObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The result of <em>Left</em> raised to the power of <em>Right</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)
  id: IntDivideObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: IntDivideObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IntDivideObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 172
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic integer division (\\) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object IntDivideObject(object Left, object Right)
    content.vb: Public Shared Function IntDivideObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The integer quotient of <em>Left</em> divided by <em>Right</em>, which discards any remainder and retains only the integer portion.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)
  id: LeftShiftObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: LeftShiftObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 173
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic arithmetic left shift (<<) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object LeftShiftObject(object Operand, object Amount)
    content.vb: Public Shared Function LeftShiftObject(Operand As Object, Amount As Object) As Object
    parameters:
    - id: Operand
      type: System.Object
      description: "\n<p>Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<strong>SByte</strong>, <strong>Byte</strong>, <strong>Short</strong>, <strong>UShort</strong>, <strong>Integer</strong>, <strong>UInteger</strong>, <strong>Long</strong>, or <strong>ULong</strong>).</p>\n"
    - id: Amount
      type: System.Object
      description: "\n<p>Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <strong>Integer</strong> or widen to <strong>Integer</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <em>Operand</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)
  id: ModObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: ModObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 174
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic <strong>Mod</strong> operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object ModObject(object Left, object Right)
    content.vb: Public Shared Function ModObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The remainder after <em>Left</em> is divided by <em>Right</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)
  id: MultiplyObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: MultiplyObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 175
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic multiply (*) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object MultiplyObject(object Left, object Right)
    content.vb: Public Shared Function MultiplyObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The product of <em>Left</em> and <em>Right</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)
  id: NegateObject(System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: NegateObject(Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 176
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic unary minus (–) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object NegateObject(object Operand)
    content.vb: Public Shared Function NegateObject(Operand As Object) As Object
    parameters:
    - id: Operand
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The negative value of <em>Operand</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)
  id: NotObject(System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: NotObject(Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 177
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic <strong>Not</strong> operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object NotObject(object Operand)
    content.vb: Public Shared Function NotObject(Operand As Object) As Object
    parameters:
    - id: Operand
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>For <strong>Boolean</strong> operations, <strong>False</strong> if <em>Operand</em> is <strong>True</strong>; otherwise, <strong>True</strong>. For bitwise operations, 1 if <em>Operand</em> is 0; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)
  id: OrObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: OrObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 178
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic <strong>Or</strong> operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object OrObject(object Left, object Right)
    content.vb: Public Shared Function OrObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>For <strong>Boolean</strong> operations, <strong>False</strong> if both <em>Left</em> and <em>Right</em> evaluate to <strong>False</strong>; otherwise, <strong>True</strong>. For bitwise operations, 0 if both <em>Left</em> and <em>Right</em> evaluate to 0; otherwise, 1.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)
  id: PlusObject(System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: PlusObject(Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PlusObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 179
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic unary plus (+) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object PlusObject(object Operand)
    content.vb: Public Shared Function PlusObject(Operand As Object) As Object
    parameters:
    - id: Operand
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of <em>Operand</em>. (The sign of the <em>Operand</em> is unchanged.)</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)
  id: RightShiftObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: RightShiftObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 180
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic arithmetic right shift (>>) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object RightShiftObject(object Operand, object Amount)
    content.vb: Public Shared Function RightShiftObject(Operand As Object, Amount As Object) As Object
    parameters:
    - id: Operand
      type: System.Object
      description: "\n<p>Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<strong>SByte</strong>, <strong>Byte</strong>, <strong>Short</strong>, <strong>UShort</strong>, <strong>Integer</strong>, <strong>UInteger</strong>, <strong>Long</strong>, or <strong>ULong</strong>).</p>\n"
    - id: Amount
      type: System.Object
      description: "\n<p>Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <strong>Integer</strong> or widen to <strong>Integer</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <em>Operand</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)
  id: SubtractObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: SubtractObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 181
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic subtraction (–) operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object SubtractObject(object Left, object Right)
    content.vb: Public Shared Function SubtractObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any numeric expression. </p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The difference between <em>Left</em> and <em>Right</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)
  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)
  id: XorObject(System.Object,System.Object)
  parent: Microsoft.VisualBasic.CompilerServices.Operators
  langs:
  - csharp
  - vb
  name: XorObject(Object, Object)
  fullName: Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XorObject
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 182
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Represents the Visual Basic <strong>Xor</strong> operator.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static object XorObject(object Left, object Right)
    content.vb: Public Shared Function XorObject(Left As Object, Right As Object) As Object
    parameters:
    - id: Left
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    - id: Right
      type: System.Object
      description: "\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\n"
    return:
      type: System.Object
      description: "\n<p>A <strong>Boolean</strong> or numeric value. For a <strong>Boolean</strong> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <strong>Boolean</strong> values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see Xor Operator (Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.VisualBasic.CompilerServices
  isExternal: false
  name: Microsoft.VisualBasic.CompilerServices
  fullName: Microsoft.VisualBasic.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
