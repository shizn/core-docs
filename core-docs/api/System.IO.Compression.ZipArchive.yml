items:
- uid: System.IO.Compression.ZipArchive
  commentId: T:System.IO.Compression.ZipArchive
  id: ZipArchive
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  - System.IO.Compression.ZipArchive.CreateEntry(System.String)
  - System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  - System.IO.Compression.ZipArchive.Dispose
  - System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  - System.IO.Compression.ZipArchive.Entries
  - System.IO.Compression.ZipArchive.GetEntry(System.String)
  - System.IO.Compression.ZipArchive.Mode
  langs:
  - csharp
  - vb
  name: ZipArchive
  fullName: System.IO.Compression.ZipArchive
  type: Class
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ZipArchive
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 63
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Represents a package of compressed files in the zip archive format.</p>\n"
  remarks: "\n<p>The methods for manipulating zip archives and their file entries are spread across three classes: <xref href=\"System.IO.Compression.ZipFile\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Compression.ZipArchiveEntry\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To</p>\n<p>Use</p>\n<table><tbody><tr><td>\n<p>Create a zip archive from a directory</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Extract the contents of a zip archive to a directory</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Add new files to an existing zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.CreateEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Retrieve a file from a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.GetEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Retrieve all the files from a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.Entries\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Open a stream to a single file contained in a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchiveEntry.Open\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Delete a file from a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchiveEntry.Delete\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n<p>When you create a new entry, the file is compressed and added to the zip package. The <xref href=\"System.IO.Compression.ZipArchive.CreateEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to specify a directory hierarchy when adding the entry. You include the relative path of the new entry within the zip package. For example, creating a new entry with a relative path of <code>AddedFolder\\NewFile.txt</code> creates a compressed text file in a directory named AddedFolder.</p>\n<p>If you reference the <strong>System.IO.Compression.FileSystem</strong> assembly in your project, you can access three extension methods (from the <xref href=\"System.IO.Compression.ZipFileExtensions\" data-throw-if-not-resolved=\"false\"></xref> class) for the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class: <xref href=\"System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)\" data-throw-if-not-resolved=\"false\"></xref>. These extension methods enable you to compress and decompress the contents of the entry to a file. The <strong>System.IO.Compression.FileSystem</strong> assembly is not available for Windows 8.x Store apps. In Windows 8.x Store apps, you can compress and decompress files by using the <xref href=\"System.IO.Compression.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Compression.GZipStream\" data-throw-if-not-resolved=\"false\"></xref> class, or you can use the Windows Runtime types <see href=\"http://go.microsoft.com/fwlink/p/?LinkID=246357\">Compressor</see> and <see href=\"http://go.microsoft.com/fwlink/p/?LinkID=246358\">Decompressor</see>.</p>\n"
  example:
  - "\n<p>The first example shows how to create a new entry and write to it by using a stream.</p>System.IO.Compression.ZipArchiveMode#1"
  - "\n<p>The following example shows how to open a zip archive and iterate through the collection of entries.</p>System.IO.Compression.ZipArchive#1"
  - "\n<p>The third example shows how to use extension methods to create a new entry in a zip archive from an existing file and extract the archive contents. You must reference the <strong>System.IO.Compression.FileSystem</strong> assembly to execute the code.</p>System.IO.Compression.ZipArchive#3"
  syntax:
    content: 'public class ZipArchive : IDisposable'
    content.vb: >-
      Public Class ZipArchive
          Implements IDisposable
  seealso:
  - type: System.IO.Compression.ZipFile
    commentId: T:System.IO.Compression.ZipFile
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 65
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class from the specified stream.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream that contains the archive to be read.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed or does not support reading.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream are not in the zip archive format.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream, ZipArchiveMode)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 66
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class from the specified stream and with the specified mode.</p>\n"
  remarks: "\n<p>If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Read\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support reading. If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support writing. If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support reading, writing, and seeking.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input or output stream.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> is an invalid value.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream, ZipArchiveMode, Boolean)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 67
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class on the specified stream for the specified mode, and optionally leaves the stream open.</p>\n"
  remarks: "\n<p>If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Read\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support reading. If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support writing. If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support reading, writing, and seeking.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input or output stream.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to leave the stream open after the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> is an invalid value.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 68
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class on the specified stream for the specified mode, uses the specified encoding for entry names, and optionally leaves the stream open.</p>\n"
  remarks: "\n<p>If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Read\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support reading. If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support writing. If the <em>mode</em> parameter is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, the stream must support reading, writing, and seeking.</p>\n<p>When you open a zip archive file for reading and <em>entryNameEncoding</em> is set to <strong>null</strong>, entry names are decoded according to the following rules:</p>\n<ul><li>\n<p>When the language encoding flag (in the general-purpose bit flag of the local file header) is not set, the current system default code page is used to decode the entry name.</p>\n</li><li>\n<p>When the language encoding flag is set, UTF-8 is used to decode the entry name.</p>\n</li></ul>\n<p>When you open a zip archive file for reading and <em>entryNameEncoding</em> is set to a value other than <strong>null</strong>, entry names are decoded according to the following rules:</p>\n<ul><li>\n<p>When the language encoding flag is not set, the specified <em>entryNameEncoding</em> is used to decode the entry name.</p>\n</li><li>\n<p>When the language encoding flag is set, UTF-8 is used to decode the entry name.</p>\n</li></ul>\n<p>When you write to archive files and <em>entryNameEncoding</em> is set to <strong>null</strong>, entry names are encoded according to the following rules:</p>\n<ul><li>\n<p>For entry names that contain characters outside the ASCII range, the language encoding flag is set, and entry names are encoded by using UTF-8.</p>\n</li><li>\n<p>For entry names that contain only ASCII characters, the language encoding flag is not set, and entry names are encoded by using the current system default code page.</p>\n</li></ul>\n<p>When you write to archive files and <em>entryNameEncoding</em> is set to a value other than <strong>null</strong>, the specified <em>entryNameEncoding</em> is used to encode the entry names into bytes. The language encoding flag (in the general-purpose bit flag of the local file header) is set only when the specified encoding is a UTF-8 encoding.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean, entryNameEncoding As Encoding)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input or output stream.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to leave the stream open after the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\n"
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> is an invalid value.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.Entries
  commentId: P:System.IO.Compression.ZipArchive.Entries
  id: Entries
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Entries
  fullName: System.IO.Compression.ZipArchive.Entries
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Entries
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 69
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the collection of entries that are currently in the zip archive.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Compression.ZipArchive.Entries\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve the entire collection of entries. Use the <xref href=\"System.IO.Compression.ZipArchive.GetEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve a single entry by name.</p>\n"
  example:
  - "\n<p>The following example shows how to open a zip archive and iterate through the collection of entries.</p>System.IO.Compression.ZipArchive#1"
  syntax:
    content: public ReadOnlyCollection<ZipArchiveEntry> Entries { get; }
    content.vb: Public ReadOnly Property Entries As ReadOnlyCollection(Of ZipArchiveEntry)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
      description: "\n<p>The collection of entries that are currently in the zip archive.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchive.Mode
  commentId: P:System.IO.Compression.ZipArchive.Mode
  id: Mode
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Mode
  fullName: System.IO.Compression.ZipArchive.Mode
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Mode
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 70
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets a value that describes the type of action the zip archive can perform on entries.</p>\n"
  remarks: "\n<p>You specify a value for the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> property when you create an instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class. Use the <xref href=\"System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor to provide a value for the <xref href=\"System.IO.Compression.ZipArchive.Mode\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public ZipArchiveMode Mode { get; }
    content.vb: Public ReadOnly Property Mode As ZipArchiveMode
    parameters: []
    return:
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that describes the type of action (read, create, or update) the zip archive can perform on entries.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String)
  commentId: M:System.IO.Compression.ZipArchive.CreateEntry(System.String)
  id: CreateEntry(System.String)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: CreateEntry(String)
  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEntry
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 71
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Creates an empty entry that has the specified path and entry name in the zip archive.</p>\n"
  remarks: "\n<p>The <em>entryName</em> string should reflect the relative path of the entry you want to create within the zip archive. There is no restriction on the string you provide. However, if it is not formatted as a relative path, the entry is created, but you may get an exception when you extract the contents of the zip archive. If an entry with the specified path and name already exists in the archive, a second entry is created with the same path and name.</p>\n<p>The value of the <xref href=\"System.IO.Compression.ZipArchiveEntry.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property for the new entry is set to the current time. The entry is compressed using the default compression level of the underlying compression algorithm. If you want to specify a different compression level, use the <xref href=\"System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example shows how to create an entry and write to it by using a stream.</p>System.IO.Compression.ZipArchiveMode#1"
  syntax:
    content: public ZipArchiveEntry CreateEntry(string entryName)
    content.vb: Public Function CreateEntry(entryName As String) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: "\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\n"
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: "\n<p>An empty entry in the zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>entryName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>entryName</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  commentId: M:System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  id: CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: CreateEntry(String, CompressionLevel)
  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String, System.IO.Compression.CompressionLevel)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEntry
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 72
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Creates an empty entry that has the specified entry name and compression level in the zip archive.</p>\n"
  remarks: "\n<p>The <em>entryName</em> string should reflect the relative path of the entry you want to create within the zip archive. There is no restriction on the string you provide. However, if it is not formatted as a relative path, the entry is created, but you may get an exception when you extract the contents of the zip archive. If an entry with the specified name already exists in the archive, a second entry is created with the same name.</p>\n<p>The value of the <xref href=\"System.IO.Compression.ZipArchiveEntry.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property for the new entry is set to the current time. Set the <em>compressionLevel</em> parameter to <xref href=\"System.IO.Compression.CompressionLevel.Optimal\" data-throw-if-not-resolved=\"false\"></xref> if you want the file to be compressed as much as possible. Set the <em>compressionLevel</em> parameter to <xref href=\"System.IO.Compression.CompressionLevel.Fastest\" data-throw-if-not-resolved=\"false\"></xref> only if you are concerned that the compression operation will not complete quickly enough for your scenario.</p>\n"
  example:
  - "\n<p>The following example shows how to create an entry with the optimal compression level. It also writes to the new entry by using a stream.</p>System.IO.Compression.ZipArchiveMode#2"
  syntax:
    content: public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel)
    content.vb: Public Function CreateEntry(entryName As String, compressionLevel As CompressionLevel) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: "\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\n"
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: "\n<p>One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</p>\n"
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: "\n<p>An empty entry in the zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>entryName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>entryName</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.Dispose
  commentId: M:System.IO.Compression.ZipArchive.Dispose
  id: Dispose
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.Compression.ZipArchive.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 73
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Releases the resources used by the current instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This method finishes writing the archive and releases all resources used by the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> object. Unless you construct the object by using the <xref href=\"System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload and set its <em>leaveOpen</em> parameter to <strong>true</strong>, all underlying streams are closed and no longer available for subsequent write operations. </p>\n<p>When you are finished using this instance of <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.IO.Compression.ZipArchive.Dispose\" data-throw-if-not-resolved=\"false\"></xref> to release all resources used by this instance. You should eliminate further references to this <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</p>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.Dispose\" data-throw-if-not-resolved=\"false\"></xref> calls the <xref href=\"System.IO.Compression.ZipArchive.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method, which contains the code to release managed and unmanaged resources. For more information, see .</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  commentId: M:System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 74
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Called by the <xref href=\"System.IO.Compression.ZipArchive.Dispose\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> methods to release the unmanaged resources used by the current instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class, and optionally finishes writing the archive and releases the managed resources.</p>\n"
  remarks: "\n<p>If <em>disposing</em> is set to <strong>true</strong>, all underlying streams are closed and no longer available for subsequent write operations, unless you construct the object by using the <xref href=\"System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload and set its <em>leaveOpen</em> parameter to <strong>true</strong>.</p>\n<p>This method is called only by the public <xref href=\"System.IO.Compression.ZipArchive.Dispose\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> methods; do not call this method directly.</p>\n<p>When you implement the dispose pattern, the Boolean parameter of the <xref href=\"System.IO.Compression.ZipArchive.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method should be used as follows:</p>\n<ul><li>\n<p>The <xref href=\"System.IO.Compression.ZipArchive.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of the current object should call <xref href=\"System.IO.Compression.ZipArchive.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with the Boolean parameter set to <strong>true</strong> to release both managed and unmanaged resources.</p>\n</li><li>\n<p>The <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method of the current object should call <xref href=\"System.IO.Compression.ZipArchive.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with the Boolean parameter set to <strong>false</strong> to release only unmanaged resources.</p>\n</li></ul>\n<p>For more information, see .</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to finish writing the archive and release unmanaged and managed resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.Compression.ZipArchive.GetEntry(System.String)
  commentId: M:System.IO.Compression.ZipArchive.GetEntry(System.String)
  id: GetEntry(System.String)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: GetEntry(String)
  fullName: System.IO.Compression.ZipArchive.GetEntry(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEntry
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 75
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Retrieves a wrapper for the specified entry in the zip archive.</p>\n"
  remarks: "\n<p>If multiple entries that have the specified name exist in the archive, the first one is returned. The name of the entry is compared to <em>entryName</em> using ordinal comparison. </p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.IO.Compression.ZipArchive.GetEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve an entry.</p>System.IO.Compression.ZipArchiveEntry#2"
  syntax:
    content: public ZipArchiveEntry GetEntry(string entryName)
    content.vb: Public Function GetEntry(entryName As String) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: "\n<p>A path, relative to the root of the archive, that identifies the entry to retrieve.</p>\n"
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: "\n<p>A wrapper for the specified entry in the archive; <strong>null</strong> if the entry does not exist in the archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>entryName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>entryName</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  fullName: System.IO.Compression
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.IO.Compression.ZipArchiveMode
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchiveMode
  fullName: System.IO.Compression.ZipArchiveMode
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ZipArchiveEntry>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.IO.Compression.ZipArchiveEntry)
  name.vb: ReadOnlyCollection(Of ZipArchiveEntry)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.Compression.ZipArchiveEntry
    name: ZipArchiveEntry
    fullName: System.IO.Compression.ZipArchiveEntry
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.Compression.ZipArchiveEntry
    name: ZipArchiveEntry
    fullName: System.IO.Compression.ZipArchiveEntry
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.Compression.ZipArchiveEntry
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchiveEntry
  fullName: System.IO.Compression.ZipArchiveEntry
- uid: System.IO.Compression.CompressionLevel
  parent: System.IO.Compression
  isExternal: false
  name: CompressionLevel
  fullName: System.IO.Compression.CompressionLevel
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.InvalidDataException
  isExternal: false
  name: InvalidDataException
  fullName: System.IO.InvalidDataException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
