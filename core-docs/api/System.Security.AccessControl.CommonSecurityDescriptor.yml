items:
- uid: System.Security.AccessControl.CommonSecurityDescriptor
  commentId: T:System.Security.AccessControl.CommonSecurityDescriptor
  id: CommonSecurityDescriptor
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  - System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  - System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  - System.Security.AccessControl.CommonSecurityDescriptor.Group
  - System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  - System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  - System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  - System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  - System.Security.AccessControl.CommonSecurityDescriptor.Owner
  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  langs:
  - csharp
  - vb
  name: CommonSecurityDescriptor
  fullName: System.Security.AccessControl.CommonSecurityDescriptor
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CommonSecurityDescriptor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 180
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class CommonSecurityDescriptor : GenericSecurityDescriptor'
    content.vb: >-
      Public NotInheritable Class CommonSecurityDescriptor
          Inherits GenericSecurityDescriptor
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericSecurityDescriptor
  inheritedMembers:
  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
  - System.Security.AccessControl.GenericSecurityDescriptor.Revision
  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  id: '#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Byte[], System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 182
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class from the specified array of byte values.</p>\n"
  remarks: "\n<p>If the underlying security descriptor from which the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is created contains <strong>null</strong> for its discretionary access control list (DACL),a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, byte[] binaryForm, int offset)
    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, binaryForm As Byte(), offset As Integer)
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\n"
    - id: isDS
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\n"
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The array of byte values from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset in the <em>binaryForm</em> array at which to begin copying.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Byte(), System.Int32)
  name.vb: CommonSecurityDescriptor(Boolean, Boolean, Byte(), Int32)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.SystemAcl, System.Security.AccessControl.DiscretionaryAcl)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 183
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class from the specified information.</p>\n"
  remarks: "\n<p>If the underlying security descriptor from which the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is created contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, SystemAcl systemAcl, DiscretionaryAcl discretionaryAcl)
    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, flags As ControlFlags, owner As SecurityIdentifier, group As SecurityIdentifier, systemAcl As SystemAcl, discretionaryAcl As DiscretionaryAcl)
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\n"
    - id: isDS
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\n"
    - id: flags
      type: System.Security.AccessControl.ControlFlags
      description: "\n<p>Flags that specify behavior of the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: owner
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The owner for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: group
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The primary group for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: systemAcl
      type: System.Security.AccessControl.SystemAcl
      description: "\n<p>The System Access Control List (SACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: discretionaryAcl
      type: System.Security.AccessControl.DiscretionaryAcl
      description: "\n<p>The Discretionary Access Control List (DACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Security.AccessControl.RawSecurityDescriptor)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 184
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class from the specified <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>If the underlying security descriptor from which the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is created contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, RawSecurityDescriptor rawSecurityDescriptor)
    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, rawSecurityDescriptor As RawSecurityDescriptor)
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\n"
    - id: isDS
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\n"
    - id: rawSecurityDescriptor
      type: System.Security.AccessControl.RawSecurityDescriptor
      description: "\n<p>The <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.Boolean,System.String)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: CommonSecurityDescriptor(Boolean, Boolean, String)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 185
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string.</p>\n"
  remarks: "\n<p>If the underlying security descriptor from which the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is created contains <strong>null</strong> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm)
    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, sddlForm As String)
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\n"
    - id: isDS
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\n"
    - id: sddlForm
      type: System.String
      description: "\n<p>The SDDL string from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  id: ControlFlags
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: ControlFlags
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ControlFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 186
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets values that specify behavior of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override ControlFlags ControlFlags { get; }
    content.vb: Public Overrides ReadOnly Property ControlFlags As ControlFlags
    parameters: []
    return:
      type: System.Security.AccessControl.ControlFlags
      description: "\n<p>One or more values of the <xref href=\"System.Security.AccessControl.ControlFlags\" data-throw-if-not-resolved=\"false\"></xref> enumeration combined with a logical OR operation.</p>\n"
  overridden: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  id: DiscretionaryAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: DiscretionaryAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DiscretionaryAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 187
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the discretionary access control list (DACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object. The DACL contains access rules.</p>\n"
  remarks: "\n<p>If this property is set to <strong>null</strong>, a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.</p>\n<p>This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public DiscretionaryAcl DiscretionaryAcl { get; set; }
    content.vb: Public Property DiscretionaryAcl As DiscretionaryAcl
    parameters: []
    return:
      type: System.Security.AccessControl.DiscretionaryAcl
      description: "\n<p>The DACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.Group
  id: Group
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: Group
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Group
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Group
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 188
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override SecurityIdentifier Group { get; set; }
    content.vb: Public Overrides Property Group As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Group
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  id: IsContainer
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: IsContainer
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsContainer
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 189
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is a container object.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsContainer { get; }
    content.vb: Public ReadOnly Property IsContainer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is a container object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  id: IsDiscretionaryAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: IsDiscretionaryAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDiscretionaryAclCanonical
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 190
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is in canonical order.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsDiscretionaryAclCanonical { get; }
    content.vb: Public ReadOnly Property IsDiscretionaryAclCanonical As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the DACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is in canonical order; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  id: IsDS
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: IsDS
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDS
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 191
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is a directory object.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsDS { get; }
    content.vb: Public ReadOnly Property IsDS As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is a directory object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  id: IsSystemAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: IsSystemAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSystemAclCanonical
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 192
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is in canonical order.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsSystemAclCanonical { get; }
    content.vb: Public ReadOnly Property IsSystemAclCanonical As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the SACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object is in canonical order; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.Owner
  id: Owner
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: Owner
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Owner
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 193
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override SecurityIdentifier Owner { get; set; }
    content.vb: Public Overrides Property Owner As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Owner
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  id: SystemAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: SystemAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SystemAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 194
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the System Access Control List (SACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object. The SACL contains audit rules.</p>\n"
  example:
  - 
  syntax:
    content: public SystemAcl SystemAcl { get; set; }
    content.vb: Public Property SystemAcl As SystemAcl
    parameters: []
    return:
      type: System.Security.AccessControl.SystemAcl
      description: "\n<p>The SACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  id: AddDiscretionaryAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: AddDiscretionaryAcl(Byte, Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddDiscretionaryAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 195
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\" data-throw-if-not-resolved=\"false\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n"
  remarks: "\n<p>The constructor for the <xref href=\"System.Security.AccessControl.DiscretionaryAcl\" data-throw-if-not-resolved=\"false\"></xref> uses the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.IsDS\" data-throw-if-not-resolved=\"false\"></xref> properties for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public void AddDiscretionaryAcl(byte revision, int trusted)
    content.vb: Public Sub AddDiscretionaryAcl(revision As Byte, trusted As Integer)
    parameters:
    - id: revision
      type: System.Byte
      description: "\n<p>The revision level of the new <xref href=\"System.Security.AccessControl.DiscretionaryAcl\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: trusted
      type: System.Int32
      description: "\n<p>The number of Access Control Entries (ACEs) this <xref href=\"System.Security.AccessControl.DiscretionaryAcl\" data-throw-if-not-resolved=\"false\"></xref> object can contain. This number is to be used only as a hint.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  id: AddSystemAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: AddSystemAcl(Byte, Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddSystemAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 196
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\" data-throw-if-not-resolved=\"false\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.SystemAclPresent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n"
  remarks: "\n<p>The constructor for the <xref href=\"System.Security.AccessControl.SystemAcl\" data-throw-if-not-resolved=\"false\"></xref> uses the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.IsDS\" data-throw-if-not-resolved=\"false\"></xref> properties for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public void AddSystemAcl(byte revision, int trusted)
    content.vb: Public Sub AddSystemAcl(revision As Byte, trusted As Integer)
    parameters:
    - id: revision
      type: System.Byte
      description: "\n<p>The revision level of the new <xref href=\"System.Security.AccessControl.SystemAcl\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: trusted
      type: System.Int32
      description: "\n<p>The number of Access Control Entries (ACEs) this <xref href=\"System.Security.AccessControl.SystemAcl\" data-throw-if-not-resolved=\"false\"></xref> object can contain. This number is to be used only as a hint.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  id: PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: PurgeAccessControl(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PurgeAccessControl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 197
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.</p>\n"
  example:
  - 
  syntax:
    content: public void PurgeAccessControl(SecurityIdentifier sid)
    content.vb: Public Sub PurgeAccessControl(sid As SecurityIdentifier)
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The security identifier for which to remove access rules.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  id: PurgeAudit(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: PurgeAudit(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PurgeAudit
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 198
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public void PurgeAudit(SecurityIdentifier sid)
    content.vb: Public Sub PurgeAudit(sid As SecurityIdentifier)
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The security identifier for which to remove audit rules.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  id: SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: SetDiscretionaryAclProtection(Boolean, Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetDiscretionaryAclProtection
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 199
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object. DACLs that are protected do not inherit access rules from parent containers.</p>\n"
  example:
  - 
  syntax:
    content: public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance)
    content.vb: Public Sub SetDiscretionaryAclProtection(isProtected As Boolean, preserveInheritance As Boolean)
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to protect the DACL from inheritance.</p>\n"
    - id: preserveInheritance
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to keep inherited access rules in the DACL; <strong>false</strong> to remove inherited access rules from the DACL.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  id: SetSystemAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  - vb
  name: SetSystemAclProtection(Boolean, Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSystemAclProtection
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 200
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the inheritance protection for the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object. SACLs that are protected do not inherit audit rules from parent containers.</p>\n"
  example:
  - 
  syntax:
    content: public void SetSystemAclProtection(bool isProtected, bool preserveInheritance)
    content.vb: Public Sub SetSystemAclProtection(isProtected As Boolean, preserveInheritance As Boolean)
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to protect the SACL from inheritance.</p>\n"
    - id: preserveInheritance
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to keep inherited audit rules in the SACL; <strong>false</strong> to remove inherited audit rules from the SACL.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericSecurityDescriptor
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericSecurityDescriptor
  fullName: System.Security.AccessControl.GenericSecurityDescriptor
- uid: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
- uid: System.Security.AccessControl.GenericSecurityDescriptor.Revision
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: Revision
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Revision
- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: GetSddlForm(AccessControlSections)
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
    name: GetSddlForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm
  - name: (
    fullName: (
  - uid: System.Security.AccessControl.AccessControlSections
    name: AccessControlSections
    fullName: System.Security.AccessControl.AccessControlSections
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
    name: GetSddlForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm
  - name: (
    fullName: (
  - uid: System.Security.AccessControl.AccessControlSections
    name: AccessControlSections
    fullName: System.Security.AccessControl.AccessControlSections
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: IsSddlConversionSupported()
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
    name: IsSddlConversionSupported
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
    name: IsSddlConversionSupported
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.ControlFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ControlFlags
  fullName: System.Security.AccessControl.ControlFlags
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.SystemAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: SystemAcl
  fullName: System.Security.AccessControl.SystemAcl
- uid: System.Security.AccessControl.DiscretionaryAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: DiscretionaryAcl
  fullName: System.Security.AccessControl.DiscretionaryAcl
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.RawSecurityDescriptor
  parent: System.Security.AccessControl
  isExternal: false
  name: RawSecurityDescriptor
  fullName: System.Security.AccessControl.RawSecurityDescriptor
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: ControlFlags
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags
- uid: System.Security.AccessControl.GenericSecurityDescriptor.Group
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: Group
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Group
- uid: System.Security.AccessControl.GenericSecurityDescriptor.Owner
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: Owner
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Owner
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
