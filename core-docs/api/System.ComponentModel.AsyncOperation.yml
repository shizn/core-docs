items:
- uid: System.ComponentModel.AsyncOperation
  commentId: T:System.ComponentModel.AsyncOperation
  id: AsyncOperation
  parent: System.ComponentModel
  children:
  - System.ComponentModel.AsyncOperation.Finalize
  - System.ComponentModel.AsyncOperation.OperationCompleted
  - System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
  - System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  - System.ComponentModel.AsyncOperation.SynchronizationContext
  - System.ComponentModel.AsyncOperation.UserSuppliedState
  langs:
  - csharp
  - vb
  name: AsyncOperation
  fullName: System.ComponentModel.AsyncOperation
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsyncOperation
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 8
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Tracks the lifetime of an asynchronous operation.</p>\n"
  remarks: "\n<p>When you implement a class according to the Event-based Asynchronous Pattern Overview, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> class provides ways to track and report the progress of an asynchronous task.</p>\n<p>The following list identifies ways to use an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object: </p>\n<ul><li>\n<p>To report progress and interim results to the client, call <xref href=\"System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> from your asynchronous worker code.</p>\n</li><li>\n<p>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>Your class should get an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object for each asynchronous task by calling <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> when each task starts. To allow the client to distinguish separate asynchronous tasks, <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> takes a parameter for a unique client-provided token, which becomes the <xref href=\"System.ComponentModel.AsyncOperation.UserSuppliedState\" data-throw-if-not-resolved=\"false\"></xref> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>For a full code listing, see How to: Implement a Component That Supports the Event-based Asynchronous Pattern. For a full code listing of a client form, see How to: Implement a Client of the Event-based Asynchronous Pattern.</p>System.ComponentModel.AsyncOperationManager#3"
  syntax:
    content: public sealed class AsyncOperation
    content.vb: Public NotInheritable Class AsyncOperation
  seealso:
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ComponentModel.AsyncOperation.SynchronizationContext
  commentId: P:System.ComponentModel.AsyncOperation.SynchronizationContext
  id: SynchronizationContext
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  - vb
  name: SynchronizationContext
  fullName: System.ComponentModel.AsyncOperation.SynchronizationContext
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SynchronizationContext
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 46
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets the <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> object that was passed to the constructor.</p>\n"
  syntax:
    content: public SynchronizationContext SynchronizationContext { get; }
    content.vb: Public ReadOnly Property SynchronizationContext As SynchronizationContext
    parameters: []
    return:
      type: System.Threading.SynchronizationContext
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.AsyncOperation.UserSuppliedState
  commentId: P:System.ComponentModel.AsyncOperation.UserSuppliedState
  id: UserSuppliedState
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  - vb
  name: UserSuppliedState
  fullName: System.ComponentModel.AsyncOperation.UserSuppliedState
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserSuppliedState
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 37
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets an object used to uniquely identify an asynchronous operation.</p>\n"
  remarks: "\n<p>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your <code>MethodNameAsync</code> method should take a parameter of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that will act as a task ID. You will use this task ID when you call the <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the <xref href=\"System.ComponentModel.AsyncOperation.UserSuppliedState\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Client code must be careful to provide a unique value for the <xref href=\"System.ComponentModel.AsyncOperation.UserSuppliedState\" data-throw-if-not-resolved=\"false\"></xref> property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if one is detected.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using <xref href=\"System.ComponentModel.AsyncOperation.UserSuppliedState\" data-throw-if-not-resolved=\"false\"></xref> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.AsyncOperationManager#2,4"
  syntax:
    content: public object UserSuppliedState { get; }
    content.vb: Public ReadOnly Property UserSuppliedState As Object
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.AsyncOperation.Finalize
  commentId: M:System.ComponentModel.AsyncOperation.Finalize
  id: Finalize
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.ComponentModel.AsyncOperation.Finalize()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 29
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Finalizes the asynchronous operation.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.AsyncOperation.OperationCompleted
  commentId: M:System.ComponentModel.AsyncOperation.OperationCompleted
  id: OperationCompleted
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  - vb
  name: OperationCompleted()
  fullName: System.ComponentModel.AsyncOperation.OperationCompleted()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OperationCompleted
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 65
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Ends the lifetime of an asynchronous operation.</p>\n"
  remarks: "\n<p>Call the <xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\" data-throw-if-not-resolved=\"false\"></xref> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> will raise an exception.</p>\n"
  syntax:
    content: public void OperationCompleted()
    content.vb: Public Sub OperationCompleted
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\" data-throw-if-not-resolved=\"false\"></xref> has been called previously for this task. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
  commentId: M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
  id: Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  - vb
  name: Post(SendOrPostCallback, Object)
  fullName: System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Post
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 54
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Invokes a delegate on the thread or context appropriate for the application model.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method invokes the delegate specified by the <em>arg</em> parameter without ending the lifetime of the asynchronous operation.</p>\n<p>You can call the <xref href=\"System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. You can use the method to report progress or interim results back to clients.</p>\n<p>The <em>d</em> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</p>\n<p>The <em>arg</em> parameter should be used to pass state to the delegate wrapped by the <em>d</em> parameter. It might be a reference to an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref>, or it might be a <xref href=\"System.ComponentModel.ProgressChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object. It may be desirable to derive your own class from <xref href=\"System.ComponentModel.ProgressChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> to provide additional state storage.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using the <xref href=\"System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method for reporting progress and incremental results of an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.AsyncOperationManager#2,5"
  syntax:
    content: public void Post(SendOrPostCallback d, object arg)
    content.vb: Public Sub Post(d As SendOrPostCallback, arg As Object)
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
    - id: arg
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method has been called previously for this task. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  commentId: M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  id: PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  - vb
  name: PostOperationCompleted(SendOrPostCallback, Object)
  fullName: System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostOperationCompleted
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperation.cs
    startLine: 59
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Ends the lifetime of an asynchronous operation.</p>\n"
  remarks: "\n<p>Call the <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object will raise an exception.</p>\n<p>The <em>d</em> parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task. The <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</p>\n<p>The <em>arg</em> parameter is used to pass state information to the completion delegate <em>d</em>. You can use an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> object, or an <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using the <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to end the lifetime of an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.AsyncOperationManager#2,4"
  syntax:
    content: public void PostOperationCompleted(SendOrPostCallback d, object arg)
    content.vb: Public Sub PostOperationCompleted(d As SendOrPostCallback, arg As Object)
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
    - id: arg
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\" data-throw-if-not-resolved=\"false\"></xref> has been called previously for this task. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: false
  name: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
