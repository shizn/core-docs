items:
- uid: System.Net.NetworkInformation.Ping
  commentId: T:System.Net.NetworkInformation.Ping
  id: Ping
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.Ping.#ctor
  - System.Net.NetworkInformation.Ping.Dispose
  - System.Net.NetworkInformation.Ping.Dispose(System.Boolean)
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String)
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])
  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  langs:
  - csharp
  - vb
  name: Ping
  fullName: System.Net.NetworkInformation.Ping
  type: Class
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ping
    path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs
    startLine: 9
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Allows an application to determine whether a remote computer is accessible over the network.</p>\n"
  remarks: "\n<p>Applications use the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class to detect whether a remote computer is reachable. </p>\n<p>Network topology can determine whether <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> can successfully contact a remote host. The presence and configuration of proxies, network address translation (NAT) equipment, or firewalls can prevent <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> from succeeding. A successful <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> indicates only that the remote host can be reached on the network; the presence of higher level services (such as a Web server) on the remote host is not guaranteed.</p>\n<p>This class provides functionality similar to the Ping.exe command line tool. The <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> and <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> methods send an Internet Control Message Protocol (ICMP) echo request message to a remote computer and waits for an ICMP echo reply message from that computer. For a detailed description of ICMP messages, see RFC 792, available at <see href=\"http://www.ietf.org/\">http://www.ietf.org</see>.</p>\n<p>The following types are used with the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class and are described in detail below.</p>\n<p>\n<strong>Type name</strong>\n</p>\n<p>\n<strong>Description</strong>\n</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.IPStatus\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Defines status codes that describe the outcome of an ICMP echo request message.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Allows you to configure or retrieve the settings that control how many times the request packet can be forwarded (<xref href=\"System.Net.NetworkInformation.PingOptions.Ttl\" data-throw-if-not-resolved=\"false\"></xref>), and whether it can be fragmented (<xref href=\"System.Net.NetworkInformation.PingOptions.DontFragment\" data-throw-if-not-resolved=\"false\"></xref> ).</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingReply\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Contains the results of an ICMP echo request.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Thrown if an unrecoverable error occurs.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Contains the data associated with <xref href=\"System.Net.NetworkInformation.Ping.PingCompleted\" data-throw-if-not-resolved=\"false\"></xref> events, which are raised when a <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> call completes or is canceled.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.NetworkInformation.PingCompletedEventHandler\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The delegate that provides the callback method invoked when a <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> call completes or is canceled.</p>\n</td></tr></tbody></table>\n<p>The <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> and <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> methods return the reply in a <xref href=\"System.Net.NetworkInformation.PingReply\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Net.NetworkInformation.PingReply.Status\" data-throw-if-not-resolved=\"false\"></xref> property returns an <xref href=\"System.Net.NetworkInformation.IPStatus\" data-throw-if-not-resolved=\"false\"></xref> value to indicate the outcome of the request. </p>\n<p>When sending the request, you must specify the remote computer. You can do this by providing a host name string, an IP address in string format, or an <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>You can also specify any of the following types of information:</p>\n<ul><li>\n<p>Data to accompany the request. Specifying <em>buffer</em> allows you to learn the amount of time required for a packet of a particular size to travel to and from the remote host and the maximum transmission unit of the network path. (See the <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> or <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> overloads that take a <em>buffer</em> parameter.)</p>\n</li><li>\n<p>Whether the ICMP Echo packet can be fragmented in transit. (See the <xref href=\"System.Net.NetworkInformation.PingOptions.DontFragment\" data-throw-if-not-resolved=\"false\"></xref> property and the <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> or <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> overloads that take an <em>options</em> parameter.)</p>\n</li><li>\n<p>How many times routing nodes, such as routers or gateways, can forward the packet before it either reaches the destination computer or is discarded. (See <xref href=\"System.Net.NetworkInformation.PingOptions.Ttl\" data-throw-if-not-resolved=\"false\"></xref> and the <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> or <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> overloads that take an <em>options</em> parameter.)</p>\n</li><li>\n<p>The time limit within which the reply must be received. (See the <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> or <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> overloads that take a <em>timeout</em> parameter.</p>\n</li></ul>\n<p>The <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class offers both synchronous and asynchronous methods for sending the request. If your application should block while waiting for a reply, use the <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> methods; these methods are synchronous. If your application should not block, use the asynchronous <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> methods. A call to <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> executes in its own thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref href=\"System.Net.NetworkInformation.Ping.PingCompleted\" data-throw-if-not-resolved=\"false\"></xref> event. Applications use a <xref href=\"System.Net.NetworkInformation.PingCompletedEventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate to specify the method that is called for <xref href=\"System.Net.NetworkInformation.Ping.PingCompleted\" data-throw-if-not-resolved=\"false\"></xref> events. You must add a <xref href=\"System.Net.NetworkInformation.PingCompletedEventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate to the event before calling <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see>. The delegate's method receives a <xref href=\"System.Net.NetworkInformation.PingCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object that contains a <xref href=\"System.Net.NetworkInformation.PingReply\" data-throw-if-not-resolved=\"false\"></xref> object that describes the result of the <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> call. </p>\n<p>You cannot use the same instance of the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class to generate multiple simultaneous ICMP Echo requests. Calling <see cref=\"Overload:System.Net.NetworkInformation.Ping.Send\"></see> while a <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> call is in progress or calling <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendAsync\"></see> multiple times before all previous calls have completed causes an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class synchronously.</p>NCLPingSync#1<p>The following code example demonstrates using the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class asynchronously.</p>NCLPingASync#1"
  syntax:
    content: 'public class Ping : IDisposable'
    content.vb: >-
      Public Class Ping
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.NetworkInformation.Ping.#ctor
  commentId: M:System.Net.NetworkInformation.Ping.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: Ping()
  fullName: System.Net.NetworkInformation.Ping.Ping()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 39
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates creating a <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> instance. The complete example is available in the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> class overview.</p>NCLPingAsync#2"
  syntax:
    content: public Ping()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)
  id: SendPingAsync(System.Net.IPAddress)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(IPAddress)
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 40
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. </p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(IPAddress address)
    content.vb: Public Function SendPingAsync(address As IPAddress) As Task(Of PingReply)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A call to <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendPingAsync\"></see>  is in progress.</p>\n"
  - type: System.Net.NetworkInformation.PingException
    commentId: T:System.Net.NetworkInformation.PingException
    description: "\n<p>An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>address</em> is not a valid IP address.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This object has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)
  id: SendPingAsync(System.Net.IPAddress,System.Int32)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(IPAddress, Int32)
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 41
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(IPAddress address, int timeout)
    content.vb: Public Function SendPingAsync(address As IPAddress, timeout As Integer) As Task(Of PingReply)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])
  id: SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(IPAddress, Int32, Byte[])
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 42
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(IPAddress address, int timeout, byte[] buffer)
    content.vb: Public Function SendPingAsync(address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\n"
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is less than zero.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A call to <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendPingAsync\"></see>  is in progress.</p>\n"
  - type: System.Net.NetworkInformation.PingException
    commentId: T:System.Net.NetworkInformation.PingException
    description: "\n<p>An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>address</em> is not a valid IP address.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This object has been disposed.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The size of <em>buffer</em> exceeds 65,500 bytes.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte())
  name.vb: SendPingAsync(IPAddress, Int32, Byte())
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  id: SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(IPAddress, Int32, Byte[], PingOptions)
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 43
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(IPAddress address, int timeout, byte[] buffer, PingOptions options)
    content.vb: Public Function SendPingAsync(address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\n"
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\n"
    - id: options
      type: System.Net.NetworkInformation.PingOptions
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref>  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is less than zero.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A call to <see cref=\"Overload:System.Net.NetworkInformation.Ping.SendPingAsync\"></see>  is in progress.</p>\n"
  - type: System.Net.NetworkInformation.PingException
    commentId: T:System.Net.NetworkInformation.PingException
    description: "\n<p>An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>address</em> is not a valid IP address.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This object has been disposed.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The size of <em>buffer</em> exceeds 65,500 bytes.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte(), System.Net.NetworkInformation.PingOptions)
  name.vb: SendPingAsync(IPAddress, Int32, Byte(), PingOptions)
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String)
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)
  id: SendPingAsync(System.String)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(String)
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 44
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress)
    content.vb: Public Function SendPingAsync(hostNameOrAddress As String) As Task(Of PingReply)
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: "\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)
  id: SendPingAsync(System.String,System.Int32)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(String, Int32)
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 45
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress, int timeout)
    content.vb: Public Function SendPingAsync(hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: "\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])
  id: SendPingAsync(System.String,System.Int32,System.Byte[])
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(String, Int32, Byte[])
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 46
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, byte[] buffer)
    content.vb: Public Function SendPingAsync(hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: "\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\n"
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte())
  name.vb: SendPingAsync(String, Int32, Byte())
- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  id: SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: SendPingAsync(String, Int32, Byte[], PingOptions)
  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPingAsync
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 47
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>> object will complete after the ICMP packet has been sent and the response has been received.</p>\n"
  syntax:
    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, byte[] buffer, PingOptions options)
    content.vb: Public Function SendPingAsync(hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: "\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\n"
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\n"
    - id: options
      type: System.Net.NetworkInformation.PingOptions
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref>  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte(), System.Net.NetworkInformation.PingOptions)
  name.vb: SendPingAsync(String, Int32, Byte(), PingOptions)
- uid: System.Net.NetworkInformation.Ping.Dispose
  commentId: M:System.Net.NetworkInformation.Ping.Dispose
  id: Dispose
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Net.NetworkInformation.Ping.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs
    startLine: 11
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkInformation.Ping.Dispose(System.Boolean)
  commentId: M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.NetworkInformation.Ping
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.NetworkInformation.Ping.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs
    startLine: 12
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> object, and optionally disposes of the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <xref href=\"System.ComponentModel.Component.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. The public <strong>Dispose()</strong> method invokes the protected <xref href=\"System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.ComponentModel.Component.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> object references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PingReply>
  fullName: System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.NetworkInformation.PingReply)
  name.vb: Task(Of PingReply)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.NetworkInformation.PingReply
    name: PingReply
    fullName: System.Net.NetworkInformation.PingReply
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.NetworkInformation.PingReply
    name: PingReply
    fullName: System.Net.NetworkInformation.PingReply
  - name: )
    fullName: )
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Net.NetworkInformation.PingOptions
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PingOptions
  fullName: System.Net.NetworkInformation.PingOptions
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Net.NetworkInformation.PingException
  isExternal: false
  name: PingException
  fullName: System.Net.NetworkInformation.PingException
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
