items:
- uid: System.Text.UTF7Encoding
  commentId: T:System.Text.UTF7Encoding
  id: UTF7Encoding
  parent: System.Text
  children:
  - System.Text.UTF7Encoding.#ctor
  - System.Text.UTF7Encoding.#ctor(System.Boolean)
  - System.Text.UTF7Encoding.Equals(System.Object)
  - System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UTF7Encoding.GetByteCount(System.String)
  - System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UTF7Encoding.GetDecoder
  - System.Text.UTF7Encoding.GetEncoder
  - System.Text.UTF7Encoding.GetHashCode
  - System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  - System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: UTF7Encoding
  fullName: System.Text.UTF7Encoding
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UTF7Encoding
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 16
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Represents a UTF-7 encoding of Unicode characters.</p>\n"
  remarks: "\n<p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</p>\n<p>The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. For security reasons, the application should use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n<p>For more information about the UTFs and other encodings supported by <xref href=\"System.Text\" data-throw-if-not-resolved=\"false\"></xref>, see Character Encoding in the .NET Framework.</p>\n<p>The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many bytes result in encoding a set of Unicode characters, and the <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method performs the actual encoding.</p>\n<p>Likewise, the <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many characters result in decoding a sequence of bytes, and the <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods perform the actual decoding.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> corresponds to the Windows code page 65000.</p>\n<p>The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use a <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> to encode a string of Unicode characters and store them in a byte array. Notice that when the byte array is decoded back to a string, no data is lost.</p>System.Text.UTF7Encoding Example#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class UTF7Encoding : Encoding, ICloneable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class UTF7Encoding
          Inherits Encoding
          Implements ICloneable
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  inheritance:
  - System.Object
  - System.Text.Encoding
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.GetPreamble
  - System.Text.Encoding.Clone
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Default
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.UTF32
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.UTF7Encoding.#ctor
  commentId: M:System.Text.UTF7Encoding.#ctor
  id: '#ctor'
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: UTF7Encoding()
  fullName: System.Text.UTF7Encoding.UTF7Encoding()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 50
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor creates an instance that does not allow optional characters. Calling the <xref href=\"System.Text.UTF7Encoding.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor is equivalent to calling the <xref href=\"System.Text.UTF7Encoding.#ctor(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes an <em>allowOptionals</em> parameter and specifying <strong>false</strong> for that parameter.</p>\n<p>If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\"), vertical line (\"|\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to create a new <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> instance and display the name of the encoding.</p>System.Text.UTF7Encoding.ctor1 Example#1"
  syntax:
    content: public UTF7Encoding()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)
  commentId: M:System.Text.UTF7Encoding.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: UTF7Encoding(Boolean)
  fullName: System.Text.UTF7Encoding.UTF7Encoding(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 55
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> class. A parameter specifies whether to allow optional characters.</p>\n"
  remarks: "\n<p>If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\"), vertical line (\"|\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to create a new <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> instance that allows optional characters.</p>System.Text.UTF7Encoding.ctor2 Example#1"
  syntax:
    content: public UTF7Encoding(bool allowOptionals)
    content.vb: Public Sub New(allowOptionals As Boolean)
    parameters:
    - id: allowOptionals
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UTF7Encoding.Equals(System.Object)
  commentId: M:System.Text.UTF7Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Text.UTF7Encoding.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 126
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Gets a value indicating whether the specified object is equal to the current <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> properties are equal.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(false)]

      public override bool Equals(object value)
    content.vb: >-
      <ComVisible(False)>

      Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Text.Encoding.Equals(System.Object)
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char*, Int32)
  fullName: System.Text.UTF7Encoding.GetByteCount(System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 210
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size that <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> requires to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public override int GetByteCount(char *chars, int count)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing </strong>in Visual Basic .NET). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.UTF7Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 162
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of bytes required to encode an array of Unicode characters.</p>System.Text.UTF7Encoding.GetByteCount Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetByteCount(char[] chars, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF7Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
- uid: System.Text.UTF7Encoding.GetByteCount(System.String)
  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(String)
  fullName: System.Text.UTF7Encoding.GetByteCount(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 193
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>To calculate the exact array size that <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> requires to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of bytes required to encode a character array.</p>System.Text.UTF7Encoding.GetByteCount Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(false)]

      public override int GetByteCount(string s)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(False)>

      Public Overrides Function GetByteCount(s As String) As Integer
    parameters:
    - id: s
      type: System.String
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetByteCount(System.String)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 326
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte*
    - id: byteCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>byteCount</em> is less than the resulting number of bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 282
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to encode a range of characters from a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and store the encoded bytes in a range of elements in a byte array.</p>System.Text.UTF7Encoding.GetBytes Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
    - id: charIndex
      type: System.Int32
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF7Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 234
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.</p>System.Text.UTF7Encoding.GetBytes Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(false)]

      public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(False)>

      Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: s
      type: System.String
    - id: charIndex
      type: System.Int32
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF7Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte*, Int32)
  fullName: System.Text.UTF7Encoding.GetCharCount(System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 382
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, use <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public override int GetCharCount(byte *bytes, int count)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.UTF7Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 352
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, use <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of characters produced by decoding a range of elements in a byte array.</p>System.Text.UnicodeEncoding.GetCharCount Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetCharCount(byte[] bytes, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF7Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.UTF7Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 449
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, use <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. When invalid bytes are encountered, <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the <em>chars</em> array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
    - id: byteCount
      type: System.Int32
    - id: chars
      type: System.Char*
    - id: charCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>charCount</em> is less than the resulting number of characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.UTF7Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 405
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, use <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. When invalid bytes are encountered, <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the <em>chars</em> array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to decode a range of elements in a byte array and store the result in a character array.</p>System.Text.UTF7Encoding.GetChars Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    - id: byteCount
      type: System.Int32
    - id: chars
      type: System.Char[]
    - id: charIndex
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF7Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Text.UTF7Encoding.GetDecoder
  commentId: M:System.Text.UTF7Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetDecoder()
  fullName: System.Text.UTF7Encoding.GetDecoder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDecoder
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 835
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method of this class. However, a <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.</p>System.Text.UTF7Encoding.GetDecoder Example#1"
  syntax:
    content: public override Decoder GetDecoder()
    content.vb: Public Overrides Function GetDecoder As Decoder
    return:
      type: System.Text.Decoder
  overridden: System.Text.Encoding.GetDecoder
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetEncoder
  commentId: M:System.Text.UTF7Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetEncoder()
  fullName: System.Text.UTF7Encoding.GetEncoder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoder
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 841
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. However, a <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.</p>System.Text.UTF7Encoding.GetEncoder Example#1"
  syntax:
    content: public override Encoder GetEncoder()
    content.vb: Public Overrides Function GetEncoder As Encoder
    return:
      type: System.Text.Encoder
  overridden: System.Text.Encoding.GetEncoder
  seealso:
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetHashCode
  commentId: M:System.Text.UTF7Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Text.UTF7Encoding.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 141
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Returns the hash code for the current <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The value returned by the <xref href=\"System.Text.UTF7Encoding.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method is not suitable for distinguishing one <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> object from another. If your application needs a unique hash code, it should override the <xref href=\"System.Text.UTF7Encoding.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(false)]

      public override int GetHashCode()
    content.vb: >-
      <ComVisible(False)>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetMaxByteCount(Int32)
  fullName: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMaxByteCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 847
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a fallback is chosen with a potentially large string, <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can return large values.</p>\n<p>In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <see cref=\"Overload:System.Text.UTF7Encoding.GetByteCount\"></see> or <see cref=\"Overload:System.Text.Encoder.Convert\"></see>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relation to <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If your application needs a similar function to use with <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, it should use <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the maximum number of bytes required to encode a specified number of characters.</p>System.Text.UTF7Encoding.GetMaxByteCount Example#1"
  syntax:
    content: public override int GetMaxByteCount(int charCount)
    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer
    parameters:
    - id: charCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetEncoder
    commentId: M:System.Text.UTF7Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetMaxCharCount(Int32)
  fullName: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMaxCharCount
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 880
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a fallback is chosen with a potentially large string, <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can return large values.</p>\n<p>In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <see cref=\"Overload:System.Text.UTF7Encoding.GetCharCount\"></see> or <see cref=\"Overload:System.Text.Decoder.Convert\"></see>.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relation to <xref href=\"System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If your application needs a similar function to use with <xref href=\"System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, it should use <xref href=\"System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the maximum number of characters produced by decoding a specified number of bytes.</p>System.Text.UTF7Encoding.GetMaxCharCount Example#1"
  syntax:
    content: public override int GetMaxCharCount(int byteCount)
    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer
    parameters:
    - id: byteCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  - vb
  name: GetString(Byte[], Int32, Int32)
  fullName: System.Text.UTF7Encoding.GetString(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF7Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Text/UTF7Encoding.cs
    startLine: 475
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a range of bytes from a byte array into a string.</p>\n"
  remarks: "\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF7Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF7Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. When invalid bytes are encountered, <xref href=\"System.Text.UTF7Encoding\" data-throw-if-not-resolved=\"false\"></xref> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the <em>chars</em> array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.</p>System.Text.UTF7Encoding.getstring#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(false)]

      public override string GetString(byte[] bytes, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(False)>

      Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.String
  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UTF7Encoding.GetDecoder
    commentId: M:System.Text.UTF7Encoding.GetDecoder
  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF7Encoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  fullName: System.ICloneable
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: Convert(Encoding, Encoding, Byte[])
  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])
  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())
  name.vb: Convert(Encoding, Encoding, Byte())
  spec.csharp:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)
  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  isExternal: true
  name: RegisterProvider(EncodingProvider)
  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  spec.csharp:
  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
    name: RegisterProvider
    fullName: System.Text.Encoding.RegisterProvider
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.EncodingProvider
    name: EncodingProvider
    fullName: System.Text.EncodingProvider
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
    name: RegisterProvider
    fullName: System.Text.Encoding.RegisterProvider
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.EncodingProvider
    name: EncodingProvider
    fullName: System.Text.EncodingProvider
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(Int32)
  fullName: System.Text.Encoding.GetEncoding(System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.Int32)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.Int32)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.String)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(String)
  fullName: System.Text.Encoding.GetEncoding(System.String)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.String)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.String)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncodings
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncodings()
  fullName: System.Text.Encoding.GetEncodings()
  spec.csharp:
  - uid: System.Text.Encoding.GetEncodings
    name: GetEncodings
    fullName: System.Text.Encoding.GetEncodings
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncodings
    name: GetEncodings
    fullName: System.Text.Encoding.GetEncodings
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetPreamble
  parent: System.Text.Encoding
  isExternal: true
  name: GetPreamble()
  fullName: System.Text.Encoding.GetPreamble()
  spec.csharp:
  - uid: System.Text.Encoding.GetPreamble
    name: GetPreamble
    fullName: System.Text.Encoding.GetPreamble
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetPreamble
    name: GetPreamble
    fullName: System.Text.Encoding.GetPreamble
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.Clone
  parent: System.Text.Encoding
  isExternal: true
  name: Clone()
  fullName: System.Text.Encoding.Clone()
  spec.csharp:
  - uid: System.Text.Encoding.Clone
    name: Clone
    fullName: System.Text.Encoding.Clone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Clone
    name: Clone
    fullName: System.Text.Encoding.Clone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(Char[])
  fullName: System.Text.Encoding.GetByteCount(System.Char[])
  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())
  name.vb: GetByteCount(Char())
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.Char[])
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.Char[])
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetBytes(System.Char[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char[])
  fullName: System.Text.Encoding.GetBytes(System.Char[])
  fullname.vb: System.Text.Encoding.GetBytes(System.Char())
  name.vb: GetBytes(Char())
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char[])
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char[])
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char[], Int32, Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetBytes(System.String)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(String)
  fullName: System.Text.Encoding.GetBytes(System.String)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.String)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.String)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetCharCount(Byte[])
  fullName: System.Text.Encoding.GetCharCount(System.Byte[])
  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())
  name.vb: GetCharCount(Byte())
  spec.csharp:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[])
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[])
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte[])
  fullName: System.Text.Encoding.GetChars(System.Byte[])
  fullname.vb: System.Text.Encoding.GetChars(System.Byte())
  name.vb: GetChars(Byte())
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte[])
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte[])
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetString(Byte*, Int32)
  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.IsAlwaysNormalized
  parent: System.Text.Encoding
  isExternal: true
  name: IsAlwaysNormalized()
  fullName: System.Text.Encoding.IsAlwaysNormalized()
  spec.csharp:
  - uid: System.Text.Encoding.IsAlwaysNormalized
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.IsAlwaysNormalized
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  parent: System.Text.Encoding
  isExternal: true
  name: IsAlwaysNormalized(NormalizationForm)
  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  spec.csharp:
  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.NormalizationForm
    name: NormalizationForm
    fullName: System.Text.NormalizationForm
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.NormalizationForm
    name: NormalizationForm
    fullName: System.Text.NormalizationForm
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetString(System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetString(Byte[])
  fullName: System.Text.Encoding.GetString(System.Byte[])
  fullname.vb: System.Text.Encoding.GetString(System.Byte())
  name.vb: GetString(Byte())
  spec.csharp:
  - uid: System.Text.Encoding.GetString(System.Byte[])
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetString(System.Byte[])
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.BodyName
  parent: System.Text.Encoding
  isExternal: true
  name: BodyName
  fullName: System.Text.Encoding.BodyName
- uid: System.Text.Encoding.EncodingName
  parent: System.Text.Encoding
  isExternal: true
  name: EncodingName
  fullName: System.Text.Encoding.EncodingName
- uid: System.Text.Encoding.HeaderName
  parent: System.Text.Encoding
  isExternal: true
  name: HeaderName
  fullName: System.Text.Encoding.HeaderName
- uid: System.Text.Encoding.WebName
  parent: System.Text.Encoding
  isExternal: true
  name: WebName
  fullName: System.Text.Encoding.WebName
- uid: System.Text.Encoding.WindowsCodePage
  parent: System.Text.Encoding
  isExternal: true
  name: WindowsCodePage
  fullName: System.Text.Encoding.WindowsCodePage
- uid: System.Text.Encoding.IsBrowserDisplay
  parent: System.Text.Encoding
  isExternal: true
  name: IsBrowserDisplay
  fullName: System.Text.Encoding.IsBrowserDisplay
- uid: System.Text.Encoding.IsBrowserSave
  parent: System.Text.Encoding
  isExternal: true
  name: IsBrowserSave
  fullName: System.Text.Encoding.IsBrowserSave
- uid: System.Text.Encoding.IsMailNewsDisplay
  parent: System.Text.Encoding
  isExternal: true
  name: IsMailNewsDisplay
  fullName: System.Text.Encoding.IsMailNewsDisplay
- uid: System.Text.Encoding.IsMailNewsSave
  parent: System.Text.Encoding
  isExternal: true
  name: IsMailNewsSave
  fullName: System.Text.Encoding.IsMailNewsSave
- uid: System.Text.Encoding.IsSingleByte
  parent: System.Text.Encoding
  isExternal: true
  name: IsSingleByte
  fullName: System.Text.Encoding.IsSingleByte
- uid: System.Text.Encoding.EncoderFallback
  parent: System.Text.Encoding
  isExternal: true
  name: EncoderFallback
  fullName: System.Text.Encoding.EncoderFallback
- uid: System.Text.Encoding.DecoderFallback
  parent: System.Text.Encoding
  isExternal: true
  name: DecoderFallback
  fullName: System.Text.Encoding.DecoderFallback
- uid: System.Text.Encoding.IsReadOnly
  parent: System.Text.Encoding
  isExternal: true
  name: IsReadOnly
  fullName: System.Text.Encoding.IsReadOnly
- uid: System.Text.Encoding.ASCII
  parent: System.Text.Encoding
  isExternal: true
  name: ASCII
  fullName: System.Text.Encoding.ASCII
- uid: System.Text.Encoding.CodePage
  parent: System.Text.Encoding
  isExternal: true
  name: CodePage
  fullName: System.Text.Encoding.CodePage
- uid: System.Text.Encoding.Default
  parent: System.Text.Encoding
  isExternal: true
  name: Default
  fullName: System.Text.Encoding.Default
- uid: System.Text.Encoding.Unicode
  parent: System.Text.Encoding
  isExternal: true
  name: Unicode
  fullName: System.Text.Encoding.Unicode
- uid: System.Text.Encoding.BigEndianUnicode
  parent: System.Text.Encoding
  isExternal: true
  name: BigEndianUnicode
  fullName: System.Text.Encoding.BigEndianUnicode
- uid: System.Text.Encoding.UTF7
  parent: System.Text.Encoding
  isExternal: true
  name: UTF7
  fullName: System.Text.Encoding.UTF7
- uid: System.Text.Encoding.UTF8
  parent: System.Text.Encoding
  isExternal: true
  name: UTF8
  fullName: System.Text.Encoding.UTF8
- uid: System.Text.Encoding.UTF32
  parent: System.Text.Encoding
  isExternal: true
  name: UTF32
  fullName: System.Text.Encoding.UTF32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding.Equals(System.Object)
  parent: System.Text.Encoding
  isExternal: true
  name: Equals(Object)
  fullName: System.Text.Encoding.Equals(System.Object)
  spec.csharp:
  - uid: System.Text.Encoding.Equals(System.Object)
    name: Equals
    fullName: System.Text.Encoding.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Equals(System.Object)
    name: Equals
    fullName: System.Text.Encoding.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(Char*, Int32)
  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char*
  isExternal: true
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Text.Encoding.GetByteCount(System.String)
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(String)
  fullName: System.Text.Encoding.GetByteCount(System.String)
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.String)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.String)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetCharCount(Byte*, Int32)
  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetDecoder
  parent: System.Text.Encoding
  isExternal: true
  name: GetDecoder()
  fullName: System.Text.Encoding.GetDecoder()
  spec.csharp:
  - uid: System.Text.Encoding.GetDecoder
    name: GetDecoder
    fullName: System.Text.Encoding.GetDecoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetDecoder
    name: GetDecoder
    fullName: System.Text.Encoding.GetDecoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoding.GetEncoder
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoder()
  fullName: System.Text.Encoding.GetEncoder()
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoder
    name: GetEncoder
    fullName: System.Text.Encoding.GetEncoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoder
    name: GetEncoder
    fullName: System.Text.Encoding.GetEncoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.Encoding.GetHashCode
  parent: System.Text.Encoding
  isExternal: true
  name: GetHashCode()
  fullName: System.Text.Encoding.GetHashCode()
  spec.csharp:
  - uid: System.Text.Encoding.GetHashCode
    name: GetHashCode
    fullName: System.Text.Encoding.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetHashCode
    name: GetHashCode
    fullName: System.Text.Encoding.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetMaxByteCount(Int32)
  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
    name: GetMaxByteCount
    fullName: System.Text.Encoding.GetMaxByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
    name: GetMaxByteCount
    fullName: System.Text.Encoding.GetMaxByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetMaxCharCount(Int32)
  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
    name: GetMaxCharCount
    fullName: System.Text.Encoding.GetMaxCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
    name: GetMaxCharCount
    fullName: System.Text.Encoding.GetMaxCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetString(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
