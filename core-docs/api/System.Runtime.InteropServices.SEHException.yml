items:
- uid: System.Runtime.InteropServices.SEHException
  commentId: T:System.Runtime.InteropServices.SEHException
  id: SEHException
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.SEHException.#ctor
  - System.Runtime.InteropServices.SEHException.#ctor(System.String)
  - System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
  - System.Runtime.InteropServices.SEHException.CanResume
  langs:
  - csharp
  - vb
  name: SEHException
  fullName: System.Runtime.InteropServices.SEHException
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SEHException
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 725
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Represents structured exception handling (SEH) errors. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception. The <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class also corresponds to the <strong>HRESULT</strong><strong>E_FAIL</strong> (0x80004005).</p>\n<p>The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents. There are two common unmanaged SEH exceptions:</p>\n<ul><li>\n<p>\n<strong>STATUS_NO_MEMORY</strong> exceptions are automatically mapped to the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>\n<strong>STATUS_ACCESS_VIOLATION</strong> exceptions are automatically mapped as follows:</p>\n<ul><li>\n<p>If <strong>legacyNullReferencePolicy</strong> is applied, all access violations are mapped to the <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <xref href=\"System.AccessViolationException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <xref href=\"System.AccessViolationException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>If there is no <strong>legacyNullReferencePolicy</strong>, and the address at which the read/write was attempted is in JIT-compiled code and in the OS Null partition area, the exception is mapped to the <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li></ul>\n</li></ul>\n<p>Any SEH exception that is not automatically mapped to a specific exception is mapped to the <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class by default.</p>\n<p>For more information, search on \"unmanaged exceptions\" and \"Structured Exception Handling\" in the MSDN Library.</p>\n<p> Note that the <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class does not cause unmanaged C++ exception destructors to be called. To ensure that unmanaged C++ exception destructors are called, use the following syntax in the <strong>catch</strong> block.</p>\n<p>[Visual Basic]</p>\n<pre><code>Catch \n' Handle catch here.\nEnd Try</code></pre>\n<p>[C#]</p>\n<pre><code>catch\n{\n// Handle catch here.\n}</code></pre>\n<p>[C++]</p>\n<pre><code>catch(â€¦)\n{\n// Handle catch here.\n} </code></pre>\n"
  syntax:
    content: 'public class SEHException : Exception'
    content.vb: >-
      Public Class SEHException
          Inherits Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Runtime.InteropServices.SEHException.#ctor
  commentId: M:System.Runtime.InteropServices.SEHException.#ctor
  id: '#ctor'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  - vb
  name: SEHException()
  fullName: System.Runtime.InteropServices.SEHException.SEHException()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 727
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class inherits from the <xref href=\"System.Runtime.InteropServices.ExternalException\" data-throw-if-not-resolved=\"false\"></xref> class. This constructor sets the properties of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object to the values in the following table.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public SEHException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String)
  commentId: M:System.Runtime.InteropServices.SEHException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  - vb
  name: SEHException(String)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 728
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified message.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Runtime.InteropServices.ExternalException\" data-throw-if-not-resolved=\"false\"></xref>. This constructor sets the properties of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object as shown in the following table.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public SEHException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that indicates the reason for the exception. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
  commentId: M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  - vb
  name: SEHException(String, Exception)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 729
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Runtime.InteropServices.SEHException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public SEHException(string message, Exception inner)
    content.vb: Public Sub New(message As String, inner As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SEHException.CanResume
  commentId: M:System.Runtime.InteropServices.SEHException.CanResume
  id: CanResume
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  - vb
  name: CanResume()
  fullName: System.Runtime.InteropServices.SEHException.CanResume()
  type: Method
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanResume
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 730
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Runtime.InteropServices.SEHException.CanResume\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>, then a filtered exception handler can correct the problem that caused the exception, and the code will continue from the point at which the exception was thrown.</p>\n"
  syntax:
    content: public virtual bool CanResume()
    content.vb: Public Overridable Function CanResume As Boolean
    return:
      type: System.Boolean
      description: "\n<p>Always <strong>false</strong>, because resumable exceptions are not implemented.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
