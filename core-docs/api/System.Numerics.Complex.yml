items:
- uid: System.Numerics.Complex
  commentId: T:System.Numerics.Complex
  id: Complex
  parent: System.Numerics
  children:
  - System.Numerics.Complex.#ctor(System.Double,System.Double)
  - System.Numerics.Complex.Abs(System.Numerics.Complex)
  - System.Numerics.Complex.Acos(System.Numerics.Complex)
  - System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Asin(System.Numerics.Complex)
  - System.Numerics.Complex.Atan(System.Numerics.Complex)
  - System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  - System.Numerics.Complex.Cos(System.Numerics.Complex)
  - System.Numerics.Complex.Cosh(System.Numerics.Complex)
  - System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Object)
  - System.Numerics.Complex.Exp(System.Numerics.Complex)
  - System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  - System.Numerics.Complex.GetHashCode
  - System.Numerics.Complex.Imaginary
  - System.Numerics.Complex.ImaginaryOne
  - System.Numerics.Complex.Log(System.Numerics.Complex)
  - System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Log10(System.Numerics.Complex)
  - System.Numerics.Complex.Magnitude
  - System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Negate(System.Numerics.Complex)
  - System.Numerics.Complex.One
  - System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  - System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  - System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  - System.Numerics.Complex.Phase
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Real
  - System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  - System.Numerics.Complex.Sin(System.Numerics.Complex)
  - System.Numerics.Complex.Sinh(System.Numerics.Complex)
  - System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  - System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Tan(System.Numerics.Complex)
  - System.Numerics.Complex.Tanh(System.Numerics.Complex)
  - System.Numerics.Complex.ToString
  - System.Numerics.Complex.ToString(System.IFormatProvider)
  - System.Numerics.Complex.ToString(System.String)
  - System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Complex.Zero
  langs:
  - csharp
  - vb
  name: Complex
  fullName: System.Numerics.Complex
  type: Struct
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Complex
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 159
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Represents a complex number.</p>\n"
  remarks: "\n<p>A complex number is a number that comprises a real number part and an imaginary number part. A complex number z is usually written in the form z = x + yi, where x and y are real numbers, and i is the imaginary unit that has the property i2 = -1. The real part of the complex number is represented by x, and the imaginary part of the complex number is represented by y.</p>\n<p>The <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers. A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane. The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis). </p>\n<p>Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system., In polar coordinates, a point is characterized by two numbers:</p>\n<ul><li>\n<p>Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).</p>\n</li><li>\n<p>Its phase, which is the angle between the real axis and the line drawn from the origin to the point.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct Complex : IEquatable<Complex>, IFormattable
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure Complex
          Implements IEquatable(Of Complex), IFormattable
  implements:
  - System.IEquatable{System.Numerics.Complex}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Numerics.Complex.ImaginaryOne
  commentId: F:System.Numerics.Complex.ImaginaryOne
  id: ImaginaryOne
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ImaginaryOne
  fullName: System.Numerics.Complex.ImaginaryOne
  type: Field
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImaginaryOne
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 162
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a new <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> instance with a real number equal to zero and an imaginary number equal to one.</p>\n"
  example:
  - "\n<p>The following example instantiates a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value by using the <xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref> property. It then compares this value to another value that is instantiated by calling the <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> constructor with a real part equal to zero and an imaginary part equal to one. As the output from the example shows, the two values are equal.</p>System.Numerics.Complex.ImaginaryOne#1"
  syntax:
    content: public static readonly Complex ImaginaryOne
    content.vb: Public Shared ReadOnly ImaginaryOne As Complex
    return:
      type: System.Numerics.Complex
  seealso:
  - type: System.Numerics.Complex.One
    commentId: F:System.Numerics.Complex.One
  - type: System.Numerics.Complex.Zero
    commentId: F:System.Numerics.Complex.Zero
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.Complex.One
  commentId: F:System.Numerics.Complex.One
  id: One
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: One
  fullName: System.Numerics.Complex.One
  type: Field
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: One
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 163
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a new <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> instance with a real number equal to one and an imaginary number equal to zero.</p>\n"
  example:
  - "\n<p>The following example instantiates a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value by using the <xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref> property. It then compares this value to another value that is instantiated by calling the <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> constructor with a real part equal to one and an imaginary part equal to zero. As the output from the example shows, the two values are equal.</p>System.Numerics.Complex.One#1"
  syntax:
    content: public static readonly Complex One
    content.vb: Public Shared ReadOnly One As Complex
    return:
      type: System.Numerics.Complex
  seealso:
  - type: System.Numerics.Complex.ImaginaryOne
    commentId: F:System.Numerics.Complex.ImaginaryOne
  - type: System.Numerics.Complex.Zero
    commentId: F:System.Numerics.Complex.Zero
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.Complex.Zero
  commentId: F:System.Numerics.Complex.Zero
  id: Zero
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.Numerics.Complex.Zero
  type: Field
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zero
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 164
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a new <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> instance with a real number equal to zero and an imaginary number equal to zero.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref> property is most frequently used to compare a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value to zero.</p>\n"
  example:
  - "\n<p>The following example instantiates a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value by using the <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref> property. It then compares this value to another value that is instantiated by calling the <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> constructor with a real part equal to zero and an imaginary part equal to zero. As the output from the example shows, the two values are equal.</p>System.Numerics.Complex.Zero#1"
  syntax:
    content: public static readonly Complex Zero
    content.vb: Public Shared ReadOnly Zero As Complex
    return:
      type: System.Numerics.Complex
  seealso:
  - type: System.Numerics.Complex.ImaginaryOne
    commentId: F:System.Numerics.Complex.ImaginaryOne
  - type: System.Numerics.Complex.One
    commentId: F:System.Numerics.Complex.One
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)
  commentId: M:System.Numerics.Complex.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Complex(Double, Double)
  fullName: System.Numerics.Complex.Complex(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 165
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> structure using the specified real and imaginary values.</p>\n"
  remarks: "\n<p>The <em>real</em> or <em>imaginary</em> arguments may lose precision if they are data types that require an explicit cast to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.</p>System.Numerics.Complex.ctor#1"
  syntax:
    content: public Complex(double real, double imaginary)
    content.vb: Public Sub New(real As Double, imaginary As Double)
    parameters:
    - id: real
      type: System.Double
      description: "\n<p>The real part of the complex number.</p>\n"
    - id: imaginary
      type: System.Double
      description: "\n<p>The imaginary part of the complex number.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.Imaginary
  commentId: P:System.Numerics.Complex.Imaginary
  id: Imaginary
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Imaginary
  fullName: System.Numerics.Complex.Imaginary
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Imaginary
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 166
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets the imaginary component of the current <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Given a complex number a + bi, the <xref href=\"System.Numerics.Complex.Imaginary\" data-throw-if-not-resolved=\"false\"></xref> property returns the value of b.</p>\n"
  example:
  - "\n<p>The following example instantiates an array of <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> objects and displays the real and imaginary components of each in the form a + bi.</p>System.Numerics.Complex.Real#1"
  syntax:
    content: public double Imaginary { get; }
    content.vb: Public ReadOnly Property Imaginary As Double
    parameters: []
    return:
      type: System.Double
      description: "\n<p>The imaginary component of a complex number.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Real
    commentId: P:System.Numerics.Complex.Real
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Magnitude
  commentId: P:System.Numerics.Complex.Magnitude
  id: Magnitude
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Magnitude
  fullName: System.Numerics.Complex.Magnitude
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Magnitude
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 167
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets the magnitude (or absolute value) of a complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> property is equivalent to the absolute value of a complex number. It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number. The absolute value is calculated as follows:</p>\n<p>| a + bi | = <xref href=\"System.Math.Sqrt(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a * a + b * b) </p>\n<p>If the calculation of the absolute value results in an overflow, this property returns either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Numerics.Complex.Phase\" data-throw-if-not-resolved=\"false\"></xref> properties define the position of a point that represents a complex number in the polar coordinate system.</p>\n<p>You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Numerics.Complex.Abs#1"
  syntax:
    content: public double Magnitude { get; }
    content.vb: Public ReadOnly Property Magnitude As Double
    parameters: []
    return:
      type: System.Double
      description: "\n<p>The magnitude of the current instance.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Abs(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Abs(System.Numerics.Complex)
  - type: System.Numerics.Complex.Phase
    commentId: P:System.Numerics.Complex.Phase
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Phase
  commentId: P:System.Numerics.Complex.Phase
  id: Phase
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Phase
  fullName: System.Numerics.Complex.Phase
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Phase
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 168
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets the phase of a complex number.</p>\n"
  remarks: "\n<p>For a complex number a + bi, the phase is computed as <xref href=\"System.Math.Atan2(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b, a).</p>\n<p>You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates. The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number. The magnitude (represented by the <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> property) is the distance from the point of origin to the point that is represented by the complex number. </p>\n<p>You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To convert the phase from radians to degrees, multiply it by 180/<xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Complex.Phase\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>System.Numerics.Complex.Phase#1"
  syntax:
    content: public double Phase { get; }
    content.vb: Public ReadOnly Property Phase As Double
    parameters: []
    return:
      type: System.Double
      description: "\n<p>The phase of a complex number, in radians.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Magnitude
    commentId: P:System.Numerics.Complex.Magnitude
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Real
  commentId: P:System.Numerics.Complex.Real
  id: Real
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Real
  fullName: System.Numerics.Complex.Real
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Real
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 169
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets the real component of the current <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Given a complex number a + bi, the <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> property returns the value of a.</p>\n"
  example:
  - "\n<p>The following example instantiates an array of <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> objects and displays the real and imaginary components of each in the form a + bi.</p>System.Numerics.Complex.Real#1"
  syntax:
    content: public double Real { get; }
    content.vb: Public ReadOnly Property Real As Double
    parameters: []
    return:
      type: System.Double
      description: "\n<p>The real component of a complex number.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Imaginary
    commentId: P:System.Numerics.Complex.Imaginary
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Abs(System.Numerics.Complex)
  id: Abs(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Abs(Complex)
  fullName: System.Numerics.Complex.Abs(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abs
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 170
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets the absolute value (or magnitude) of a complex number.</p>\n"
  remarks: "\n<p>The absolute value of a complex number is equivalent to its <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> property. The absolute value of a real number a + bi is calculated as follows:</p>\n<ul><li>\n<p>If b = 0, the result is 0.</p>\n</li><li>\n<p>If a > b, the result is a *<xref href=\"System.Math.Sqrt(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(1 + b2/a2).</p>\n</li><li>\n<p>If b > a, the result is b * <xref href=\"System.Math.Sqrt(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(1 + a2/b2).</p>\n</li></ul>\n<p>If the calculation of the absolute value results in an overflow, the method returns either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. If either the <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Numerics.Complex.Imaginary\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> and the other property is neither <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> nor <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>, the method returns <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Numerics.Complex.Abs#1"
  syntax:
    content: public static double Abs(Complex value)
    content.vb: Public Shared Function Abs(value As Complex) As Double
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The absolute value of <em>value</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Magnitude
    commentId: P:System.Numerics.Complex.Magnitude
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Acos(System.Numerics.Complex)
  id: Acos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Acos(Complex)
  fullName: System.Numerics.Complex.Acos(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Acos
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 171
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the angle that is the arc cosine of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Acos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Acos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Acos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula:</p>\n<p>(-<xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref>) * <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<em>value</em> + <xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref>*<xref href=\"System.Numerics.Complex.Sqrt(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref> - <em>value</em> * <em>value</em>)))</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Acos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that passing the value returned by the <xref href=\"System.Numerics.Complex.Acos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Cos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numerics.Complex.Acos#1"
  syntax:
    content: public static Complex Acos(Complex value)
    content.vb: Public Shared Function Acos(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number that represents a cosine.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The angle, measured in radians, which is the arc cosine of <em>value</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Cos(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Cos(System.Numerics.Complex)
  - type: System.Math.Acos(System.Double)
    commentId: M:System.Math.Acos(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  id: Add(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Add(Complex, Complex)
  fullName: System.Numerics.Complex.Add(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 172
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Adds two complex numbers and returns the result.</p>\n"
  remarks: "\n<p>The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form: </p>\n<p>(a + c) + (b + d)i. </p>\n<p>If the method call results in an overflow in either the real or imaginary component, the value of the component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Languages that do not support custom operators can use the <xref href=\"System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to perform addition with complex numbers.</p>\n"
  example:
  - "\n<p>The following example illustrates addition with complex numbers.</p>System.Numerics.Complex.Add#1"
  syntax:
    content: public static Complex Add(Complex left, Complex right)
    content.vb: Public Shared Function Add(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The first complex number to add.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The second complex number to add.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The sum of <em>left</em> and <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Asin(System.Numerics.Complex)
  id: Asin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Asin(Complex)
  fullName: System.Numerics.Complex.Asin(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Asin
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 173
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the angle that is the arc sine of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Asin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Asin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Asin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula:</p>\n<p>-<xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref> * <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref> * value + <xref href=\"System.Numerics.Complex.Sqrt(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref> - value * value))</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Asin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that passing the value returned by the <xref href=\"System.Numerics.Complex.Asin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Sin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numerics.Complex.Asin#1"
  syntax:
    content: public static Complex Asin(Complex value)
    content.vb: Public Shared Function Asin(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The angle which is the arc sine of <em>value</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Sin(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)
  - type: System.Math.Asin(System.Double)
    commentId: M:System.Math.Asin(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Atan(System.Numerics.Complex)
  id: Atan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Atan(Complex)
  fullName: System.Numerics.Complex.Atan(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Atan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 174
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the angle that is the arc tangent of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Atan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Atan(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Atan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula:</p>\n<p>\n<xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref> / new Complex(2.0, 0.0)) * (<xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref> - <xref href=\"System.Numerics.Complex.ImaginaryOne\" data-throw-if-not-resolved=\"false\"></xref> * value) - <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref> + ImaginaryOne * value)</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Atan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that passing the value returned by the <xref href=\"System.Numerics.Complex.Atan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Tan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numerics.Complex.Atan#1"
  syntax:
    content: public static Complex Atan(Complex value)
    content.vb: Public Shared Function Atan(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The angle that is the arc tangent of <em>value</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Tan(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Tan(System.Numerics.Complex)
  - type: System.Math.Atan(System.Double)
    commentId: M:System.Math.Atan(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  id: Conjugate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Conjugate(Complex)
  fullName: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Conjugate
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 175
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Computes the conjugate of a complex number and returns the result.</p>\n"
  remarks: "\n<p>The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component. If a + bi is a complex number, its conjugate is a - bi.</p>\n"
  example:
  - "\n<p>The following example displays the conjugate of two complex numbers.</p>System.Numerics.Complex.Conjugate#1"
  syntax:
    content: public static Complex Conjugate(Complex value)
    content.vb: Public Shared Function Conjugate(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The conjugate of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Cos(System.Numerics.Complex)
  id: Cos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Cos(Complex)
  fullName: System.Numerics.Complex.Cos(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cos
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 176
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the cosine of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Cos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Cos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula to calculate the cosine of the complex number a + bi:</p>\n<p>(<xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Cosh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b), -(<xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Sinh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b)))</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Acos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that passing the value returned by the <xref href=\"System.Numerics.Complex.Acos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Cos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numerics.Complex.Acos#1"
  syntax:
    content: public static Complex Cos(Complex value)
    content.vb: Public Shared Function Cos(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The cosine of <em>value</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Acos(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Acos(System.Numerics.Complex)
  - type: System.Math.Cos(System.Double)
    commentId: M:System.Math.Cos(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Cosh(System.Numerics.Complex)
  id: Cosh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Cosh(Complex)
  fullName: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cosh
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 177
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the hyperbolic cosine of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Cosh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Cosh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Cosh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:</p>\n<p>(<xref href=\"System.Math.Cosh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b), <xref href=\"System.Math.Sinh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b))</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Cosh(Complex value)
    content.vb: Public Shared Function Cosh(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The hyperbolic cosine of <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Cosh(System.Double)
    commentId: M:System.Math.Cosh(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  id: Divide(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Divide(Complex, Complex)
  fullName: System.Numerics.Complex.Divide(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 178
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Divides one complex number by another and returns the result.</p>\n"
  remarks: "\n<p>The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:</p>\n<p>((ac + bd) / (c2 + d2)) + ((bc - ad) / (c2 + d2)i</p>\n<p>If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method can be used by languages that do not support custom operators. Its behavior is identical to division using the division operator.</p>\n"
  example:
  - "\n<p>The following example divides a complex number by each element in an array of complex numbers.</p>System.Numerics.Complex.Divide#1"
  syntax:
    content: public static Complex Divide(Complex dividend, Complex divisor)
    content.vb: Public Shared Function Divide(dividend As Complex, divisor As Complex) As Complex
    parameters:
    - id: dividend
      type: System.Numerics.Complex
      description: "\n<p>The complex number to be divided.</p>\n"
    - id: divisor
      type: System.Numerics.Complex
      description: "\n<p>The complex number to divide by.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The quotient of the division.</p>\n"
  seealso:
  - type: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Equals(System.Numerics.Complex)
  id: Equals(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Equals(Complex)
  fullName: System.Numerics.Complex.Equals(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 179
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the current instance and a specified complex number have the same value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Equals(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method provides the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation for the <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> structure. It performs slightly better than <xref href=\"System.Numerics.Complex.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to convert its parameter to a complex number.</p>\n<p>Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The <xref href=\"System.Numerics.Complex.Equals(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the following expression:</p>System.Numerics.Complex.Equals#1"
  example:
  - 
  syntax:
    content: public bool Equals(Complex value)
    content.vb: Public Function Equals(value As Complex) As Boolean
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>The complex number to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this complex number and <em>value</em> have the same value; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  implements:
  - System.IEquatable{System.Numerics.Complex}.Equals(System.Numerics.Complex)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.Equals(System.Object)
  commentId: M:System.Numerics.Complex.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Numerics.Complex.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 180
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the current instance and a specified object have the same value. </p>\n"
  remarks: "\n<p>Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The <xref href=\"System.Numerics.Complex.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the following expression:</p>System.Numerics.Complex.Equals#2<p>If the <em>obj</em> parameter is not a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object, but it is a data type for which an implicit conversion is defined, the <xref href=\"System.Numerics.Complex.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method converts <em>obj</em> to a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object whose real part is equal to the value of <em>obj</em> and whose imaginary part is equal to zero before it performs the comparison. The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.</p>System.Numerics.Complex.Equals#6"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object or a type capable of implicit conversion to a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object, and its value is equal to the current <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Exp(System.Numerics.Complex)
  id: Exp(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Exp(Complex)
  fullName: System.Numerics.Complex.Exp(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exp
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 181
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns <strong>e</strong> raised to the power specified by a complex number.</p>\n"
  remarks: "\n<p>Use the <see cref=\"Overload:System.Numerics.Complex.Pow\"></see> method to calculate the powers of other bases.</p>\n<p>The <xref href=\"System.Numerics.Complex.Exp(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Exp(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers. <xref href=\"System.Numerics.Complex.Exp(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> is the inverse of <see cref=\"Overload:System.Numerics.Complex.Log\"></see>.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Exp(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that, with some allowance for the lack of precision of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type, passing the value returned by the <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Exp(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Numerics.Complex.Log#1"
  syntax:
    content: public static Complex Exp(Complex value)
    content.vb: Public Shared Function Exp(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number that specifies a power.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The number <strong>e</strong> raised to the power <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Exp(System.Double)
    commentId: M:System.Math.Exp(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  commentId: M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  id: FromPolarCoordinates(System.Double,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: FromPolarCoordinates(Double, Double)
  fullName: System.Numerics.Complex.FromPolarCoordinates(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromPolarCoordinates
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 182
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Creates a complex number from a point's polar coordinates.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method instantiates a complex number based on its polar coordinates. </p>\n<p>Because there are multiple representations of a point on a complex plane, the return value of the <xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method is normalized. The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>. As a result, the values of the <xref href=\"System.Numerics.Complex.Phase\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> properties of the resulting complex number may not equal the original values of the <em>magnitude</em> and <em>phase</em> parameters.</p>\n<p>To convert a value from degrees to radians for the <em>phase</em> parameter, multiply it by <xref href=\"System.Math.PI\" data-throw-if-not-resolved=\"false\"></xref>/180.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a complex number based on its polar coordinates and then displays the value of its <xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Complex.Phase\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>System.Numerics.Complex.Phase#1"
  syntax:
    content: public static Complex FromPolarCoordinates(double magnitude, double phase)
    content.vb: Public Shared Function FromPolarCoordinates(magnitude As Double, phase As Double) As Complex
    parameters:
    - id: magnitude
      type: System.Double
      description: "\n<p>The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</p>\n"
    - id: phase
      type: System.Double
      description: "\n<p>The phase, which is the angle from the line to the horizontal axis, measured in radians.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Magnitude
    commentId: P:System.Numerics.Complex.Magnitude
  - type: System.Numerics.Complex.Phase
    commentId: P:System.Numerics.Complex.Phase
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.GetHashCode
  commentId: M:System.Numerics.Complex.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Numerics.Complex.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 183
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the hash code for the current <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Complex.Log(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex)
  id: Log(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Log(Complex)
  fullName: System.Numerics.Complex.Log(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 184
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the natural (base <strong>e</strong>) logarithm of a specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Log(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that, with some allowance for the lack of precision of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type, passing the value returned by the <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Exp(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Numerics.Complex.Log#1"
  syntax:
    content: public static Complex Log(Complex value)
    content.vb: Public Shared Function Log(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The natural (base <strong>e</strong>) logarithm of <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Log(System.Double)
    commentId: M:System.Math.Log(System.Double)
  - type: System.Numerics.Complex.Exp(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Exp(System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  id: Log(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Log(Complex, Double)
  fullName: System.Numerics.Complex.Log(System.Numerics.Complex, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 185
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the logarithm of a specified complex number in a specified base.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Log(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Log(Complex value, double baseValue)
    content.vb: Public Shared Function Log(value As Complex, baseValue As Double) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    - id: baseValue
      type: System.Double
      description: "\n<p>The base of the logarithm.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The logarithm of <em>value</em> in base <em>baseValue</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Log10(System.Numerics.Complex)
  id: Log10(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Log10(Complex)
  fullName: System.Numerics.Complex.Log10(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log10
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 186
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the base-10 logarithm of a specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Log10(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Log10(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Log10(Complex value)
    content.vb: Public Shared Function Log10(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The base-10 logarithm of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Complex, Complex)
  fullName: System.Numerics.Complex.Multiply(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 187
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the product of two complex numbers.</p>\n"
  remarks: "\n<p>The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form: </p>\n<p>(ac - bd) + (ad + bc)i</p>\n<p>If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method is implemented for languages that do not support custom operators. Its behavior is identical to multiplication using the multiplication operator.</p>\n"
  example:
  - "\n<p>The following example multiples a complex number by each element in an array of complex numbers.</p>System.Numerics.Complex.Multiply#1"
  syntax:
    content: public static Complex Multiply(Complex left, Complex right)
    content.vb: Public Shared Function Multiply(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The first complex number to multiply.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The second complex number to multiply.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The product of the <em>left</em> and <em>right</em> parameters.</p>\n"
  seealso:
  - type: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Negate(System.Numerics.Complex)
  id: Negate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Negate(Complex)
  fullName: System.Numerics.Complex.Negate(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 188
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the additive inverse of a specified complex number.</p>\n"
  remarks: "\n<p>The additive inverse of a complex number is a complex number that produces a value of <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref> when it is added to the original complex number. This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.</p>\n<p>The <xref href=\"System.Numerics.Complex.Negate(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator, <xref href=\"System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example obtains the additive inverse of each element in an array of complex numbers.</p>System.Numerics.Complex.Negate#1"
  syntax:
    content: public static Complex Negate(Complex value)
    content.vb: Public Shared Function Negate(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The result of the <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Complex.Imaginary\" data-throw-if-not-resolved=\"false\"></xref> components of the <em>value</em> parameter multiplied by -1.</p>\n"
  seealso:
  - type: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Addition(Complex, Complex)
  fullName: System.Numerics.Complex.Addition(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Addition
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 189
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Adds two complex numbers.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the addition operation for complex numbers. It enables code such as the following:</p>System.Numerics.Complex.Add#3<p>The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form: </p><p>(a + c) + (b + d)i</p><p>If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - "\n<p>The following example illustrates addition with complex numbers.</p>System.Numerics.Complex.Add#2"
  syntax:
    content: public static Complex operator +(Complex left, Complex right)
    content.vb: Public Shared Operator +(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The first value to add.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The second value to add.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The sum of <em>left</em> and <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Division(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Division(Complex, Complex)
  fullName: System.Numerics.Complex.Division(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Division
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 190
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Divides a specified complex number by another specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the division operation for complex numbers. It enables code such as the following:</p>System.Numerics.Complex.Divide#2<p>The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:</p><p>((ac + bd) / (c2 + d2)) + ((bc - ad) / (c2 + d2)i</p><p>If the division results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>Languages that do not support custom operators and operator overloading can call the <xref href=\"System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - 
  syntax:
    content: public static Complex operator /(Complex left, Complex right)
    content.vb: Public Shared Operator /(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The value to be divided.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The value to divide by.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The result of dividing <em>left</em> by <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Equality(Complex, Complex)
  fullName: System.Numerics.Complex.Equality(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 191
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether two complex numbers are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.Complex.Equals#9<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.Complex.Equals(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p><p>Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The <xref href=\"System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the following expression:</p>System.Numerics.Complex.Equals#3<p>Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal. For more information and a possible workaround, see the <xref href=\"System.Numerics.Complex.Equals(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>"
  example:
  - 
  syntax:
    content: public static bool operator ==(Complex left, Complex right)
    content.vb: Public Shared Operator =(left As Complex, right As Complex) As Boolean
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The first complex number to compare.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The second complex number to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  id: op_Explicit(System.Decimal)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Complex)
  fullName: System.Numerics.Complex.Explicit(System.Decimal to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 192
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a complex number.</p>\n"
  remarks: "\n<p>Explicit conversion operators define types that can be converted to a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>The conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to the real part of a complex number can result in a loss of precision because a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, which is the type of the complex number's <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> property, has fewer significant digits than a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example illustrates the explicit conversion of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numerics.Complex.Explicit#1"
  syntax:
    content: public static explicit operator Complex(decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Complex
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Narrowing(System.Decimal to System.Numerics.Complex)
  name.vb: Narrowing(Decimal to Complex)
- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  id: op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Complex)
  fullName: System.Numerics.Complex.Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 193
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to a complex number. </p>\n"
  remarks: "\n<p>Explicit conversion operators define types that can be converted to a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>The conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to the real part of a complex number can result in a loss of precision because a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, which is the type of the complex number's <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> property, has fewer significant digits than a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If the conversion is unsuccessful because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is out of the range of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> type, the operation does not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. Instead, if <em>value</em> is less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the result is a complex number that has a <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> property value equal to <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, the result is a complex number that has a <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> property value equal to <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example illustrates the explicit conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numerics.Complex.Explicit#2"
  syntax:
    content: public static explicit operator Complex(BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Complex
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Narrowing(System.Numerics.BigInteger to System.Numerics.Complex)
  name.vb: Narrowing(BigInteger to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  id: op_Implicit(System.Byte)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Byte to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Byte to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 194
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of an unsigned byte to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the byte value and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#1"
  example:
  - 
  syntax:
    content: public static implicit operator Complex(byte value)
    content.vb: Public Shared Widening Operator CType(value As Byte) As Complex
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Byte to System.Numerics.Complex)
  name.vb: Widening(Byte to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  id: op_Implicit(System.Double)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Double to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Double to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 195
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a double-precision floating-point number to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#2"
  example:
  - 
  syntax:
    content: public static implicit operator Complex(double value)
    content.vb: Public Shared Widening Operator CType(value As Double) As Complex
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Double to System.Numerics.Complex)
  name.vb: Widening(Double to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  id: op_Implicit(System.Int16)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Int16 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 196
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 16-bit signed integer to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a signed 16-bit integer to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the signed 16-bit integer and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#3"
  example:
  - 
  syntax:
    content: public static implicit operator Complex(short value)
    content.vb: Public Shared Widening Operator CType(value As Short) As Complex
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Int16 to System.Numerics.Complex)
  name.vb: Widening(Int16 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  id: op_Implicit(System.Int32)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Int32 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 197
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 32-bit signed integer to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a signed 32-bit integer to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the signed 32-bit integer and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#4"
  example:
  - 
  syntax:
    content: public static implicit operator Complex(int value)
    content.vb: Public Shared Widening Operator CType(value As Integer) As Complex
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Int32 to System.Numerics.Complex)
  name.vb: Widening(Int32 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  id: op_Implicit(System.Int64)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Int64 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 198
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 64-bit signed integer to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a signed 64-bit integer to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the signed 64-bit integer and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#5"
  example:
  - 
  syntax:
    content: public static implicit operator Complex(long value)
    content.vb: Public Shared Widening Operator CType(value As Long) As Complex
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Int64 to System.Numerics.Complex)
  name.vb: Widening(Int64 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  id: op_Implicit(System.SByte)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(SByte to Complex)
  fullName: System.Numerics.Complex.Implicit(System.SByte to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 199
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a signed byte to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a signed byte to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the signed byte value and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#6"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator Complex(sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As SByte) As Complex
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.SByte to System.Numerics.Complex)
  name.vb: Widening(SByte to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  id: op_Implicit(System.Single)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Single to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Single to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 201
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a single-precision floating-point number to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#7"
  example:
  - 
  syntax:
    content: public static implicit operator Complex(float value)
    content.vb: Public Shared Widening Operator CType(value As Single) As Complex
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Single to System.Numerics.Complex)
  name.vb: Widening(Single to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  id: op_Implicit(System.UInt16)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(UInt16 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.UInt16 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 202
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from an unsigned 16-bit integer to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the unsigned 16-bit integer and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#8"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator Complex(ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As UShort) As Complex
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.UInt16 to System.Numerics.Complex)
  name.vb: Widening(UInt16 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  id: op_Implicit(System.UInt32)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(UInt32 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.UInt32 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 204
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from an unsigned 32-bit integer to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the unsigned 32-bit integer and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#9"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator Complex(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As UInteger) As Complex
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.UInt32 to System.Numerics.Complex)
  name.vb: Widening(UInt32 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  id: op_Implicit(System.UInt64)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.UInt64 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 206
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</p>\n"
  remarks: "\n<p>The overloads of the <see cref=\"Overload:System.Numerics.Complex.op_Implicit\"></see> operator define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload lets the compiler handle conversions from an unsigned 64-bit integer to a complex number, as the following example shows. Note that the result of the conversion is a complex number whose real part is equal to the unsigned 64-bit integer and whose imaginary part is equal to zero.</p>System.Numerics.Complex.Implicit#10"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator Complex(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As ULong) As Complex
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The value to convert to a complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.UInt64 to System.Numerics.Complex)
  name.vb: Widening(UInt64 to Complex)
- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Inequality(Complex, Complex)
  fullName: System.Numerics.Complex.Inequality(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 208
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether two complex numbers are not equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for complex numbers. It enables code such as the following: </p>System.Numerics.Complex.Inequality#1<p>Languages that do not support custom operators can test for inequality by calling the <xref href=\"System.Numerics.Complex.Equals(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value.</p><p>Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal. One possible workaround is to implement a comparison method that returns <strong>true</strong> only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers). For more information, see the <xref href=\"System.Numerics.Complex.Equals(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>"
  example:
  - 
  syntax:
    content: public static bool operator !=(Complex left, Complex right)
    content.vb: Public Shared Operator <>(left As Complex, right As Complex) As Boolean
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Complex, Complex)
  fullName: System.Numerics.Complex.Multiply(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Multiply
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 209
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Multiplies two specified complex numbers.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the multiplication operator for complex numbers. It enables code such as the following:</p>System.Numerics.Complex.Multiply#2<p>The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form: </p><p>(ac - bd) + (ad + bc)i</p><p>If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - 
  syntax:
    content: public static Complex operator *(Complex left, Complex right)
    content.vb: Public Shared Operator *(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The first value to multiply.</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The second value to multiply.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The product of <em>left</em> and <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Subtraction(Complex, Complex)
  fullName: System.Numerics.Complex.Subtraction(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Subtraction
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 210
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Subtracts a complex number from another complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the subtraction operator for complex numbers. It enables code such as the following:</p>System.Numerics.Complex.Subtract#2<p>If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form: </p><p>(a - c) + (b - d)i</p><p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - 
  syntax:
    content: public static Complex operator -(Complex left, Complex right)
    content.vb: Public Shared Operator -(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The value to subtract from (the minuend).</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The value to subtract (the subtrahend).</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  id: op_UnaryNegation(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: UnaryNegation(Complex)
  fullName: System.Numerics.Complex.UnaryNegation(System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryNegation
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 211
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the additive inverse of a specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the unary negation (additive inverse) operator for complex numbers. It enables code such as the following: </p>System.Numerics.Complex.Negate#2<p>The resulting complex number produces a value of <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref> 0 (zero) when it is added to the original complex number. Languages that do not support custom operators can call the <xref href=\"System.Numerics.Complex.Negate(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - 
  syntax:
    content: public static Complex operator -(Complex value)
    content.vb: Public Shared Operator -(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>The value to negate.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The result of the <xref href=\"System.Numerics.Complex.Real\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Complex.Imaginary\" data-throw-if-not-resolved=\"false\"></xref> components of the <em>value</em> parameter multiplied by -1.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Negate(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Negate(System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  id: Pow(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Pow(Complex, Double)
  fullName: System.Numerics.Complex.Pow(System.Numerics.Complex, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pow
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 212
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a specified complex number raised to a power specified by a double-precision floating-point number.</p>\n"
  remarks: "\n<p>If <em>value</em> is <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref>, the method returns <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref>. For other values, if <em>power</em> is 0, the method returns <xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref>, and if <em>power</em> is 1, it returns <em>value</em>. </p>\n<p>This method corresponds to the <xref href=\"System.Math.Pow(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for primitive numeric types.</p>\n"
  example:
  - "\n<p>The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.</p>System.Numerics.Complex.Pow#1"
  syntax:
    content: public static Complex Pow(Complex value, double power)
    content.vb: Public Shared Function Pow(value As Complex, power As Double) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number to be raised to a power.</p>\n"
    - id: power
      type: System.Double
      description: "\n<p>A double-precision floating-point number that specifies a power.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The complex number <em>value</em> raised to the power <em>power</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  id: Pow(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Pow(Complex, Complex)
  fullName: System.Numerics.Complex.Pow(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pow
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 213
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a specified complex number raised to a power specified by a complex number.</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Pow(Complex value, Complex power)
    content.vb: Public Shared Function Pow(value As Complex, power As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number to be raised to a power.</p>\n"
    - id: power
      type: System.Numerics.Complex
      description: "\n<p>A complex number that specifies a power.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The complex number <em>value</em> raised to the power <em>power</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  id: Reciprocal(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Reciprocal(Complex)
  fullName: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reciprocal
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 214
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the multiplicative inverse of a complex number.</p>\n"
  remarks: "\n<p>The reciprocal, or multiplicative inverse, of a number x is a number y where x multiplied by y yields 1. The reciprocal of a complex number is the complex number that produces <xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref> when the two numbers are multiplied. If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a2+b2) + -b/(a2 + b2).</p>\n<p>If value is <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref>, the method returns <xref href=\"System.Numerics.Complex.Zero\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, it returns the result of the expression <xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref>/<em>value</em>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.Complex.Reciprocal(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate the reciprocal values of several complex numbers. It also demonstrates that the result of multiplying a complex number by its reciprocal is <xref href=\"System.Numerics.Complex.One\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Numerics.Complex.Reciprocal#1"
  syntax:
    content: public static Complex Reciprocal(Complex value)
    content.vb: Public Shared Function Reciprocal(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The reciprocal of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)
  id: Sin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Sin(Complex)
  fullName: System.Numerics.Complex.Sin(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sin
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 215
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the sine of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Sin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Sin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula to calculate the sine of the complex number a + bi:</p>\n<p>(<xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Cosh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b), <xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Sinh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b))</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Sin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that passing the value returned by the <xref href=\"System.Numerics.Complex.Asin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Sin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numerics.Complex.Asin#1"
  syntax:
    content: public static Complex Sin(Complex value)
    content.vb: Public Shared Function Sin(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The sine of <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Asin(System.Double)
    commentId: M:System.Math.Asin(System.Double)
  - type: System.Numerics.Complex.Sin(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sinh(System.Numerics.Complex)
  id: Sinh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Sinh(Complex)
  fullName: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sinh
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 216
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the hyperbolic sine of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Sinh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Sinh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Sinh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:</p>\n<p>(<xref href=\"System.Math.Sinh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Cos(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b), <xref href=\"System.Math.Cosh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(a) * <xref href=\"System.Math.Sin(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(b))</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Sinh(Complex value)
    content.vb: Public Shared Function Sinh(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The hyperbolic sine of <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Sinh(System.Double)
    commentId: M:System.Math.Sinh(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  id: Sqrt(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Sqrt(Complex)
  fullName: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sqrt
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 217
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the square root of a specified complex number.</p>\n"
  remarks: "\n<p>The square root of the complex number <em>value</em> is calculated by using the following formula:</p>\n<p>\n<xref href=\"System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(<xref href=\"System.Math.Sqrt(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>(<em>value</em>.<xref href=\"System.Numerics.Complex.Magnitude\" data-throw-if-not-resolved=\"false\"></xref>), <em>value</em>.<xref href=\"System.Numerics.Complex.Phase\" data-throw-if-not-resolved=\"false\"></xref>/2.0)</p>\n<p>The <xref href=\"System.Numerics.Complex.Sqrt(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Sqrt(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Sqrt(Complex value)
    content.vb: Public Shared Function Sqrt(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The square root of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  id: Subtract(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Subtract(Complex, Complex)
  fullName: System.Numerics.Complex.Subtract(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 218
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Subtracts one complex number from another and returns the result.</p>\n"
  remarks: "\n<p>The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form: </p>\n<p>(a - c) + (b - d)i</p>\n<p>If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Languages that do not support custom operators can use the <xref href=\"System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to perform subtraction using complex numbers.</p>\n"
  example:
  - "\n<p>The following example subtracts each complex number in an array from a complex number.</p>System.Numerics.Complex.Subtract#1"
  syntax:
    content: public static Complex Subtract(Complex left, Complex right)
    content.vb: Public Shared Function Subtract(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: "\n<p>The value to subtract from (the minuend).</p>\n"
    - id: right
      type: System.Numerics.Complex
      description: "\n<p>The value to subtract (the subtrahend).</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Tan(System.Numerics.Complex)
  id: Tan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Tan(Complex)
  fullName: System.Numerics.Complex.Tan(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 219
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the tangent of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Tan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Tan(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Tan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula to calculate the tangent of the complex number <em>value</em>:</p>\n<p>\n<xref href=\"System.Numerics.Complex.Sin(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<em>value</em>) / <xref href=\"System.Numerics.Complex.Cos(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<em>value</em>)</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.Numerics.Complex.Tan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method. It shows that passing the value returned by the <xref href=\"System.Numerics.Complex.Atan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method to the <xref href=\"System.Numerics.Complex.Tan(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method returns the original <xref href=\"System.Numerics.Complex\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numerics.Complex.Atan#1"
  syntax:
    content: public static Complex Tan(Complex value)
    content.vb: Public Shared Function Tan(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The tangent of <em>value</em>.</p>\n"
  seealso:
  - type: System.Numerics.Complex.Atan(System.Numerics.Complex)
    commentId: M:System.Numerics.Complex.Atan(System.Numerics.Complex)
  - type: System.Math.Tan(System.Double)
    commentId: M:System.Math.Tan(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Tanh(System.Numerics.Complex)
  id: Tanh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Tanh(Complex)
  fullName: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tanh
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 220
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the hyperbolic tangent of the specified complex number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Complex.Tanh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method for complex numbers corresponds to the <xref href=\"System.Math.Tanh(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for real numbers.</p>\n<p>The <xref href=\"System.Numerics.Complex.Tanh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref> method uses the following formula to calculate the hyperbolic tangent of the complex number <em>value</em>:</p>\n<p>\n<xref href=\"System.Numerics.Complex.Sinh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<em>value</em>) / <xref href=\"System.Numerics.Complex.Cosh(System.Numerics.Complex)\" data-throw-if-not-resolved=\"false\"></xref>(<em>value</em>)</p>\n"
  example:
  - 
  syntax:
    content: public static Complex Tanh(Complex value)
    content.vb: Public Shared Function Tanh(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: "\n<p>A complex number.</p>\n"
    return:
      type: System.Numerics.Complex
      description: "\n<p>The hyperbolic tangent of <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Tanh(System.Double)
    commentId: M:System.Math.Tanh(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.ToString
  commentId: M:System.Numerics.Complex.ToString
  id: ToString
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Numerics.Complex.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 221
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form.</p>\n"
  remarks: "\n<p>The default string representation of a complex number displays the number using its Cartesian coordinates in the form <code>(</code>a<code>, </code>b<code>)</code>, where a is the real part of the complex number, and b is its imaginary part. Both a and b are formatted using the general format specifier (\"G\") and the conventions of the current system culture.</p>\n"
  example:
  - "\n<p>The following example displays the string representation of several complex numbers. The output uses the formatting conventions of the English - United States (\"en-US\") culture, which, in this case, is the current system culture.</p>System.Numerics.Complex.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the current instance in Cartesian form.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Complex.ToString(System.IFormatProvider)
  commentId: M:System.Numerics.Complex.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.Numerics.Complex.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 222
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form <code>(</code>a<code>, </code>b<code>)</code>, where a is the real part of the complex number, and b is its imaginary part. Both a and b are formatted using the general format specifier (\"G\") and the conventions of the culture defined by <em>provider</em>. </p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string. If <em>provider</em> is <strong>null</strong>, the returned string is formatted using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the current culture. </p>\n<p>The <em>provider</em> parameter can be one of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information </p>\n</li><li>\n<p>The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that supplies formatting information.</p>\n</li><li>\n<p>A custom object that implements the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> interface. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that supplies formatting information.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example displays the string representation of several complex numbers. The result uses the formatting conventions of the English - United States (\"en-US\") and French - France (\"fr-FR\") cultures.</p>System.Numerics.Complex.ToString#2"
  syntax:
    content: public string ToString(IFormatProvider provider)
    content.vb: Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the current instance in Cartesian form, as specified by <em>provider</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.ToString(System.String)
  commentId: M:System.Numerics.Complex.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Numerics.Complex.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 223
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</p>\n"
  remarks: "\n<p>The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form <code>(</code>a<code>, </code>b<code>)</code>, where a is the real part of the complex number, and b is its imaginary part. Both a and b are formatted using the format string specified by <em>format</em>. The <em>format</em> parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If <em>format</em> is equal to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or is <strong>null</strong>, the real and imaginary parts of the complex number are formatted with the general format specifier (\"G\"). If <em>format</em> is any other value, the method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</p>\n<ul><li>\n<p>For more information about numeric format strings, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting in the .NET Framework, see Formatting Types in the .NET Framework.</p>\n</li></ul>\n<p>The format of the returned string is determined by the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture. Depending on the <em>format</em> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref href=\"System.Numerics.Complex.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  example:
  - "\n<p>The following example initializes a complex number and displays it using several standard format strings.</p>System.Numerics.Complex.ToString#3"
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A standard or custom numeric format string.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the current instance in Cartesian form.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid format string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  fullName: System.Numerics.Complex.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 224
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</p>\n"
  remarks: "\n<p>The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form <code>(</code>a<code>, </code>b<code>)</code>, where a is the real part of the complex number, and b is its imaginary part. Both a and b are formatted using the format string specified by <em>format</em>. The <em>format</em> parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If <em>format</em> is equal to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or is <strong>null</strong>, the real and imaginary parts of the complex number are formatted with the general format specifier (\"G\"). If <em>format</em> is any other value, the method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</p>\n<ul><li>\n<p>For more information about numeric format strings, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting in the .NET Framework, see Formatting Types in the .NET Framework.</p>\n</li></ul>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string. Depending on the <em>format</em> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. If <em>provider</em> is <strong>null</strong>, the returned string is formatted using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the current culture.</p>\n<p>The <em>provider</em> parameter can be one of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information </p>\n</li><li>\n<p>The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that supplies formatting information.</p>\n</li><li>\n<p>A custom object that implements the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> interface. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that supplies formatting information.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates an array of complex numbers, and displays each using several standard format strings as well as <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the English - United States (\"en-US\") and French - France (\"fr-FR\") cultures.</p>System.Numerics.Complex.ToString#4"
  syntax:
    content: public string ToString(string format, IFormatProvider provider)
    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A standard or custom numeric format string.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the current instance in Cartesian form, as specified by <em>format</em> and <em>provider</em>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid format string.</p>\n"
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Numerics
  isExternal: false
  name: System.Numerics
  fullName: System.Numerics
- uid: System.IEquatable{System.Numerics.Complex}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Complex>
  fullName: System.IEquatable<System.Numerics.Complex>
  fullname.vb: System.IEquatable(Of System.Numerics.Complex)
  name.vb: IEquatable(Of Complex)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.Complex
    name: Complex
    fullName: System.Numerics.Complex
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.Complex
    name: Complex
    fullName: System.Numerics.Complex
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Numerics.Complex
  parent: System.Numerics
  isExternal: false
  name: Complex
  fullName: System.Numerics.Complex
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.IEquatable{System.Numerics.Complex}.Equals(System.Numerics.Complex)
  parent: System.IEquatable{System.Numerics.Complex}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Complex)
  fullName: System.IEquatable<System.Numerics.Complex>.Equals(System.Numerics.Complex)
  fullname.vb: System.IEquatable(Of System.Numerics.Complex).Equals(System.Numerics.Complex)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Numerics.Complex>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.Complex
    name: Complex
    fullName: System.Numerics.Complex
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Numerics.Complex).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.Complex
    name: Complex
    fullName: System.Numerics.Complex
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
