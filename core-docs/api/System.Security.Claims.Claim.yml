items:
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  id: Claim
  parent: System.Security.Claims
  children:
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.Clone
  - System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.CustomSerializationData
  - System.Security.Claims.Claim.Issuer
  - System.Security.Claims.Claim.OriginalIssuer
  - System.Security.Claims.Claim.Properties
  - System.Security.Claims.Claim.Subject
  - System.Security.Claims.Claim.ToString
  - System.Security.Claims.Claim.Type
  - System.Security.Claims.Claim.Value
  - System.Security.Claims.Claim.ValueType
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  - vb
  name: Claim
  fullName: System.Security.Claims.Claim
  type: Class
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claim
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 15
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Represents a claim.</p>\n"
  remarks: "\n<p>A claim is a statement about a subject by an issuer. Claims represent attributes of the subject that are useful in the context of authentication and authorization operations. Subjects and issuers are both entities that are part of an identity scenario. Some typical examples of a subject are: a user, an application or service, a device, or a computer. Some typical examples of an issuer are: the operating system, an application. a service, a role provider, an identity provider, or a federation provider. An issuer delivers claims by issuing security tokens, typically through a Security Token Service (STS). (In WIF, you can build an STS by deriving from the <xref href=\"System.IdentityModel.SecurityTokenService\" data-throw-if-not-resolved=\"false\"></xref> class.) On occasion, the collection of claims received from an issuer can be extended by subject attributes stored directly at the resource. A claim can be evaluated to determine access rights to data and other secured resources during the process of authorization and can also be used to make or express authentication decisions about a subject.</p>\n<p>Beginning with .NET 4.5, the Windows Identity Foundation (WIF) classes, which implement claims-based identity, have been fully integrated into the .NET Framework. The claims concept is implemented by the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The following describes important properties of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class:</p>\n<ul><li>\n<p>The <xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref> property is a string (typically a URI) that contains the semantic information about the claim; it tells you what the value of the claim means. For example, a claim with a claim type of <xref href=\"System.Security.Claims.ClaimTypes.GivenName\" data-throw-if-not-resolved=\"false\"></xref> (“http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname”) represents a user’s first name. The value of the <xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref> property can be one of the well-known claim types defined in the <xref href=\"System.Security.Claims.ClaimTypes\" data-throw-if-not-resolved=\"false\"></xref> class, or it can be an arbitrary URI as defined by the issuer. For example, a claim type of “urn:spendinglimit” might represent a user attribute which makes sense within the business context of the issuer.</p>\n</li><li>\n<p>The <xref href=\"System.Security.Claims.Claim.Value\" data-throw-if-not-resolved=\"false\"></xref> property contains the value of the claim. In order to reduce dependencies and simplify administration, in WIF the value of a claim is represented only as a string. For more complex value types, it is recommended that you use standard XML schema types to indicate how the value is meant to be serialized into and deserialized from a string.</p>\n</li><li>\n<p>The <xref href=\"System.Security.Claims.Claim.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property contains a string that identifies the type information for the value. This property should be used to understand the format of the value and to provide information about how to deserialize it. If your solution requires complex value types, it is recommended that you use standard XML schema types in the <xref href=\"System.Security.Claims.Claim.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property to indicate how the <xref href=\"System.Security.Claims.Claim.Value\" data-throw-if-not-resolved=\"false\"></xref> property is meant to be serialized into and deserialized from a string. </p>\n</li><li>\n<p>The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property is a <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the subject of the claim. The subject of the claim is the entity (typically the user who is requesting access to a resource) about which the claim is asserted. The <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> contains, among its properties, a collection of claims that describe the properties and attributes of the subject as attested to by one or more issuers.</p>\n</li><li>\n<p>The <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property contains the name of the entity that issued the claim. The issuer of a claim is represented in WIF by a string that contains a name taken from a list of well-known issuers that is maintained by the issuer name registry. The issuer name registry is an instance of a class that derives from the <xref href=\"System.IdentityModel.Tokens.IssuerNameRegistry\" data-throw-if-not-resolved=\"false\"></xref> class. The issuer name registry associates a mnemonic name to the cryptographic material needed to verify the signatures of tokens produced by the corresponding issuer. For example, the <xref href=\"System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry\" data-throw-if-not-resolved=\"false\"></xref> class, available out of the box with .NET 4.5, associates the mnemonic name for each issuer with its corresponding X.509 certificate. The list of well-known issuers is typically built at startup time by the issuer name registry. The list used by the <xref href=\"System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry\" data-throw-if-not-resolved=\"false\"></xref> is specified in the application configuration file. </p>\n</li><li>\n<p>The <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property contains the name of the entity that originally issued the claim. This property is designed to facilitate scenarios where a claim may pass through multiple issuers before it is presented by the client to the RP application; such as federation scenarios. You can examine the <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property to determine the entity that originally issued the claim. The name is taken from the list of well-known issuers maintained by the issuer name registry, as in the case of the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example extracts the claims associated to the authenticated user performing an HTTP request and writes them in the HTTP response. The current user is read from the <xref href=\"System.Web.HttpContext\" data-throw-if-not-resolved=\"false\"></xref> as a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> and the claims are read from it. The claims are then written to HTTP the response. </p>\n<pre><code class=\"c#\">ClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;\nif (null != principal)\n{\nforeach (Claim claim in principal.Claims)\n{\nResponse.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");\n}\n\n}</code></pre>\n"
  syntax:
    content: 'public class Claim : object'
    content.vb: >-
      Public Class Claim
          Inherits Object
  seealso:
  - type: System.Security.Claims.ClaimsIdentity
    commentId: T:System.Security.Claims.ClaimsIdentity
  - type: System.Security.Claims.ClaimsPrincipal
    commentId: T:System.Security.Claims.ClaimsPrincipal
  - type: System.IdentityModel.Tokens.IssuerNameRegistry
    commentId: T:System.IdentityModel.Tokens.IssuerNameRegistry
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(IO.BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(System.IO.BinaryReader)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 12
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public Claim(IO.BinaryReader reader)
    content.vb: Public Sub New(reader As IO.BinaryReader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(IO.BinaryReader, ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(System.IO.BinaryReader, System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 13
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified reader, and subject.</p>\n"
  syntax:
    content: public Claim(IO.BinaryReader reader, ClaimsIdentity subject)
    content.vb: Public Sub New(reader As IO.BinaryReader, subject As ClaimsIdentity)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p>The binary reader.</p>\n"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The subject that this claim describes.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  id: '#ctor(System.Security.Claims.Claim)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(System.Security.Claims.Claim)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 202
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected Claim(Claim other)
    content.vb: Protected Sub New(other As Claim)
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: the <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref> to copy.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(Claim, ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(System.Security.Claims.Claim, System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 214
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified security claim, and subject.</p>\n"
  syntax:
    content: protected Claim(Claim other, ClaimsIdentity subject)
    content.vb: Protected Sub New(other As Claim, subject As ClaimsIdentity)
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: the <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref> to copy.
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: the <xref href="System.Security.Claims.ClaimsIdentity" data-throw-if-not-resolved="false"></xref> to assign to <xref href="System.Security.Claims.Claim.Subject" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 80
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, and value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>null</strong>. The <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> properties are set to <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultIssuer\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Security.Claims.Claim.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Security.Claims.ClaimValueTypes.String\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  syntax:
    content: public Claim(string type, string value)
    content.vb: Public Sub New(type As String, value As String)
    parameters:
    - id: type
      type: System.String
      description: The claim type.
    - id: value
      type: System.String
      description: The claim value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 100
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, and value type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>null</strong>. The <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> properties are set to <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultIssuer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType)
    content.vb: Public Sub New(type As String, value As String, valueType As String)
    parameters:
    - id: type
      type: System.String
      description: The claim type.
    - id: value
      type: System.String
      description: The claim value.
    - id: valueType
      type: System.String
      description: The claim value type.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 120
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, value type, and issuer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>null</strong>. The <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property is set according to the value of the <em>issuer</em> parameter.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType, string issuer)
    content.vb: Public Sub New(type As String, value As String, valueType As String, issuer As String)
    parameters:
    - id: type
      type: System.String
      description: The claim type.
    - id: value
      type: System.String
      description: The claim value.
    - id: valueType
      type: System.String
      description: The claim value type. If this parameter is empty or null, then <xref href="System.Security.Claims.ClaimValueTypes.String" data-throw-if-not-resolved="false"></xref> is used.
    - id: issuer
      type: System.String
      description: The claim issuer. If this parameter is empty or null, then <xref href="System.Security.Claims.ClaimsIdentity.DefaultIssuer" data-throw-if-not-resolved="false"></xref> is used.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String, String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 140
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, value type, issuer,  and original issuer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>null</strong>.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType, string issuer, string originalIssuer)
    content.vb: Public Sub New(type As String, value As String, valueType As String, issuer As String, originalIssuer As String)
    parameters:
    - id: type
      type: System.String
      description: The claim type.
    - id: value
      type: System.String
      description: The claim value.
    - id: valueType
      type: System.String
      description: The claim value type. If this parameter is null, then <xref href="System.Security.Claims.ClaimValueTypes.String" data-throw-if-not-resolved="false"></xref> is used.
    - id: issuer
      type: System.String
      description: The claim issuer. If this parameter is empty or null, then <xref href="System.Security.Claims.ClaimsIdentity.DefaultIssuer" data-throw-if-not-resolved="false"></xref> is used.
    - id: originalIssuer
      type: System.String
      description: The original issuer of this claim. If this parameter is empty or null, then orignalIssuer == issuer.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String, String, String, ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String, System.String, System.String, System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 158
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, value type, issuer, original issuer and subject.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType, string issuer, string originalIssuer, ClaimsIdentity subject)
    content.vb: Public Sub New(type As String, value As String, valueType As String, issuer As String, originalIssuer As String, subject As ClaimsIdentity)
    parameters:
    - id: type
      type: System.String
      description: The claim type.
    - id: value
      type: System.String
      description: The claim value.
    - id: valueType
      type: System.String
      description: The claim value type. If this parameter is null, then <xref href="System.Security.Claims.ClaimValueTypes.String" data-throw-if-not-resolved="false"></xref> is used.
    - id: issuer
      type: System.String
      description: The claim issuer. If this parameter is empty or null, then <xref href="System.Security.Claims.ClaimsIdentity.DefaultIssuer" data-throw-if-not-resolved="false"></xref> is used.
    - id: originalIssuer
      type: System.String
      description: The original issuer of this claim. If this parameter is empty or null, then orignalIssuer == issuer.
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: The subject that this claim describes.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.Claim.CustomSerializationData
  commentId: P:System.Security.Claims.Claim.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomSerializationData
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 239
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()
    parameters: []
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.Claim.Issuer
  commentId: P:System.Security.Claims.Claim.Issuer
  id: Issuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Issuer
  fullName: System.Security.Claims.Claim.Issuer
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Issuer
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 250
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the issuer of the claim.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property is a name that is taken from a list of well-known issuers maintained by the issuer name registry. The issuer name registry is an instance of a class that derives from the <xref href=\"System.IdentityModel.Tokens.IssuerNameRegistry\" data-throw-if-not-resolved=\"false\"></xref> class. The issuer name registry associates a mnemonic name (the issuer name) with the cryptographic material that is needed to verify signatures of tokens produced by the issuer; for example, an X.509 certificate.</p>\n"
  syntax:
    content: public string Issuer { get; }
    content.vb: Public ReadOnly Property Issuer As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Security.Claims.Claim.OriginalIssuer
    commentId: P:System.Security.Claims.Claim.OriginalIssuer
  - type: System.IdentityModel.Tokens.IssuerNameRegistry
    commentId: T:System.IdentityModel.Tokens.IssuerNameRegistry
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.OriginalIssuer
  commentId: P:System.Security.Claims.Claim.OriginalIssuer
  id: OriginalIssuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OriginalIssuer
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 263
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the original issuer of the claim. </p>\n"
  remarks: "\n<p>Contains the name of the entity that originally issued the claim. This property is designed to facilitate scenarios where a claim may pass through multiple issuers before it is presented by the client to the RP application; such as federation scenarios.</p>\n<p>The value of the <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property is a name that is taken from a list of well-known issuers maintained by the issuer name registry. The issuer name registry is an instance of a class that derives from the <xref href=\"System.IdentityModel.Tokens.IssuerNameRegistry\" data-throw-if-not-resolved=\"false\"></xref> class. The issuer name registry associates a mnemonic name (the issuer name) with the cryptographic material that is needed to verify signatures of tokens produced by the issuer; for example, an X.509 certificate.</p>\n<p>Except for delegation and federation scenarios, the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property will usually have the same value. If the value of the <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property differs from the value of the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property, the claim was first issued by the original issuer and was subsequently re-issued by the issuer.</p>\n"
  syntax:
    content: public string OriginalIssuer { get; }
    content.vb: Public ReadOnly Property OriginalIssuer As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Security.Claims.Claim.Issuer
    commentId: P:System.Security.Claims.Claim.Issuer
  - type: System.IdentityModel.Tokens.IssuerNameRegistry
    commentId: T:System.IdentityModel.Tokens.IssuerNameRegistry
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.Properties
  commentId: P:System.Security.Claims.Claim.Properties
  id: Properties
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Properties
  fullName: System.Security.Claims.Claim.Properties
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Properties
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 271
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a dictionary that contains additional properties associated with this claim.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.Properties\" data-throw-if-not-resolved=\"false\"></xref> property provides a dictionary of name-value pairs that allows metadata or other information about the claim to be associated with it. For claims generated from SAML tokens, this dictionary may contain keys given by the constants in the <xref href=\"System.Security.Claims.ClaimProperties\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public IDictionary<string, string> Properties { get; }
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, String)
    parameters: []
    return:
      type: IDictionary{System.String,System.String}
  seealso:
  - type: System.Security.Claims.ClaimProperties
    commentId: T:System.Security.Claims.ClaimProperties
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.Subject
  commentId: P:System.Security.Claims.Claim.Subject
  id: Subject
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Subject
  fullName: System.Security.Claims.Claim.Subject
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subject
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 282
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the subject of the claim.</p>\n"
  remarks: "\n<p>The subject is the entity about which the claim is asserted. Some typical examples are a user, an application or service, a device, or a computer. The subject is represented by a <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, which contains a collection of claims that describe it.</p>\n"
  syntax:
    content: public ClaimsIdentity Subject { get; }
    content.vb: Public ReadOnly Property Subject As ClaimsIdentity
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.Type
  commentId: P:System.Security.Claims.Claim.Type
  id: Type
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Security.Claims.Claim.Type
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 292
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claim type of the claim.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref> property provides the semantic content of the claim, that is, it states what the claim is about. For example, a claim with a claim type of <xref href=\"System.Security.Claims.ClaimTypes.GivenName\" data-throw-if-not-resolved=\"false\"></xref> (“http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname”) represents a user’s first name. The claim type is typically a URI; however, you are not limited to any specific format other than that it must be representable as a string. The only general requirement is that the claim issuer and the claim consumer must agree about the meaning of the claim. Constants for the well-known claim types used by Windows Identity Foundation (WIF) are available through the <xref href=\"System.Security.Claims.ClaimTypes\" data-throw-if-not-resolved=\"false\"></xref> class. The claim value is provided by the <xref href=\"System.Security.Claims.Claim.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public string Type { get; }
    content.vb: Public ReadOnly Property Type As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.Value
  commentId: P:System.Security.Claims.Claim.Value
  id: Value
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Security.Claims.Claim.Value
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 300
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the value of the claim.</p>\n"
  remarks: "\n<p>The value of a claim is represented only as a string. For more complex value types, it is recommended that you use standard XML schema types to indicate how the value is meant to be serialized and deserialized to and from a string. </p>\n<p>The <xref href=\"System.Security.Claims.Claim.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property provides the underlying syntactic type information about the value. The <xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref> property provides the semantic information about the value; that is, it provides the meaning of the value and tells a claim consumer how to interpret it.</p>\n"
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Security.Claims.Claim.ValueType
    commentId: P:System.Security.Claims.Claim.ValueType
  - type: System.Security.Claims.Claim.Type
    commentId: P:System.Security.Claims.Claim.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.ValueType
  commentId: P:System.Security.Claims.Claim.ValueType
  id: ValueType
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: ValueType
  fullName: System.Security.Claims.Claim.ValueType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueType
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 309
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the value type of the claim.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.Claim.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property contains a string that identifies the type information of the value. This property can be used to understand the format of the value and to provide information about how to serialize and deserialize the value. If your solution requires complex value types, it is recommended that you use standard XML schema types in the <xref href=\"System.Security.Claims.Claim.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property to indicate how the <xref href=\"System.Security.Claims.Claim.Value\" data-throw-if-not-resolved=\"false\"></xref> property is meant to be serialized and deserialized from a string.</p>\n"
  syntax:
    content: public string ValueType { get; }
    content.vb: Public ReadOnly Property ValueType As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Security.Claims.Claim.Value
    commentId: P:System.Security.Claims.Claim.Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.Claim.Clone
  commentId: M:System.Security.Claims.Claim.Clone
  id: Clone
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Claims.Claim.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 317
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a new <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object copied from this object. The new claim does not have a subject.</p>\n"
  remarks: "\n<p>This is a shallow copy operation. The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property of the new <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object is set to <strong>null</strong>.</p>\n"
  syntax:
    content: public virtual Claim Clone()
    content.vb: Public Overridable Function Clone As Claim
    return:
      type: System.Security.Claims.Claim
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  id: Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 327
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a new <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object copied from this object. The subject of the new claim is set to the specified ClaimsIdentity.</p>\n"
  remarks: "\n<p>This is a shallow copy operation. The <xref href=\"System.Security.Claims.Claim.Subject\" data-throw-if-not-resolved=\"false\"></xref> property of the new <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object is set to the value of the <em>identity</em> parameter.</p>\n"
  syntax:
    content: public virtual Claim Clone(ClaimsIdentity identity)
    content.vb: Public Overridable Function Clone(identity As ClaimsIdentity) As Claim
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
    return:
      type: System.Security.Claims.Claim
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.Claim.ToString
  commentId: M:System.Security.Claims.Claim.ToString
  id: ToString
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Claims.Claim.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Claims/src/System/Security/Claims/Claim.cs
    startLine: 544
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a string representation of this <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The string that is returned contains the values of the <xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Claims.Claim.Value\" data-throw-if-not-resolved=\"false\"></xref> properties in the following format:.”Type: Value”.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The string representation of the <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: WriteTo(IO.BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 32
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public virtual void WriteTo(IO.BinaryWriter writer)
    content.vb: Public Overridable Sub WriteTo(writer As IO.BinaryWriter)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: WriteTo(IO.BinaryWriter, Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 33
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Writes this <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> to the writer.</p>\n"
  syntax:
    content: protected virtual void WriteTo(IO.BinaryWriter writer, byte[] userData)
    content.vb: Protected Overridable Sub WriteTo(writer As IO.BinaryWriter, userData As Byte())
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p>The writer to write this claim</p>\n"
    - id: userData
      type: System.Byte[]
      description: "\n<p>The user data to claim</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(IO.BinaryWriter, Byte())
references:
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.BinaryReader
  isExternal: false
  name: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  fullName: System.Security.Claims.Claim
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2
  name: Collections.Generic.IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: Collections.Generic.IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
