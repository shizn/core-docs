items:
- uid: System.Text.UTF32Encoding
  commentId: T:System.Text.UTF32Encoding
  id: UTF32Encoding
  parent: System.Text
  children:
  - System.Text.UTF32Encoding.#ctor
  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Text.UTF32Encoding.Equals(System.Object)
  - System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UTF32Encoding.GetByteCount(System.String)
  - System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UTF32Encoding.GetDecoder
  - System.Text.UTF32Encoding.GetEncoder
  - System.Text.UTF32Encoding.GetHashCode
  - System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  - System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - System.Text.UTF32Encoding.GetPreamble
  - System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: UTF32Encoding
  fullName: System.Text.UTF32Encoding
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UTF32Encoding
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 22
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Represents a UTF-32 encoding of Unicode characters.</p>\n"
  remarks: "\n<p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</p>\n<p>The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> uses the following UTFs: </p>\n<ul><li>\n<p>UTF-8, which represents each code point as a sequence of one to four bytes. </p>\n</li><li>\n<p>UTF-16, which represents each code point as a sequence of one to two 16-bit integers. </p>\n</li><li>\n<p>UTF-32, which represents each code point as a 32-bit integer. </p>\n</li></ul>\n<p>For more information about the UTFs and other encodings supported by <xref href=\"System.Text\" data-throw-if-not-resolved=\"false\"></xref>, see . </p>\n<p>The <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class represents a UTF-32 encoding. The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal): </p>\n<ul><li>\n<p>Big endian byte order: 00 00 00 41 </p>\n</li><li>\n<p>Little endian byte order: 41 00 00 00 </p>\n</li></ul>\n<p>It is generally more efficient to store Unicode characters using the native byte order. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order). You can determine the \"endianness\" of a particular architecture by calling the <xref href=\"System.BitConverter.IsLittleEndian\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Optionally, the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array. </p>\n<p>If the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> instance is configured to provide a BOM, you can retrieve it by calling the <xref href=\"System.Text.UTF32Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method; otherwise, the method returns an empty array. Note that, even if a <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class do not do this automatically.</p>\n<p>To enable error detection and to make the class instance more secure, you should instantiate a <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object by calling the <xref href=\"System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidBytes</em> argument to <strong>true</strong>. With error detection, a method that detects an invalid sequence of characters or bytes throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> exception. Without error detection, no exception is thrown, and the invalid sequence is generally ignored. </p>\n<p>You can instantiate a <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> constructors and the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> properties that return a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>Member</p>\n<p>Endianness</p>\n<p>BOM</p>\n<p>Error detection</p>\n<p>The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many bytes result in encoding a set of Unicode characters, and the <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method performs the actual encoding.</p>\n<p>Likewise, the <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many characters result in decoding a sequence of bytes, and the <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods perform the actual decoding.</p>\n<p>For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> properties, respectively.</p>\n"
  example:
  - "\n<p>The following example demonstrates the behavior of <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> objects with and without error detection enabled. It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF). Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD). </p>System.Text.UTF32Encoding.ErrorDetection#1"
  - "\n<p>The following example encodes a string of Unicode characters into a byte array by using a <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object. The byte array is then decoded into a string to demonstrate that there is no loss of data. </p>System.Text.UTF32Encoding.Class#1"
  - "\n<p>The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM). It then reads the file in two different ways: as a text file by using a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object; and as a binary file. As you would expect, in neither case is the BOM included in the newly read string. </p>System.Text.UTF32Encoding.Class#2"
  syntax:
    content: >-
      [Serializable]

      public sealed class UTF32Encoding : Encoding, ICloneable
    content.vb: >-
      <Serializable>

      Public NotInheritable Class UTF32Encoding
          Inherits Encoding
          Implements ICloneable
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.UTF8Encoding
    commentId: T:System.Text.UTF8Encoding
  - type: System.Text.ASCIIEncoding
    commentId: T:System.Text.ASCIIEncoding
  - type: System.Text.UnicodeEncoding
    commentId: T:System.Text.UnicodeEncoding
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  - type: System.Globalization.CharUnicodeInfo
    commentId: T:System.Globalization.CharUnicodeInfo
  inheritance:
  - System.Object
  - System.Text.Encoding
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.Clone
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Default
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.UTF32
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Text.UTF32Encoding.#ctor
  commentId: M:System.Text.UTF32Encoding.#ctor
  id: '#ctor'
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: UTF32Encoding()
  fullName: System.Text.UTF32Encoding.UTF32Encoding()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 42
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</p>\n<p>For security reasons, you should enable error detection by calling the <xref href=\"System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidCharacters</em> argument to <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example retrieves and displays the byte order mark for different <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>System.Text.UTF32Encoding.GetPreamble#1"
  syntax:
    content: public UTF32Encoding()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  commentId: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean)'
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: UTF32Encoding(Boolean, Boolean)
  fullName: System.Text.UTF32Encoding.UTF32Encoding(System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 47
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\"System.Text.UTF32Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns a Unicode Unicode byte order mark.</p>\n"
  remarks: "\n<p>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</p>\n<p>For security reasons, you should enable error detection by calling the <xref href=\"System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidCharacters</em> argument to <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example retrieves and displays the byte order mark for different <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>System.Text.UTF32Encoding.GetPreamble#1"
  syntax:
    content: public UTF32Encoding(bool bigEndian, bool byteOrderMark)
    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean)
    parameters:
    - id: bigEndian
      type: System.Boolean
    - id: byteOrderMark
      type: System.Boolean
  seealso:
  - type: System.Text.UTF32Encoding.GetPreamble
    commentId: M:System.Text.UTF32Encoding.GetPreamble
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: UTF32Encoding(Boolean, Boolean, Boolean)
  fullName: System.Text.UTF32Encoding.UTF32Encoding(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 53
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\n"
  remarks: "\n<p>If <em>throwOnInvalidCharacters</em> is <strong>true</strong>, a method that detects an invalid byte sequence throws <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</p>\n<p>For security reasons, you should enable error detection by calling the <xref href=\"System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidCharacters</em> argument to <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the behavior of <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref>, both with error detection enabled and without.</p>System.Text.UTF32Encoding.ErrorDetection#1"
  syntax:
    content: public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters)
    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)
    parameters:
    - id: bigEndian
      type: System.Boolean
    - id: byteOrderMark
      type: System.Boolean
    - id: throwOnInvalidCharacters
      type: System.Boolean
  seealso:
  - type: System.Text.UTF32Encoding.GetPreamble
    commentId: M:System.Text.UTF32Encoding.GetPreamble
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UTF32Encoding.Equals(System.Object)
  commentId: M:System.Text.UTF32Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Text.UTF32Encoding.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1204
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> objects are considered equal if all of the following conditions are true: </p>\n<ul><li>\n<p>Both objects use the same byte order.</p>\n</li><li>\n<p>Both objects provide the byte order mark, or both do not.</p>\n</li><li>\n<p>Both objects use the same encoder fallback. </p>\n</li><li>\n<p>Both objects use the same decoder fallback. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> objects using different parameter values and then checks them for equality.</p>System.Text.UTF32Encoding.Equals#1"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Text.Encoding.Equals(System.Object)
  seealso:
  - type: System.Text.UTF32Encoding.#ctor
    commentId: M:System.Text.UTF32Encoding.#ctor
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char*, Int32)
  fullName: System.Text.UTF32Encoding.GetByteCount(System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 143
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      public override int GetByteCount(char *chars, int count)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.UTF32Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 96
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the number of bytes needed to encode the Latin lowercase characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters. The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the number of bytes needed to encode the Cyrillic characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates maximum number of bytes needed to encode the Cyrillic characters. </p>System.Text.Utf32Encoding.GetByteCount#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetByteCount(char[] chars, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF32Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
- uid: System.Text.UTF32Encoding.GetByteCount(System.String)
  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(String)
  fullName: System.Text.UTF32Encoding.GetByteCount(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 127
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods to calculate the maximum and actual number of bytes required to encode a string. It also displays the actual number of bytes required to store a byte stream with a byte order mark. </p>System.Text.Utf32Encoding.GetByteCount#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetByteCount(string s)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetByteCount(s As String) As Integer
    parameters:
    - id: s
      type: System.String
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetByteCount(System.String)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.UTF32Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 257
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not prepend a preamble to the beginning of a sequence of encoded bytes. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte*
    - id: byteCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\n<p>-or- </p>\n<p>\n<em>byteCount</em> is less than the resulting number of bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.UTF32Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 213
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not prepend a preamble to the beginning of a sequence of encoded bytes. </p>\n"
  example:
  - "\n<p>The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.</p>System.Text.UTF32Encoding.GetBytes_CharArr#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
    - id: charIndex
      type: System.Int32
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF32Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.UTF32Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 166
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not prepend a preamble to the beginning of a sequence of encoded bytes. </p>\n"
  example:
  - "\n<p>The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</p>System.Text.UTF32Encoding.GetBytes_String#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: s
      type: System.String
    - id: charIndex
      type: System.Int32
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF32Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte*, Int32)
  fullName: System.Text.UTF32Encoding.GetCharCount(System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 312
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> calculates the exact array size required by the <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to store the resulting characters. To calculate the maximum array size, call the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      public override int GetCharCount(byte *bytes, int count)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.UTF32Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 282
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method calculates the exact array size required by the <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to store the resulting characters. To calculate the maximum array size, call the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</p>System.Text.UTF32Encoding.GetChars#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetCharCount(byte[] bytes, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF32Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.UTF32Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 378
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, call the <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, call the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
    - id: byteCount
      type: System.Int32
    - id: chars
      type: System.Char*
    - id: charCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\n<p>-or- </p>\n<p>\n<em>charCount</em> is less than the resulting number of characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.UTF32Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 334
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, call the <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, call the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n"
  example:
  - "\n<p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</p>System.Text.UTF32Encoding.GetChars#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    - id: byteCount
      type: System.Int32
    - id: chars
      type: System.Char[]
    - id: charIndex
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF32Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Text.UTF32Encoding.GetDecoder
  commentId: M:System.Text.UTF32Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetDecoder()
  fullName: System.Text.UTF32Encoding.GetDecoder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDecoder
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1120
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. However, a <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n<p>If error detection is enabled, that is, the <em>throwOnInvalidCharacters</em> parameter of the constructor was set to <strong>true</strong>, error detection is also enabled in the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</p>\n"
  example:
  - "\n<p>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</p>System.Text.UTF32Encoding.EncDec#1"
  syntax:
    content: public override Decoder GetDecoder()
    content.vb: Public Overrides Function GetDecoder As Decoder
    return:
      type: System.Text.Decoder
  overridden: System.Text.Encoding.GetDecoder
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetEncoder
  commentId: M:System.Text.UTF32Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetEncoder()
  fullName: System.Text.UTF32Encoding.GetEncoder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoder
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1126
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. However, a <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block. Therefore, <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n<p>If error detection is enabled, that is, the <em>throwOnInvalidCharacters</em> parameter of the constructor was set to <strong>true</strong>, error detection is also enabled in the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</p>\n"
  example:
  - "\n<p>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</p>System.Text.UTF32Encoding.EncDec#1"
  syntax:
    content: public override Encoder GetEncoder()
    content.vb: Public Overrides Function GetEncoder As Encoder
    return:
      type: System.Text.Encoder
  overridden: System.Text.Encoding.GetEncoder
  seealso:
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetHashCode
  commentId: M:System.Text.UTF32Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Text.UTF32Encoding.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1219
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Returns the hash code for the current instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetHashCode
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetMaxByteCount(Int32)
  fullName: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMaxByteCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1132
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a fallback is chosen with a potentially large string,  <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can return large values.</p>\n<p>In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <see cref=\"Overload:System.Text.UTF32Encoding.GetByteCount\"></see> or <see cref=\"Overload:System.Text.Encoder.Convert\"></see>.</p>\n<p>\n<xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relationship to <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If you need a similar function to use with <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</p>System.Text.UTF32Encoding.GetBytes_String#1"
  syntax:
    content: public override int GetMaxByteCount(int charCount)
    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer
    parameters:
    - id: charCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetEncoder
    commentId: M:System.Text.UTF32Encoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetMaxCharCount(Int32)
  fullName: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMaxCharCount
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1155
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, you call the <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a fallback is chosen with a potentially large string, <xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can return large values.</p>\n<p>In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <see cref=\"Overload:System.Text.UTF32Encoding.GetCharCount\"></see> or <see cref=\"Overload:System.Text.Decoder.Convert\"></see>.</p>\n<p>\n<xref href=\"System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relationship to <xref href=\"System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If you need a similar function to use with <xref href=\"System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</p>System.Text.UTF32Encoding.GetChars#1"
  syntax:
    content: public override int GetMaxCharCount(int byteCount)
    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer
    parameters:
    - id: byteCount
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetPreamble
  commentId: M:System.Text.UTF32Encoding.GetPreamble
  id: GetPreamble
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetPreamble()
  fullName: System.Text.UTF32Encoding.GetPreamble()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPreamble
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1185
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Returns a Unicode byte order mark encoded in UTF-32 format, if the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object is configured to supply one. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal): </p>\n<ul><li>\n<p>Big endian byte order: 00 00 FE FF </p>\n</li><li>\n<p>Little endian byte order: FF FE 00 00 </p>\n</li></ul>\n<p>You can instantiate a <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object whose <xref href=\"System.Text.UTF32Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns a valid BOM in the following ways:</p>\n<ul><li>\n<p>By retrieving the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Text.Encoding.UTF32\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By calling the parameterless <xref href=\"System.Text.UTF32Encoding.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</li><li>\n<p>By supplying <strong>true</strong> as the value of the <em>byteOrderMark</em> argument to the <xref href=\"System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructors. </p>\n</li></ul>\n<p>We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data. Often, user problems might be avoided if data is consistently and properly tagged. </p>\n<p>For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  </p>\n<p>There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.</p>\n<p>For more information on byte order and the byte order mark, see The Unicode Standard at the <see href=\"http://go.microsoft.com/fwlink/?LinkId=37123\">Unicode home page</see>.</p>\n<p>To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble. Note that the <see cref=\"Overload:System.Text.UTF32Encoding.GetBytes\"></see> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility. </p>\n"
  example:
  - "\n<p>The following code example retrieves and displays the byte order mark for different <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>System.Text.UTF32Encoding.GetPreamble#1"
  - "\n<p>The following example instantiates two <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> objects, the first of which does not provide a BOM and the second of which does. It then calls the <xref href=\"System.Text.UTF32Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method to write the BOM to a file before writing a UTF-32-encoded string. As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first. </p>System.Text.UTF32Encoding.GetPreamble#2<p>You can also compare the files by using the <strong>fc</strong> command in a console window, or you can inspect the files in a text editor that includes a Hex View mode. Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed. </p>"
  syntax:
    content: public override byte[] GetPreamble()
    content.vb: Public Overrides Function GetPreamble As Byte()
    return:
      type: System.Byte[]
  overridden: System.Text.Encoding.GetPreamble
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  - vb
  name: GetString(Byte[], Int32, Int32)
  fullName: System.Text.UTF32Encoding.GetString(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 403
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a range of bytes from a byte array into a string.</p>\n"
  remarks: "\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UTF32Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UTF32Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n"
  example:
  - "\n<p>The following example encodes a string into two arrays arrays of bytes, one in little-endian order and the other in big-endian order. It then decodes the bytes back into a string. </p>System.Text.UTF32Encoding.GetString#1"
  - "\n<p>The following example initializes an array by calling the <xref href=\"System.Text.UTF32Encoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM). The example then calls the <xref href=\"System.Text.UTF32Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method to store the BOM to the array before calling the <xref href=\"System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to store the encoded bytes to the array. The example then calls the <xref href=\"System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to decode the string. </p>System.Text.UTF32Encoding.GetString#2<p>Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000. This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character \"?\". </p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override string GetString(byte[] bytes, int index, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.String
  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for a complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UTF32Encoding.GetDecoder
    commentId: M:System.Text.UTF32Encoding.GetDecoder
  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UTF32Encoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  fullName: System.ICloneable
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: Convert(Encoding, Encoding, Byte[])
  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])
  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())
  name.vb: Convert(Encoding, Encoding, Byte())
  spec.csharp:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)
  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
    name: Convert
    fullName: System.Text.Encoding.Convert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  isExternal: true
  name: RegisterProvider(EncodingProvider)
  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  spec.csharp:
  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
    name: RegisterProvider
    fullName: System.Text.Encoding.RegisterProvider
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.EncodingProvider
    name: EncodingProvider
    fullName: System.Text.EncodingProvider
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
    name: RegisterProvider
    fullName: System.Text.Encoding.RegisterProvider
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.EncodingProvider
    name: EncodingProvider
    fullName: System.Text.EncodingProvider
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(Int32)
  fullName: System.Text.Encoding.GetEncoding(System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.Int32)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.Int32)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.String)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(String)
  fullName: System.Text.Encoding.GetEncoding(System.String)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.String)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.String)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
    name: GetEncoding
    fullName: System.Text.Encoding.GetEncoding
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.EncoderFallback
    name: EncoderFallback
    fullName: System.Text.EncoderFallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Text.DecoderFallback
    name: DecoderFallback
    fullName: System.Text.DecoderFallback
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetEncodings
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncodings()
  fullName: System.Text.Encoding.GetEncodings()
  spec.csharp:
  - uid: System.Text.Encoding.GetEncodings
    name: GetEncodings
    fullName: System.Text.Encoding.GetEncodings
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncodings
    name: GetEncodings
    fullName: System.Text.Encoding.GetEncodings
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.Clone
  parent: System.Text.Encoding
  isExternal: true
  name: Clone()
  fullName: System.Text.Encoding.Clone()
  spec.csharp:
  - uid: System.Text.Encoding.Clone
    name: Clone
    fullName: System.Text.Encoding.Clone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Clone
    name: Clone
    fullName: System.Text.Encoding.Clone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(Char[])
  fullName: System.Text.Encoding.GetByteCount(System.Char[])
  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())
  name.vb: GetByteCount(Char())
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.Char[])
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.Char[])
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetBytes(System.Char[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char[])
  fullName: System.Text.Encoding.GetBytes(System.Char[])
  fullname.vb: System.Text.Encoding.GetBytes(System.Char())
  name.vb: GetBytes(Char())
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char[])
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char[])
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char[], Int32, Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetBytes(System.String)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(String)
  fullName: System.Text.Encoding.GetBytes(System.String)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.String)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.String)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetCharCount(Byte[])
  fullName: System.Text.Encoding.GetCharCount(System.Byte[])
  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())
  name.vb: GetCharCount(Byte())
  spec.csharp:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[])
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[])
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte[])
  fullName: System.Text.Encoding.GetChars(System.Byte[])
  fullname.vb: System.Text.Encoding.GetChars(System.Byte())
  name.vb: GetChars(Byte())
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte[])
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte[])
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetString(Byte*, Int32)
  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.IsAlwaysNormalized
  parent: System.Text.Encoding
  isExternal: true
  name: IsAlwaysNormalized()
  fullName: System.Text.Encoding.IsAlwaysNormalized()
  spec.csharp:
  - uid: System.Text.Encoding.IsAlwaysNormalized
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.IsAlwaysNormalized
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  parent: System.Text.Encoding
  isExternal: true
  name: IsAlwaysNormalized(NormalizationForm)
  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  spec.csharp:
  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.NormalizationForm
    name: NormalizationForm
    fullName: System.Text.NormalizationForm
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
    name: IsAlwaysNormalized
    fullName: System.Text.Encoding.IsAlwaysNormalized
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Text.NormalizationForm
    name: NormalizationForm
    fullName: System.Text.NormalizationForm
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetString(System.Byte[])
  parent: System.Text.Encoding
  isExternal: true
  name: GetString(Byte[])
  fullName: System.Text.Encoding.GetString(System.Byte[])
  fullname.vb: System.Text.Encoding.GetString(System.Byte())
  name.vb: GetString(Byte())
  spec.csharp:
  - uid: System.Text.Encoding.GetString(System.Byte[])
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetString(System.Byte[])
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Text.Encoding.BodyName
  parent: System.Text.Encoding
  isExternal: true
  name: BodyName
  fullName: System.Text.Encoding.BodyName
- uid: System.Text.Encoding.EncodingName
  parent: System.Text.Encoding
  isExternal: true
  name: EncodingName
  fullName: System.Text.Encoding.EncodingName
- uid: System.Text.Encoding.HeaderName
  parent: System.Text.Encoding
  isExternal: true
  name: HeaderName
  fullName: System.Text.Encoding.HeaderName
- uid: System.Text.Encoding.WebName
  parent: System.Text.Encoding
  isExternal: true
  name: WebName
  fullName: System.Text.Encoding.WebName
- uid: System.Text.Encoding.WindowsCodePage
  parent: System.Text.Encoding
  isExternal: true
  name: WindowsCodePage
  fullName: System.Text.Encoding.WindowsCodePage
- uid: System.Text.Encoding.IsBrowserDisplay
  parent: System.Text.Encoding
  isExternal: true
  name: IsBrowserDisplay
  fullName: System.Text.Encoding.IsBrowserDisplay
- uid: System.Text.Encoding.IsBrowserSave
  parent: System.Text.Encoding
  isExternal: true
  name: IsBrowserSave
  fullName: System.Text.Encoding.IsBrowserSave
- uid: System.Text.Encoding.IsMailNewsDisplay
  parent: System.Text.Encoding
  isExternal: true
  name: IsMailNewsDisplay
  fullName: System.Text.Encoding.IsMailNewsDisplay
- uid: System.Text.Encoding.IsMailNewsSave
  parent: System.Text.Encoding
  isExternal: true
  name: IsMailNewsSave
  fullName: System.Text.Encoding.IsMailNewsSave
- uid: System.Text.Encoding.IsSingleByte
  parent: System.Text.Encoding
  isExternal: true
  name: IsSingleByte
  fullName: System.Text.Encoding.IsSingleByte
- uid: System.Text.Encoding.EncoderFallback
  parent: System.Text.Encoding
  isExternal: true
  name: EncoderFallback
  fullName: System.Text.Encoding.EncoderFallback
- uid: System.Text.Encoding.DecoderFallback
  parent: System.Text.Encoding
  isExternal: true
  name: DecoderFallback
  fullName: System.Text.Encoding.DecoderFallback
- uid: System.Text.Encoding.IsReadOnly
  parent: System.Text.Encoding
  isExternal: true
  name: IsReadOnly
  fullName: System.Text.Encoding.IsReadOnly
- uid: System.Text.Encoding.ASCII
  parent: System.Text.Encoding
  isExternal: true
  name: ASCII
  fullName: System.Text.Encoding.ASCII
- uid: System.Text.Encoding.CodePage
  parent: System.Text.Encoding
  isExternal: true
  name: CodePage
  fullName: System.Text.Encoding.CodePage
- uid: System.Text.Encoding.Default
  parent: System.Text.Encoding
  isExternal: true
  name: Default
  fullName: System.Text.Encoding.Default
- uid: System.Text.Encoding.Unicode
  parent: System.Text.Encoding
  isExternal: true
  name: Unicode
  fullName: System.Text.Encoding.Unicode
- uid: System.Text.Encoding.BigEndianUnicode
  parent: System.Text.Encoding
  isExternal: true
  name: BigEndianUnicode
  fullName: System.Text.Encoding.BigEndianUnicode
- uid: System.Text.Encoding.UTF7
  parent: System.Text.Encoding
  isExternal: true
  name: UTF7
  fullName: System.Text.Encoding.UTF7
- uid: System.Text.Encoding.UTF8
  parent: System.Text.Encoding
  isExternal: true
  name: UTF8
  fullName: System.Text.Encoding.UTF8
- uid: System.Text.Encoding.UTF32
  parent: System.Text.Encoding
  isExternal: true
  name: UTF32
  fullName: System.Text.Encoding.UTF32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding.Equals(System.Object)
  parent: System.Text.Encoding
  isExternal: true
  name: Equals(Object)
  fullName: System.Text.Encoding.Equals(System.Object)
  spec.csharp:
  - uid: System.Text.Encoding.Equals(System.Object)
    name: Equals
    fullName: System.Text.Encoding.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.Equals(System.Object)
    name: Equals
    fullName: System.Text.Encoding.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(Char*, Int32)
  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char*
  isExternal: true
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Text.Encoding.GetByteCount(System.String)
  parent: System.Text.Encoding
  isExternal: true
  name: GetByteCount(String)
  fullName: System.Text.Encoding.GetByteCount(System.String)
  spec.csharp:
  - uid: System.Text.Encoding.GetByteCount(System.String)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetByteCount(System.String)
    name: GetByteCount
    fullName: System.Text.Encoding.GetByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    name: GetBytes
    fullName: System.Text.Encoding.GetBytes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetCharCount(Byte*, Int32)
  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    name: GetCharCount
    fullName: System.Text.Encoding.GetCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    name: GetChars
    fullName: System.Text.Encoding.GetChars
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetDecoder
  parent: System.Text.Encoding
  isExternal: true
  name: GetDecoder()
  fullName: System.Text.Encoding.GetDecoder()
  spec.csharp:
  - uid: System.Text.Encoding.GetDecoder
    name: GetDecoder
    fullName: System.Text.Encoding.GetDecoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetDecoder
    name: GetDecoder
    fullName: System.Text.Encoding.GetDecoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoding.GetEncoder
  parent: System.Text.Encoding
  isExternal: true
  name: GetEncoder()
  fullName: System.Text.Encoding.GetEncoder()
  spec.csharp:
  - uid: System.Text.Encoding.GetEncoder
    name: GetEncoder
    fullName: System.Text.Encoding.GetEncoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetEncoder
    name: GetEncoder
    fullName: System.Text.Encoding.GetEncoder
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.Encoding.GetHashCode
  parent: System.Text.Encoding
  isExternal: true
  name: GetHashCode()
  fullName: System.Text.Encoding.GetHashCode()
  spec.csharp:
  - uid: System.Text.Encoding.GetHashCode
    name: GetHashCode
    fullName: System.Text.Encoding.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetHashCode
    name: GetHashCode
    fullName: System.Text.Encoding.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetMaxByteCount(Int32)
  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
    name: GetMaxByteCount
    fullName: System.Text.Encoding.GetMaxByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
    name: GetMaxByteCount
    fullName: System.Text.Encoding.GetMaxByteCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetMaxCharCount(Int32)
  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
    name: GetMaxCharCount
    fullName: System.Text.Encoding.GetMaxCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
    name: GetMaxCharCount
    fullName: System.Text.Encoding.GetMaxCharCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetPreamble
  parent: System.Text.Encoding
  isExternal: true
  name: GetPreamble()
  fullName: System.Text.Encoding.GetPreamble()
  spec.csharp:
  - uid: System.Text.Encoding.GetPreamble
    name: GetPreamble
    fullName: System.Text.Encoding.GetPreamble
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetPreamble
    name: GetPreamble
    fullName: System.Text.Encoding.GetPreamble
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: true
  name: GetString(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    name: GetString
    fullName: System.Text.Encoding.GetString
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
