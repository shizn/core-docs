items:
- uid: System.Xml.Linq.XDocument
  commentId: T:System.Xml.Linq.XDocument
  id: XDocument
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XDocument.#ctor
  - System.Xml.Linq.XDocument.#ctor(System.Object[])
  - System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])
  - System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)
  - System.Xml.Linq.XDocument.Declaration
  - System.Xml.Linq.XDocument.DocumentType
  - System.Xml.Linq.XDocument.Load(System.IO.Stream)
  - System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XDocument.Load(System.IO.TextReader)
  - System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XDocument.Load(System.String)
  - System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)
  - System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XDocument.NodeType
  - System.Xml.Linq.XDocument.Parse(System.String)
  - System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XDocument.Root
  - System.Xml.Linq.XDocument.Save(System.IO.Stream)
  - System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XDocument.Save(System.IO.TextWriter)
  - System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)
  - System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: XDocument
  fullName: System.Xml.Linq.XDocument
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XDocument
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 162
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Represents an XML document. For the components and usage of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> object, see XDocument Class Overview.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>For details about the valid content of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>, see Valid Content of XElement and XDocument Objects.</p>\n"
  example:
  - "\n<p>The following example creates a document, and then adds a comment and an element to it. It then composes another document using the results of a query. </p>\n<pre><code class=\"c#\">XDocument srcTree = new XDocument(\nnew XComment(\"This is a comment\"),\nnew XElement(\"Root\",\nnew XElement(\"Child1\", \"data1\"),\nnew XElement(\"Child2\", \"data2\"),\nnew XElement(\"Child3\", \"data3\"),\nnew XElement(\"Child2\", \"data4\"),\nnew XElement(\"Info5\", \"info5\"),\nnew XElement(\"Info6\", \"info6\"),\nnew XElement(\"Info7\", \"info7\"),\nnew XElement(\"Info8\", \"info8\")\n)\n);\n\nXDocument doc = new XDocument(\nnew XComment(\"This is a comment\"),\nnew XElement(\"Root\",\nfrom el in srcTree.Element(\"Root\").Elements()\nwhere ((string)el).StartsWith(\"data\")\nselect el\n)\n);\nConsole.WriteLine(doc);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment-->\n<Root>\n    <Child1>data1</Child1>\n    <Child2>data2</Child2>\n    <Child3>data3</Child3>\n    <Child2>data4</Child2>\n    <Info5>info5</Info5>\n    <Info6>info6</Info6>\n    <Info7>info7</Info7>\n    <Info8>info8</Info8>\n</Root>\nDim doc As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment-->\n<Root>\n    <%= From el In srcTree.<Root>.Elements _\n        Where CStr(el).StartsWith(\"data\") _\n        Select el %>\n</Root>\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><!--This is a comment-->\n<Root>\n<Child1>data1</Child1>\n<Child2>data2</Child2>\n<Child3>data3</Child3>\n<Child2>data4</Child2>\n</Root></code></pre>\n"
  syntax:
    content: 'public class XDocument : XContainer'
    content.vb: >-
      Public Class XDocument
          Inherits XContainer
  seealso:
  - type: System.Xml.Linq.XNamespace
    commentId: T:System.Xml.Linq.XNamespace
  - type: System.Xml.Linq.XDeclaration
    commentId: T:System.Xml.Linq.XDeclaration
  - type: System.Xml.Linq.XElement
    commentId: T:System.Xml.Linq.XElement
  - type: System.Xml.Linq.XNode
    commentId: T:System.Xml.Linq.XNode
  inheritance:
  - System.Object
  - System.Xml.Linq.XObject
  - System.Xml.Linq.XNode
  - System.Xml.Linq.XContainer
  inheritedMembers:
  - System.Xml.Linq.XContainer.FirstNode
  - System.Xml.Linq.XContainer.LastNode
  - System.Xml.Linq.XContainer.Add(System.Object)
  - System.Xml.Linq.XContainer.Add(System.Object[])
  - System.Xml.Linq.XContainer.AddFirst(System.Object)
  - System.Xml.Linq.XContainer.AddFirst(System.Object[])
  - System.Xml.Linq.XContainer.CreateWriter
  - System.Xml.Linq.XContainer.DescendantNodes
  - System.Xml.Linq.XContainer.Descendants
  - System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Elements
  - System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Nodes
  - System.Xml.Linq.XContainer.RemoveNodes
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  - System.Xml.Linq.XNode.DocumentOrderComparer
  - System.Xml.Linq.XNode.EqualityComparer
  - System.Xml.Linq.XNode.NextNode
  - System.Xml.Linq.XNode.PreviousNode
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  - System.Xml.Linq.XNode.Ancestors
  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.CreateReader
  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.ElementsAfterSelf
  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.ElementsBeforeSelf
  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.NodesAfterSelf
  - System.Xml.Linq.XNode.NodesBeforeSelf
  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  - System.Xml.Linq.XNode.Remove
  - System.Xml.Linq.XNode.ReplaceWith(System.Object)
  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  - System.Xml.Linq.XNode.ToString
  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XObject.BaseUri
  - System.Xml.Linq.XObject.Document
  - System.Xml.Linq.XObject.Parent
  - System.Xml.Linq.XObject.Changed
  - System.Xml.Linq.XObject.Changing
  - System.Xml.Linq.XObject.AddAnnotation(System.Object)
  - System.Xml.Linq.XObject.Annotation(System.Type)
  - System.Xml.Linq.XObject.Annotation``1
  - System.Xml.Linq.XObject.Annotations(System.Type)
  - System.Xml.Linq.XObject.Annotations``1
  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  - System.Xml.Linq.XObject.RemoveAnnotations``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.Linq.XDocument.#ctor
  commentId: M:System.Xml.Linq.XDocument.#ctor
  id: '#ctor'
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: XDocument()
  fullName: System.Xml.Linq.XDocument.XDocument()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 164
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>There are not many scenarios that require you to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you can usually create your XML trees with an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> as your root node.</p>\n<p>For details about the valid content of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>, see Valid Content of XElement and XDocument Objects.</p>\n"
  example:
  - "\n<p>The following example creates a new document, and then adds a comment and an element to it.</p>\n<pre><code class=\"c#\">XDocument doc = new XDocument();\ndoc.Add(new XComment(\"This is a comment\"));\ndoc.Add(new XElement(\"Root\", \"content\"));\nConsole.WriteLine(doc);</code></pre>\n<pre><code class=\"vb\">Dim doc As XDocument = New XDocument()\ndoc.Add(<!--This is a comment-->)\ndoc.Add(<Root>content</Root>)\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><!--This is a comment-->\n<Root>content</Root></code></pre>\n"
  syntax:
    content: public XDocument()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.#ctor(System.Object[])
  commentId: M:System.Xml.Linq.XDocument.#ctor(System.Object[])
  id: '#ctor(System.Object[])'
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: XDocument(Object[])
  fullName: System.Xml.Linq.XDocument.XDocument(System.Object[])
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 165
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> class with the specified content.</p>\n"
  remarks: "\n<p>There are not many scenarios that require you to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you can usually create your XML trees with an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> as your root node.</p>\n<p>For details about the valid content of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>, see Valid Content of XElement and XDocument Objects.</p>\n"
  example:
  - "\n<p>The following example creates a document, and then adds a comment and an element to it. It then composes another document using the results of a query.</p>\n<pre><code class=\"c#\">XDocument srcTree = new XDocument(\nnew XComment(\"This is a comment\"),\nnew XElement(\"Root\",\nnew XElement(\"Child1\", \"data1\"),\nnew XElement(\"Child2\", \"data2\"),\nnew XElement(\"Child3\", \"data3\"),\nnew XElement(\"Child2\", \"data4\"),\nnew XElement(\"Info5\", \"info5\"),\nnew XElement(\"Info6\", \"info6\"),\nnew XElement(\"Info7\", \"info7\"),\nnew XElement(\"Info8\", \"info8\")\n)\n);\n\nXDocument doc = new XDocument(\nnew XComment(\"This is a comment\"),\nnew XElement(\"Root\",\nfrom el in srcTree.Element(\"Root\").Elements()\nwhere ((string)el).StartsWith(\"data\")\nselect el\n)\n);\nConsole.WriteLine(doc);</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XDocument = _\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment-->\n<Root>\n    <Child1>data1</Child1>\n    <Child2>data2</Child2>\n    <Child3>data3</Child3>\n    <Child2>data4</Child2>\n    <Info5>info5</Info5>\n    <Info6>info6</Info6>\n    <Info7>info7</Info7>\n    <Info8>info8</Info8>\n</Root>\nDim doc As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment-->\n<Root>\n    <%= From el In srcTree.<Root>.Elements _\n        Where CStr(el).StartsWith(\"data\") _\n        Select el %>\n</Root>\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><!--This is a comment-->\n<Root>\n<Child1>data1</Child1>\n<Child2>data2</Child2>\n<Child3>data3</Child3>\n<Child2>data4</Child2>\n</Root></code></pre>\n"
  syntax:
    content: public XDocument(params object[] content)
    content.vb: Public Sub New(ParamArray content As Object())
    parameters:
    - id: content
      type: System.Object[]
      description: "\n<p>A parameter list of content objects to add to this document.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XDocument.XDocument(System.Object())
  name.vb: XDocument(Object())
- uid: System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])
  commentId: M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])
  id: '#ctor(System.Xml.Linq.XDeclaration,System.Object[])'
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: XDocument(XDeclaration, Object[])
  fullName: System.Xml.Linq.XDocument.XDocument(System.Xml.Linq.XDeclaration, System.Object[])
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 166
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> class with the specified <xref href=\"System.Xml.Linq.XDeclaration\" data-throw-if-not-resolved=\"false\"></xref> and content.</p>\n"
  remarks: "\n<p>There are not many scenarios that require you to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you can usually create your XML trees with an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> as your root node.</p>\n<p>For details about the valid content of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>, see Valid Content of XElement and XDocument Objects.</p>\n"
  example:
  - "\n<p>The following example uses this constructor to create a document.</p>\n<pre><code class=\"c#\">XDocument srcTree = new XDocument(\nnew XComment(\"This is a comment\"),\nnew XElement(\"Root\",\nnew XElement(\"Child1\", \"data1\"),\nnew XElement(\"Child2\", \"data2\"),\nnew XElement(\"Child3\", \"data3\"),\nnew XElement(\"Child2\", \"data4\"),\nnew XElement(\"Info5\", \"info5\"),\nnew XElement(\"Info6\", \"info6\"),\nnew XElement(\"Info7\", \"info7\"),\nnew XElement(\"Info8\", \"info8\")\n)\n);\n\nXDocument doc = new XDocument(\nnew XDeclaration(\"1.0\", \"utf-8\", \"yes\"),\nnew XComment(\"This is a new comment\"),\nnew XElement(\"Root\",\nfrom el in srcTree.Element(\"Root\").Elements()\nwhere ((string)el).StartsWith(\"data\")\nselect el\n)\n);\ndoc.Save(\"Test.xml\");\nConsole.WriteLine(File.ReadAllText(\"Test.xml\"));</code></pre>\n<pre><code class=\"vb\">Dim srcTree As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment-->\n<Root>\n    <Child1>data1</Child1>\n    <Child2>data2</Child2>\n    <Child3>data3</Child3>\n    <Child2>data4</Child2>\n    <Info5>info5</Info5>\n    <Info6>info6</Info6>\n    <Info7>info7</Info7>\n    <Info8>info8</Info8>\n</Root>\nDim doc As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a new comment-->\n<Root>\n    <%= From el In srcTree.<Root>.Elements _\n        Where CStr(el).StartsWith(\"data\") _\n        Select el %>\n</Root>\ndoc.Save(\"Test.xml\")\nConsole.WriteLine(File.ReadAllText(\"Test.xml\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a new comment-->\n<Root>\n<Child1>data1</Child1>\n<Child2>data2</Child2>\n<Child3>data3</Child3>\n<Child2>data4</Child2>\n</Root></code></pre>\n"
  syntax:
    content: public XDocument(XDeclaration declaration, params object[] content)
    content.vb: Public Sub New(declaration As XDeclaration, ParamArray content As Object())
    parameters:
    - id: declaration
      type: System.Xml.Linq.XDeclaration
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDeclaration\" data-throw-if-not-resolved=\"false\"></xref> for the document.</p>\n"
    - id: content
      type: System.Object[]
      description: "\n<p>The content of the document.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XDocument.XDocument(System.Xml.Linq.XDeclaration, System.Object())
  name.vb: XDocument(XDeclaration, Object())
- uid: System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)
  commentId: M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)
  id: '#ctor(System.Xml.Linq.XDocument)'
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: XDocument(XDocument)
  fullName: System.Xml.Linq.XDocument.XDocument(System.Xml.Linq.XDocument)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 167
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> class from an existing <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>You use this constructor to make a deep copy of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor traverses all nodes and attributes in the document specified in the <em>other</em> parameter, and creates copies of all nodes as it assembles the newly initialized <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XDocument(XDocument other)
    content.vb: Public Sub New(other As XDocument)
    parameters:
    - id: other
      type: System.Xml.Linq.XDocument
      description: "\n<p>The <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> object that will be copied.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.Declaration
  commentId: P:System.Xml.Linq.XDocument.Declaration
  id: Declaration
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Declaration
  fullName: System.Xml.Linq.XDocument.Declaration
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Declaration
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 168
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets or sets the XML declaration for this document.</p>\n"
  remarks: "\n<p>Sometimes you have to create an XML declaration for a document. If you want to indicate that a document is standalone, you must use this property. If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref href=\"System.Xml.Linq.XDeclaration\" data-throw-if-not-resolved=\"false\"></xref>. Another approach for encoding a document is to specify the encoding on an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that you pass to LINQ to XML for writing.</p>\n"
  example:
  - "\n<p>The following example uses this property to retrieve the XML declaration of a document.</p>\n<pre><code class=\"c#\">XDocument doc = new XDocument(\nnew XDeclaration(\"1.0\", \"utf-8\", \"yes\"),\nnew XComment(\"This is a comment\"),\nnew XElement(\"Root\", \"content\")\n);\n\nConsole.WriteLine(doc.Declaration);</code></pre>\n<pre><code class=\"vb\">Dim doc As XDocument = _\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment-->\n<Root>content</Root>\n\nConsole.WriteLine(doc.Declaration)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?></code></pre>\n"
  syntax:
    content: public XDeclaration Declaration { get; set; }
    content.vb: Public Property Declaration As XDeclaration
    parameters: []
    return:
      type: System.Xml.Linq.XDeclaration
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDeclaration\" data-throw-if-not-resolved=\"false\"></xref> that contains the XML declaration for this document.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDeclaration
    commentId: T:System.Xml.Linq.XDeclaration
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.DocumentType
  commentId: P:System.Xml.Linq.XDocument.DocumentType
  id: DocumentType
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: DocumentType
  fullName: System.Xml.Linq.XDocument.DocumentType
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DocumentType
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 169
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the Document Type Definition (DTD) for this document.</p>\n"
  remarks: "\n<p>LINQ to XML provides limited support for DTDs.</p>\n<p>You can populate an XML tree with an XML document that contains a DTD. The XML tree will then contain a <xref href=\"System.Xml.Linq.XDocument.DocumentType\" data-throw-if-not-resolved=\"false\"></xref> node. When you serialize or save the tree, the DTD will also be serialized. LINQ to XML will expand any entities in the DTD. When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.</p>\n<p>If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.</p>\n<p>By default, LINQ to XML does not validate a document based on its DTD. To validate a document based on a DTD, create an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that will validate based on a DTD, and then create an XML tree from the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates a document that contains an <xref href=\"System.Xml.Linq.XDocumentType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Visual Basic does not support document types within XML literals. However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <xref href=\"System.Xml.Linq.XDocumentType\" data-throw-if-not-resolved=\"false\"></xref> node in the appropriate place in the XML tree.</p>\n<pre><code class=\"c#\">string internalSubset = @\"<!ELEMENT Pubs (Book+)>\n<!ELEMENT Book (Title, Author)>\n<!ELEMENT Title (#PCDATA)>\n<!ELEMENT Author (#PCDATA)>\";\n\nstring target = \"xml-stylesheet\";\nstring data = \"href='mystyle.css' title='Compact' type='text/css'\";\n\nXDocument doc = new XDocument(\nnew XComment(\"This is a comment.\"),\nnew XProcessingInstruction(target, data),\nnew XDocumentType(\"Pubs\", null, null, internalSubset),\nnew XElement(\"Pubs\", \nnew XElement(\"Book\",\n    new XElement(\"Title\", \"Artifacts of Roman Civilization\"),\n    new XElement(\"Author\", \"Moreno, Jordao\")\n),\nnew XElement(\"Book\",\n    new XElement(\"Title\", \"Midieval Tools and Implements\"),\n    new XElement(\"Author\", \"Gazit, Inbar\")\n)\n),\nnew XComment(\"This is another comment.\")\n);\ndoc.Declaration = new XDeclaration(\"1.0\", \"utf-8\", \"true\");\nConsole.WriteLine(doc);\n\ndoc.Save(\"test.xml\");</code></pre>\n<pre><code class=\"vb\">Dim internalSubset = _\n\"<!ELEMENT Pubs (Book+)>\" & Environment.NewLine & _\n\"<!ELEMENT Book (Title, Author)>\" & Environment.NewLine & _\n\"<!ELEMENT Title (#PCDATA)>\" & Environment.NewLine & _\n\"<!ELEMENT Author (#PCDATA)>\"\n\nDim doc As XDocument = _\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment.-->\n<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>\n<Pubs>\n<Book>\n    <Title>Artifacts of Roman Civilization</Title>\n    <Author>Moreno, Jordao</Author>\n</Book>\n<Book>\n    <Title>Midieval Tools and Implements</Title>\n    <Author>Gazit, Inbar</Author>\n</Book>\n</Pubs>\n<!--This is another comment.-->\n\ndoc.Nodes().Skip(1).First().AddAfterSelf(New XDocumentType(\"Pubs\", Nothing, Nothing, internalSubset))\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><!--This is a comment.-->\n<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>\n<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>\n<!ELEMENT Book (Title, Author)>\n<!ELEMENT Title (#PCDATA)>\n<!ELEMENT Author (#PCDATA)>]>\n<Pubs>\n<Book>\n<Title>Artifacts of Roman Civilization</Title>\n<Author>Moreno, Jordao</Author>\n</Book>\n<Book>\n<Title>Midieval Tools and Implements</Title>\n<Author>Gazit, Inbar</Author>\n</Book>\n</Pubs>\n<!--This is another comment.--></code></pre>\n"
  syntax:
    content: public XDocumentType DocumentType { get; }
    content.vb: Public ReadOnly Property DocumentType As XDocumentType
    parameters: []
    return:
      type: System.Xml.Linq.XDocumentType
      description: "\n<p>A <xref href=\"System.Xml.Linq.XDocumentType\" data-throw-if-not-resolved=\"false\"></xref> that contains the DTD for this document.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocumentType
    commentId: T:System.Xml.Linq.XDocumentType
  - type: System.Xml.Linq.XDocument.NodeType
    commentId: P:System.Xml.Linq.XDocument.NodeType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XDocument.NodeType
  commentId: P:System.Xml.Linq.XDocument.NodeType
  id: NodeType
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Xml.Linq.XDocument.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 170
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the node type for this node.</p>\n"
  remarks: "\n<p>Because all classes that derive from <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> contain a <xref href=\"System.Xml.Linq.XObject.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. Your code can then test for the node type of each object in the collection.</p>\n"
  example:
  - "\n<p>The following example shows the use of this property.</p>\n<pre><code class=\"c#\">// Note that this property uses XmlNodeType, which is in the System.Xml namespace.\nXDocument xmlTree = new XDocument(\nnew XDeclaration(\"1.0\", \"utf-8\", \"yes\"),\nnew XElement(\"Root\", \"content\")\n);\nConsole.WriteLine(xmlTree.NodeType);</code></pre>\n<pre><code class=\"vb\">' Note that this property uses XmlNodeType, which is in the System.Xml namespace.\nDim xmlTree As XDocument = _\n<?xml version='1.0' encoding='utf-8' standalone='yes'?>\n<Root>content</Root>\nConsole.WriteLine(\"{0}\", xmlTree.NodeType)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Document</code></pre>\n"
  syntax:
    content: public override XmlNodeType NodeType { get; }
    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The node type. For <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Xml.Linq.XObject.NodeType
  seealso:
  - type: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  - type: System.Xml.Linq.XDocument.DocumentType
    commentId: P:System.Xml.Linq.XDocument.DocumentType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Xml.Linq.XDocument.Root
  commentId: P:System.Xml.Linq.XDocument.Root
  id: Root
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Root
  fullName: System.Xml.Linq.XDocument.Root
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Root
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 171
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the root element of the XML Tree for this document.</p>\n"
  remarks: "\n<p>This property is useful when you want to compose LINQ to XML queries in the same context as when composing them for a tree rooted in <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>. See Querying an XDocument vs. Querying an XElement for more details.</p>\n"
  example:
  - "\n<p>The following example uses this property to get the root element of a document.</p>\n<pre><code class=\"c#\">XDocument doc = new XDocument(\nnew XComment(\"This is a comment.\"),\nnew XElement(\"Pubs\", \nnew XElement(\"Book\",\n    new XElement(\"Title\", \"Artifacts of Roman Civilization\"),\n    new XElement(\"Author\", \"Moreno, Jordao\")\n),\nnew XElement(\"Book\",\n    new XElement(\"Title\", \"Midieval Tools and Implements\"),\n    new XElement(\"Author\", \"Gazit, Inbar\")\n)\n),\nnew XComment(\"This is another comment.\")\n);\nConsole.WriteLine(doc.Root.Name.ToString());</code></pre>\n<pre><code class=\"vb\">Dim doc As XDocument = _\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!--This is a comment.-->\n<Pubs>\n<Book>\n    <Title>Artifacts of Roman Civilization</Title>\n    <Author>Moreno, Jordao</Author>\n</Book>\n<Book>\n    <Title>Midieval Tools and Implements</Title>\n    <Author>Gazit, Inbar</Author>\n</Book>\n<!--This is another comment.-->\n</Pubs>\n\nConsole.WriteLine(doc.Root.Name.ToString())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Pubs</code></pre>\n"
  syntax:
    content: public XElement Root { get; }
    content.vb: Public ReadOnly Property Root As XElement
    parameters: []
    return:
      type: System.Xml.Linq.XElement
      description: "\n<p>The root <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> of the XML tree.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XDocument.Load(System.IO.Stream)
  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(Stream)
  fullName: System.Xml.Linq.XDocument.Load(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 172
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified stream.</p>\n"
  remarks: "\n<p>If you want to control load options, use the <see cref=\"Overload:System.Xml.Linq.XDocument.Load\"></see> overload that takes <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n<p>The loading functionality of LINQ to XML is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document. </p>\n<p>If you have to modify <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref>, follow these steps:</p>\n<ol><li>\n<p>Create an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> by calling one of the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overloads that take <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n</li><li>\n<p>Pass the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to one of the <see cref=\"Overload:System.Xml.Linq.XDocument.Load\"></see> overloads of <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that takes <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n</li></ol>\n"
  example:
  - 
  syntax:
    content: public static XDocument Load(Stream stream)
    content.vb: Public Shared Function Load(stream As Stream) As XDocument
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> object that reads the data that is contained in the stream. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  id: Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(Stream, LoadOptions)
  fullName: System.Xml.Linq.XDocument.Load(System.IO.Stream, System.Xml.Linq.LoadOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 173
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</p>\n"
  remarks: "\n<p>The loading functionality of LINQ to XML is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document. </p>\n<p>If you have to modify <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref>, follow these steps:</p>\n<ol><li>\n<p>Create an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> by calling one of the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overloads that takes <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n</li><li>\n<p>Pass the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to one of the <see cref=\"Overload:System.Xml.Linq.XDocument.Load\"></see> overloads of <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that takes <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n</li></ol>\n"
  example:
  - 
  syntax:
    content: public static XDocument Load(Stream stream, LoadOptions options)
    content.vb: Public Shared Function Load(stream As Stream, options As LoadOptions) As XDocument
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream containing the XML data.</p>\n"
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to load base URI and line information.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> object that reads the data that is contained in the stream.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.IO.TextReader)
  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(TextReader)
  fullName: System.Xml.Linq.XDocument.Load(System.IO.TextReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 174
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example creates a document from a <xref href=\"System.IO.StringReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">TextReader tr = new StringReader(\"<Root>Content</Root>\");\nXDocument doc = XDocument.Load(tr);\nConsole.WriteLine(doc);</code></pre>\n<pre><code class=\"vb\">Dim tr As TextReader = New StringReader(\"<Root>Content</Root>\")\nDim doc As XDocument = XDocument.Load(tr)\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>Content</Root></code></pre>\n"
  syntax:
    content: public static XDocument Load(TextReader textReader)
    content.vb: Public Shared Function Load(textReader As TextReader) As XDocument
    parameters:
    - id: textReader
      type: System.IO.TextReader
      description: "\n<p>A <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that contains the contents of the specified <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  id: Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(TextReader, LoadOptions)
  fullName: System.Xml.Linq.XDocument.Load(System.IO.TextReader, System.Xml.Linq.LoadOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 175
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>, optionally preserving white space, setting the base URI, and retaining line information.</p>\n"
  remarks: "\n<p>If the source XML is indented, setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> causes the reader to read all white space in the source XML. Nodes of type <xref href=\"System.Xml.Linq.XText\" data-throw-if-not-resolved=\"false\"></xref> are created for both significant and insignificant white space.</p>\n<p>If the source XML is indented, not setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.</p>\n<p>If the source XML is not indented, setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</p>\n<p>For more information, see Preserving White Space while Loading or Parsing XML and Preserving White Space While Serializing.</p>\n<p>Use <see cref=\"Overload:System.Xml.Linq.XDocument.Parse\"></see> to create an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> from a string that contains XML.</p>\n<p>Setting <xref href=\"System.Xml.Linq.LoadOptions.SetBaseUri\" data-throw-if-not-resolved=\"false\"></xref> is not valid when loading from a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There is a performance penalty if you set the <xref href=\"System.Xml.Linq.LoadOptions.SetLineInfo\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n<p>The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example creates a document from a <xref href=\"System.IO.StringReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">TextReader sr;\nint whiteSpaceNodes;\n\nsr = new StringReader(\"<Root> <Child> </Child> </Root>\");\nXDocument xmlTree1 = XDocument.Load(sr, LoadOptions.None);\nsr.Close();\nwhiteSpaceNodes = xmlTree1\n.Element(\"Root\")\n.DescendantNodesAndSelf()\n.OfType<XText>()\n.Where(tNode => tNode.ToString().Trim().Length == 0)\n.Count();\nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes);\n\nsr = new StringReader(\"<Root> <Child> </Child> </Root>\");\nXDocument xmlTree2 = XDocument.Load(sr, LoadOptions.PreserveWhitespace);\nsr.Close();\nwhiteSpaceNodes = xmlTree2\n.Element(\"Root\")\n.DescendantNodesAndSelf()\n.OfType<XText>()\n.Where(tNode => tNode.ToString().Trim().Length == 0)\n.Count();\nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes);</code></pre>\n<pre><code class=\"vb\">Dim sr As TextReader\nDim whiteSpaceNodes As Integer\n\nsr = New StringReader(\"<Root> <Child> </Child> </Root>\")\nDim xmlTree1 As XDocument = XDocument.Load(sr, LoadOptions.None)\nsr.Close()\nwhiteSpaceNodes = xmlTree1 _\n      .Element(\"Root\") _\n      .DescendantNodesAndSelf() _\n      .OfType(Of XText)() _\n      .Where(Function(ByVal tNode As XNode) tNode. _\n          ToString().Trim().Length = 0).Count()\nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes)\n\nsr = New StringReader(\"<Root> <Child> </Child> </Root>\")\nDim xmlTree2 As XDocument = XDocument.Load(sr, LoadOptions.PreserveWhitespace)\nsr.Close()\nwhiteSpaceNodes = xmlTree2 _\n      .Element(\"Root\") _\n      .DescendantNodesAndSelf() _\n      .OfType(Of XText)() _\n      .Where(Function(ByVal tNode As XNode) tNode. _\n          ToString().Trim().Length = 0).Count()\nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Count of white space nodes (not preserving whitespace): 0\nCount of white space nodes (preserving whitespace): 3</code></pre>\n"
  syntax:
    content: public static XDocument Load(TextReader textReader, LoadOptions options)
    content.vb: Public Shared Function Load(textReader As TextReader, options As LoadOptions) As XDocument
    parameters:
    - id: textReader
      type: System.IO.TextReader
      description: "\n<p>A <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies white space behavior, and whether to load base URI and line information.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.String)
  commentId: M:System.Xml.Linq.XDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(String)
  fullName: System.Xml.Linq.XDocument.Load(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 176
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a file. </p>\n"
  remarks: "\n<p>This method uses an underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to read the XML into an XML tree.</p>\n<p>Use <see cref=\"Overload:System.Xml.Linq.XDocument.Parse\"></see> to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a string that contains XML.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example shows how to load an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a file.</p>\n<p>This example uses the following XML document: </p>\n<p>Sample XML File: Typical Purchase Order (LINQ to XML)</p>\n<pre><code class=\"c#\">XDocument doc = XDocument.Load(\"PurchaseOrder.xml\");\nConsole.WriteLine(doc);</code></pre>\n<pre><code class=\"vb\">Dim doc As XDocument = XDocument.Load(\"PurchaseOrder.xml\")\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><PurchaseOrder PurchaseOrderNumber=\"99503\" OrderDate=\"1999-10-20\">\n<Address Type=\"Shipping\">\n<Name>Ellen Adams</Name>\n<Street>123 Maple Street</Street>\n<City>Mill Valley</City>\n<State>CA</State>\n<Zip>10999</Zip>\n<Country>USA</Country>\n</Address>\n<Address Type=\"Billing\">\n<Name>Tai Yee</Name>\n<Street>8 Oak Avenue</Street>\n<City>Old Town</City>\n<State>PA</State>\n<Zip>95819</Zip>\n<Country>USA</Country>\n</Address>\n<DeliveryNotes>Please leave packages in shed by driveway.</DeliveryNotes>\n<Items>\n<Item PartNumber=\"872-AA\">\n<ProductName>Lawnmower</ProductName>\n<Quantity>1</Quantity>\n<USPrice>148.95</USPrice>\n<Comment>Confirm this is electric</Comment>\n</Item>\n<Item PartNumber=\"926-AA\">\n<ProductName>Baby Monitor</ProductName>\n<Quantity>2</Quantity>\n<USPrice>39.98</USPrice>\n<ShipDate>1999-05-21</ShipDate>\n</Item>\n</Items>\n</PurchaseOrder></code></pre>\n"
  syntax:
    content: public static XDocument Load(string uri)
    content.vb: Public Shared Function Load(uri As String) As XDocument
    parameters:
    - id: uri
      type: System.String
      description: "\n<p>A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that contains the contents of the specified file.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)
  id: Load(System.String,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(String, LoadOptions)
  fullName: System.Xml.Linq.XDocument.Load(System.String, System.Xml.Linq.LoadOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 177
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information.</p>\n"
  remarks: "\n<p>If the source XML is indented, setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> causes the reader to read all white space in the source XML. Nodes of type <xref href=\"System.Xml.Linq.XText\" data-throw-if-not-resolved=\"false\"></xref> are created for both significant and insignificant white space.</p>\n<p>If the source XML is indented, not setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.</p>\n<p>If the source XML is not indented, setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</p>\n<p>For more information, see Preserving White Space while Loading or Parsing XML and Preserving White Space While Serializing.</p>\n<p>Use <see cref=\"Overload:System.Xml.Linq.XDocument.Parse\"></see> to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a string that contains XML.</p>\n<p>There is a performance penalty if you set the <xref href=\"System.Xml.Linq.LoadOptions.SetBaseUri\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Xml.Linq.LoadOptions.SetLineInfo\" data-throw-if-not-resolved=\"false\"></xref> flags.</p>\n<p>The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example shows how to load an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a file.</p>\n<p>This example uses the following XML document:</p>\n<p>Sample XML File: Typical Purchase Order (LINQ to XML)</p>\n<pre><code class=\"c#\">XDocument doc1 = XDocument.Load(\"PurchaseOrder.xml\", LoadOptions.None);\nConsole.WriteLine(\"nodes if not preserving whitespace: {0}\", doc1.DescendantNodes().Count());\n\nXDocument doc2 = XDocument.Load(\"PurchaseOrder.xml\", LoadOptions.PreserveWhitespace);\nConsole.WriteLine(\"nodes if preserving whitespace: {0}\", doc2.DescendantNodes().Count());</code></pre>\n<pre><code class=\"vb\">Dim doc1 As XDocument = XDocument.Load(\"PurchaseOrder.xml\", LoadOptions.None)\nConsole.WriteLine(\"nodes if not preserving whitespace: {0}\", doc1.DescendantNodes().Count())\n\nDim doc2 As XDocument = XDocument.Load(\"PurchaseOrder.xml\", LoadOptions.PreserveWhitespace)\nConsole.WriteLine(\"nodes if preserving whitespace: {0}\", doc2.DescendantNodes().Count())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>nodes if not preserving whitespace: 48\nnodes if preserving whitespace: 82</code></pre>\n"
  syntax:
    content: public static XDocument Load(string uri, LoadOptions options)
    content.vb: Public Shared Function Load(uri As String, options As LoadOptions) As XDocument
    parameters:
    - id: uri
      type: System.String
      description: "\n<p>A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies white space behavior, and whether to load base URI and line information.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that contains the contents of the specified file.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)
  commentId: M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(XmlReader)
  fullName: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 178
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree. To do this, you create an <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref> from a DOM document, and then use the <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref> to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example creates a DOM document, creates an <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref> from the DOM document, creates an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">// Create a DOM document with some content.\nXmlDocument doc = new XmlDocument();\nXmlElement child = doc.CreateElement(\"Child\");\nchild.InnerText = \"child contents\";\nXmlElement root = doc.CreateElement(\"Root\");\nroot.AppendChild(child);\ndoc.AppendChild(root);\n\n// create a reader and move to the content\nusing (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {\n// the reader must be in the Interactive state in order to\n// create a LINQ to XML tree from it.\nnodeReader.MoveToContent();\n\nXDocument xRoot = XDocument.Load(nodeReader);\nConsole.WriteLine(xRoot);\n}</code></pre>\n<pre><code class=\"vb\">' Create a DOM document with some content.\nDim doc As XmlDocument = New XmlDocument()\nDim child As XmlElement = doc.CreateElement(\"Child\")\nchild.InnerText = \"child contents\"\nDim root As XmlElement = doc.CreateElement(\"Root\")\nroot.AppendChild(child)\ndoc.AppendChild(root)\n\n' create a reader and move to the content\nUsing nodeReader = New XmlNodeReader(doc)\n' the reader must be in the Interactive state in order to\n' create a LINQ to XML tree from it.\nnodeReader.MoveToContent()\n\nDim xRoot As XDocument = XDocument.Load(nodeReader)\nConsole.WriteLine(xRoot)\nEnd Using</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Root>\n<Child>child contents</Child>\n</Root></code></pre>\n"
  syntax:
    content: public static XDocument Load(XmlReader reader)
    content.vb: Public Shared Function Load(reader As XmlReader) As XDocument
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>A <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that contains the contents of the specified <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  id: Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Load(XmlReader, LoadOptions)
  fullName: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader, System.Xml.Linq.LoadOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 179
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Loads an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, optionally setting the base URI, and retaining line information.</p>\n"
  remarks: "\n<p>By creating an <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref> from a DOM document, and then using the <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref> to create an <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</p>\n<p>Use <see cref=\"Overload:System.Xml.Linq.XDocument.Parse\"></see> to create an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a string that contains XML.</p>\n<p>Setting <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> is not valid when loading from a <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> is set or not.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> may have a valid base URI or not. If you set <xref href=\"System.Xml.Linq.LoadOptions.SetBaseUri\" data-throw-if-not-resolved=\"false\"></xref>, the base URI will be set in the XML tree from the base URI that is reported by the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> may have a valid line information or not. If you set <xref href=\"System.Xml.Linq.LoadOptions.SetLineInfo\" data-throw-if-not-resolved=\"false\"></xref>, the line information will be set in the XML tree from the line information that is reported by the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There is a performance penalty if you set the <xref href=\"System.Xml.Linq.LoadOptions.SetLineInfo\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n<p>The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example loads the line information that it loads from the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. It then prints the line information.</p>\n<pre><code class=\"c#\">string markup =\n@\"<Root>\n<Child>\n<GrandChild/>\n</Child>\n</Root>\";\n\n// Create a reader and move to the content.\nusing (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))\n{\n// the reader must be in the Interactive state in order to\n// Create a LINQ to XML tree from it.\nnodeReader.MoveToContent();\n\nXDocument xRoot = XDocument.Load(nodeReader, LoadOptions.SetLineInfo);\nConsole.WriteLine(\"{0}{1}{2}\",\n\"Element Name\".PadRight(20),\n\"Line\".PadRight(5),\n\"Position\");\nConsole.WriteLine(\"{0}{1}{2}\",\n\"------------\".PadRight(20),\n\"----\".PadRight(5),\n\"--------\");\nforeach (XElement e in xRoot.Elements(\"Root\").DescendantsAndSelf())\nConsole.WriteLine(\"{0}{1}{2}\",\n    (\"\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),\n    ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),\n    ((IXmlLineInfo)e).LinePosition);\n}</code></pre>\n<pre><code class=\"vb\">Dim markup As String = _\n\"<Root>\" & Environment.NewLine & _\n\"    <Child>\" & Environment.NewLine & _\n\"        <GrandChild/>\" & Environment.NewLine & _\n\"    </Child>\" & Environment.NewLine & _\n\"</Root>\"\n\n' Create a reader and move to the content.\nUsing nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))\n\n' The reader must be in the Interactive state in order to\n' create a LINQ to XML tree from it.\nnodeReader.MoveToContent()\n\nDim xRoot As XDocument = XDocument.Load(nodeReader, LoadOptions.SetLineInfo)\nConsole.WriteLine(\"{0}{1}{2}\", _\n\"Element Name\".PadRight(20), _\n\"Line\".PadRight(5), _\n\"Position\")\nConsole.WriteLine(\"{0}{1}{2}\", _\n\"------------\".PadRight(20), _\n\"----\".PadRight(5), _\n\"--------\")\nFor Each e As XElement In xRoot.Elements(\"Root\").DescendantsAndSelf()\nConsole.WriteLine(\"{0}{1}{2}\", _\n    (\"\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _\n    (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _\n    (DirectCast(e, IXmlLineInfo)).LinePosition)\nNext\nEnd Using</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Element Name        Line Position\n------------        ---- --------\nRoot                1    2\nChild             2    6\nGrandChild      3    10</code></pre>\n"
  syntax:
    content: public static XDocument Load(XmlReader reader, LoadOptions options)
    content.vb: Public Shared Function Load(reader As XmlReader, options As LoadOptions) As XDocument
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>A <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to load base URI and line information.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Parse(System.String)
  commentId: M:System.Xml.Linq.XDocument.Parse(System.String)
  id: Parse(System.String)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Xml.Linq.XDocument.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 180
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a string.</p>\n"
  remarks: "\n<p>This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of <see cref=\"Overload:System.Xml.Linq.XDocument.Parse\"></see> that takes <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> as a parameter.</p>\n<p>For more information, see Preserving White Space while Loading or Parsing XML and Preserving White Space While Serializing.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example creates a string that contains XML. It then parses the string into an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">string str =\n@\"<?xml version=\"\"1.0\"\"?>\n<!-- comment at the root level -->\n<Root>\n<Child>Content</Child>\n</Root>\";\nXDocument doc = XDocument.Parse(str);\nConsole.WriteLine(doc);</code></pre>\n<pre><code class=\"vb\">Dim str As String = _\n\"<?xml version= '1.0'?>\" & _\n\"<!-- comment at the root level -->\" & _\n\"<Root>\" & _\n\"  <Child>Content</Child>\" & _\n\"</Root>\"\n\nDim doc As XDocument = XDocument.Parse(str)\nConsole.WriteLine(doc)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><!-- comment at the root level -->\n<Root>\n<Child>Content</Child>\n</Root></code></pre>\n"
  syntax:
    content: public static XDocument Parse(string text)
    content.vb: Public Shared Function Parse(text As String) As XDocument
    parameters:
    - id: text
      type: System.String
      description: "\n<p>A string that contains XML.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> populated from the string that contains XML.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)
  id: Parse(System.String,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Parse(String, LoadOptions)
  fullName: System.Xml.Linq.XDocument.Parse(System.String, System.Xml.Linq.LoadOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 181
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Creates a new <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> from a string, optionally preserving white space, setting the base URI, and retaining line information.</p>\n"
  remarks: "\n<p>If the source XML is indented, setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> causes the reader to read all white space in the source XML. Nodes of type <xref href=\"System.Xml.Linq.XText\" data-throw-if-not-resolved=\"false\"></xref> are created for both significant and insignificant white space.</p>\n<p>If the source XML is indented, not setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.</p>\n<p>If the source XML is not indented, setting the <xref href=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\" data-throw-if-not-resolved=\"false\"></xref> flag in <em>options</em> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</p>\n<p>For more information, see Preserving White Space while Loading or Parsing XML and Preserving White Space While Serializing.</p>\n<p>Setting <xref href=\"System.Xml.Linq.LoadOptions.SetBaseUri\" data-throw-if-not-resolved=\"false\"></xref> is not valid when parsing from a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There is a performance penalty if you set the <xref href=\"System.Xml.Linq.LoadOptions.SetLineInfo\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n<p>The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.</p>\n<p>LINQ to XML's loading functionality is built upon <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, you might catch any exceptions that are thrown by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> overload methods and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods that read and parse the document.</p>\n"
  example:
  - "\n<p>The following example parses a string into an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">string str =\n@\"<?xml version=\"\"1.0\"\"?>\n<!-- comment at the root level -->\n<Root>\n<Child>Content</Child>\n</Root>\";\nXDocument doc1 = XDocument.Parse(str, LoadOptions.PreserveWhitespace);\nConsole.WriteLine(\"nodes when preserving whitespace: {0}\", doc1.DescendantNodes().Count());\nXDocument doc2 = XDocument.Parse(str, LoadOptions.None);\nConsole.WriteLine(\"nodes when not preserving whitespace: {0}\", doc2.DescendantNodes().Count());</code></pre>\n<pre><code class=\"vb\">Dim str As String = _\n\"<?xml version= '1.0'?>\" & Environment.NewLine & _\n\"<!-- comment at the root level -->\" & Environment.NewLine & _\n\"<Root>\" & Environment.NewLine & _\n\"    <Child>Content</Child>\"  & Environment.NewLine & _\n\"</Root>\"\n\nDim doc1 As XDocument = XDocument.Parse(str, LoadOptions.PreserveWhitespace)\nConsole.WriteLine(\"nodes when preserving whitespace: {0}\", doc1.DescendantNodes().Count())\nDim doc2 As XDocument = XDocument.Parse(str, LoadOptions.None)\nConsole.WriteLine(\"nodes when not preserving whitespace: {0}\", doc2.DescendantNodes().Count())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>nodes when preserving whitespace: 8\nnodes when not preserving whitespace: 4</code></pre>\n"
  syntax:
    content: public static XDocument Parse(string text, LoadOptions options)
    content.vb: Public Shared Function Parse(text As String, options As LoadOptions) As XDocument
    parameters:
    - id: text
      type: System.String
      description: "\n<p>A string that contains XML.</p>\n"
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.LoadOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies white space behavior, and whether to load base URI and line information.</p>\n"
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>An <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> populated from the string that contains XML.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XDocument.Save(System.IO.Stream)
  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Save(Stream)
  fullName: System.Xml.Linq.XDocument.Save(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 182
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Outputs this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.</p>\n<p>If you want to control white space, use the overload of <see cref=\"Overload:System.Xml.Linq.XDocument.Save\"></see> that takes <xref href=\"System.Xml.Linq.SaveOptions\" data-throw-if-not-resolved=\"false\"></xref> as a parameter. Use the <xref href=\"System.Xml.Linq.SaveOptions.DisableFormatting\" data-throw-if-not-resolved=\"false\"></xref> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.</p>\n<p>Use <xref href=\"System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces\" data-throw-if-not-resolved=\"false\"></xref> option if you want to remove duplicate namespace declarations.</p>\n"
  example:
  - 
  syntax:
    content: public void Save(Stream stream)
    content.vb: Public Sub Save(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to output this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  id: Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Save(Stream, SaveOptions)
  fullName: System.Xml.Linq.XDocument.Save(System.IO.Stream, System.Xml.Linq.SaveOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 183
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Outputs this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, optionally specifying formatting behavior.</p>\n"
  remarks: "\n<p>By default the <em>options</em> are set to <xref href=\"System.Xml.Linq.SaveOptions.None\" data-throw-if-not-resolved=\"false\"></xref>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. </p>\n<p>If you want to save unindented XML, specify the <xref href=\"System.Xml.Linq.SaveOptions.DisableFormatting\" data-throw-if-not-resolved=\"false\"></xref> flag for <em>options</em>. This will cause the writer to write all white spaces exactly as represented in the XML tree.</p>\n<p>Use <xref href=\"System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces\" data-throw-if-not-resolved=\"false\"></xref> option if you want to remove duplicate namespace declarations.</p>\n"
  example:
  - 
  syntax:
    content: public void Save(Stream stream, SaveOptions options)
    content.vb: Public Sub Save(stream As Stream, options As SaveOptions)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to output this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to.</p>\n"
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.SaveOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies formatting behavior.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.Save(System.IO.TextWriter)
  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Save(TextWriter)
  fullName: System.Xml.Linq.XDocument.Save(System.IO.TextWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 184
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Serialize this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.</p>\n<p>If you want to control white space, use the overload of <see cref=\"Overload:System.Xml.Linq.XDocument.Save\"></see> that takes <xref href=\"System.Xml.Linq.SaveOptions\" data-throw-if-not-resolved=\"false\"></xref> as a parameter. For more information, see Preserving White Space while Loading or Parsing XML and Preserving White Space While Serializing.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>, saves the document to a <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref>, and then prints the string to the console.</p>\n<pre><code class=\"c#\">StringBuilder sb = new StringBuilder();\n\nXDocument doc = new XDocument(\nnew XElement(\"Root\",\nnew XElement(\"Child\", \"content\")\n)\n);\nTextWriter tr = new StringWriter(sb);\ndoc.Save(tr);\nConsole.WriteLine(sb.ToString());</code></pre>\n<pre><code class=\"vb\">Dim sb As StringBuilder = New StringBuilder()\n\nDim doc As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Root><Child>content</Child></Root>\n\nDim tr As TextWriter = New StringWriter(sb)\ndoc.Save(tr)\nConsole.WriteLine(sb.ToString())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><?xml version=\"1.0\" encoding=\"utf-16\"?>\n<Root>\n<Child>content</Child>\n</Root></code></pre>\n"
  syntax:
    content: public void Save(TextWriter textWriter)
    content.vb: Public Sub Save(textWriter As TextWriter)
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: "\n<p>A <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> will be written to.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  id: Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Save(TextWriter, SaveOptions)
  fullName: System.Xml.Linq.XDocument.Save(System.IO.TextWriter, System.Xml.Linq.SaveOptions)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 185
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Serialize this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>, optionally disabling formatting.</p>\n"
  remarks: "\n<p>If you want to save unindented XML, specify the <xref href=\"System.Xml.Linq.SaveOptions.DisableFormatting\" data-throw-if-not-resolved=\"false\"></xref> flag for <em>options</em>. This will cause the writer to write all white space exactly as represented in the XML tree.</p>\n<p>If you want to save indented XML, do not specify the <xref href=\"System.Xml.Linq.SaveOptions.DisableFormatting\" data-throw-if-not-resolved=\"false\"></xref> flag for <em>options</em>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <see cref=\"Overload:System.Xml.Linq.XDocument.Save\"></see> methods that do not take <em>options</em> as a parameter.</p>\n<p>For more information, see Preserving White Space while Loading or Parsing XML and Preserving White Space While Serializing.</p>\n"
  example:
  - "\n<p>The following example shows two uses of this method. The first use serializes the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> with formatting. The second preserves white space. Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</p>\n<pre><code class=\"c#\">XDocument doc = new XDocument(\nnew XElement(\"Root\",\nnew XElement(\"Child\", \"content\")\n)\n);\nStringBuilder sb1 = new StringBuilder();\nusing (StringWriter sr1 = new StringWriter(sb1)) {\ndoc.Save(sr1, SaveOptions.None);\nConsole.WriteLine(sb1.ToString());\n}\n\nStringBuilder sb2 = new StringBuilder();\nusing (StringWriter sr2 = new StringWriter(sb2)) {\ndoc.Save(sr2, SaveOptions.DisableFormatting);\nConsole.WriteLine(sb2.ToString());\n}</code></pre>\n<pre><code class=\"vb\">Dim doc As XDocument = _ \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Root><Child>content</Child></Root>\n\nDim sb1 As StringBuilder = New StringBuilder()\n\nUsing sr1 = New StringWriter(sb1)\ndoc.Save(sr1, SaveOptions.None)\nConsole.WriteLine(sb1.ToString())\nEnd Using\n\nDim sb2 As StringBuilder = New StringBuilder()\n\nUsing sr2 = New StringWriter(sb2)\ndoc.Save(sr2, SaveOptions.DisableFormatting)\nConsole.WriteLine(sb2.ToString())\nEnd Using</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><?xml version=\"1.0\" encoding=\"utf-16\"?>\n<Root>\n<Child>content</Child>\n</Root>\n<?xml version=\"1.0\" encoding=\"utf-16\"?><Root><Child>content</Child></Root></code></pre>\n"
  syntax:
    content: public void Save(TextWriter textWriter, SaveOptions options)
    content.vb: Public Sub Save(textWriter As TextWriter, options As SaveOptions)
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> to output the XML to.</p>\n"
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: "\n<p>A <xref href=\"System.Xml.Linq.SaveOptions\" data-throw-if-not-resolved=\"false\"></xref> that specifies formatting behavior.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)
  commentId: M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: Save(XmlWriter)
  fullName: System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 186
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Serialize this <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to save an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">StringBuilder sb = new StringBuilder();\nXmlWriterSettings xws = new XmlWriterSettings();\nxws.OmitXmlDeclaration = true;\nxws.Indent = true;\n\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {\nXDocument doc = new XDocument(\nnew XElement(\"Child\",\n    new XElement(\"GrandChild\", \"some content\")\n)\n);\ndoc.Save(xw);\n}\n\nConsole.WriteLine(sb.ToString());</code></pre>\n<pre><code class=\"vb\">Dim sb As StringBuilder = New StringBuilder()\nDim xws As XmlWriterSettings = New XmlWriterSettings()\nxws.OmitXmlDeclaration = True\nxws.Indent = True\n\nUsing xw = XmlWriter.Create(sb, xws)\nDim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)\ndoc.Save(xw)\n\nEnd Using\n\nConsole.WriteLine(sb.ToString())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Child>\n<GrandChild>some content</GrandChild>\n</Child></code></pre>\n"
  syntax:
    content: public void Save(XmlWriter writer)
    content.vb: Public Sub Save(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\n<p>A <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> will be written to.</p>\n"
  seealso:
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  - type: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XDocument
  langs:
  - csharp
  - vb
  name: WriteTo(XmlWriter)
  fullName: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 187
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Write this document to an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to write an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>. Note that the example did not write an XML declaration.</p>\n<pre><code class=\"c#\">StringBuilder sb = new StringBuilder();\nXmlWriterSettings xws = new XmlWriterSettings();\nxws.OmitXmlDeclaration = true;\nxws.Indent = true;\n\nusing (XmlWriter xw = XmlWriter.Create(sb, xws))\n{\nXDocument doc = new XDocument(\nnew XElement(\"Child\",\n    new XElement(\"GrandChild\", \"some content\")\n)\n);\ndoc.WriteTo(xw);\n}\n\nConsole.WriteLine(sb.ToString());</code></pre>\n<pre><code class=\"vb\">Dim sb As StringBuilder = New StringBuilder()\nDim xws As XmlWriterSettings = New XmlWriterSettings()\nxws.OmitXmlDeclaration = True\nxws.Indent = True\n\nUsing xw = XmlWriter.Create(sb, xws)\nDim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)\ndoc.WriteTo(xw)\nEnd Using\n\nConsole.WriteLine(sb.ToString())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code class=\"xml\"><Child>\n<GrandChild>some content</GrandChild>\n</Child></code></pre>\n"
  syntax:
    content: public override void WriteTo(XmlWriter writer)
    content.vb: Public Overrides Sub WriteTo(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\n<p>An <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> into which this method will write.</p>\n"
  overridden: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Xml.Linq.XObject
  parent: System.Xml.Linq
  isExternal: false
  name: XObject
  fullName: System.Xml.Linq.XObject
- uid: System.Xml.Linq.XNode
  parent: System.Xml.Linq
  isExternal: false
  name: XNode
  fullName: System.Xml.Linq.XNode
- uid: System.Xml.Linq.XContainer
  parent: System.Xml.Linq
  isExternal: false
  name: XContainer
  fullName: System.Xml.Linq.XContainer
- uid: System.Xml.Linq.XContainer.FirstNode
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: FirstNode
  fullName: System.Xml.Linq.XContainer.FirstNode
- uid: System.Xml.Linq.XContainer.LastNode
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: LastNode
  fullName: System.Xml.Linq.XContainer.LastNode
- uid: System.Xml.Linq.XContainer.Add(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: true
  name: Add(Object)
  fullName: System.Xml.Linq.XContainer.Add(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Add(System.Object)
    name: Add
    fullName: System.Xml.Linq.XContainer.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Add(System.Object)
    name: Add
    fullName: System.Xml.Linq.XContainer.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Add(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: true
  name: Add(Object[])
  fullName: System.Xml.Linq.XContainer.Add(System.Object[])
  fullname.vb: System.Xml.Linq.XContainer.Add(System.Object())
  name.vb: Add(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Add(System.Object[])
    name: Add
    fullName: System.Xml.Linq.XContainer.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Add(System.Object[])
    name: Add
    fullName: System.Xml.Linq.XContainer.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: true
  name: AddFirst(Object)
  fullName: System.Xml.Linq.XContainer.AddFirst(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
    name: AddFirst
    fullName: System.Xml.Linq.XContainer.AddFirst
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
    name: AddFirst
    fullName: System.Xml.Linq.XContainer.AddFirst
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: true
  name: AddFirst(Object[])
  fullName: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  fullname.vb: System.Xml.Linq.XContainer.AddFirst(System.Object())
  name.vb: AddFirst(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
    name: AddFirst
    fullName: System.Xml.Linq.XContainer.AddFirst
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
    name: AddFirst
    fullName: System.Xml.Linq.XContainer.AddFirst
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.CreateWriter
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: CreateWriter()
  fullName: System.Xml.Linq.XContainer.CreateWriter()
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.CreateWriter
    name: CreateWriter
    fullName: System.Xml.Linq.XContainer.CreateWriter
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.CreateWriter
    name: CreateWriter
    fullName: System.Xml.Linq.XContainer.CreateWriter
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.DescendantNodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: DescendantNodes()
  fullName: System.Xml.Linq.XContainer.DescendantNodes()
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.DescendantNodes
    name: DescendantNodes
    fullName: System.Xml.Linq.XContainer.DescendantNodes
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.DescendantNodes
    name: DescendantNodes
    fullName: System.Xml.Linq.XContainer.DescendantNodes
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Descendants
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants()
  fullName: System.Xml.Linq.XContainer.Descendants()
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Descendants
    name: Descendants
    fullName: System.Xml.Linq.XContainer.Descendants
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Descendants
    name: Descendants
    fullName: System.Xml.Linq.XContainer.Descendants
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants(XName)
  fullName: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
    name: Descendants
    fullName: System.Xml.Linq.XContainer.Descendants
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
    name: Descendants
    fullName: System.Xml.Linq.XContainer.Descendants
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Element(XName)
  fullName: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
    name: Element
    fullName: System.Xml.Linq.XContainer.Element
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
    name: Element
    fullName: System.Xml.Linq.XContainer.Element
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Elements
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements()
  fullName: System.Xml.Linq.XContainer.Elements()
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Elements
    name: Elements
    fullName: System.Xml.Linq.XContainer.Elements
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Elements
    name: Elements
    fullName: System.Xml.Linq.XContainer.Elements
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements(XName)
  fullName: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
    name: Elements
    fullName: System.Xml.Linq.XContainer.Elements
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
    name: Elements
    fullName: System.Xml.Linq.XContainer.Elements
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.Nodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Nodes()
  fullName: System.Xml.Linq.XContainer.Nodes()
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.Nodes
    name: Nodes
    fullName: System.Xml.Linq.XContainer.Nodes
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.Nodes
    name: Nodes
    fullName: System.Xml.Linq.XContainer.Nodes
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.RemoveNodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: RemoveNodes()
  fullName: System.Xml.Linq.XContainer.RemoveNodes()
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.RemoveNodes
    name: RemoveNodes
    fullName: System.Xml.Linq.XContainer.RemoveNodes
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.RemoveNodes
    name: RemoveNodes
    fullName: System.Xml.Linq.XContainer.RemoveNodes
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: true
  name: ReplaceNodes(Object)
  fullName: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
    name: ReplaceNodes
    fullName: System.Xml.Linq.XContainer.ReplaceNodes
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
    name: ReplaceNodes
    fullName: System.Xml.Linq.XContainer.ReplaceNodes
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: true
  name: ReplaceNodes(Object[])
  fullName: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  fullname.vb: System.Xml.Linq.XContainer.ReplaceNodes(System.Object())
  name.vb: ReplaceNodes(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
    name: ReplaceNodes
    fullName: System.Xml.Linq.XContainer.ReplaceNodes
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
    name: ReplaceNodes
    fullName: System.Xml.Linq.XContainer.ReplaceNodes
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.DocumentOrderComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DocumentOrderComparer
  fullName: System.Xml.Linq.XNode.DocumentOrderComparer
- uid: System.Xml.Linq.XNode.EqualityComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: EqualityComparer
  fullName: System.Xml.Linq.XNode.EqualityComparer
- uid: System.Xml.Linq.XNode.NextNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NextNode
  fullName: System.Xml.Linq.XNode.NextNode
- uid: System.Xml.Linq.XNode.PreviousNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: PreviousNode
  fullName: System.Xml.Linq.XNode.PreviousNode
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddAfterSelf(Object)
  fullName: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddAfterSelf(Object[])
  fullName: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  fullname.vb: System.Xml.Linq.XNode.AddAfterSelf(System.Object())
  name.vb: AddAfterSelf(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
    name: AddAfterSelf
    fullName: System.Xml.Linq.XNode.AddAfterSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddBeforeSelf(Object)
  fullName: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: AddBeforeSelf(Object[])
  fullName: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  fullname.vb: System.Xml.Linq.XNode.AddBeforeSelf(System.Object())
  name.vb: AddBeforeSelf(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
    name: AddBeforeSelf
    fullName: System.Xml.Linq.XNode.AddBeforeSelf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.Ancestors
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors()
  fullName: System.Xml.Linq.XNode.Ancestors()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.Ancestors
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.Ancestors
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors(XName)
  fullName: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
    name: Ancestors
    fullName: System.Xml.Linq.XNode.Ancestors
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CompareDocumentOrder(XNode, XNode)
  fullName: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: CompareDocumentOrder
    fullName: System.Xml.Linq.XNode.CompareDocumentOrder
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: CompareDocumentOrder
    fullName: System.Xml.Linq.XNode.CompareDocumentOrder
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.CreateReader
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader()
  fullName: System.Xml.Linq.XNode.CreateReader()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.CreateReader
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.CreateReader
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader(ReaderOptions)
  fullName: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - uid: System.Xml.Linq.ReaderOptions
    name: ReaderOptions
    fullName: System.Xml.Linq.ReaderOptions
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
    name: CreateReader
    fullName: System.Xml.Linq.XNode.CreateReader
  - name: (
    fullName: (
  - uid: System.Xml.Linq.ReaderOptions
    name: ReaderOptions
    fullName: System.Xml.Linq.ReaderOptions
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DeepEquals(XNode, XNode)
  fullName: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: DeepEquals
    fullName: System.Xml.Linq.XNode.DeepEquals
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    name: DeepEquals
    fullName: System.Xml.Linq.XNode.DeepEquals
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf()
  fullName: System.Xml.Linq.XNode.ElementsAfterSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf(XName)
  fullName: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
    name: ElementsAfterSelf
    fullName: System.Xml.Linq.XNode.ElementsAfterSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf()
  fullName: System.Xml.Linq.XNode.ElementsBeforeSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf(XName)
  fullName: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
    name: ElementsBeforeSelf
    fullName: System.Xml.Linq.XNode.ElementsBeforeSelf
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    fullName: System.Xml.Linq.XName
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsAfter(XNode)
  fullName: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
    name: IsAfter
    fullName: System.Xml.Linq.XNode.IsAfter
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
    name: IsAfter
    fullName: System.Xml.Linq.XNode.IsAfter
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsBefore(XNode)
  fullName: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
    name: IsBefore
    fullName: System.Xml.Linq.XNode.IsBefore
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
    name: IsBefore
    fullName: System.Xml.Linq.XNode.IsBefore
  - name: (
    fullName: (
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.NodesAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesAfterSelf()
  fullName: System.Xml.Linq.XNode.NodesAfterSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.NodesAfterSelf
    name: NodesAfterSelf
    fullName: System.Xml.Linq.XNode.NodesAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.NodesAfterSelf
    name: NodesAfterSelf
    fullName: System.Xml.Linq.XNode.NodesAfterSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.NodesBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesBeforeSelf()
  fullName: System.Xml.Linq.XNode.NodesBeforeSelf()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.NodesBeforeSelf
    name: NodesBeforeSelf
    fullName: System.Xml.Linq.XNode.NodesBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.NodesBeforeSelf
    name: NodesBeforeSelf
    fullName: System.Xml.Linq.XNode.NodesBeforeSelf
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: ReadFrom(XmlReader)
  fullName: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
    name: ReadFrom
    fullName: System.Xml.Linq.XNode.ReadFrom
  - name: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
    name: ReadFrom
    fullName: System.Xml.Linq.XNode.ReadFrom
  - name: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.Remove
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Remove()
  fullName: System.Xml.Linq.XNode.Remove()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.Remove
    name: Remove
    fullName: System.Xml.Linq.XNode.Remove
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.Remove
    name: Remove
    fullName: System.Xml.Linq.XNode.Remove
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: ReplaceWith(Object)
  fullName: System.Xml.Linq.XNode.ReplaceWith(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: ReplaceWith(Object[])
  fullName: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  fullname.vb: System.Xml.Linq.XNode.ReplaceWith(System.Object())
  name.vb: ReplaceWith(Object())
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
    name: ReplaceWith
    fullName: System.Xml.Linq.XNode.ReplaceWith
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ToString
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString()
  fullName: System.Xml.Linq.XNode.ToString()
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ToString
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ToString
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString(SaveOptions)
  fullName: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - uid: System.Xml.Linq.SaveOptions
    name: SaveOptions
    fullName: System.Xml.Linq.SaveOptions
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
    name: ToString
    fullName: System.Xml.Linq.XNode.ToString
  - name: (
    fullName: (
  - uid: System.Xml.Linq.SaveOptions
    name: SaveOptions
    fullName: System.Xml.Linq.SaveOptions
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.BaseUri
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: BaseUri
  fullName: System.Xml.Linq.XObject.BaseUri
- uid: System.Xml.Linq.XObject.Document
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Document
  fullName: System.Xml.Linq.XObject.Document
- uid: System.Xml.Linq.XObject.Parent
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Parent
  fullName: System.Xml.Linq.XObject.Parent
- uid: System.Xml.Linq.XObject.Changed
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changed
  fullName: System.Xml.Linq.XObject.Changed
- uid: System.Xml.Linq.XObject.Changing
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changing
  fullName: System.Xml.Linq.XObject.Changing
- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: AddAnnotation(Object)
  fullName: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
    name: AddAnnotation
    fullName: System.Xml.Linq.XObject.AddAnnotation
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
    name: AddAnnotation
    fullName: System.Xml.Linq.XObject.AddAnnotation
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotation(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: Annotation(Type)
  fullName: System.Xml.Linq.XObject.Annotation(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotation(System.Type)
    name: Annotation
    fullName: System.Xml.Linq.XObject.Annotation
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotation(System.Type)
    name: Annotation
    fullName: System.Xml.Linq.XObject.Annotation
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotation``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation<T>()
  fullName: System.Xml.Linq.XObject.Annotation<T>()
  fullname.vb: System.Xml.Linq.XObject.Annotation(Of T)()
  name.vb: Annotation(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotation``1
    name: Annotation<T>
    fullName: System.Xml.Linq.XObject.Annotation<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotation``1
    name: Annotation(Of T)
    fullName: System.Xml.Linq.XObject.Annotation(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: Annotations(Type)
  fullName: System.Xml.Linq.XObject.Annotations(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotations(System.Type)
    name: Annotations
    fullName: System.Xml.Linq.XObject.Annotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotations(System.Type)
    name: Annotations
    fullName: System.Xml.Linq.XObject.Annotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.Annotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations<T>()
  fullName: System.Xml.Linq.XObject.Annotations<T>()
  fullname.vb: System.Xml.Linq.XObject.Annotations(Of T)()
  name.vb: Annotations(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotations``1
    name: Annotations<T>
    fullName: System.Xml.Linq.XObject.Annotations<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotations``1
    name: Annotations(Of T)
    fullName: System.Xml.Linq.XObject.Annotations(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: RemoveAnnotations(Type)
  fullName: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    name: RemoveAnnotations
    fullName: System.Xml.Linq.XObject.RemoveAnnotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    name: RemoveAnnotations
    fullName: System.Xml.Linq.XObject.RemoveAnnotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.Linq.XObject.RemoveAnnotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations<T>()
  fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>()
  fullname.vb: System.Xml.Linq.XObject.RemoveAnnotations(Of T)()
  name.vb: RemoveAnnotations(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1
    name: RemoveAnnotations<T>
    fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1
    name: RemoveAnnotations(Of T)
    fullName: System.Xml.Linq.XObject.RemoveAnnotations(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Xml.Linq.XDeclaration
  parent: System.Xml.Linq
  isExternal: false
  name: XDeclaration
  fullName: System.Xml.Linq.XDeclaration
- uid: System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: false
  name: XDocument
  fullName: System.Xml.Linq.XDocument
- uid: System.Xml.Linq.XDocumentType
  parent: System.Xml.Linq
  isExternal: false
  name: XDocumentType
  fullName: System.Xml.Linq.XDocumentType
- uid: System.Xml.Linq.XObject.NodeType
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: NodeType
  fullName: System.Xml.Linq.XObject.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: false
  name: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Xml.Linq.LoadOptions
  parent: System.Xml.Linq
  isExternal: false
  name: LoadOptions
  fullName: System.Xml.Linq.LoadOptions
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  fullName: System.IO.TextReader
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Linq.SaveOptions
  parent: System.Xml.Linq
  isExternal: false
  name: SaveOptions
  fullName: System.Xml.Linq.SaveOptions
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XNode
  isExternal: true
  name: WriteTo(XmlWriter)
  fullName: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.Linq.XNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.Linq.XNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
