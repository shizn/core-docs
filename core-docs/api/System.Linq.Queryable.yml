items:
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  id: Queryable
  parent: System.Linq
  children:
  - System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  - System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  - System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  - System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  - System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  langs:
  - csharp
  - vb
  name: Queryable
  fullName: System.Linq.Queryable
  type: Class
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Queryable
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 37
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Provides a set of <strong>static</strong> (<strong>Shared</strong> in Visual Basic) methods for querying data structures that implement <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The set of methods declared in the <xref href=\"System.Linq.Queryable\" data-throw-if-not-resolved=\"false\"></xref> class provides an implementation of the standard query operators for querying data sources that implement <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>. The standard query operators are general purpose methods that follow the LINQ pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</p>\n<p>The majority of the methods in this class are defined as extension methods that extend the <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> type. This means they can be called like an instance method on any object that implements <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>. These methods that extend <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> do not perform any querying directly. Instead, their functionality is to build an <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the input <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>. The method that is called depends on whether the <xref href=\"System.Linq.Queryable\" data-throw-if-not-resolved=\"false\"></xref> method returns a singleton value, in which case <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is called, or has enumerable results, in which case <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>The actual query execution on the target data is performed by a class that implements <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>. The expectation of any <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation is that the result of executing an expression tree that was constructed by a <xref href=\"System.Linq.Queryable\" data-throw-if-not-resolved=\"false\"></xref> standard query operator method is equivalent to the result of calling the corresponding method in the <xref href=\"System.Linq.Enumerable\" data-throw-if-not-resolved=\"false\"></xref> class, if the data source were an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In addition to the standard query operator methods that operate on <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> objects, this class also contains a method, <see cref=\"Overload:System.Linq.Queryable.AsQueryable\"></see>, which types <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> objects as <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  example:
  - 
  syntax:
    content: public class Queryable
    content.vb: Public Class Queryable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  commentId: M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  id: Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TSource, TSource>>)
  fullName: System.Linq.Queryable.Aggregate<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 39
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Applies an accumulator function over a sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that the specified function, <em>func</em>, is applied to each value in the source sequence and the accumulated value is returned. The first value in <em>source</em> is used as the seed value for the accumulated value, which corresponds to the first parameter in <em>func</em>.</p>\n<p>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, and four numeric aggregation methods, namely <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\" data-throw-if-not-resolved=\"false\"></xref> to build a sentence from an array of strings.</p>System.Linq.Queryable#1"
  syntax:
    content: public static TSource Aggregate<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TSource, TSource>> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As IQueryable(Of TSource), func As Expressions.Expression(Of Func(Of TSource, TSource, TSource))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TSource},{TSource}}}
      description: "\n<p>An accumulator function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The final accumulator value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TSource, TSource)))
  name.vb: Aggregate(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TSource, TSource)))
- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  commentId: M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  id: Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>)
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 40
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that the specified function, <em>func</em>, is applied to each value in the source sequence and the accumulated value is returned. The <em>seed</em> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <em>func</em>.</p>\n<p>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, and four numeric aggregation methods, namely <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to apply an accumulator function when a seed value is provided to the function.</p>System.Linq.Queryable#2"
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this IQueryable<TSource> source, TAccumulate seed, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))) As TAccumulate
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
      description: "\n<p>An accumulator function to invoke on each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    return:
      type: '{TAccumulate}'
      description: "\n<p>The final accumulator value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate)(System.Linq.IQueryable(Of TSource), TAccumulate, System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)))
  name.vb: Aggregate(Of TSource, TAccumulate)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)))
- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  commentId: M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  id: Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>, Expressions.Expression<Func<TAccumulate, TResult>>)
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>, System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 41
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that the specified function, <em>func</em>, is applied to each value in the source sequence and the accumulated value is returned. The <em>seed</em> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <em>func</em>. The final accumulated value is passed to <em>selector</em> to obtain the result value.</p>\n<p>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, and four numeric aggregation methods, namely <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> to apply an accumulator function and a result selector.</p>System.Linq.Queryable#3"
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this IQueryable<TSource> source, TAccumulate seed, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>> func, Expressions.Expression<Func<TAccumulate, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), selector As Expressions.Expression(Of Func(Of TAccumulate, TResult))) As TResult
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
      description: "\n<p>An accumulator function to invoke on each element.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TResult}}}
      description: "\n<p>A function to transform the final accumulator value into the result value.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    - id: TResult
      description: "\n<p>The type of the resulting value.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The transformed final accumulator value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.IQueryable(Of TSource), TAccumulate, System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)), System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TResult)))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), Expressions.Expression(Of Func(Of TAccumulate, TResult)))
- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: All<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.All<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 42
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether all the elements of a sequence satisfy a condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the <em>source</em> parameter's type. The expected behavior is that it determines if all the elements in <em>source</em> satisfy the condition in <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether all the elements in a sequence satisfy a condition.</p>System.Linq.Queryable#4<p>The Boolean value that the <xref href=\"System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method returns is typically used in the predicate of a <strong>where</strong> clause (<strong>Where</strong> clause in Visual Basic) or a direct call to the <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method. The following example demonstrates this use of the All method.</p>System.Linq.Queryable#134"
  syntax:
    content: public static bool All<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence whose elements to test for a condition.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.All(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  id: Any``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Any<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Any<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 43
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether a sequence contains any elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it determines if <em>source</em> contains any elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a sequence contains any elements.</p>System.Linq.Queryable#5<p>The Boolean value that the <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns is typically used in the predicate of a <strong>where</strong> clause (<strong>Where</strong> clause in Visual Basic) or a direct call to the <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method. The following example demonstrates this use of the Any method.</p>System.Linq.Queryable#135"
  syntax:
    content: public static bool Any<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence to check for being empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the source sequence contains any elements; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Any(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Any(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Any<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Any<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 44
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether any element of a sequence satisfies a condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it determines if any of the elements of <em>source</em> satisfy the condition specified by <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether any element in a sequence satisfies a condition.</p>System.Linq.Queryable#6"
  syntax:
    content: public static bool Any<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence whose elements to test for a condition.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if any elements in the source sequence pass the test in the specified predicate; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Any(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  id: AsQueryable(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsQueryable
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 45
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Converts an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> returns it directly. Otherwise, it returns an <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that executes queries by calling the equivalent query operator methods in <xref href=\"System.Linq.Enumerable\" data-throw-if-not-resolved=\"false\"></xref> instead of those in <xref href=\"System.Linq.Queryable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method assumes that <em>source</em> implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> for some <em>T</em>. At runtime, the result is of type <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> for the same <em>T</em>. This method is useful in dynamic scenarios when you do not statically know the type of <em>T</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable AsQueryable(this IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsQueryable(source As IEnumerable) As IQueryable
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: "\n<p>A sequence to convert.</p>\n"
    return:
      type: System.Linq.IQueryable
      description: "\n<p>An <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> that represents the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>source</em> does not implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> for some <em>T</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: System.Linq.Queryable.AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsQueryable
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 46
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Converts a generic <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to a generic <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> returns it directly. Otherwise, it returns an <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that executes queries by calling the equivalent query operator methods in <xref href=\"System.Linq.Enumerable\" data-throw-if-not-resolved=\"false\"></xref> instead of those in <xref href=\"System.Linq.Queryable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to convert an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Queryable#125"
  syntax:
    content: public static IQueryable<TElement> AsQueryable<TElement>(this IEnumerable<TElement> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsQueryable(Of TElement)(source As IEnumerable(Of TElement)) As IQueryable(Of TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: "\n<p>A sequence to convert.</p>\n"
    typeParameters:
    - id: TElement
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TElement}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.AsQueryable(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: AsQueryable(Of TElement)(IEnumerable(Of TElement))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  id: Average(System.Linq.IQueryable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 47
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#8"
  syntax:
    content: public static decimal Average(this IQueryable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: "\n<p>A sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Decimal))
  name.vb: Average(IQueryable(Of Decimal))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  id: Average(System.Linq.IQueryable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Double>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 48
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#8"
  syntax:
    content: public static double Average(this IQueryable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: "\n<p>A sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Double))
  name.vb: Average(IQueryable(Of Double))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  id: Average(System.Linq.IQueryable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 49
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>System.Linq.Queryable#8"
  syntax:
    content: public static double Average(this IQueryable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: "\n<p>A sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Int32))
  name.vb: Average(IQueryable(Of Int32))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  id: Average(System.Linq.IQueryable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 50
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#8"
  syntax:
    content: public static double Average(this IQueryable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Long)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: "\n<p>A sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Int64))
  name.vb: Average(IQueryable(Of Int64))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 51
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#12"
  syntax:
    content: public static decimal ? Average(this IQueryable<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(IQueryable(Of Nullable(Of Decimal)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 52
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#12"
  syntax:
    content: public static double ? Average(this IQueryable<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Double)))
  name.vb: Average(IQueryable(Of Nullable(Of Double)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 53
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#12"
  syntax:
    content: public static double ? Average(this IQueryable<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Integer?)) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)))
  name.vb: Average(IQueryable(Of Nullable(Of Int32)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 54
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>System.Linq.Queryable#12"
  syntax:
    content: public static double ? Average(this IQueryable<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Long?)) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)))
  name.vb: Average(IQueryable(Of Nullable(Of Int64)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 55
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#12"
  syntax:
    content: public static float ? Average(this IQueryable<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Single)))
  name.vb: Average(IQueryable(Of Nullable(Of Single)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  id: Average(System.Linq.IQueryable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Single>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 56
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> itself. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#8"
  syntax:
    content: public static float Average(this IQueryable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: "\n<p>A sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Single))
  name.vb: Average(IQueryable(Of Single))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 57
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static decimal Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal))) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 58
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 59
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Queryable#18"
  syntax:
    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 60
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 61
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static decimal ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal?))) As Decimal?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 62
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static double ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double?))) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 63
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static double ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer?))) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 64
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static double ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long?))) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 65
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static float ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single?))) As Single?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 66
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it calculates the average of the values in <em>source</em> after invoking <em>selector</em> on each value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> length in a sequence of values of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#18"
  syntax:
    content: public static float Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single))) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))
- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  commentId: M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  id: Cast``1(System.Linq.IQueryable)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(IQueryable)
  fullName: System.Linq.Queryable.Cast<TResult>(System.Linq.IQueryable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 67
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Converts the elements of an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> to the specified type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it converts the values in <em>source</em> to type <em>TResult</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\" data-throw-if-not-resolved=\"false\"></xref> to convert objects in a sequence to type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Queryable#19"
  syntax:
    content: public static IQueryable<TResult> Cast<TResult>(this IQueryable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As IQueryable) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "\n<p>The <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be converted.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type to convert the elements of <em>source</em> to.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains each element of the source sequence converted to the specified type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>An element in the sequence cannot be cast to type <em>TResult</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Cast(Of TResult)(System.Linq.IQueryable)
  name.vb: Cast(Of TResult)(IQueryable)
- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Concat<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 68
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Concatenates two sequences.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that the elements in <em>source2</em> are concatenated to those of <em>source1</em> to create a new sequence.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to concatenate two sequences.</p>System.Linq.Queryable#20"
  syntax:
    content: public static IQueryable<TSource> Concat<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The first sequence to concatenate.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to concatenate to the first sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the concatenated elements of the two input sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Concat(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  id: Contains``1(System.Linq.IQueryable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IQueryable<TSource>, TSource)
  fullName: System.Linq.Queryable.Contains<TSource>(System.Linq.IQueryable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 69
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it determines if <em>source</em> contains <em>item</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a sequence contains a specific element.</p>System.Linq.Queryable#21"
  syntax:
    content: public static bool Contains<TSource>(this IQueryable<TSource> source, TSource item)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> in which to locate <em>item</em>.</p>\n"
    - id: item
      type: '{TSource}'
      description: "\n<p>The object to locate in the sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the input sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(System.Linq.IQueryable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource)
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Contains<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 70
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it determines if <em>source</em> contains <em>item</em> by using <em>comparer</em> to compare values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool Contains<TSource>(this IQueryable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> in which to locate <em>item</em>.</p>\n"
    - id: item
      type: '{TSource}'
      description: "\n<p>The object to locate in the sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the input sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(System.Linq.IQueryable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  id: Count``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Count<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Count<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 71
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the number of elements in a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it counts the number of items in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in a sequence.</p>System.Linq.Queryable#22"
  syntax:
    content: public static int Count<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of elements in <em>source</em> is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Count(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Count(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Count<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Count<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 72
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the number of elements in the specified sequence that satisfies a condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it counts the number of items in <em>source</em> that satisfy the condition specified by <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in a sequence that satisfy a condition.</p>System.Linq.Queryable#23"
  syntax:
    content: public static int Count<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the sequence that satisfies the condition in the predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of elements in <em>source</em> is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Count(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 73
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns <em>source</em> if it is not empty. Otherwise, it returns an <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains default(<em>TSource</em>).</p>\n"
  example:
  - "\n<p>The following code examples demonstrate how to use <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to provide a default value in case the source sequence is empty.</p>System.Linq.Queryable#24"
  syntax:
    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return a default value for if empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty; otherwise, <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 74
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns <em>source</em> if it is not empty. Otherwise, it returns an <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>defaultValue</em>.</p>\n"
  example:
  - "\n<p>The following code example shows a situation in which it is useful to call <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> in a LINQ query. A default value is passed to <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> in this example.</p>System.Linq.Queryable#25"
  syntax:
    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(this IQueryable<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource), defaultValue As TSource) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the specified value for if empty.</p>\n"
    - id: defaultValue
      type: '{TSource}'
      description: "\n<p>The value to return if the sequence is empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>defaultValue</em> if <em>source</em> is empty; otherwise, <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(System.Linq.IQueryable(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource), TSource)
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  id: Distinct``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 75
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns an unordered sequence of the unique items in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return distinct elements from a sequence.</p>System.Linq.Queryable#27"
  syntax:
    content: public static IQueryable<TSource> Distinct<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to remove duplicates from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains distinct elements from <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Distinct(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 76
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns an unordered sequence of the unique items in <em>source</em> by using <em>comparer</em> to compare values.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TSource> Distinct<TSource>(this IQueryable<TSource> source, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to remove duplicates from.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains distinct elements from <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IQueryable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  id: ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 77
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the element at a specified index in a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the item at position <em>index</em> in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to return an element at a specific position in a sequence.</p>System.Linq.Queryable#28"
  syntax:
    content: public static TSource ElementAt<TSource>(this IQueryable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to retrieve.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The element at the specified position in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ElementAt(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 78
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the item at position <em>index</em> in <em>source</em>, or default(<em>TSource</em>) if <em>index</em> is outside the bounds of <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. This example uses a value for <em>index</em> that is outside the bounds of the source sequence.</p>System.Linq.Queryable#29"
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to retrieve.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(<em>TSource</em>) if <em>index</em> is outside the bounds of <em>source</em>; otherwise, the element at the specified position in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ElementAtOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 79
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the<em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of  the <em>source1</em> parameter. The expected behavior is that all the elements in <em>source1</em> are returned except for those that are also in <em>source2</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return those elements that only appear in the first source sequence.</p>System.Linq.Queryable#34"
  syntax:
    content: public static IQueryable<TSource> Except<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that are not also in <em>source2</em> will be returned.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the set difference of the two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Except(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 80
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the<em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that all the elements in <em>source1</em> are returned except for those that are also in <em>source2</em>, and <em>comparer</em> is used to compare values.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TSource> Except<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that are not also in <em>source2</em> will be returned.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the set difference of the two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Except(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  id: First``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: First<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.First<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 81
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the first element in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return the first element in a sequence.</p>System.Linq.Queryable#35"
  syntax:
    content: public static TSource First<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The first element in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.First(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: First(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: First<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.First<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 82
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a sequence that satisfies a specified condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the first element in <em>source</em> that satisfies the condition specified by <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of a sequence that satisfies a condition.</p>System.Linq.Queryable#36"
  syntax:
    content: public static TSource First<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The first element in <em>source</em> that passes the test in <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.First(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: First(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  id: FirstOrDefault``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 83
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the first element in <em>source</em>, or a default value if <em>source</em> is empty.</p>\n<p>The <see cref=\"Overload:System.Linq.Queryable.FirstOrDefault\"></see> method does not provide a way to specify the default value to return if <em>source</em> is empty. If you want to specify a default value other than <strong>default</strong>(<em>TSource</em>), use the <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method as described in the Example section.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> on an empty sequence.</p>System.Linq.Queryable#37<p>Sometimes the value of <strong>default</strong>(<em>TSource</em>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method to specify the default value that you want to use if the collection is empty. Then, call <xref href=\"System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to specify a default value of 1.</p>System.Linq.Queryable#131"
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 84
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the first element in <em>source</em> that satisfies the condition in <em>predicate</em>, or a default value if no element satisfies the condition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> by passing in a predicate. In the second query, there is no element in the sequence that satisfies the condition.</p>System.Linq.Queryable#38"
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 85
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by a key value that is obtained by invoking <em>keySelector</em> on each element.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to group the elements of a sequence.</p>System.Linq.Queryable#14"
  syntax:
    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IQueryable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: "\n<p>An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object contains a sequence of objects and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 86
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by a key value. The key value is obtained by invoking <em>keySelector</em> on each element, and key values are compared by using <em>comparer</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: "\n<p>An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> contains a sequence of objects and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 87
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by a key value that is obtained by invoking <em>keySelector</em> on each element. It invokes <em>elementSelector</em> on each element to obtain a result element.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\" data-throw-if-not-resolved=\"false\"></xref> to group the elements of a sequence.</p>System.Linq.Queryable#39"
  syntax:
    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement))) As IQueryable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> contains a sequence of objects of type <em>TElement</em> and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 88
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by a key value that is obtained by invoking <em>keySelector</em> on each element. Key values are compared by using <em>comparer</em>. The <em>elementSelector</em> parameter is invoked on each element to obtain a result element.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> contains a sequence of objects of type <em>TElement</em> and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 89
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by a key value that is obtained by invoking <em>keySelector</em> on each element. The <em>resultSelector</em> parameter is used to obtain a result value from each group and its key.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\" data-throw-if-not-resolved=\"false\"></xref> to group the elements of a sequence and project a sequence of results of type <em>TResult</em>.</p>System.Linq.Queryable#15"
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 90
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by key values that are obtained by invoking <em>keySelector</em> on each element. The <em>comparer</em> parameter is used to compare keys and the <em>resultSelector</em> parameter is used to obtain a result value from each group and its key.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 91
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by key values that are obtained by invoking <em>keySelector</em> on each element. The <em>elementSelector</em> parameter is used to project the elements of each group, and the <em>resultSelector</em> parameter is used to obtain a result value from each group and its key.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\" data-throw-if-not-resolved=\"false\"></xref> to group the elements of a sequence and project a sequence of results of type <em>TResult</em>.</p>System.Linq.Queryable#130"
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)))
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 92
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it groups the elements of <em>source</em> by key values that are obtained by invoking <em>keySelector</em> on each element. The <em>comparer</em> parameter is used to compare key values. The <em>elementSelector</em> parameter is used to project the elements of each group, and the <em>resultSelector</em> parameter is used to obtain a result value from each group and its key.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 93
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>outer</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>outer</em> parameter. The expected behavior is that the <em>outerKeySelector</em> and <em>innerKeySelector</em> functions are used to extract keys from <em>outer</em> and <em>inner</em>, respectively. These keys are compared for equality to match each element in <em>outer</em> with zero or more elements from <em>inner</em>. Then the <em>resultSelector</em> function is invoked to project a result object from each group of correlated elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a grouped join on two sequences.</p>System.Linq.Queryable#40"
  syntax:
    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements of type <em>TResult</em> obtained by performing a grouped join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 94
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>outer</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>outer</em> parameter. The expected behavior is that the <em>outerKeySelector</em> and <em>innerKeySelector</em> functions are used to extract keys from <em>outer</em> and <em>inner</em>, respectively. These keys are compared for equality by using <em>comparer</em>. The outcome of the comparisons is used to match each element in <em>outer</em> with zero or more elements from <em>inner</em>. Then the <em>resultSelector</em> function is invoked to project a result object from each group of correlated elements.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>A comparer to hash and compare keys.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements of type <em>TResult</em> obtained by performing a grouped join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 95
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that all the elements in <em>source1</em> that are also in <em>source2</em> are returned.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return the elements that appear in each of two sequences.</p>System.Linq.Queryable#41"
  syntax:
    content: public static IQueryable<TSource> Intersect<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence whose distinct elements that also appear in <em>source2</em> are returned.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence whose distinct elements that also appear in the first sequence are returned.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence that contains the set intersection of the two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 96
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that all the elements in <em>source1</em> that are also in <em>source2</em> are returned. The <em>comparer</em> parameter is used to compare elements.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TSource> Intersect<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements that also appear in <em>source2</em> are returned.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements that also appear in the first sequence are returned.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the set intersection of the two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>)
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 97
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>outer</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>outer</em> parameter. The expected behavior is that of an inner join. The <em>outerKeySelector</em> and <em>innerKeySelector</em> functions are used to extract keys from <em>outer</em> and <em>inner</em>, respectively. These keys are compared for equality to match elements from each sequence. A pair of elements is stored for each element in <em>inner</em> that matches an element in <em>outer</em>. Then the <em>resultSelector</em> function is invoked to project a result object from each pair of matching elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\" data-throw-if-not-resolved=\"false\"></xref> to perform an inner join of two sequences based on a common key.</p>System.Linq.Queryable#42"
  syntax:
    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, TInner, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, TInner, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that has elements of type <em>TResult</em> obtained by performing an inner join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)))
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 98
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>outer</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>outer</em> parameter. The expected behavior is that of an inner join. The <em>outerKeySelector</em> and <em>innerKeySelector</em> functions are used to extract keys from <em>outer</em> and <em>inner</em>, respectively. These keys are compared for equality by using <em>comparer</em>. The outcome of the comparisons is used to create a matching pair for each element in <em>inner</em> that matches an element in <em>outer</em>. Then the <em>resultSelector</em> function is invoked to project a result object from each pair of matching elements.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, TInner, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to hash and compare keys.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that has elements of type <em>TResult</em> obtained by performing an inner join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  id: Last``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Last<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Last<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 99
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the last element in a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the last element in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of an array.</p>System.Linq.Queryable#43"
  syntax:
    content: public static TSource Last<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The value at the last position in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Last(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Last(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Last<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Last<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 100
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a sequence that satisfies a specified condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the last element in <em>source</em> that satisfies the condition specified by <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of an array that satisfies a condition.</p>System.Linq.Queryable#44"
  syntax:
    content: public static TSource Last<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The last element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Last(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Last(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  id: LastOrDefault``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 101
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the last element in a sequence, or a default value if the sequence contains no elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the last element in <em>source</em>, or a default value if <em>source</em> is empty.</p>\n<p>The <see cref=\"Overload:System.Linq.Queryable.LastOrDefault\"></see> method does not provide a way to specify a default value. If you want to specify a default value other than <strong>default</strong>(<em>TSource</em>), use the <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method as described in the Example section.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> on an empty array.</p>System.Linq.Queryable#45<p>Sometimes the value of <strong>default</strong>(<em>TSource</em>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method to specify the default value that you want to use if the collection is empty. Then, call <xref href=\"System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to specify a default value of 1.</p>System.Linq.Queryable#132"
  syntax:
    content: public static TSource LastOrDefault<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the last element in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 102
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the last element in <em>source</em> that satisfies the condition specified by <em>predicate</em>. It returns a default value if there is no such element in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.</p>System.Linq.Queryable#46"
  syntax:
    content: public static TSource LastOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(<em>TSource</em>) if <em>source</em> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <em>source</em> that passes the test in the predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  id: LongCount``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LongCount<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 103
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that represents the total number of elements in a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it counts the number of items in <em>source</em> and returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in an array.</p>System.Linq.Queryable#47"
  syntax:
    content: public static long LongCount<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The number of elements in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of elements exceeds <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: LongCount(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.LongCount<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 104
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of elements in a sequence that satisfy a condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it counts the number of items in <em>source</em> that satisfy the condition specified by <em>predicate</em> and returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in an array that satisfy a condition.</p>System.Linq.Queryable#48"
  syntax:
    content: public static long LongCount<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The number of elements in <em>source</em> that satisfy the condition in the predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: LongCount(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  id: Max``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Max<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 105
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a generic <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the maximum value in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>System.Linq.Queryable#52"
  syntax:
    content: public static TSource Max<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Max(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Max(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Max<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 106
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returns the maximum resulting value.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element in <em>source</em> and returns the maximum value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>System.Linq.Queryable#58"
  syntax:
    content: public static TResult Max<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As TResult
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Max(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))
- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  id: Min``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Min<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 107
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value of a generic <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the minimum value in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>System.Linq.Queryable#60"
  syntax:
    content: public static TSource Min<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Min(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Min(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Min<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 108
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returns the minimum resulting value.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element in <em>source</em> and returns the minimum value.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>System.Linq.Queryable#68"
  syntax:
    content: public static TResult Min<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As TResult
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum of.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Min(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))
- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  commentId: M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  id: OfType``1(System.Linq.IQueryable)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(IQueryable)
  fullName: System.Linq.Queryable.OfType<TResult>(System.Linq.IQueryable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 109
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Filters the elements of an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> based on a specified type.</p>\n"
  remarks: "\n<p>The <strong>OfType</strong> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <strong>OfType</strong> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <strong>OfType</strong> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it filters out any elements in <em>source</em> that are not of type <em>TResult</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <strong>OfType</strong> to filter out elements that are not of type <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> from a list of elements of type <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Queryable#69"
  syntax:
    content: public static IQueryable<TResult> OfType<TResult>(this IQueryable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As IQueryable) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "\n<p>An <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> whose elements to filter.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type to filter the elements of the sequence on.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>A collection that contains the elements from <em>source</em> that have type <em>TResult</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OfType(Of TResult)(System.Linq.IQueryable)
  name.vb: OfType(Of TResult)(IQueryable)
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 110
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in ascending order according to a key.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it sorts the elements of <em>source</em> based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to sort the elements of a sequence.</p>System.Linq.Queryable#70"
  syntax:
    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 111
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it sorts the elements of <em>source</em> based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>. The <em>comparer</em> parameter is used to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 112
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in descending order according to a key.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it sorts the elements of <em>source</em> in descending order, based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 113
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it sorts the elements of <em>source</em> in descending order, based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>. The <em>comparer</em> parameter is used to compare keys.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> to sort the elements of a sequence in descending order by using a custom comparer.</p>System.Linq.Queryable#71"
  syntax:
    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  id: Reverse``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Reverse<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 114
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Inverts the order of the elements in a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it reverses the order of the elements in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to reverse the order of elements in an array.</p>System.Linq.Queryable#74"
  syntax:
    content: public static IQueryable<TSource> Reverse<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to reverse.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements correspond to those of the input sequence in reverse order.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Reverse(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Reverse(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 115
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence into a new form.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> to project it into a different form.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to project over a sequence of values.</p>System.Linq.Queryable#75"
  syntax:
    content: public static IQueryable<TResult> Select<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking a projection function on each element of <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, TResult>>)
  fullName: System.Linq.Queryable.Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 116
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence into a new form by incorporating the element's index.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depend on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> to project it into a different form.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to project over a sequence of values and use the index of each element in the projected form.</p>System.Linq.Queryable#76"
  syntax:
    content: public static IQueryable<TResult> Select<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,{TResult}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking a projection function on each element of <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, TResult)))
  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, TResult)))
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 117
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and combines the resulting sequences into one sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> to project it into an enumerable form. It then concatenates the enumerable results into a single, one-dimensional sequence.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a one-to-many projection over an array.</p>System.Linq.Queryable#77"
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, IEnumerable<TResult>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult)))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the sequence returned by the function represented by <em>selector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 118
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> to project it into an enumerable form. Each enumerable result incorporates the index of the source element. It then concatenates the enumerable results into a single, one-dimensional sequence.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a one-to-many projection over an array and use the index of each source element.</p>System.Linq.Queryable#78"
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, IEnumerable<TResult>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer, IEnumerable(Of TResult)))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}
      description: "\n<p>A projection function to apply to each element; the second parameter of this function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the sequence returned by the function represented by <em>selector</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult))))
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 119
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>collectionSelector</em> on each element of <em>source</em> to project it into an enumerable form. Then the function represented by <em>resultSelector</em> is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a one-to-many projection over an array. This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to <strong>Select</strong>.</p>System.Linq.Queryable#124"
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>> collectionSelector, Expressions.Expression<Func<TSource, TCollection, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), resultSelector As Expressions.Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: collectionSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}
      description: "\n<p>A projection function to apply to each element of the input sequence.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}
      description: "\n<p>A projection function to apply to each element of each intermediate sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TCollection
      description: "\n<p>The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the resulting sequence.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many projection function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding <em>source</em> element to a result element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult)))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 120
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>collectionSelector</em> on each element of <em>source</em> to project it into an enumerable form. Each enumerable result incorporates the source element's index. Then the function represented by <em>resultSelector</em> is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, IEnumerable<TCollection>>> collectionSelector, Expressions.Expression<Func<TSource, TCollection, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expressions.Expression(Of Func(Of TSource, Integer, IEnumerable(Of TCollection))), resultSelector As Expressions.Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: collectionSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}
      description: "\n<p>A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}
      description: "\n<p>A projection function to apply to each element of each intermediate sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TCollection
      description: "\n<p>The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the resulting sequence.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many projection function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding <em>source</em> element to a result element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult)))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 121
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether two sequences are equal by using the default equality comparer to compare elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that it determines if the two source sequences are equal.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether two sequences are equal. In this example the sequences are equal.</p>System.Linq.Queryable#32<p>The following code example compares two sequences that are not equal.</p>System.Linq.Queryable#33"
  syntax:
    content: public static bool SequenceEqual<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to compare to those of <em>source2</em>.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to compare to those of the first sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 122
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Determines whether two sequences are equal by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that it determines if the two source sequences are equal by using <em>comparer</em> to compare elements.</p>\n"
  example:
  - 
  syntax:
    content: public static bool SequenceEqual<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to compare to those of <em>source2</em>.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to compare to those of the first sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to use to compare elements.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  id: Single``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Single<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Single<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 123
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the only element in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array.</p>System.Linq.Queryable#79"
  syntax:
    content: public static TSource Single<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> has more than one element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Single(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Single(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Single<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Single<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 124
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the only element in <em>source</em> that satisfies the condition specified by <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array that satisfies a condition.</p>System.Linq.Queryable#81"
  syntax:
    content: public static TSource Single<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return a single element from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test an element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence that satisfies the condition in <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Single(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Single(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  id: SingleOrDefault``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 125
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the only element in <em>source</em>, or a default value if <em>source</em> is empty.</p>\n<p>The <see cref=\"Overload:System.Linq.Queryable.SingleOrDefault\"></see> method does not provide a way to specify a default value. If you want to specify a default value other than <strong>default</strong>(<em>TSource</em>), use the <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method as described in the Example section.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array. The second query demonstrates that <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> returns a default value when the sequence does not contain exactly one element.</p>System.Linq.Queryable#83<p>Sometimes the value of <strong>default</strong>(<em>TSource</em>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method to specify the default value that you want to use if the collection is empty. Then, call <xref href=\"System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref href=\"System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to specify a default value of 1.</p>System.Linq.Queryable#133<p></p>"
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence, or default(<em>TSource</em>) if the sequence contains no elements.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> has more than one element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 126
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the only element in <em>source</em> that satisfies the condition specified by <em>predicate</em>, or a default value if no such element exists.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array that satisfies a condition. The second query demonstrates that <xref href=\"System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</p>System.Linq.Queryable#85"
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return a single element from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test an element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence that satisfies the condition in <em>predicate</em>, or default(<em>TSource</em>) if no such element is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  id: Skip``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.Skip<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 127
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it skips the first <em>count</em> elements in <em>source</em> and returns the remaining elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to skip a specified number of elements in a sorted array and return the remaining elements.</p>System.Linq.Queryable#87"
  syntax:
    content: public static IQueryable<TSource> Skip<TSource>(this IQueryable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return elements from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to skip before returning the remaining elements.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements that occur after the specified index in the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Skip(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 128
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it applies <em>predicate</em> to each element in <em>source</em> until it finds an element for which <em>predicate</em> returns false. That element and all the remaining elements are returned.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to skip elements of an array as long as a condition is true.</p>System.Linq.Queryable#88"
  syntax:
    content: public static IQueryable<TSource> SkipWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return elements from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from <em>source</em> starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 129
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it applies <em>predicate</em> to each element in <em>source</em> until it finds an element for which <em>predicate</em> returns false. That element and all the remaining elements are returned. The index of each source element is provided as the second argument to <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to skip elements of an array as long as a condition that depends on the element's index is true.</p>System.Linq.Queryable#89"
  syntax:
    content: public static IQueryable<TSource> SkipWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to return elements from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
      description: "\n<p>A function to test each element for a condition; the second parameter of this function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from <em>source</em> starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  id: Sum(System.Linq.IQueryable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 130
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#120"
  syntax:
    content: public static decimal Sum(this IQueryable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: "\n<p>A sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Decimal))
  name.vb: Sum(IQueryable(Of Decimal))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  id: Sum(System.Linq.IQueryable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Double>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 131
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#120"
  syntax:
    content: public static double Sum(this IQueryable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: "\n<p>A sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Double))
  name.vb: Sum(IQueryable(Of Double))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  id: Sum(System.Linq.IQueryable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 132
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#120"
  syntax:
    content: public static int Sum(this IQueryable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: "\n<p>A sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Int32))
  name.vb: Sum(IQueryable(Of Int32))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  id: Sum(System.Linq.IQueryable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 133
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#120"
  syntax:
    content: public static long Sum(this IQueryable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: "\n<p>A sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Int64))
  name.vb: Sum(IQueryable(Of Int64))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 134
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#121"
  syntax:
    content: public static decimal ? Sum(this IQueryable<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(IQueryable(Of Nullable(Of Decimal)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 135
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#121"
  syntax:
    content: public static double ? Sum(this IQueryable<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Double)))
  name.vb: Sum(IQueryable(Of Nullable(Of Double)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 136
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#121"
  syntax:
    content: public static int ? Sum(this IQueryable<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(IQueryable(Of Nullable(Of Int32)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 137
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Queryable#121"
  syntax:
    content: public static long ? Sum(this IQueryable<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(IQueryable(Of Nullable(Of Int64)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 138
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>System.Linq.Queryable#121"
  syntax:
    content: public static float ? Sum(this IQueryable<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Single)))
  name.vb: Sum(IQueryable(Of Nullable(Of Single)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  id: Sum(System.Linq.IQueryable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Single>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 139
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the sum of the values in <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>System.Linq.Queryable#120"
  syntax:
    content: public static float Sum(this IQueryable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: "\n<p>A sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Single))
  name.vb: Sum(IQueryable(Of Single))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 140
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static decimal Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal))) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 141
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of he <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static double Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 142
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static int Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer))) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 143
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static long Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long))) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 144
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static decimal ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal?))) As Decimal?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 145
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static double ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double?))) As Double?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 146
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static int ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer?))) As Integer?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 147
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static long ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long?))) As Long?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 148
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static float ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float ? >> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single?))) As Single?
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 149
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it invokes <em>selector</em> on each element of <em>source</em> and returns the sum of the resulting values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Queryable#98"
  syntax:
    content: public static float Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single))) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence of values of type <em>TSource</em>.</p>\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: "\n<p>A projection function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))
- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  id: Take``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Take<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.Take<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 150
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns a specified number of contiguous elements from the start of a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it takes the first <em>count</em> elements from the start of <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to return elements from the start of a sequence.</p>System.Linq.Queryable#99"
  syntax:
    content: public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to return.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements from the start of <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Take(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 151
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns elements from a sequence as long as a specified condition is true.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it applies <em>predicate</em> to each element in <em>source</em> until it finds an element for which <em>predicate</em> returns <strong>false</strong>. It returns all the elements up until that point.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to return elements from the start of a sequence as long as a condition is true.</p>System.Linq.Queryable#100"
  syntax:
    content: public static IQueryable<TSource> TakeWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <em>predicate</em> no longer passes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 152
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it applies <em>predicate</em> to each element in <em>source</em> until it finds an element for which <em>predicate</em> returns <strong>false</strong>. It returns all the elements up until that point. The index of each source element is provided as the second argument to <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to return elements from the start of a sequence as long as a condition that uses the index of the element is true.</p>System.Linq.Queryable#101"
  syntax:
    content: public static IQueryable<TSource> TakeWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
      description: "\n<p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <em>predicate</em> no longer passes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 153
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it performs a secondary sort of the elements of <em>source</em> based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>. All previously established sort orders are preserved.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a secondary ordering of the elements in a sequence.</p>System.Linq.Queryable#102"
  syntax:
    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 154
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it performs a secondary sort of the elements of <em>source</em> based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>. All previously established sort orders are preserved. The <em>comparer</em> parameter is used to compare key values.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 155
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it performs a secondary sort of the elements of <em>source</em> in descending order, based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>. All previously established sort orders are preserved.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 156
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter. The result of calling <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> is cast to type <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> and returned.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it performs a secondary sort of the elements of <em>source</em> in descending order, based on the key obtained by invoking <em>keySelector</em> on each element of <em>source</em>. All previously established sort orders are preserved. The <em>comparer</em> parameter is used to compare key values.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</p>System.Linq.Queryable#103"
  syntax:
    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key that is returned by the <em>keySelector</em> function.</p>\n"
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: "\n<p>A collection whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 157
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Produces the set union of two sequences by using the default equality comparer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that the set union of the elements in <em>source1</em> and <em>source2</em> is returned.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the set union of two sequences.</p>System.Linq.Queryable#109"
  syntax:
    content: public static IQueryable<TSource> Union<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the first set for the union operation.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the second set for the union operation.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Union(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 158
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source1</em> parameter. The expected behavior is that the set union of the elements in <em>source1</em> and <em>source2</em> is returned. The <em>comparer</em> parameter is used to compare values.</p>\n"
  example:
  - 
  syntax:
    content: public static IQueryable<TSource> Union<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the first set for the union operation.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the second set for the union operation.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Union(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 159
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Filters a sequence of values based on a predicate.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the elements from <em>source</em> that satisfy the condition specified by <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to filter a sequence.</p>System.Linq.Queryable#110"
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to filter.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence that satisfy the condition specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 160
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</p>\n"
  remarks: "\n<p>This method has at least one parameter of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is one of the <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source</em> parameter.</p>\n<p>The query behavior that occurs as a result of executing an expression tree that represents calling <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> depends on the implementation of the type of the <em>source</em> parameter. The expected behavior is that it returns the elements from <em>source</em> that satisfy the condition specified by <em>predicate</em>. The index of each source element is provided as the second argument to <em>predicate</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\" data-throw-if-not-resolved=\"false\"></xref> to filter a sequence based on a predicate that incorporates the index of each element.</p>System.Linq.Queryable#111"
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> to filter.</p>\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
      description: "\n<p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence that satisfy the condition specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))
- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expressions.Expression<Func<TFirst, TSecond, TResult>>)
  fullName: System.Linq.Queryable.Zip<TFirst, TSecond, TResult>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 161
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: "\n<p>Merges two sequences by using the specified predicate function.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> method generates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling <xref href=\"System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> itself as a constructed generic method. It then passes the <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Linq.IQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> represented by the <xref href=\"System.Linq.IQueryable.Provider\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>source1</em> parameter.</p>\n<p>The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\" data-throw-if-not-resolved=\"false\"></xref> method to merge two sequences.</p>System.Linq.Queryable#200"
  syntax:
    content: public static IQueryable<TResult> Zip<TFirst, TSecond, TResult>(this IQueryable<TFirst> source1, IEnumerable<TSecond> source2, Expressions.Expression<Func<TFirst, TSecond, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(source1 As IQueryable(Of TFirst), source2 As IEnumerable(Of TSecond), resultSelector As Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TFirst}}
      description: "\n<p>The first sequence to merge.</p>\n"
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSecond}}
      description: "\n<p>The second sequence to merge.</p>\n"
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TFirst},{TSecond},{TResult}}}
      description: "\n<p>A function that specifies how to merge the elements from the two sequences.</p>\n"
    typeParameters:
    - id: TFirst
      description: "\n<p>The type of the elements of the first input sequence.</p>\n"
    - id: TSecond
      description: "\n<p>The type of the elements of the second input sequence.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the result sequence.</p>\n"
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: "\n<p>An <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains merged elements of two input sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source1</em>or <em>source2 </em>is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Zip(Of TFirst, TSecond, TResult)(System.Linq.IQueryable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Linq.Expressions.Expression(Of System.Func(Of TFirst, TSecond, TResult)))
  name.vb: Zip(Of TFirst, TSecond, TResult)(IQueryable(Of TFirst), IEnumerable(Of TSecond), Expressions.Expression(Of Func(Of TFirst, TSecond, TResult)))
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.IQueryable{{TSource}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  fullname.vb: System.Linq.IQueryable(Of TSource)
  name.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TSource},{TSource}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TSource, TSource>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TSource, TSource))
  name.vb: Expressions.Expression(Of Func(Of TSource, TSource, TSource))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: System.Linq.IQueryable`1
  parent: System.Linq
  isExternal: false
  name: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>
  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TAccumulate, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TResult))
  name.vb: Expressions.Expression(Of Func(Of TAccumulate, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))
  name.vb: Expressions.Expression(Of Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: false
  name: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TElement}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TElement>
  fullName: System.Linq.IQueryable<TElement>
  fullname.vb: System.Linq.IQueryable(Of TElement)
  name.vb: IQueryable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.IQueryable{System.Decimal}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Decimal>
  fullName: System.Linq.IQueryable<System.Decimal>
  fullname.vb: System.Linq.IQueryable(Of System.Decimal)
  name.vb: IQueryable(Of Decimal)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Linq.IQueryable{System.Double}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Double>
  fullName: System.Linq.IQueryable<System.Double>
  fullname.vb: System.Linq.IQueryable(Of System.Double)
  name.vb: IQueryable(Of Double)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Linq.IQueryable{System.Int32}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Int32>
  fullName: System.Linq.IQueryable<System.Int32>
  fullname.vb: System.Linq.IQueryable(Of System.Int32)
  name.vb: IQueryable(Of Int32)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Int64}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Int64>
  fullName: System.Linq.IQueryable<System.Int64>
  fullname.vb: System.Linq.IQueryable(Of System.Int64)
  name.vb: IQueryable(Of Int64)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Decimal}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Decimal>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Decimal>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Decimal))
  name.vb: IQueryable(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Double}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Double>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Double>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Double))
  name.vb: IQueryable(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Int32}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Int32>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int32>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int32))
  name.vb: IQueryable(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Int64}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Int64>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int64>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int64))
  name.vb: IQueryable(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Single}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Single>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Single>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Single))
  name.vb: IQueryable(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Single}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Single>
  fullName: System.Linq.IQueryable<System.Single>
  fullname.vb: System.Linq.IQueryable(Of System.Single)
  name.vb: IQueryable(Of Single)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))
  name.vb: Expressions.Expression(Of Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Double>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))
  name.vb: Expressions.Expression(Of Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int64>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Decimal>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Double>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Int32>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Int64>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Single>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Single>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))
  name.vb: Expressions.Expression(Of Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TResult}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  fullname.vb: System.Linq.IQueryable(Of TResult)
  name.vb: IQueryable(Of TResult)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TKey>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey))
  name.vb: Expressions.Expression(Of Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<IGrouping<TKey, TSource>>
  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>>
  fullname.vb: System.Linq.IQueryable(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: IQueryable(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TElement>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TElement>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement))
  name.vb: Expressions.Expression(Of Func(Of TSource, TElement))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<IGrouping<TKey, TElement>>
  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Linq.IQueryable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: IQueryable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TOuter}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TOuter>
  fullName: System.Linq.IQueryable<TOuter>
  fullname.vb: System.Linq.IQueryable(Of TOuter)
  name.vb: IQueryable(Of TOuter)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TOuter, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey))
  name.vb: Expressions.Expression(Of Func(Of TOuter, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TInner, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInner, TKey>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey))
  name.vb: Expressions.Expression(Of Func(Of TInner, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TOuter, TInner, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult))
  name.vb: Expressions.Expression(Of Func(Of TOuter, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))
  name.vb: Expressions.Expression(Of Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IOrderedQueryable{{TSource}}
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<TSource>
  fullName: System.Linq.IOrderedQueryable<TSource>
  fullname.vb: System.Linq.IOrderedQueryable(Of TSource)
  name.vb: IOrderedQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.IOrderedQueryable`1
  isExternal: false
  name: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  fullname.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, TResult))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)))
  name.vb: Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TCollection, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult))
  name.vb: Expressions.Expression(Of Func(Of TSource, TCollection, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TFirst}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TFirst>
  fullName: System.Linq.IQueryable<TFirst>
  fullname.vb: System.Linq.IQueryable(Of TFirst)
  name.vb: IQueryable(Of TFirst)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TFirst},{TSecond},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TFirst, TSecond, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFirst, TSecond, TResult))
  name.vb: Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
