items:
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection
  commentId: T:System.Collections.Generic.SortedDictionary`2.KeyCollection
  id: SortedDictionary`2.KeyCollection
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.Count
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: SortedDictionary<TKey, TValue>.KeyCollection
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyCollection
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 552
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents the collection of keys in a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. This class cannot be inherited. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property returns an instance of this type, containing all the keys in that <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.  The order of the keys in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is the same as the order of elements in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, the same as the order of the associated values in the <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Generic.SortedDictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (DictionaryKeyCollectionDebugView<, >))]

      [DebuggerDisplay("Count = {Count}")]

      public sealed class KeyCollection : ICollection<TKey>, ICollection, IReadOnlyCollection<TKey>, IEnumerable<TKey>, IEnumerable
    content.vb: >-
      <DebuggerTypeProxy(GetType(DictionaryKeyCollectionDebugView(Of , )))>

      <DebuggerDisplay("Count = {Count}")>

      Public NotInheritable Class KeyCollection
          Implements ICollection(Of TKey), ICollection, IReadOnlyCollection(Of TKey), IEnumerable(Of TKey), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{{TKey}}
  - System.Collections.Generic.IReadOnlyCollection{{TKey}}
  - System.Collections.Generic.IEnumerable{{TKey}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection
  name.vb: SortedDictionary(Of TKey, TValue).KeyCollection
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.SortedDictionary{`0,`1})'
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: KeyCollection(SortedDictionary<TKey, TValue>)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.KeyCollection(System.Collections.Generic.SortedDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 558
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> class that reflects the keys in the specified <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public KeyCollection(SortedDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As SortedDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.SortedDictionary`2
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.KeyCollection(System.Collections.Generic.SortedDictionary(Of TKey, TValue))
  name.vb: KeyCollection(SortedDictionary(Of TKey, TValue))
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.Count
  commentId: P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count
  id: Count
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 648
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.Count
  - System.Collections.Generic.IReadOnlyCollection{{TKey}}.Count
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.Count
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly
  commentId: P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly
  id: System#Collections#Generic#ICollection{TKey}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection<TKey>.IsReadOnly
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.Generic.ICollection<TKey>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<TKey>.IsReadOnly
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 653
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool ICollection<TKey>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<TKey>.IsReadOnly As Boolean Implements ICollection(Of TKey).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.Generic.ICollection<TKey>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<TKey>.IsReadOnly
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 678
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>The <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property returns an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. Synchronization is effective only if all threads lock the object before accessing the collection.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.ICollection.SyncRoot
    commentId: P:System.Collections.ICollection.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 683
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>The <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property returns an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. Synchronization is effective only if all threads lock the object before accessing the collection. The following code shows the use of the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property for C#, C++, and Visual Basic.</p>\n<pre><code class=\"c#\">ICollection ic = ...;\nlock (ic.SyncRoot) \n{\n// Access the collection.\n}</code></pre>\n<pre><code class=\"vb#\">Dim ic As ICollection = ...\nSyncLock ic.SyncRoot\n' Access the collection.\nEnd SyncLock</code></pre>\n<pre><code class=\"cpp#\">ICollection^ ic = ...;\ntry \n{\nMonitor::Enter(ic->SyncRoot);\n// Access the collection.\n}\nfinally \n{\nMonitor::Exit(ic->SyncRoot);\n}</code></pre>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.ICollection.IsSynchronized
    commentId: P:System.Collections.ICollection.IsSynchronized
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: CopyTo(TKey[], Int32)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.CopyTo(TKey[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 582
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> elements to an existing one-dimensional array, starting at the specified array index.</p>\n"
  remarks: "\n<p>The elements are copied to the array in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void CopyTo(TKey[] array, int index)
    content.vb: Public Sub CopyTo(array As TKey(), index As Integer)
    parameters:
    - id: array
      type: '{TKey}[]'
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.CopyTo({TKey}[],System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.CopyTo(TKey(), System.Int32)
  name.vb: CopyTo(TKey(), Int32)
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 567
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public SortedDictionary<TKey, TValue>.KeyCollection.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As SortedDictionary(Of TKey, TValue).KeyCollection.Enumerator
    return:
      type: System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator
    commentId: T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.GetEnumerator()
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)
  id: System#Collections#Generic#ICollection{TKey}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection<TKey>.Add(TKey)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.Generic.ICollection<TKey>.Add(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<TKey>.Add
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 658
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an item to the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.  This implementation always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void ICollection<TKey>.Add(TKey item)
    content.vb: Sub System.Collections.Generic.ICollection<TKey>.Add(item As TKey) Implements ICollection(Of TKey).Add
    parameters:
    - id: item
      type: '{TKey}'
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Always thrown; the collection is read-only.</p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1.IsReadOnly
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.Add({TKey})
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.Generic.ICollection<TKey>.Add(TKey)
  name.vb: System.Collections.Generic.ICollection<TKey>.Add(TKey)
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear
  id: System#Collections#Generic#ICollection{TKey}#Clear
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection<TKey>.Clear()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.Generic.ICollection<TKey>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<TKey>.Clear
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 663
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all items from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.  This implementation always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.ICollection`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property is set to 0, and references to other objects from elements of the collection are also released.</p>\n"
  syntax:
    content: void ICollection<TKey>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<TKey>.Clear Implements ICollection(Of TKey).Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Always thrown; the collection is read-only.</p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1.IsReadOnly
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.Clear
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.Generic.ICollection<TKey>.Clear()
  name.vb: System.Collections.Generic.ICollection<TKey>.Clear()
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)
  id: System#Collections#Generic#ICollection{TKey}#Contains(`0)
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection<TKey>.Contains(TKey)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.Generic.ICollection<TKey>.Contains(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<TKey>.Contains
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 668
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> contains the specified value.</p>\n"
  remarks: "\n<p>Implementations can vary in how they determine equality of objects; for example, <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> uses <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, whereas <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> allows the user to specify the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use for comparing keys.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: bool ICollection<TKey>.Contains(TKey item)
    content.vb: Function System.Collections.Generic.ICollection<TKey>.Contains(item As TKey) As Boolean Implements ICollection(Of TKey).Contains
    parameters:
    - id: item
      type: '{TKey}'
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.Contains({TKey})
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.Generic.ICollection<TKey>.Contains(TKey)
  name.vb: System.Collections.Generic.ICollection<TKey>.Contains(TKey)
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)
  id: System#Collections#Generic#ICollection{TKey}#Remove(`0)
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection<TKey>.Remove(TKey)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.Generic.ICollection<TKey>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<TKey>.Remove
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 673
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.  This implementation always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Implementations can vary in how they determine equality of objects; for example, <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> uses <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, whereas <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> allows the user to specify the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use for comparing keys.</p>\n"
  syntax:
    content: bool ICollection<TKey>.Remove(TKey item)
    content.vb: Function System.Collections.Generic.ICollection<TKey>.Remove(item As TKey) As Boolean Implements ICollection(Of TKey).Remove
    parameters:
    - id: item
      type: '{TKey}'
    return:
      type: System.Boolean
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Always thrown; the collection is read-only.</p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1.IsReadOnly
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  implements:
  - System.Collections.Generic.ICollection{{TKey}}.Remove({TKey})
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.Generic.ICollection<TKey>.Remove(TKey)
  name.vb: System.Collections.Generic.ICollection<TKey>.Remove(TKey)
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TKey}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: IEnumerable<TKey>.GetEnumerator()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 572
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each </strong>in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns false. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return false. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<TKey>.GetEnumerator As IEnumerator(Of TKey) Implements IEnumerable(Of TKey).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{TKey}}
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  implements:
  - System.Collections.Generic.IEnumerable{{TKey}}.GetEnumerator
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 602
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to an array, starting at a particular array index.</p>\n"
  remarks: "\n<p>If the type of the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>, the nongeneric implementations of <xref href=\"System.Collections.ICollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> throw an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>, whereas the generic implementations throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or-</p>\n<p>\n<em>array</em> does not have zero-based indexing.</p>\n<p>-or-</p>\n<p>The number of elements in the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n<p>-or-</p>\n<p>The type of the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Array
    commentId: T:System.Array
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SortedDictionary`2.KeyCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 577
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).KeyCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  fullname.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<TKey>
  fullName: System.Collections.Generic.IReadOnlyCollection<TKey>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of TKey)
  name.vb: IReadOnlyCollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.SortedDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: SortedDictionary<TKey, TValue>
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue)
  name.vb: SortedDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    fullName: System.Collections.Generic.SortedDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    fullName: System.Collections.Generic.SortedDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}.Count
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<TKey>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{TKey}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{TKey}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<TKey>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of TKey).Count
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{TKey}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<TKey>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.ICollection{{TKey}}.CopyTo({TKey}[],System.Int32)
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TKey[], Int32)
  fullName: System.Collections.Generic.ICollection<TKey>.CopyTo(TKey[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).CopyTo(TKey(), System.Int32)
  name.vb: CopyTo(TKey(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<TKey>.CopyTo
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of TKey).CopyTo
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: '{TKey}[]'
  isExternal: false
  name: TKey[]
  fullName: TKey[]
  fullname.vb: TKey()
  name.vb: TKey()
  spec.csharp:
  - name: TKey
    fullName: TKey
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKey
    fullName: TKey
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: SortedDictionary.KeyCollection.Enumerator<>
  fullName: System.Collections.Generic.SortedDictionary.KeyCollection.Enumerator<>
  fullname.vb: System.Collections.Generic.SortedDictionary.KeyCollection.Enumerator(Of )
  name.vb: SortedDictionary.KeyCollection.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator
    name: SortedDictionary.KeyCollection.Enumerator
    fullName: System.Collections.Generic.SortedDictionary.KeyCollection.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator
    name: SortedDictionary.KeyCollection.Enumerator
    fullName: System.Collections.Generic.SortedDictionary.KeyCollection.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}.Add({TKey})
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(TKey)
  fullName: System.Collections.Generic.ICollection<TKey>.Add(TKey)
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).Add(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<TKey>.Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of TKey).Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}.Clear
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<TKey>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<TKey>.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of TKey).Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}.Contains({TKey})
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(TKey)
  fullName: System.Collections.Generic.ICollection<TKey>.Contains(TKey)
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).Contains(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<TKey>.Contains
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of TKey).Contains
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}.Remove({TKey})
  parent: System.Collections.Generic.ICollection{{TKey}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(TKey)
  fullName: System.Collections.Generic.ICollection<TKey>.Remove(TKey)
  fullname.vb: System.Collections.Generic.ICollection(Of TKey).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<TKey>.Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of TKey).Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TKey}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TKey}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of TKey).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TKey).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TKey>
  fullName: System.Collections.Generic.IEnumerator<TKey>
  fullname.vb: System.Collections.Generic.IEnumerator(Of TKey)
  name.vb: IEnumerator(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
