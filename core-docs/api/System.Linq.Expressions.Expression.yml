items:
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  id: Expression
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.Expression.#ctor
  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.CanReduce
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Constant(System.Object)
  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Default(System.Type)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Empty
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.GetActionType(System.Type[])
  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Label
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Label(System.String)
  - System.Linq.Expressions.Expression.Label(System.Type)
  - System.Linq.Expressions.Expression.Label(System.Type,System.String)
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.New(System.Type)
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NodeType
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Parameter(System.Type)
  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Reduce
  - System.Linq.Expressions.Expression.ReduceAndCheck
  - System.Linq.Expressions.Expression.ReduceExtensions
  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Rethrow
  - System.Linq.Expressions.Expression.Rethrow(System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.SymbolDocument(System.String)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ToString
  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.Type
  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  langs:
  - csharp
  - vb
  name: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Expression
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 119
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains <strong>static</strong> (<strong>Shared</strong> in Visual Basic) factory methods to create the various node types. This is an <strong>abstract</strong> class.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a block expression. The block expression consists of two <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> objects and one <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Linq.Expressions.ExpressionDev10#13"
  syntax:
    content: public abstract class Expression
    content.vb: Public MustInherit Class Expression
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Linq.Expressions.Expression.#ctor
  commentId: M:System.Linq.Expressions.Expression.#ctor
  id: '#ctor'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Expression()
  fullName: System.Linq.Expressions.Expression.Expression()
  type: Constructor
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 121
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Constructs a new instance of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: protected Expression()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Linq.Expressions.Expression.CanReduce
  commentId: P:System.Linq.Expressions.Expression.CanReduce
  id: CanReduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: CanReduce
  fullName: System.Linq.Expressions.Expression.CanReduce
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReduce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 122
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool CanReduce { get; }
    content.vb: Public Overridable ReadOnly Property CanReduce As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>True if the node can be reduced, otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.NodeType
  commentId: P:System.Linq.Expressions.Expression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Linq.Expressions.Expression.NodeType
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 123
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the node type of this <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property provides a more specialized description of an <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> than just its derived type. For example, a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation. The <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property would describe these binary expressions as <xref href=\"System.Linq.Expressions.ExpressionType.Divide\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\" data-throw-if-not-resolved=\"false\"></xref>, respectively.</p>\n<p>The static CLR type of the expression that the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> object represents is represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public virtual ExpressionType NodeType { get; }
    content.vb: Public Overridable ReadOnly Property NodeType As ExpressionType
    parameters: []
    return:
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>One of the <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.Type
  commentId: P:System.Linq.Expressions.Expression.Type
  id: Type
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Linq.Expressions.Expression.Type
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 124
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> represents.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is the type of the expression tree node, whereas the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref>, as shown in the following code example.</p>System.Linq.Expressions.ExpressionDev10#36"
  example:
  - 
  syntax:
    content: public virtual Type Type { get; }
    content.vb: Public Overridable ReadOnly Property Type As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the static type of the expression.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accept
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 125
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This default implementation for <xref href=\"System.Linq.Expressions.ExpressionType.Extension\" data-throw-if-not-resolved=\"false\"></xref> nodes calls <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref>. Override this method to call into a more specific method on a derived visitor class of the <xref href=\"System.Linq.Expressions.ExpressionVisitor\" data-throw-if-not-resolved=\"false\"></xref> class. However, it should still support unknown visitors by calling <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - 
  syntax:
    content: protected virtual Expression Accept(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function Accept(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: "\n<p>The visitor to visit this node with.</p>\n"
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of visiting this node.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Add(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 126
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic addition operation that does not have overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that adds two integers.</p>System.Linq.Expressions.ExpressionDev10#1
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right)
    content.vb: Public Shared Function Add(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Add(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 127
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Add(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 128
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an addition assignment operation that does not have overflow checking.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</p>System.Linq.Expressions.ExpressionDev10#18"
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 129
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an addition assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 130
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an addition assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 131
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an addition assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 132
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an addition assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 133
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an addition assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 134
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic addition operation that has overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddChecked(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 135
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: And(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 136
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise <strong>AND</strong> operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</p>System.Linq.Expressions.ExpressionDev10#2
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right)
    content.vb: Public Shared Function And(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: And(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 137
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise <strong>AND</strong> operation. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function And(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAlso(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 138
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional <strong>AND</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>true</strong>.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to <strong>true</strong>.</p>System.Linq.Expressions.ExpressionDev10#19
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAlso(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 139
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional <strong>AND</strong> operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 140
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise AND assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 141
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise AND assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 142
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise AND assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayAccess(Expression, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 143
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref> to access a multidimensional array.</p>\n"
  remarks: "\n<p>The expression that represents the array can be obtained by using the <xref href=\"System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\" data-throw-if-not-resolved=\"false\"></xref> method, or through <see cref=\"Overload:System.Linq.Expressions.Expression.NewArrayBounds\"></see> or <see cref=\"Overload:System.Linq.Expressions.Expression.NewArrayInit\"></see>.</p>\n"
  example:
  - "\n<p>The following code example shows how to change the value of an element in a multidimensional array by using the <strong>ArrayAccess</strong> method.</p>System.Linq.Expressions.ExpressionDev10#21"
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: "\n<p>An expression that represents the multidimensional array.</p>\n"
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> containing expressions used to index the array.</p>\n"
    return:
      type: System.Linq.Expressions.IndexExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ArrayAccess(Expression, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayAccess(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 144
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref> to access an array.</p>\n"
  remarks: "\n<p>The expression that represents the array can be obtained by using the <xref href=\"System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\" data-throw-if-not-resolved=\"false\"></xref> method, or through <see cref=\"Overload:System.Linq.Expressions.Expression.NewArrayBounds\"></see> or <see cref=\"Overload:System.Linq.Expressions.Expression.NewArrayInit\"></see>.</p>\n<p>For multidimensional arrays, use the <xref href=\"System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example shows how to change a value of an array element by using the <strong>ArrayAccess</strong> method.</p>System.Linq.Expressions.ExpressionDev10#20"
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, ParamArray indexes As Expression()) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: "\n<p>An expression representing the array to index.</p>\n"
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array that contains expressions used to index the array.</p>\n"
    return:
      type: System.Linq.Expressions.IndexExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: ArrayAccess(Expression, Expression())
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 145
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents applying an array index operator to an array of rank more than one.</p>\n"
  remarks: "\n<p>Each element of <em>indexes</em> must have <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>array</em> must represent an array type whose rank matches the number of elements in <em>indexes</em>.</p>\n<p>If the rank of <em>array</em>.Type is 1, this method returns a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property is set to <em>array</em> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property is set to the single element of <em>indexes</em>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the element type of <em>array</em>.Type.</p>\n<p>If the rank of <em>array</em>.Type is more than one, this method returns a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property is set to the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that describes the public instance method Get on the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>array</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents indexing into a two-dimensional array.</p>System.Linq.Expressions.Expression#3"
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> or <em>indexes</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em>.Type does not represent an array type.</p>\n<p>-or-</p>\n<p>The rank of <em>array</em>.Type does not match the number of elements in <em>indexes</em>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of one or more elements of <em>indexes</em> does not represent the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ArrayIndex(Expression, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 146
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents applying an array index operator to an array of rank one.</p>\n"
  remarks: "\n<p>\n<em>index</em> must represent an index of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>, and both <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> are set to <strong>false</strong>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is equal to the element type of <em>array</em>.Type. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ArrayIndex(Expression array, Expression index)
    content.vb: Public Shared Function ArrayIndex(array As Expression, index As Expression) As BinaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: index
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayIndex\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> or <em>index</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em>.Type does not represent an array type.</p>\n<p>-or-</p>\n<p>\n<em>array</em>.Type represents an array type whose rank is not 1.</p>\n<p>-or-</p>\n<p>\n<em>index</em>.Type does not represent the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 147
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents applying an array index operator to a multidimensional array.</p>\n"
  remarks: "\n<p>Each element of <em>indexes</em> must have <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>array</em> must represent an array type whose rank matches the number of elements in <em>indexes</em>.</p>\n<p>If the rank of <em>array</em>.Type is 1, this method returns a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property is set to <em>array</em> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property is set to the single element of <em>indexes</em>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the<xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the element type of <em>array</em>.Type.</p>\n<p>If the rank of <em>array</em>.Type is more than one, this method returns a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property is set to the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that describes the public instance method Get on the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>array</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents indexing into a two-dimensional array.</p>System.Linq.Expressions.Expression#3"
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, ParamArray indexes As Expression()) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> instances - indexes for the array index operation.</p>\n"
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> or <em>indexes</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em>.Type does not represent an array type.</p>\n<p>-or-</p>\n<p>The rank of <em>array</em>.Type does not match the number of elements in <em>indexes</em>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of one or more elements of <em>indexes</em> does not represent the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: ArrayIndex(Expression, Expression())
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  id: ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayLength(Expression)
  fullName: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayLength
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 148
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an expression for obtaining the length of a one-dimensional array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>array</em> must represent an array type.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, and both <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> are set to <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression ArrayLength(Expression array)
    content.vb: Public Shared Function ArrayLength(array As Expression) As UnaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayLength\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em>.Type does not represent an array type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Assign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 149
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an assignment operation.</p>\n"
  remarks: "\n<p>The <strong>Assign</strong> expression copies a value for value types, and it copies a reference for reference types.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents an assignment operation.</p>System.Linq.Expressions.ExpressionDev10#12"
  syntax:
    content: public static BinaryExpression Assign(Expression left, Expression right)
    content.vb: Public Shared Function Assign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Assign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Bind(MemberInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 150
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\" data-throw-if-not-resolved=\"false\"></xref> that represents the initialization of a field or property.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>expression</em> must be assignable to the type represented by the <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> property of <em>member</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberAssignment Bind(MemberInfo member, Expression expression)
    content.vb: Public Shared Function Bind(member As MemberInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>A <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberAssignment\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>member</em> or <em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>member</em> does not represent a field or property.</p>\n<p>-or-</p>\n<p>The property represented by <em>member</em> does not have a <strong>set</strong> accessor.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type is not assignable to the type of the field or property that <em>member</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Bind(MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 151
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\" data-throw-if-not-resolved=\"false\"></xref> that represents the initialization of a member by using a property accessor method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>expression</em> must be assignable to the type represented by the <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> property of the property accessed in <em>propertyAccessor</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberAssignment Bind(MethodInfo propertyAccessor, Expression expression)
    content.vb: Public Shared Function Bind(propertyAccessor As MethodInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a property accessor method.</p>\n"
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberAssignment\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>expression</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyAccessor</em> or <em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\n<p>-or-</p>\n<p>The property accessed by <em>propertyAccessor</em> does not have a <strong>set</strong> accessor.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type is not assignable to the type of the field or property that <em>member</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 152
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given expressions and has no variables.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(expressions As IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 153
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given variables and expressions.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - "\n<p>The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</p>System.Linq.Expressions.ExpressionDev10#14"
  syntax:
    content: public static BlockExpression Block(IEnumerable<ParameterExpression> variables, IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>The variables in the block.</p>\n"
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(IEnumerable(Of ParameterExpression), IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(IEnumerable<ParameterExpression>, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 154
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given variables and expressions.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>The variables in the block.</p>\n"
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  name.vb: Block(IEnumerable(Of ParameterExpression), Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 155
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains two expressions and has no variables.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first expression in the block.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second expression in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 156
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains three expressions and has no variables.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first expression in the block.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second expression in the block.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third expression in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 157
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains four expressions and has no variables.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first expression in the block.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second expression in the block.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third expression in the block.</p>\n"
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: "\n<p>The fourth expression in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 158
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains five expressions and has no variables.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first expression in the block.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second expression in the block.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third expression in the block.</p>\n"
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: "\n<p>The fourth expression in the block.</p>\n"
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: "\n<p>The fifth expression in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  id: Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 159
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given expressions and has no variables.</p>\n"
  remarks: "\n<p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a block expression. The block expression consists of two <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> objects and one <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Linq.Expressions.ExpressionDev10#13"
  syntax:
    content: public static BlockExpression Block(params Expression[] expressions)
    content.vb: Public Shared Function Block(ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression())
  name.vb: Block(Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 160
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given expressions, has no variables and has specific result type.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Type type, IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, expressions As IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the block.</p>\n"
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Type, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 161
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given variables and expressions.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Type type, IEnumerable<ParameterExpression> variables, IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the block.</p>\n"
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>The variables in the block.</p>\n"
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Type, IEnumerable(Of ParameterExpression), IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 162
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given variables and expressions.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Type type, IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the block.</p>\n"
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>The variables in the block.</p>\n"
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  name.vb: Block(Type, IEnumerable(Of ParameterExpression), Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 163
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref> that contains the given expressions, has no variables and has specific result type.</p>\n"
  example:
  - 
  syntax:
    content: public static BlockExpression Block(Type type, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the block.</p>\n"
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The expressions in the block.</p>\n"
    return:
      type: System.Linq.Expressions.BlockExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.BlockExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression())
  name.vb: Block(Type, Expression())
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  id: Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 164
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a break statement.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that contains a <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref> object that uses the <xref href=\"System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Linq.Expressions.ExpressionDev10#44"
  syntax:
    content: public static GotoExpression Break(LabelTarget target)
    content.vb: Public Shared Function Break(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 165
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a break statement. The value passed to the label upon jumping can be specified.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 166
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 167
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a break statement with the specified type.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 168
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a method that takes no arguments.</p>\n"
  remarks: "\n<p>To represent a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method, pass in <strong>null</strong> for the <em>instance</em> parameter when you call this method.</p>\n<p>If <em>method</em> represents an instance method, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>instance</em> must be assignable to the declaring type of the method represented by <em>method</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is empty. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is equal to the return type of the method represented by <em>method</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that calls a method without arguments.</p>System.Linq.Expressions.ExpressionDev10#15"
  syntax:
    content: public static MethodCallExpression Call(Expression instance, MethodInfo method)
    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that specifies the instance for an instance method call (pass <strong>null</strong> for a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method).</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, MethodInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 169
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a method that takes arguments.</p>\n"
  remarks: "\n<p>To represent a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method, pass in <strong>null</strong> for the <em>instance</em> parameter when you call this method, or call <xref href=\"System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>If <em>method</em> represents an instance method, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>instance</em> must be assignable to the declaring type of the method represented by <em>method</em>.</p>\n<p>If <em>arguments</em> is not <strong>null</strong>, it must have the same number of elements as the number of parameters for the method represented by <em>method</em>. Each element in <em>arguments</em> must not be <strong>null</strong> and must be assignable to the corresponding parameter of <em>method</em>, possibly after quoting.</p>\n<p>An element will be quoted only if the corresponding method parameter is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is empty if <em>arguments</em> is <strong>null</strong>. Otherwise, it contains the same elements as <em>arguments</em>, some of which may be quoted.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the return type of the method represented by <em>method</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> property equal to (pass <strong>null</strong> for a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method).</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Call(Expression, MethodInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 170
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a method that takes two arguments.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that calls an instance method that has two arguments.</p>System.Linq.Expressions.ExpressionDev10#17"
  syntax:
    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the target method.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the second argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 171
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a method that takes three arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the target method.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the second argument.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the third argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 172
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a method that takes arguments.</p>\n"
  remarks: "\n<p>To represent a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method, pass in <strong>null</strong> for the <em>instance</em> parameter when you call this method, or call <xref href=\"System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>If <em>method</em> represents an instance method, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>instance</em> must be assignable to the declaring type of the method represented by <em>method</em>.</p>\n<p>If <em>arguments</em> is not <strong>null</strong>, it must have the same number of elements as the number of parameters for the method represented by <em>method</em>. Each element in <em>arguments</em> must not be <strong>null</strong> and must be assignable to the corresponding parameter of <em>method</em>, possibly after quoting.</p>\n<p>An element will be quoted only if the corresponding method parameter is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is empty if <em>arguments</em> is <strong>null</strong>. Otherwise, it contains the same elements as <em>arguments</em>, some of which may be quoted.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the return type of the method represented by <em>method</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that specifies the instance for an instance method call (pass <strong>null</strong> for a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method).</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\n<p>-or-</p>\n<p>\n<em>arguments</em> is not <strong>null</strong> and one or more of its elements is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: Call(Expression, MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, String, Type[], Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 173
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a method by calling the appropriate factory method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the return type of the method denoted by <em>methodName</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property value will be searched for a specific method.</p>\n"
    - id: methodName
      type: System.String
      description: "\n<p>The name of the method.</p>\n"
    - id: typeArguments
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that represents the arguments to the method.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> property equal to <em>instance</em>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> set to the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the specified instance method, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified arguments.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> or <em>methodName</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>instance</em>.Type or its base types.</p>\n<p>-or-</p>\n<p>More than one method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>instance</em>.Type or its base types.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type(), System.Linq.Expressions.Expression())
  name.vb: Call(Expression, String, Type(), Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 174
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a static (Shared in Visual Basic) method.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the target method.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>A collection of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the call arguments.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Call(MethodInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 175
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method that takes one argument.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that calls a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method that takes one argument.</p>System.Linq.Expressions.ExpressionDev10#16"
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0)
    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is null.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 176
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a static method that takes two arguments.</p>\n"
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the second argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is null.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 177
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a static method that takes three arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the second argument.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the third argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is null.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 178
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a static method that takes four arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the second argument.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the third argument.</p>\n"
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the fourth argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is null.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 179
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a static method that takes five arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the first argument.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the second argument.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the third argument.</p>\n"
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the fourth argument.</p>\n"
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the fifth argument.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is null.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 180
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method that has arguments.</p>\n"
  remarks: "\n<p>If <em>arguments</em> is not <strong>null</strong>, it must have the same number of elements as the number of parameters for the method represented by <em>method</em>. Each element in <em>arguments</em> must not be <strong>null</strong> and must be assignable to the corresponding parameter of <em>method</em>, possibly after quoting.</p>\n<p>An element will be quoted only if the corresponding method parameter is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is empty if <em>arguments</em> is <strong>null</strong>. Otherwise, it contains the same elements as <em>arguments</em>, some of which may be quoted.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the return type of the method represented by <em>method</em>. The <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>method</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: Call(MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Type, String, Type[], Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 181
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method by calling the appropriate factory method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the return type of the method denoted by <em>methodName</em>. The <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(type As Type, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type that contains the specified <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method.</p>\n"
    - id: methodName
      type: System.String
      description: "\n<p>The name of the method.</p>\n"
    - id: typeArguments
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the arguments to the method.</p>\n"
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the specified <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method, and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified arguments.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>methodName</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>type</em> or its base types.</p>\n<p>-or-</p>\n<p>More than one method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>type</em> or its base types.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type(), System.Linq.Expressions.Expression())
  name.vb: Call(Type, String, Type(), Expression())
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(ParameterExpression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 182
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> representing a catch statement with a reference to the caught <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object for use in the handler body.</p>\n"
  example:
  - 
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a reference to the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object caught by this handler.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the catch statement.</p>\n"
    return:
      type: System.Linq.Expressions.CatchBlock
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 183
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> representing a catch statement with an <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> filter and a reference to the caught <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a reference to the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object caught by this handler.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the catch statement.</p>\n"
    - id: filter
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> filter.</p>\n"
    return:
      type: System.Linq.Expressions.CatchBlock
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(Type, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 184
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> representing a catch statement.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> to be caught can be specified but no reference to the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object will be available for use in the <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body)
    content.vb: Public Shared Function Catch(type As Type, body As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> will handle.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the catch statement.</p>\n"
    return:
      type: System.Linq.Expressions.CatchBlock
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(Type, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 185
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> representing a catch statement with an <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> filter but no reference to the caught <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(type As Type, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> will handle.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the catch statement.</p>\n"
    - id: filter
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> filter.</p>\n"
    return:
      type: System.Linq.Expressions.CatchBlock
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  commentId: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ClearDebugInfo(SymbolDocumentInfo)
  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearDebugInfo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 186
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref> for clearing a sequence point.</p>\n"
  example:
  - 
  syntax:
    content: public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document)
    content.vb: Public Shared Function ClearDebugInfo(document As SymbolDocumentInfo) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: "\n<p>The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the source file.</p>\n"
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref> for clearning a sequence point.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Coalesce(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 187
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a coalescing operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> and both <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> are set to <strong>false</strong>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is equal to the result type of the coalescing operation. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>left</em> does not represent a reference type or a nullable value type.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>left</em>.Type and <em>right</em>.Type are not convertible to each other.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Coalesce(Expression, Expression, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 188
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a coalescing operation, given a conversion function.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> and both <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> are set to <strong>false</strong>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the result type of the coalescing operation.</p>\n<p>The following rules determine the result type:</p>\n<ul><li>\n<p>If <em>left</em>.Type represents a nullable type and <em>right</em>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <em>left</em>.Type.</p>\n</li><li>\n<p>Otherwise, if <em>right</em>.Type is implicitly convertible to <em>left</em>.Type, the result type is <em>left</em>.Type.</p>\n</li><li>\n<p>Otherwise, if the non-nullable equivalent of <em>left</em>.Type is implicitly convertible to <em>right</em>.Type, the result type is <em>right</em>.Type.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>left</em>.Type and <em>right</em>.Type are not convertible to each other.</p>\n<p>-or-</p>\n<p>\n<em>conversion</em> is not <strong>null</strong> and <em>conversion</em>.Type is a delegate type that does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>left</em> does not represent a reference type or a nullable value type.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>left</em> represents a type that is not assignable to the parameter type of the delegate type <em>conversion</em>.Type.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>right</em> is not equal to the return type of the delegate type <em>conversion</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Condition(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 189
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional statement.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>ifTrue</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to <strong>true</strong>, the second argument is executed; otherwise, the third argument is executed.</p>System.Linq.Expressions.ExpressionDev10#3"
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>test</em> or <em>ifTrue</em> or <em>ifFalse</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>test</em>.Type is not <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>ifTrue</em>.Type is not equal to <em>ifFalse</em>.Type.</p>\n"
  seealso:
  - type: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - type: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Condition(Expression, Expression, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 190
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional statement.</p>\n"
  remarks: "\n<p>This method allows explicitly unifying the result type of the conditional expression in cases where the types of <em>ifTrue</em> and <em>ifFalse</em> expressions are not equal. Types of both <em>ifTrue</em> and <em>ifFalse</em> must be implicitly reference assignable to the result type. The <em>type</em> is allowed to be <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression, type As Type) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Constant(Object)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 191
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the type of <em>value</em>. If <em>value</em> is <strong>null</strong>, <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> is equal to <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To represent <strong>null</strong>, you can also use the <xref href=\"System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method, with which you can explicitly specify the type.</p>\n<p></p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents a constant value.</p>System.Linq.Expressions.ExpressionDev10#4"
  syntax:
    content: public static ConstantExpression Constant(object value)
    content.vb: Public Shared Function Constant(value As Object) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  id: Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Constant(Object, Type)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 192
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  remarks: "\n<p>This method can be useful for representing values of nullable types.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents a constant of the nullable type and set its value to <strong>null</strong>.</p>System.Linq.Expressions.ExpressionDev10#22"
  syntax:
    content: public static ConstantExpression Constant(object value, Type type)
    content.vb: Public Shared Function Constant(value As Object, type As Type) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> is not <strong>null</strong> and <em>type</em> is not assignable from the dynamic type of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  id: Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Continue(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Continue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 193
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a continue statement.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a loop expression that uses the <xref href=\"System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Linq.Expressions.ExpressionDev10#46"
  syntax:
    content: public static GotoExpression Continue(LabelTarget target)
    content.vb: Public Shared Function Continue(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Continue(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Continue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 194
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a continue statement with the specified type.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Continue(LabelTarget target, Type type)
    content.vb: Public Shared Function Continue(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  id: Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Convert(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 195
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a type conversion operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. If the node is lifted, <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. Otherwise, it is <strong>false</strong>.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that represents a type convertion operation.</p>System.Linq.Expressions.ExpressionDev10#23
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Convert(Expression, Type, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 196
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conversion operation for which the implementing method is specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. If the node is lifted, <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. Otherwise, it is <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type, MethodInfo method)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type is not assignable to the argument type of the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>The return type of the method represented by <em>method</em> is not assignable to <em>type</em>.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type or <em>type</em> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <em>method</em>.</p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one method that matches the <em>method</em> description was found.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ConvertChecked(Expression, Type)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 197
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. If the node is lifted, <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. Otherwise, it is <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ConvertChecked(Expression, Type, MethodInfo)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 198
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. If the node is lifted, <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. Otherwise, it is <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type, MethodInfo method)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type is not assignable to the argument type of the method represented by <em>method</em>.</p>\n<p>-or-</p>\n<p>The return type of the method represented by <em>method</em> is not assignable to <em>type</em>.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type or <em>type</em> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <em>method</em>.</p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one method that matches the <em>method</em> description was found.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  fullName: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DebugInfo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 199
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref> with the specified span.</p>\n"
  example:
  - 
  syntax:
    content: public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)
    content.vb: Public Shared Function DebugInfo(document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: "\n<p>The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the source file.</p>\n"
    - id: startLine
      type: System.Int32
      description: "\n<p>The start line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref>. Must be greater than 0.</p>\n"
    - id: startColumn
      type: System.Int32
      description: "\n<p>The start column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref>. Must be greater than 0.</p>\n"
    - id: endLine
      type: System.Int32
      description: "\n<p>The end line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref>. Must be greater or equal than the start line.</p>\n"
    - id: endColumn
      type: System.Int32
      description: "\n<p>The end column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</p>\n"
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  id: Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Decrement(Expression)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 200
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the decrementing of the expression by 1.</p>\n"
  remarks: "\n<p>This expression is functional and does not change the value of the object passed to it.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that substracts 1 from a given value.</p>System.Linq.Expressions.ExpressionDev10#5"
  syntax:
    content: public static UnaryExpression Decrement(Expression expression)
    content.vb: Public Shared Function Decrement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to decrement.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the decremented expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Decrement(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 201
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the decrementing of the expression by 1.</p>\n"
  remarks: "\n<p>This expression is functional and does not change the value of the object passed to it.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Decrement(Expression expression, MethodInfo method)
    content.vb: Public Shared Function Decrement(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to decrement.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the decremented expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Default(System.Type)
  id: Default(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Default(Type)
  fullName: System.Linq.Expressions.Expression.Default(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 202
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DefaultExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified type.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents a default vaule for a given type.</p>System.Linq.Expressions.ExpressionDev10#6"
  syntax:
    content: public static DefaultExpression Default(Type type)
    content.vb: Public Shared Function Default(type As Type) As DefaultExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DefaultExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Divide(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 203
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic division operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that divides divides its first argument by its second argument.</p>System.Linq.Expressions.ExpressionDev10#7
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The division operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Divide(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 204
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic division operation. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the division operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 205
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a division assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 206
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a division assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 207
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a division assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ElementInit(MethodInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 208
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref>, given an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> as the second argument.</p>\n"
  remarks: "\n<p>The <em>addMethod</em> parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in <em>arguments</em>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element in <em>arguments</em> must be assignable to the type of the corresponding parameter of the add method, possibly after quoting.</p>\n<p>An element will be quoted only if the corresponding method parameter is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to initialize an element of a dictionary collection.</p>System.Linq.Expressions.Expression#4"
  syntax:
    content: public static ElementInit ElementInit(MethodInfo addMethod, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function ElementInit(addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ElementInit
      description: "\n<p>An <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>addMethod</em> or <em>arguments</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method that <em>addMethod</em> represents is not named \"Add\" (case insensitive).</p>\n<p>-or-</p>\n<p>The method that <em>addMethod</em> represents is not an instance method.</p>\n<p>-or-</p>\n<p>\n<em>arguments</em> does not contain the same number of elements as the number of parameters for the method that <em>addMethod</em> represents.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of one or more elements of <em>arguments</em> is not assignable to the type of the corresponding parameter of the method that <em>addMethod</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ElementInit(MethodInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ElementInit(MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 209
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref>, given an array of values as the second argument.</p>\n"
  remarks: "\n<p>The <em>addMethod</em> parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in <em>arguments</em>. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element in <em>arguments</em> must be assignable to the type of the corresponding parameter of the add method, possibly after quoting.</p>\n<p>An element will be quoted only if the corresponding method parameter is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to initialize an element of a dictionary collection.</p>System.Linq.Expressions.Expression#4"
  syntax:
    content: public static ElementInit ElementInit(MethodInfo addMethod, params Expression[] arguments)
    content.vb: Public Shared Function ElementInit(addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ElementInit
      description: "\n<p>An <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>addMethod</em> or <em>arguments</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method that addMethod represents is not named \"Add\" (case insensitive).</p>\n<p>-or-</p>\n<p>The method that addMethod represents is not an instance method.</p>\n<p>-or-</p>\n<p>arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of one or more elements of <em>arguments</em> is not assignable to the type of the corresponding parameter of the method that <em>addMethod</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: ElementInit(MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Empty
  commentId: M:System.Linq.Expressions.Expression.Empty
  id: Empty
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Empty()
  fullName: System.Linq.Expressions.Expression.Empty()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 210
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an empty expression that has <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  remarks: "\n<p>An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an empty expression and add it to a block expression.</p>System.Linq.Expressions.ExpressionDev10#31"
  syntax:
    content: public static DefaultExpression Empty()
    content.vb: Public Shared Function Empty As DefaultExpression
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DefaultExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Equal(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 211
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an equality comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. Otherwise, it is <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>false</strong>. The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</p>System.Linq.Expressions.ExpressionDev10#8
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The equality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Equal(Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 212
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an equality comparison. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>liftToNull</em>. Otherwise, they are both <strong>false</strong>. The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the equality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOr(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 213
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise <strong>XOR</strong> operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that represents the logical XOR operation.</p>System.Linq.Expressions.ExpressionDev10#9
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <strong>XOR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOr(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 214
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise <strong>XOR</strong> operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the <strong>XOR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 215
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 216
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 217
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, FieldInfo)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 218
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a field.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref> property of <em>field</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberExpression Field(Expression expression, FieldInfo field)
    content.vb: Public Shared Function Field(expression As Expression, field As FieldInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to. For <strong>static</strong> (<strong>Shared</strong> in Visual Basic), <em>expression</em> must be <strong>null</strong>.</p>\n"
    - id: field
      type: System.Reflection.FieldInfo
      description: "\n<p>The <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>field</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The field represented by <em>field</em> is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>expression</em>.Type is not assignable to the declaring type of the field represented by <em>field</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  id: Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 219
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a field given the name of the field.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the field denoted by <em>fieldName</em>.</p>\n<p>This method searches <em>expression</em>.Type and its base types for a field that has the name <em>fieldName</em>. Public fields are given preference over non-public fields. If a matching field is found, this method passes <em>expression</em> and the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents that field to <xref href=\"System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents accessing a field.</p>System.Linq.Expressions.ExpressionDev10#37"
  syntax:
    content: public static MemberExpression Field(Expression expression, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> contains a field named <em>fieldName</em>. This can be null for static fields.</p>\n"
    - id: fieldName
      type: System.String
      description: "\n<p>The name of a field to be accessed.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>expression</em>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the field denoted by <em>fieldName</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>fieldName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>No field named <em>fieldName</em> is defined in <em>expression</em>.Type or its base types.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 220
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a field.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberExpression Field(Expression expression, Type type, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, type As Type, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>The containing object of the field. This can be null for static fields.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the field.</p>\n"
    - id: fieldName
      type: System.String
      description: "\n<p>The field to be accessed.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])
  id: GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetActionType(Type[])
  fullName: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetActionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 221
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic System.Action delegate type that has specific type arguments.</p>\n"
  remarks: "\n<p>As an example, if the elements of <em>typeArgs</em> represent the types T1…Tn, the resulting <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents the constructed delegate type System.Action<T1,…,Tn> in C# or System.Action(Of T1,…,Tn) in Visual Basic.</p>\n"
  example:
  - 
  syntax:
    content: public static Type GetActionType(params Type[] typeArgs)
    content.vb: Public Shared Function GetActionType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: "\n<p>An array of up to sixteen <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that specify the type arguments for the <strong>System.Action</strong> delegate type.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The type of a System.Action delegate that has the specified type arguments.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>typeArgs</em> contains more than sixteen elements.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>typeArgs</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetActionType(System.Type())
  name.vb: GetActionType(Type())
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  id: GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetDelegateType(Type[])
  fullName: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDelegateType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 222
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.</p>\n"
  remarks: "\n<p>The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.</p>\n<p>As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.</p>\n"
  example:
  - 
  syntax:
    content: public static Type GetDelegateType(params Type[] typeArgs)
    content.vb: Public Shared Function GetDelegateType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: "\n<p>The type arguments of the delegate.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The delegate type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetDelegateType(System.Type())
  name.vb: GetDelegateType(Type())
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  id: GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetFuncType(Type[])
  fullName: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFuncType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 223
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\n"
  remarks: "\n<p>\n<em>typeArgs</em> must contain at least one and at most seventeen elements.</p>\n<p>As an example, if the elements of <em>typeArgs</em> represent the types T1…Tn, the resulting <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents the constructed delegate type System.Func<T1,…,Tn> in C# or System.Func(Of T1,…,Tn) in Visual Basic.</p>\n"
  example:
  - 
  syntax:
    content: public static Type GetFuncType(params Type[] typeArgs)
    content.vb: Public Shared Function GetFuncType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: "\n<p>An array of one to seventeen <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that specify the type arguments for the <strong>System.Func</strong> delegate type.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The type of a System.Func delegate that has the specified type arguments.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>typeArgs</em> contains fewer than one or more than seventeen elements.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>typeArgs</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetFuncType(System.Type())
  name.vb: GetFuncType(Type())
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  id: Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 224
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a \"go to\" statement.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that contains a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Linq.Expressions.ExpressionDev10#45"
  syntax:
    content: public static GotoExpression Goto(LabelTarget target)
    content.vb: Public Shared Function Goto(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 225
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a \"go to\" statement. The value passed to the label upon jumping can be specified.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 226
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a \"go to\" statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 227
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a \"go to\" statement with the specified type.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 228
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"greater than\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. Otherwise, it is <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that compares two integers.</p>System.Linq.Expressions.ExpressionDev10#10
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The \"greater than\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 229
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"greater than\" numeric comparison. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>liftToNull</em>. Otherwise, they are both <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the \"greater than\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 230
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"greater than or equal\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. Otherwise, it is <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that compares two integers.</p>System.Linq.Expressions.ExpressionDev10#11
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The \"greater than or equal\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 231
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"greater than or equal\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>liftToNull</em>. Otherwise, they are both <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the \"greater than or equal\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IfThen(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IfThen
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 232
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional block with an <strong>if</strong> statement.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents a conditional block.</p>System.Linq.Expressions.ExpressionDev10#32"
  syntax:
    content: public static ConditionalExpression IfThen(Expression test, Expression ifTrue)
    content.vb: Public Shared Function IfThen(test As Expression, ifTrue As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, properties set to the specified values. The <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> property is set to default expression and the type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> returned by this method is <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IfThenElse(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IfThenElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 233
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional block with <strong>if</strong> and <strong>else</strong> statements.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents a conditional block.</p>System.Linq.Expressions.ExpressionDev10#33"
  syntax:
    content: public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function IfThenElse(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values. The type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> returned by this method is <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  id: Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Increment(Expression)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 234
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the incrementing of the expression value by 1.</p>\n"
  remarks: "\n<p>This expression is functional and does not change the value of the object that is passed to it.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an expression that represents an increment operation.</p>System.Linq.Expressions.ExpressionDev10#24"
  syntax:
    content: public static UnaryExpression Increment(Expression expression)
    content.vb: Public Shared Function Increment(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to increment.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the incremented expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Increment(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 235
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the incrementing of the expression by 1.</p>\n"
  remarks: "\n<p>This expression is functional and does not change the value of the object that is passed to it.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Increment(Expression expression, MethodInfo method)
    content.vb: Public Shared Function Increment(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to increment.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the incremented expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Invoke(Expression, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 236
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that applies a delegate or lambda expression to a list of argument expressions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the return type of the delegate that is represented by <em>expression</em>.Type.</p>\n<p>The <xref href=\"System.Linq.Expressions.InvocationExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> is empty if <em>arguments</em> is <strong>null</strong>. Otherwise, it contains the same elements as <em>arguments</em> except that some of these <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects may be quoted.</p>\n<p>An element will be quoted only if the corresponding parameter of the delegate represented by <em>expression</em> is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the invocation of a lambda expression with specified arguments.</p>System.Linq.Expressions.Expression#6"
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, arguments As IEnumerable(Of Expression)) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the delegate or lambda expression to be applied to.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.</p>\n"
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that applies the specified delegate or lambda expression to the provided arguments.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>expression</em>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the delegate represented by <em>expression</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>arguments</em> does not contain the same number of elements as the list of parameters for the delegate represented by <em>expression</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Invoke(Expression, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Invoke(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 237
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that applies a delegate or lambda expression to a list of argument expressions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the return type of the delegate that is represented by <em>expression</em>.Type.</p>\n<p>The <xref href=\"System.Linq.Expressions.InvocationExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> is empty if <em>arguments</em> is <strong>null</strong>. Otherwise, it contains the same elements as <em>arguments</em> except that some of these <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects may be quoted.</p>\n<p>An element will be quoted only if the corresponding parameter of the delegate represented by <em>expression</em> is of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>arguments</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the invocation of a lambda expression with specified arguments.</p>System.Linq.Expressions.Expression#6"
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, params Expression[] arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, ParamArray arguments As Expression()) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the delegate or lambda expression to be applied.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.</p>\n"
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that applies the specified delegate or lambda expression to the provided arguments.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>expression</em>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the delegate represented by <em>expression</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>arguments</em> does not contain the same number of elements as the list of parameters for the delegate represented by <em>expression</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: Invoke(Expression, Expression())
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  id: IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsFalse(Expression)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 238
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns whether the expression evaluates to false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression)
    content.vb: Public Shared Function IsFalse(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to evaluate.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsFalse(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 239
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns whether the expression evaluates to false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression, MethodInfo method)
    content.vb: Public Shared Function IsFalse(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to evaluate.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  id: IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsTrue(Expression)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 240
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns whether the expression evaluates to true.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression)
    content.vb: Public Shared Function IsTrue(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to evaluate.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsTrue(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 241
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns whether the expression evaluates to true.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression, MethodInfo method)
    content.vb: Public Shared Function IsTrue(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to evaluate.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label
  commentId: M:System.Linq.Expressions.Expression.Label
  id: Label
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label()
  fullName: System.Linq.Expressions.Expression.Label()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 242
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> representing a label with void type and no name.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that contains a <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Linq.Expressions.ExpressionDev10#43"
  syntax:
    content: public static LabelTarget Label()
    content.vb: Public Shared Function Label As LabelTarget
    return:
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The new <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  id: Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 243
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a label without a default value.</p>\n"
  example:
  - 
  syntax:
    content: public static LabelExpression Label(LabelTarget target)
    content.vb: Public Shared Function Label(target As LabelTarget) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> will be associated with.</p>\n"
    return:
      type: System.Linq.Expressions.LabelExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> without a default value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 244
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a label with the given default value.</p>\n"
  example:
  - 
  syntax:
    content: public static LabelExpression Label(LabelTarget target, Expression defaultValue)
    content.vb: Public Shared Function Label(target As LabelTarget, defaultValue As Expression) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> will be associated with.</p>\n"
    - id: defaultValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value of this <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> when the label is reached through regular control flow.</p>\n"
    return:
      type: System.Linq.Expressions.LabelExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LabelExpression\" data-throw-if-not-resolved=\"false\"></xref> with the given default value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.String)
  id: Label(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(String)
  fullName: System.Linq.Expressions.Expression.Label(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 245
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> representing a label with void type and the given name.</p>\n"
  example:
  - 
  syntax:
    content: public static LabelTarget Label(string name)
    content.vb: Public Shared Function Label(name As String) As LabelTarget
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the label.</p>\n"
    return:
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The new <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type)
  id: Label(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(Type)
  fullName: System.Linq.Expressions.Expression.Label(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 246
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> representing a label with the given type.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use a <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> object in a loop expression.</p>System.Linq.Expressions.ExpressionDev10#44"
  syntax:
    content: public static LabelTarget Label(Type type)
    content.vb: Public Shared Function Label(type As Type) As LabelTarget
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of value that is passed when jumping to the label.</p>\n"
    return:
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The new <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)
  id: Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(Type, String)
  fullName: System.Linq.Expressions.Expression.Label(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 247
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> representing a label with the given type and name.</p>\n"
  example:
  - 
  syntax:
    content: public static LabelTarget Label(Type type, string name)
    content.vb: Public Shared Function Label(type As Type, name As String) As LabelTarget
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of value that is passed when jumping to the label.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the label.</p>\n"
    return:
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The new <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 248
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, Boolean, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 249
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 250
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Expression body, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 251
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> by first constructing a delegate type.</p>\n"
  remarks: "\n<p>The <em>parameters</em> parameter must not have more than sixteen elements.</p>\n<p>The elements of <em>parameters</em> must be reference equal to the parameter expressions in <em>body</em>.</p>\n<p>This method constructs an appropriate delegate type from one of the System.Func generic delegates. It then passes the delegate type to one of the <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> factory methods to create a <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>body</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>parameters</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>parameters</em> contains more than sixteen elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 252
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, bool tailCall, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name for the lambda. Used for emitting debug information.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, String, Boolean, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 253
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name for the lambda. Used for emitting debug information.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, String, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 254
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> representing the delegate signature for the lambda.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, Boolean, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 255
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> representing the delegate signature for the lambda.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Type, Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 256
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\n"
  remarks: "\n<p>The object that is returned from this function is of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</p>\n<p>The number of parameters for the delegate type represented by<em>delegateType</em> must equal the length of <em>parameters</em>.</p>\n<p>The elements of <em>parameters</em> must be reference equal to the parameter expressions in <em>body</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object is equal to <em>delegateType</em>. If <em>parameters</em> is <strong>null</strong>, the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object is an empty collection.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</p>System.Linq.Expressions.ExpressionDev10#42"
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents a delegate signature for the lambda.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>delegateType</em> or <em>body</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>delegateType</em> does not represent a delegate type.</p>\n<p>-or-</p>\n<p>\n<em>body</em>.Type represents a type that is not assignable to the return type of the delegate type represented by <em>delegateType</em>.</p>\n<p>-or-</p>\n<p>\n<em>parameters</em> does not contain the same number of elements as the list of parameters for the delegate type represented by <em>delegateType</em>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of the delegate type represented by <em>delegateType</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 257
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\n"
  remarks: "\n<p>The object that is returned from this function is of type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</p>\n<p>The number of parameters for the delegate type represented by <em>delegateType</em> must equal the length of <em>parameters</em>.</p>\n<p>The elements of <em>parameters</em> must be reference equal to the parameter expressions in <em>body</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object is equal to <em>delegateType</em>. If <em>parameters</em> is <strong>null</strong>, the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object is an empty collection. </p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents a delegate signature for the lambda.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>delegateType</em> or <em>body</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>delegateType</em> does not represent a delegate type.</p>\n<p>-or-</p>\n<p>\n<em>body</em>.Type represents a type that is not assignable to the return type of the delegate type represented by <em>delegateType</em>.</p>\n<p>-or-</p>\n<p>\n<em>parameters</em> does not contain the same number of elements as the list of parameters for the delegate type represented by <em>delegateType</em>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of the delegate type represented by <em>delegateType</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Type, Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 258
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> representing the delegate signature for the lambda.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name for the lambda. Used for emitting debug information.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression. </p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, String, Boolean, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 259
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\n"
  example:
  - 
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> representing the delegate signature for the lambda.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name for the lambda. Used for emitting debug information.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, String, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 260
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> where the delegate type is known at compile time.</p>\n"
  example:
  - 
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>The delegate type. </p>\n"
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 261
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> where the delegate type is known at compile time.</p>\n"
  example:
  - 
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>The delegate type. </p>\n"
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 262
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> where the delegate type is known at compile time.</p>\n"
  remarks: "\n<p>The number of parameters for the delegate type <em>TDelegate</em> must equal the number of elements in <em>parameters</em>.</p>\n<p>The elements of <em>parameters</em> must be reference equal to the parameter expressions in <em>body</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object represents the type <em>TDelegate</em>. If <em>parameters</em> is <strong>null</strong>, the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object is an empty collection.</p>\n"
  example:
  - 
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>A delegate type.</p>\n"
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>body</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>TDelegate</em> is not a delegate type.</p>\n<p>-or-</p>\n<p>\n<em>body</em>.Type represents a type that is not assignable to the return type of <em>TDelegate</em>.</p>\n<p>-or-</p>\n<p>\n<em>parameters</em> does not contain the same number of elements as the list of parameters for <em>TDelegate</em>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of <em>TDelegate</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 263
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> where the delegate type is known at compile time.</p>\n"
  remarks: "\n<p>The number of parameters for the delegate type <em>TDelegate</em> must equal the number of elements in <em>parameters</em>.</p>\n<p>The elements of <em>parameters</em> must be reference equal to the parameter expressions in<em>body</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object represents the type <em>TDelegate</em>. If <em>parameters</em> is <strong>null</strong>, the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting object is an empty collection.</p>\n"
  example:
  - 
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>A delegate type.</p>\n"
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>body</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>TDelegate</em> is not a delegate type.</p>\n<p>-or-</p>\n<p>\n<em>body</em>.Type represents a type that is not assignable to the return type of <em>TDelegate</em>.</p>\n<p>-or-</p>\n<p>\n<em>parameters</em> does not contain the same number of elements as the list of parameters for <em>TDelegate</em>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of <em>TDelegate</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Of TDelegate)(Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 264
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> where the delegate type is known at compile time.</p>\n"
  example:
  - 
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the lambda. Used for generating debugging info.</p>\n"
    - id: tailCall
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>The delegate type. </p>\n"
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, String, Boolean, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 265
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> where the delegate type is known at compile time.</p>\n"
  example:
  - 
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the lambda. Used for generating debugging information.</p>\n"
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>The delegate type. </p>\n"
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, String, IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 266
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise left-shift operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The left-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShift(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 267
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise left-shift operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the left-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 268
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise left-shift assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 269
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise left-shift assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 270
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise left-shift assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 271
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"less than\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. Otherwise, it is <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that compares two integers.</p>System.Linq.Expressions.ExpressionDev10#25
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The \"less than\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThan(Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 272
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"less than\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>liftToNull</em>. Otherwise, they are both <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the \"less than\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 273
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \" less than or equal\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. Otherwise, it is <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that compares two integers.</p>System.Linq.Expressions.ExpressionDev10#26
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The \"less than or equal\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 274
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a \"less than or equal\" numeric comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>liftToNull</em>. Otherwise, they are both <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the \"less than or equal\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(MemberInfo, IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 275
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> where the member is a field or property.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberListBinding ListBind(MemberInfo member, IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>A <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>member</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>member</em> does not represent a field or property.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> of the field or property that <em>member</em> represents does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListBind(MemberInfo, IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(MemberInfo, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 276
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> where the member is a field or property.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberListBinding ListBind(MemberInfo member, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>A <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>member</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>member</em> does not represent a field or property.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> of the field or property that <em>member</em> represents does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit())
  name.vb: ListBind(MemberInfo, ElementInit())
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(MethodInfo, IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 277
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> based on a specified property accessor method.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberListBinding ListBind(MethodInfo propertyAccessor, IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a property accessor method.</p>\n"
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> populated with the elements of <em>initializers</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyAccessor</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> of the property that the method represented by <em>propertyAccessor</em> accesses does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListBind(MethodInfo, IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(MethodInfo, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 278
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> object based on a specified property accessor method.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberListBinding ListBind(MethodInfo propertyAccessor, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a property accessor method.</p>\n"
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberListBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\" data-throw-if-not-resolved=\"false\"></xref> populated with the elements of <em>initializers</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyAccessor</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> of the property that the method represented by <em>propertyAccessor</em> accesses does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit())
  name.vb: ListBind(MethodInfo, ElementInit())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 279
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to initialize a collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em> must represent a type that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>newExpression</em>.Type.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the initialization of a new dictionary instance with two key-value pairs.</p>System.Linq.Expressions.Expression#7"
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As IEnumerable(Of ElementInit)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>newExpression</em>.Type does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListInit(NewExpression, IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 280
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that uses a method named \"Add\" to add elements to a collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em> must represent a type that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In order to use this overload of <xref href=\"System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" data-throw-if-not-resolved=\"false\"></xref>, <em>newExpression</em>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the first element of <em>initializers</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> contains one element of type <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> for each element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> is a singleton collection that contains the corresponding element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> represents the add method that was discovered on <em>newExpression</em>.Type or its base type.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>newExpression</em>.Type.</p>\n"
  example:
  - 
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>newExpression</em>.Type does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There is no instance method named \"Add\" (case insensitive) declared in <em>newExpression</em>.Type or its base type.</p>\n<p>-or-</p>\n<p>The add method on <em>newExpression</em>.Type or its base type does not take exactly one argument.</p>\n<p>-or-</p>\n<p>The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the first element of <em>initializers</em> is not assignable to the argument type of the add method on <em>newExpression</em>.Type or its base type.</p>\n<p>-or-</p>\n<p>More than one argument-compatible method named \"Add\" (case-insensitive) exists on <em>newExpression</em>.Type and/or its base type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ListInit(NewExpression, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 281
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to initialize a collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em> must represent a type that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>newExpression</em>.Type.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref>that represents the initialization of a new dictionary instance with two key-value pairs.</p>System.Linq.Expressions.Expression#7"
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As ElementInit()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>newExpression</em>.Type does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit())
  name.vb: ListInit(NewExpression, ElementInit())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 282
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that uses a method named \"Add\" to add elements to a collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em> must represent a type that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In order to use this overload of <xref href=\"System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref>, <em>newExpression</em>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the first element of <em>initializers</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref>contains one element of type <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> for each element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> is a singleton collection that contains the corresponding element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> represents the add method that was discovered on <em>newExpression</em>.Type or its base type.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>newExpression</em>.Type.</p>\n"
  example:
  - 
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>newExpression</em>.Type does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There is no instance method named \"Add\" (case insensitive) declared in <em>newExpression</em>.Type or its base type.</p>\n<p>-or-</p>\n<p>The add method on <em>newExpression</em>.Type or its base type does not take exactly one argument.</p>\n<p>-or-</p>\n<p>The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the first element of <em>initializers</em> is not assignable to the argument type of the add method on <em>newExpression</em>.Type or its base type.</p>\n<p>-or-</p>\n<p>More than one argument-compatible method named \"Add\" (case-insensitive) exists on <em>newExpression</em>.Type and/or its base type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression())
  name.vb: ListInit(NewExpression, Expression())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 283
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that uses a specified method to add elements to a collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em> must represent a type that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>addMethod</em> is <strong>null</strong>, <em>newExpression</em>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If <em>addMethod</em> is not <strong>null</strong>, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <em>initializers</em> must be assignable to the argument type of the add method.</p>\n<p>The <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> contains one element of type <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> for each element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> is a singleton collection that contains the corresponding element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>addMethod</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>newExpression</em>.Type.</p>\n"
  example:
  - 
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, MethodInfo addMethod, IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As MethodInfo, initializers As IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents an instance method named \"Add\" (case insensitive), that adds an element to a collection.</p>\n"
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>newExpression</em>.Type does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>addMethod</em> is not <strong>null</strong> and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.</p>\n<p>-or-</p>\n<p>\n<em>addMethod</em> is not <strong>null</strong> and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of one or more elements of <em>initializers</em> is not assignable to the argument type of the method that <em>addMethod</em> represents.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>addMethod</em> is <strong>null</strong> and no instance method named \"Add\" that takes one type-compatible argument exists on <em>newExpression</em>.Type or its base type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ListInit(NewExpression, MethodInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 284
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that uses a specified method to add elements to a collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em> must represent a type that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>addMethod</em> is <strong>null</strong>, <em>newExpression</em>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If <em>addMethod</em> is not <strong>null</strong>, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <em>initializers</em> must be assignable to the argument type of the add method.</p>\n<p>The <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref>contains one element of type <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref> for each element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> is a singleton collection that contains the corresponding element of <em>initializers</em>. The <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>addMethod</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to <em>newExpression</em>.Type.</p>\n"
  example:
  - 
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, MethodInfo addMethod, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As MethodInfo, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents an instance method that takes one argument, that adds an element to a collection.</p>\n"
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>newExpression</em>.Type does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>addMethod</em> is not <strong>null</strong> and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.</p>\n<p>-or-</p>\n<p>\n<em>addMethod</em> is not <strong>null</strong> and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of one or more elements of <em>initializers</em> is not assignable to the argument type of the method that <em>addMethod</em> represents.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>addMethod</em> is <strong>null</strong> and no instance method named \"Add\" that takes one type-compatible argument exists on <em>newExpression</em>.Type or its base type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: ListInit(NewExpression, MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  id: Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 285
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref> with the given body.</p>\n"
  example:
  - 
  syntax:
    content: public static LoopExpression Loop(Expression body)
    content.vb: Public Shared Function Loop(body As Expression) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the loop.</p>\n"
    return:
      type: System.Linq.Expressions.LoopExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 286
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref> with the given body and break target.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a block expression that contains a <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Linq.Expressions.ExpressionDev10#44"
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the loop.</p>\n"
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The break target used by the loop body.</p>\n"
    return:
      type: System.Linq.Expressions.LoopExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression, LabelTarget, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 287
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref> with the given body.</p>\n"
  example:
  - 
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break, LabelTarget continue)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the loop.</p>\n"
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The break target used by the loop body.</p>\n"
    - id: continue
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The continue target used by the loop body.</p>\n"
    return:
      type: System.Linq.Expressions.LoopExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.LoopExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 288
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref>, given the left and right operands, by calling an appropriate factory method.</p>\n"
  remarks: "\n<p>The <em>binaryType</em> parameter determines which <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> factory method this method calls. For example, if <em>binaryType</em> is <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\" data-throw-if-not-resolved=\"false\"></xref>, this method invokes <xref href=\"System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the subtraction of one number from another.</p>System.Linq.Expressions.Expression#8"
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of binary operation.</p>\n"
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the left operand.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the right operand.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that results from calling the appropriate factory method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>binaryType</em> does not correspond to a binary expression node.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 289
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref>, given the left operand, right operand and implementing method, by calling the appropriate factory method.</p>\n"
  remarks: "\n<p>The <em>binaryType</em> parameter determines which <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> factory method this method will call. For example, if <em>binaryType</em> is <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\" data-throw-if-not-resolved=\"false\"></xref>, this method invokes <xref href=\"System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref>. The <em>liftToNull</em> and <em>method</em> parameters are ignored if the appropriate factory method does not have a corresponding parameter.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of binary operation.</p>\n"
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the left operand.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the right operand.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that specifies the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that results from calling the appropriate factory method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>binaryType</em> does not correspond to a binary expression node.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 290
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</p>\n"
  remarks: "\n<p>The <em>binaryType</em> parameter determines which <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> factory method this method will call. For example, if <em>binaryType</em> is <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\" data-throw-if-not-resolved=\"false\"></xref>, this method invokes <xref href=\"System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref>. The <em>liftToNull</em>, <em>method</em> and <em>conversion</em> parameters are ignored if the appropriate factory method does not have a corresponding parameter.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of binary operation.</p>\n"
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the left operand.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the right operand.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that specifies the implementing method.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a type conversion function. This parameter is used only if <em>binaryType</em> is <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\" data-throw-if-not-resolved=\"false\"></xref> or compound assignment..</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that results from calling the appropriate factory method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>binaryType</em> does not correspond to a binary expression node.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeCatchBlock
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 291
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> representing a catch statement with the specified elements.</p>\n"
  remarks: "\n<p>\n<em>type</em> must be non-null and match the type of <em>variable</em> (if it is supplied).</p>\n"
  example:
  - 
  syntax:
    content: public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function MakeCatchBlock(type As Type, variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> will handle.</p>\n"
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a reference to the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object caught by this handler.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the catch statement.</p>\n"
    - id: filter
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> filter.</p>\n"
    return:
      type: System.Linq.Expressions.CatchBlock
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGoto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 292
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a jump of the specified <xref href=\"System.Linq.Expressions.GotoExpressionKind\" data-throw-if-not-resolved=\"false\"></xref>. The value passed to the label upon jumping can also be specified.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function MakeGoto(kind As GotoExpressionKind, target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: kind
      type: System.Linq.Expressions.GotoExpressionKind
      description: "\n<p>The <xref href=\"System.Linq.Expressions.GotoExpressionKind\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to <em>kind</em>, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 293
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing an indexed property in an object.</p>\n"
  example:
  - 
  syntax:
    content: public static IndexExpression MakeIndex(Expression instance, PropertyInfo indexer, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function MakeIndex(instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>The object to which the property belongs. It should be null if the property is <strong>static</strong> (<strong>shared</strong> in Visual Basic).</p>\n"
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> representing the property to index.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.</p>\n"
    return:
      type: System.Linq.Expressions.IndexExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: MakeIndex(Expression, PropertyInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeMemberAccess(Expression, MemberInfo)
  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeMemberAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 294
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing either a field or a property.</p>\n"
  remarks: "\n<p>This method can be used to create a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing either a field or a property, depending on the type of <em>member</em>. If <em>member</em> is of type <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method calls <see cref=\"Overload:System.Linq.Expressions.Expression.Field\"></see> to create the <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref>. If <em>member</em> is of type <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method calls <see cref=\"Overload:System.Linq.Expressions.Expression.Property\"></see> to create the <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberExpression MakeMemberAccess(Expression expression, MemberInfo member)
    content.vb: Public Shared Function MakeMemberAccess(expression As Expression, member As MemberInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the object that the member belongs to. This can be null for static members.</p>\n"
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>The <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> that describes the field or property to be accessed.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that results from calling the appropriate factory method.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>member</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>member</em> does not represent a field or property.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  commentId: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
  fullName: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeTry
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 295
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a try block with the specified elements.</p>\n"
  example:
  - 
  syntax:
    content: public static TryExpression MakeTry(Type type, Expression body, Expression finally, Expression fault, IEnumerable<CatchBlock> handlers)
    content.vb: Public Shared Function MakeTry(type As Type, body As Expression, finally As Expression, fault As Expression, handlers As IEnumerable(Of CatchBlock)) As TryExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the try expression. If null, bodh and all handlers must have identical type.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the try block.</p>\n"
    - id: finally
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the finally block. Pass null if the try block has no finally block associated with it.</p>\n"
    - id: fault
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the fault block. Pass null if the try block has no fault block associated with it.</p>\n"
    - id: handlers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
      description: "\n<p>A collection of <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref>s representing the catch statements to be associated with the try block.</p>\n"
    return:
      type: System.Linq.Expressions.TryExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock))
  name.vb: MakeTry(Type, Expression, Expression, Expression, IEnumerable(Of CatchBlock))
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeUnary(ExpressionType, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeUnary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 296
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>, given an operand, by calling the appropriate factory method.</p>\n"
  remarks: "\n<p>The <em>unaryType</em> parameter determines which <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> factory method this method calls. For example, if <em>unaryType</em> is equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\" data-throw-if-not-resolved=\"false\"></xref>, this method invokes <xref href=\"System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref>. The <em>type</em>parameter is ignored if it does not apply to the factory method that is called.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of unary operation.</p>\n"
    - id: operand
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the operand.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type to be converted to (pass <strong>null</strong> if not applicable).</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that results from calling the appropriate factory method.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>operand</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>unaryType</em> does not correspond to a unary expression node.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeUnary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 297
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>, given an operand and implementing method, by calling the appropriate factory method.</p>\n"
  remarks: "\n<p>The <em>unaryType</em> parameter determines which <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> factory method this method calls. For example, if <em>unaryType</em> is equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\" data-throw-if-not-resolved=\"false\"></xref>, this method invokes <xref href=\"System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref>. The <em>type</em> and <em>method</em> parameters are ignored if they do not apply to the factory method that is called.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, MethodInfo method)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type, method As MethodInfo) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of unary operation.</p>\n"
    - id: operand
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the operand.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type to be converted to (pass <strong>null</strong> if not applicable).</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that results from calling the appropriate factory method.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>operand</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>unaryType</em> does not correspond to a unary expression node.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 298
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that represents the recursive initialization of members of a field or property.</p>\n"
  remarks: "\n<p>The <em>member</em> parameter must represent a field or property.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberMemberBinding MemberBind(MemberInfo member, IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>The <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>member</em> or <em>bindings</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>member</em> does not represent a field or property.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the field or property that <em>member</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberBind(MemberInfo, IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(MemberInfo, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 299
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that represents the recursive initialization of members of a field or property.</p>\n"
  remarks: "\n<p>The <em>member</em> parameter must represent a field or property.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberMemberBinding MemberBind(MemberInfo member, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>The <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>member</em> or <em>bindings</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>member</em> does not represent a field or property.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the field or property that <em>member</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding())
  name.vb: MemberBind(MemberInfo, MemberBinding())
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 300
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberMemberBinding MemberBind(MethodInfo propertyAccessor, IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a property accessor method.</p>\n"
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyAccessor</em> or <em>bindings</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the property accessed by the method that <em>propertyAccessor</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberBind(MethodInfo, IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(MethodInfo, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 301
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberMemberBinding MemberBind(MethodInfo propertyAccessor, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a property accessor method.</p>\n"
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberMemberBinding\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyAccessor</em> or <em>bindings</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the property accessed by the method that <em>propertyAccessor</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding())
  name.vb: MemberBind(MethodInfo, MemberBinding())
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 302
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Represents an expression that creates a new object and initializes a property of the object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates an expression that creates a new object and initializes a property of the object.</p>System.Linq.Expressions.ExpressionDev10#40"
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, bindings As IEnumerable(Of MemberBinding)) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>bindings</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bindings</em> does not represent a member of the type that <em>newExpression</em>.Type represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberInit(NewExpression, IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberInit(NewExpression, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 303
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberInitExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberInitExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of <em>newExpression</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.MemberInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the initialization of two members of a new object.</p>System.Linq.Expressions.Expression#9"
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, ParamArray bindings As MemberBinding()) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newExpression</em> or <em>bindings</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.MemberBinding.Member\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bindings</em> does not represent a member of the type that <em>newExpression</em>.Type represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding())
  name.vb: MemberInit(NewExpression, MemberBinding())
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Modulo(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 304
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic remainder operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The modulus operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Modulo(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 305
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic remainder operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the modulus operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 306
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a remainder assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 307
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a remainder assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 308
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a remainder assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Multiply(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 309
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that multiplies two values.</p>System.Linq.Expressions.ExpressionDev10#27
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Multiply(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 310
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 311
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a multiplication assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 312
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a multiplication assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 313
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a multiplication assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 314
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a multiplication assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 315
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a multiplication assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 316
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a multiplication assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 317
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic multiplication operation that has overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyChecked(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 318
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic multiplication operation that has overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  id: Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Negate(Expression)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 319
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic negation operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are false.</p>\n"
  example:
  - <p>The following example demonstrates how to create an expression that represents an arithmetic negation operation. </p>System.Linq.Expressions.ExpressionDev10#50
  syntax:
    content: public static UnaryExpression Negate(Expression expression)
    content.vb: Public Shared Function Negate(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The unary minus operator is not defined for <em>expression</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Negate(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 320
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic negation operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Negate(Expression expression, MethodInfo method)
    content.vb: Public Shared Function Negate(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the unary minus operator is not defined for <em>expression</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  id: NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NegateChecked(Expression)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 321
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic negation operation that has overflow checking.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression)
    content.vb: Public Shared Function NegateChecked(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The unary minus operator is not defined for <em>expression</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NegateChecked(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 322
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression, MethodInfo method)
    content.vb: Public Shared Function NegateChecked(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the unary minus operator is not defined for <em>expression</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  id: New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(ConstructorInfo)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 323
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the specified constructor that takes no arguments.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> properties of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> are empty collections. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property represents the declaring type of the constructor represented by <em>constructor</em>.</p>\n"
  example:
  - 
  syntax:
    content: public static NewExpression New(ConstructorInfo constructor)
    content.vb: Public Shared Function New(constructor As ConstructorInfo) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>constructor</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The constructor that <em>constructor</em> represents has at least one parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(ConstructorInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 324
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the specified constructor with the specified arguments.</p>\n"
  remarks: "\n<p>The <em>arguments</em> parameter must contain the same number of elements as the number of parameters for the constructor represented by <em>constructor</em>. If <em>arguments</em> is <strong>null</strong>, it is considered empty, and the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> is an empty collection.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the declaring type of the constructor represented by <em>constructor</em>. The <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> property is an empty collection.</p>\n"
  example:
  - 
  syntax:
    content: public static NewExpression New(ConstructorInfo constructor, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function New(constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>constructor</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>arguments</em> parameter does not contain the same number of elements as the number of parameters for the constructor that <em>constructor</em> represents.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: New(ConstructorInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 325
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</p>\n"
  remarks: "\n<p>The <em>arguments</em> parameter must contain the same number of elements as the number of parameters for the constructor represented by <em>constructor</em>. If <em>arguments</em> is <strong>null</strong>, it is considered empty, and the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> is an empty collection.</p>\n<p>If <em>members</em> is <strong>null</strong>, the <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> is an empty collection. If <em>members</em> is not <strong>null</strong>, it must have the same number of elements as <em>arguments</em> and each element must not be <strong>null</strong>. Each element of <em>members</em> must be a <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents an instance member on the declaring type of the constructor represented by <em>constructor</em>. If it represents a property, the property must have a <strong>get</strong> accessor. The corresponding element of <em>arguments</em> for each element of <em>members</em> must have a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property that represents a type that is assignable to the type of the member that the <em>members</em> element represents.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the declaring type of the constructor that <em>constructor</em> represents.</p>\n"
  example:
  - 
  syntax:
    content: public static NewExpression New(ConstructorInfo constructor, IEnumerable<Expression> arguments, IEnumerable<MemberInfo> members)
    content.vb: Public Shared Function New(constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    - id: members
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>constructor</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>members</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>arguments</em> parameter does not contain the same number of elements as the number of parameters for the constructor that <em>constructor</em> represents.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\n<p>-or-</p>\n<p>The <em>members</em> parameter does not have the same number of elements as <em>arguments</em>.</p>\n<p>-or-</p>\n<p>An element of <em>arguments</em> has a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <em>members</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo))
  name.vb: New(ConstructorInfo, IEnumerable(Of Expression), IEnumerable(Of MemberInfo))
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 326
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</p>\n"
  remarks: "\n<p>The <em>arguments</em> parameter must contain the same number of elements as the number of parameters for the constructor represented by <em>constructor</em>. If <em>arguments</em> is <strong>null</strong>, it is considered empty, and the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> is an empty collection.</p>\n<p>If <em>members</em> is <strong>null</strong>, the <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> is an empty collection. If <em>members</em> is not <strong>null</strong>, it must have the same number of elements as <em>arguments</em> and each element must not be <strong>null</strong>. Each element of <em>members</em> must be a <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents an instance member on the declaring type of the constructor represented by <em>constructor</em>. If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of <em>arguments</em> for each element of <em>members</em> must have a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property that represents a type that is assignable to the type of the member that the <em>members</em> element represents.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the declaring type of the constructor that <em>constructor</em> represents.</p>\n"
  example:
  - 
  syntax:
    content: public static NewExpression New(ConstructorInfo constructor, IEnumerable<Expression> arguments, params MemberInfo[] members)
    content.vb: Public Shared Function New(constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    - id: members
      type: System.Reflection.MemberInfo[]
      description: "\n<p>An array of <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>constructor</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>members</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>arguments</em> parameter does not contain the same number of elements as the number of parameters for the constructor that <em>constructor</em> represents.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\n<p>-or-</p>\n<p>The <em>members</em> parameter does not have the same number of elements as <em>arguments</em>.</p>\n<p>-or-</p>\n<p>An element of <em>arguments</em> has a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <em>members</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Reflection.MemberInfo())
  name.vb: New(ConstructorInfo, IEnumerable(Of Expression), MemberInfo())
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(ConstructorInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 327
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the specified constructor with the specified arguments.</p>\n"
  remarks: "\n<p>The <em>arguments</em> parameter must contain the same number of elements as the number of parameters for the constructor represented by <em>constructor</em>. If <em>arguments</em> is <strong>null</strong>, it is considered empty, and the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> is an empty collection.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the declaring type of the constructor represented by <em>constructor</em>. The <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> property is an empty collection.</p>\n"
  example:
  - 
  syntax:
    content: public static NewExpression New(ConstructorInfo constructor, params Expression[] arguments)
    content.vb: Public Shared Function New(constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>constructor</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>arguments</em> does match the number of parameters for the constructor that <em>constructor</em> represents.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression())
  name.vb: New(ConstructorInfo, Expression())
- uid: System.Linq.Expressions.Expression.New(System.Type)
  commentId: M:System.Linq.Expressions.Expression.New(System.Type)
  id: New(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Type)
  fullName: System.Linq.Expressions.Expression.New(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 328
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents calling the parameterless constructor of the specified type.</p>\n"
  remarks: "\n<p>The <em>type</em> parameter must represent a type that has a constructor without parameters.</p>\n<p>The <xref href=\"System.Linq.Expressions.NewExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\" data-throw-if-not-resolved=\"false\"></xref> properties of the resulting <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> are empty collections. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>type</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.New(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</p>System.Linq.Expressions.Expression#10"
  syntax:
    content: public static NewExpression New(Type type)
    content.vb: Public Shared Function New(type As Type) As NewExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that has a constructor that takes no arguments.</p>\n"
    return:
      type: System.Linq.Expressions.NewExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the constructor without parameters for the specified type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The type that <em>type</em> represents does not have a constructor without parameters.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayBounds(Type, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 329
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents creating an array that has a specified rank.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> represents an array type whose rank is equal to the length of <em>bounds</em> and whose element type is <em>type</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <em>bounds</em> must represent an integral type.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an expression tree that represents creating a string array that has a rank of 2.</p>System.Linq.Expressions.Expression#2"
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, IEnumerable<Expression> bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, bounds As IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the element type of the array.</p>\n"
    - id: bounds
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>bounds</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>bounds</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bounds</em> does not represent an integral type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: NewArrayBounds(Type, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayBounds(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 330
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents creating an array that has a specified rank.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> represents an array type whose rank is equal to the length of <em>bounds</em> and whose element type is <em>type</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <em>bounds</em> must represent an integral type.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an expression tree that represents creating a string array that has a rank of 2.</p>System.Linq.Expressions.Expression#2"
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, ParamArray bounds As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the element type of the array.</p>\n"
    - id: bounds
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>bounds</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>bounds</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>bounds</em> does not represent an integral type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression())
  name.vb: NewArrayBounds(Type, Expression())
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayInit(Type, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 331
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <em>initializers</em> must represent a type that is assignable to the type represented by <em>type</em>, possibly after it is quoted.</p>\n<p>An element will be quoted only if <em>type</em> is <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>initializers</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> represents an array type whose rank is 1 and whose element type is <em>type</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" data-throw-if-not-resolved=\"false\"></xref> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</p>System.Linq.Expressions.Expression#1"
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, IEnumerable<Expression> initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, initializers As IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the element type of the array.</p>\n"
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>initializers</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>initializers</em> represents a type that is not assignable to the type that <em>type</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: NewArrayInit(Type, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayInit(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 332
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of each element of <em>initializers</em> must represent a type that is assignable to the type represented by <em>type</em>, possibly after it is quoted.</p>\n<p>An element will be quoted only if <em>type</em> is <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. Quoting means the element is wrapped in a <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node. The resulting node is a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property is the element of <em>initializers</em>.</p>\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> represents an array type whose rank is 1 and whose element type is <em>type</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" data-throw-if-not-resolved=\"false\"></xref> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</p>System.Linq.Expressions.Expression#1"
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, ParamArray initializers As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the element type of the array.</p>\n"
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.NewArrayExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>initializers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>initializers</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of an element of <em>initializers</em> represents a type that is not assignable to the type <em>type</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression())
  name.vb: NewArrayInit(Type, Expression())
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  id: Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Not(Expression)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 333
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise complement operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>.</p>\n"
  example:
  - <p>The following example demonstrates how to create an expression that represents a logical NOT operation. </p>System.Linq.Expressions.ExpressionDev10#51
  syntax:
    content: public static UnaryExpression Not(Expression expression)
    content.vb: Public Shared Function Not(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The unary not operator is not defined for <em>expression</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Not(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 334
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise complement operation. The implementing method can be specified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Not(Expression expression, MethodInfo method)
    content.vb: Public Shared Function Not(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the unary not operator is not defined for <em>expression</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 335
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an inequality comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. Otherwise, it is <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The inequality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NotEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 336
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an inequality comparison.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <em>liftToNull</em>. Otherwise, they are both <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: liftToNull
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the inequality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  id: OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OnesComplement(Expression)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 337
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns the expression representing the ones complement.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression)
    content.vb: Public Shared Function OnesComplement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OnesComplement(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 338
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns the expression representing the ones complement.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression, MethodInfo method)
    content.vb: Public Shared Function OnesComplement(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Or(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 339
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise <strong>OR</strong> operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that represents a logical OR operation.</p>System.Linq.Expressions.ExpressionDev10#28
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right)
    content.vb: Public Shared Function Or(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Or(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 340
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise <strong>OR</strong> operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Or(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 341
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise OR assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 342
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise OR assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 343
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise OR assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrElse(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 344
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional <strong>OR</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>false</strong>.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that represents a logical <strong>OR</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>false</strong>.</p>System.Linq.Expressions.ExpressionDev10#29
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrElse(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 345
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a conditional <strong>OR</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>false</strong>.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref>property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type)
  id: Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Parameter(Type)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 346
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> object that prints the value of a <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> object. </p>System.Linq.Expressions.ExpressionDev10#49"
  syntax:
    content: public static ParameterExpression Parameter(Type type)
    content.vb: Public Shared Function Parameter(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the parameter or variable.</p>\n"
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node with the specified name and type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  id: Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Parameter(Type, String)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 347
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\n"
  example:
  - 
  syntax:
    content: public static ParameterExpression Parameter(Type type, string name)
    content.vb: Public Shared Function Parameter(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the parameter or variable.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the parameter or variable, used for debugging or printing purpose only.</p>\n"
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Parameter\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.ParameterExpression.Name\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  id: PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 348
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostDecrementAssign(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 349
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression, MethodInfo method)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  id: PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 350
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostIncrementAssign(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 351
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression, MethodInfo method)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Power(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 352
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents raising a number to a power.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right)
    content.vb: Public Shared Function Power(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The exponentiation operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>left</em>.Type and/or <em>right</em>.Type are not <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Power(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 353
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents raising a number to a power.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Power(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the exponentiation operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and/or <em>right</em>.Type are not <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 354
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents raising an expression to a power and assigning the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 355
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents raising an expression to a power and assigning the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 356
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents raising an expression to a power and assigning the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  id: PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 357
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that decrements the expression by 1 and assigns the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreDecrementAssign(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 358
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that decrements the expression by 1 and assigns the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression, MethodInfo method)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  id: PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 359
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that increments the expression by 1 and assigns the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreIncrementAssign(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 360
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that increments the expression by 1 and assigns the result back to the expression.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression, MethodInfo method)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to apply the operations on.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the implementing method.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the resultant expression.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 361
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a property by using a property accessor method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the method represented by <em>propertyAccessor</em> is <strong>static</strong> (<strong>Shared</strong> in Visual Basic), <em>expression</em> can be <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberExpression Property(Expression expression, MethodInfo propertyAccessor)
    content.vb: Public Shared Function Property(expression As Expression, propertyAccessor As MethodInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to. This can be null for static properties.</p>\n"
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents a property accessor method.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>expression</em> and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property accessed in <em>propertyAccessor</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyAccessor</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The method that <em>propertyAccessor</em> represents is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>expression</em>.Type is not assignable to the declaring type of the method represented by <em>propertyAccessor</em>.</p>\n<p>-or-</p>\n<p>The method that <em>propertyAccessor</em> represents is not a property accessor method.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, PropertyInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 362
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a property.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the property represented by <em>property</em> is <strong>static</strong> (<strong>Shared</strong> in Visual Basic), <em>expression</em> can be <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberExpression Property(Expression expression, PropertyInfo property)
    content.vb: Public Shared Function Property(expression As Expression, property As PropertyInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to. This can be null for static properties.</p>\n"
    - id: property
      type: System.Reflection.PropertyInfo
      description: "\n<p>The <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>property</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The property that <em>property</em> represents is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>expression</em>.Type is not assignable to the declaring type of the property that <em>property</em> represents.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 363
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref> representing the access to an indexed property.</p>\n"
  example:
  - 
  syntax:
    content: public static IndexExpression Property(Expression instance, PropertyInfo indexer, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\n"
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: "\n<p>The <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property to index.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that are used to index the property.</p>\n"
    return:
      type: System.Linq.Expressions.IndexExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Property(Expression, PropertyInfo, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, PropertyInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 364
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref> representing the access to an indexed property.</p>\n"
  example:
  - 
  syntax:
    content: public static IndexExpression Property(Expression instance, PropertyInfo indexer, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\n"
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: "\n<p>The <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property to index.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that are used to index the property.</p>\n"
    return:
      type: System.Linq.Expressions.IndexExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression())
  name.vb: Property(Expression, PropertyInfo, Expression())
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  id: Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 365
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a property.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref>is equal to the <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property denoted by <em>propertyName</em>.</p>\n<p>This method searches <em>expression</em>.Type and its base types for a property that has the name <em>propertyName</em>. Public properties are given preference over non-public properties. If a matching property is found, this method passes <em>expression</em> and the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents that property to <xref href=\"System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to create an expression that represents accessing a property.</p>System.Linq.Expressions.ExpressionDev10#38"
  syntax:
    content: public static MemberExpression Property(Expression expression, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> contains a property named <em>propertyName</em>. This can be <strong>null</strong> for static properties.</p>\n"
    - id: propertyName
      type: System.String
      description: "\n<p>The name of a property to be accessed.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>expression</em>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property denoted by <em>propertyName</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>propertyName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>No property named <em>propertyName</em> is defined in <em>expression</em>.Type or its base types.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, String, Expression[])
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 366
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref> representing the access to an indexed property.</p>\n"
  example:
  - 
  syntax:
    content: public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: "\n<p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\n"
    - id: propertyName
      type: System.String
      description: "\n<p>The name of the indexer.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects that are used to index the property.</p>\n"
    return:
      type: System.Linq.Expressions.IndexExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.IndexExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression())
  name.vb: Property(Expression, String, Expression())
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 367
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> accessing a property.</p>\n"
  example:
  - 
  syntax:
    content: public static MemberExpression Property(Expression expression, Type type, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, type As Type, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>The containing object of the property. This can be null for static properties.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the property.</p>\n"
    - id: propertyName
      type: System.String
      description: "\n<p>The property to be accessed.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PropertyOrField(Expression, String)
  fullName: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyOrField
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 368
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents accessing a property or field.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Reflection.PropertyInfo.PropertyType\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.FieldInfo.FieldType\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref>, respectively, that represents the property or field denoted by <em>propertyOrFieldName</em>.</p>\n<p>This method searches <em>expression</em>.Type and its base types for a property or field that has the name <em>propertyOrFieldName</em>. Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes <em>expression</em> and the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents that property or field to <xref href=\"System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\" data-throw-if-not-resolved=\"false\"></xref>, respectively.</p>\n"
  example:
  - "\n<p>The following example shows how to create an expression that represents accessing a property or field.</p>System.Linq.Expressions.ExpressionDev10#39"
  syntax:
    content: public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName)
    content.vb: Public Shared Function PropertyOrField(expression As Expression, propertyOrFieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> contains a property or field named <em>propertyOrFieldName</em>. This can be null for static members.</p>\n"
    - id: propertyOrFieldName
      type: System.String
      description: "\n<p>The name of a property or field to be accessed.</p>\n"
    return:
      type: System.Linq.Expressions.MemberExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.MemberExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>expression</em>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\" data-throw-if-not-resolved=\"false\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the property or field denoted by <em>propertyOrFieldName</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>propertyOrFieldName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>No property or field named <em>propertyOrFieldName</em> is defined in <em>expression</em>.Type or its base types.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  id: Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Quote(Expression)
  fullName: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Quote
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 369
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an expression that has a constant value of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> represents the constructed type <xref href=\"System.Linq.Expressions.Expression`1\" data-throw-if-not-resolved=\"false\"></xref>, where the type argument is the type represented by <em>expression</em>.Type. The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>. Both <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> are <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Quote(Expression expression)
    content.vb: Public Shared Function Quote(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Reduce
  commentId: M:System.Linq.Expressions.Expression.Reduce
  id: Reduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Reduce()
  fullName: System.Linq.Expressions.Expression.Reduce()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reduce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 370
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\n"
  example:
  - 
  syntax:
    content: public virtual Expression Reduce()
    content.vb: Public Overridable Function Reduce As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The reduced expression.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  commentId: M:System.Linq.Expressions.Expression.ReduceAndCheck
  id: ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReduceAndCheck()
  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReduceAndCheck
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 371
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\n"
  remarks: "\n<p>Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</p>\n"
  example:
  - 
  syntax:
    content: public Expression ReduceAndCheck()
    content.vb: Public Function ReduceAndCheck As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The reduced expression.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  commentId: M:System.Linq.Expressions.Expression.ReduceExtensions
  id: ReduceExtensions
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReduceExtensions()
  fullName: System.Linq.Expressions.Expression.ReduceExtensions()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReduceExtensions
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 372
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</p>\n"
  example:
  - 
  syntax:
    content: public Expression ReduceExtensions()
    content.vb: Public Function ReduceExtensions As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The reduced expression.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReferenceEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReferenceEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 373
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a reference equality comparison.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ReferenceEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReferenceNotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReferenceNotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 374
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a reference inequality comparison.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression ReferenceNotEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceNotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Rethrow
  commentId: M:System.Linq.Expressions.Expression.Rethrow
  id: Rethrow
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Rethrow()
  fullName: System.Linq.Expressions.Expression.Rethrow()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rethrow
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 375
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a rethrowing of an exception.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Rethrow()
    content.vb: Public Shared Function Rethrow As UnaryExpression
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a rethrowing of an exception.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Rethrow(System.Type)
  id: Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Rethrow(Type)
  fullName: System.Linq.Expressions.Expression.Rethrow(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rethrow
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 376
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a rethrowing of an exception with a given type.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Rethrow(Type type)
    content.vb: Public Shared Function Rethrow(type As Type) As UnaryExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The new <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the expression.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a rethrowing of an exception.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  id: Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 377
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a return statement.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Return(LabelTarget target)
    content.vb: Public Shared Function Return(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 378
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a return statement. The value passed to the label upon jumping can be specified.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that contains the <xref href=\"System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Linq.Expressions.ExpressionDev10#43"
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 379
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value that will be passed to the associated label upon jumping.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 380
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a return statement with the specified type.</p>\n"
  example:
  - 
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: "\n<p>The <xref href=\"System.Linq.Expressions.LabelTarget\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> will jump to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>An <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>type</em>, and a null value to be passed to the target label upon jumping.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 381
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise right-shift operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The right-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShift(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 382
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise right-shift operation.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the right-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 383
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise right-shift assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 384
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise right-shift assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 385
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a bitwise right-shift assignment operation.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RuntimeVariables(IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 386
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(IEnumerable<ParameterExpression> variables)
    content.vb: Public Shared Function RuntimeVariables(variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: "\n<p>A collection of <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: RuntimeVariables(IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RuntimeVariables(ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 387
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables)
    content.vb: Public Shared Function RuntimeVariables(ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Linq.Expressions.ParameterExpression[]
      description: "\n<p>An array of <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression())
  name.vb: RuntimeVariables(ParameterExpression())
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Subtract(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 388
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - <p>The following code example shows how to create an expression that subtracts the argument from the first argument.</p>System.Linq.Expressions.ExpressionDev10#30
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Subtract(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 389
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 390
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a subtraction assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 391
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a subtraction assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 392
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a subtraction assignment operation that does not have overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 393
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a subtraction assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 394
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a subtraction assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 395
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a subtraction assignment operation that has overflow checking.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.LambdaExpression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 396
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic subtraction operation that has overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractChecked(Expression, Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 397
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an arithmetic subtraction operation that has overflow checking.</p>\n"
  remarks: "\n<p>The resulting <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> has the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are <strong>false</strong>. The <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n<p>The following information describes the implementing method, the node type, and whether a node is lifted.</p>\n"
  example:
  - 
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right, MethodInfo method)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: right
      type: System.Linq.Expressions.Expression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 398
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\n"
  remarks: "\n<p>All <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> objects in a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> object must have the same type, unless the <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> has the type <strong>void</strong>.</p>\n<p>Each <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> object has an implicit <strong>break</strong> statement, which means that there is no implicit fall through from one case label to another.</p>\n<p>If <em>switchValue</em> does not match any of the cases, the default case represented by <em>defaultBody</em> is run.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</p>System.Linq.Expressions.ExpressionDev10#35"
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value to be tested against each case.</p>\n"
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\n"
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: "\n<p>The set of cases for this switch expression.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, Expression, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 399
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\n"
  example:
  - 
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value to be tested against each case.</p>\n"
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\n"
    - id: comparison
      type: System.Reflection.MethodInfo
      description: "\n<p>The equality comparison method to use.</p>\n"
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: "\n<p>The set of cases for this switch expression.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  name.vb: Switch(Expression, Expression, MethodInfo, IEnumerable(Of SwitchCase))
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 400
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\n"
  example:
  - 
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value to be tested against each case.</p>\n"
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\n"
    - id: comparison
      type: System.Reflection.MethodInfo
      description: "\n<p>The equality comparison method to use.</p>\n"
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: "\n<p>The set of cases for this switch expression.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, Expression, MethodInfo, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 401
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>switch</strong> statement without a default case.</p>\n"
  remarks: "\n<p>All <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> objects in a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> object must have the same type, unless the <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> has the type <strong>void</strong>.</p>\n<p>Each <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> object has an implicit <strong>break</strong> statement, which means that there is no implicit fall through from one case label to another.</p>\n<p>If <em>switchValue</em> does not match any of the cases, no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that represents a swtich statement without a default case.</p>System.Linq.Expressions.ExpressionDev10#34<p></p>"
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value to be tested against each case.</p>\n"
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: "\n<p>The set of cases for this switch expression.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 402
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\n"
  example:
  - 
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the switch.</p>\n"
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value to be tested against each case.</p>\n"
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\n"
    - id: comparison
      type: System.Reflection.MethodInfo
      description: "\n<p>The equality comparison method to use.</p>\n"
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: "\n<p>The set of cases for this switch expression.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  name.vb: Switch(Type, Expression, Expression, MethodInfo, IEnumerable(Of SwitchCase))
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 403
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a <strong>switch</strong> statement that has a default case..</p>\n"
  example:
  - 
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The result type of the switch.</p>\n"
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: "\n<p>The value to be tested against each case.</p>\n"
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\n"
    - id: comparison
      type: System.Reflection.MethodInfo
      description: "\n<p>The equality comparison method to use.</p>\n"
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: "\n<p>The set of cases for this switch expression.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Type, Expression, Expression, MethodInfo, SwitchCase())
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SwitchCase(Expression, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 404
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> object to be used in a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>All <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> objects in a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> object must have the same type, unless the <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref> has the type <strong>void</strong>.</p>\n<p>Each <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> object has an implicit <strong>break</strong> statement, which means that there is no implicit fall through from one case label to another.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</p>System.Linq.Expressions.ExpressionDev10#35"
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, IEnumerable<Expression> testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the case.</p>\n"
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The test values of the case.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchCase
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: SwitchCase(Expression, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SwitchCase(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 405
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref> for use in a <xref href=\"System.Linq.Expressions.SwitchExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, params Expression[] testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, ParamArray testValues As Expression()) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the case.</p>\n"
    - id: testValues
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The test values of the case.</p>\n"
    return:
      type: System.Linq.Expressions.SwitchCase
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.SwitchCase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: SwitchCase(Expression, Expression())
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)
  id: SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 406
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName)
    content.vb: Public Shared Function SymbolDocument(fileName As String) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: "\n<p>A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  id: SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 407
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    - id: language
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: "\n<p>A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 408
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    - id: language
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    - id: languageVendor
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: "\n<p>A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 409
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    - id: language
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    - id: languageVendor
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    - id: documentType
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\" data-throw-if-not-resolved=\"false\"></xref> equal to.</p>\n"
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: "\n<p>A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  id: Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Throw(Expression)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 410
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a throwing of an exception.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> object that uses the <xref href=\"System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Linq.Expressions.ExpressionDev10#47"
  syntax:
    content: public static UnaryExpression Throw(Expression value)
    content.vb: Public Shared Function Throw(value As Expression) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the exception.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  id: Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Throw(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 411
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a throwing of an exception with a given type.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Throw(Expression value, Type type)
    content.vb: Public Shared Function Throw(value As Expression, type As Type) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The new <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the expression.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the exception.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ToString
  commentId: M:System.Linq.Expressions.Expression.ToString
  id: ToString
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Linq.Expressions.Expression.ToString()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 412
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns a textual representation of the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A textual representation of the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryCatch(Expression, CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCatch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 413
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a try block with any number of catch statements and neither a fault nor finally block.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> object that contains a catch statement.</p>System.Linq.Expressions.ExpressionDev10#47"
  syntax:
    content: public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatch(body As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the try block.</p>\n"
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: "\n<p>The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> expressions representing the catch statements to be associated with the try block.</p>\n"
    return:
      type: System.Linq.Expressions.TryExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  name.vb: TryCatch(Expression, CatchBlock())
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryCatchFinally(Expression, Expression, CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCatchFinally
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 414
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a try block with any number of catch statements and a finally block.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> object that contains a catch statement and a finally statement.</p>System.Linq.Expressions.ExpressionDev10#48"
  syntax:
    content: public static TryExpression TryCatchFinally(Expression body, Expression finally, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatchFinally(body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the try block.</p>\n"
    - id: finally
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the finally block.</p>\n"
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: "\n<p>The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> expressions representing the catch statements to be associated with the try block.</p>\n"
    return:
      type: System.Linq.Expressions.TryExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  name.vb: TryCatchFinally(Expression, Expression, CatchBlock())
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryFault(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryFault
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 415
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a try block with a fault block and no catch statements.</p>\n"
  example:
  - 
  syntax:
    content: public static TryExpression TryFault(Expression body, Expression fault)
    content.vb: Public Shared Function TryFault(body As Expression, fault As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the try block.</p>\n"
    - id: fault
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the fault block.</p>\n"
    return:
      type: System.Linq.Expressions.TryExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryFinally(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryFinally
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 416
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref> representing a try block with a finally block and no catch statements.</p>\n"
  example:
  - 
  syntax:
    content: public static TryExpression TryFinally(Expression body, Expression finally)
    content.vb: Public Shared Function TryFinally(body As Expression, finally As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the try block.</p>\n"
    - id: finally
      type: System.Linq.Expressions.Expression
      description: "\n<p>The body of the finally block.</p>\n"
    return:
      type: System.Linq.Expressions.TryExpression
      description: "\n<p>The created <xref href=\"System.Linq.Expressions.TryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  id: TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryGetActionType(Type[], out Type)
  fullName: System.Linq.Expressions.Expression.TryGetActionType(System.Type[], out System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetActionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 417
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic System.Action delegate type that has specific type arguments.</p>\n"
  example:
  - 
  syntax:
    content: public static bool TryGetActionType(Type[] typeArgs, out Type actionType)
    content.vb: Public Shared Function TryGetActionType(typeArgs As Type(), ByRef actionType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: "\n<p>An array of Type objects that specify the type arguments for the System.Action delegate type.</p>\n"
    - id: actionType
      type: System.Type
      description: "\n<p>When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <em>typeArgs</em>.This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if generic System.Action delegate type was created for specific <em>typeArgs</em>; false otherwise.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryGetActionType(System.Type(), ByRef System.Type)
  name.vb: TryGetActionType(Type(), ByRef Type)
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  id: TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryGetFuncType(Type[], out Type)
  fullName: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], out System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetFuncType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 418
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\n"
  example:
  - 
  syntax:
    content: public static bool TryGetFuncType(Type[] typeArgs, out Type funcType)
    content.vb: Public Shared Function TryGetFuncType(typeArgs As Type(), ByRef funcType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: "\n<p>An array of Type objects that specify the type arguments for the System.Func delegate type.</p>\n"
    - id: funcType
      type: System.Type
      description: "\n<p>When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <em>typeArgs</em>.This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if generic System.Func delegate type was created for specific <em>typeArgs</em>; false otherwise.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryGetFuncType(System.Type(), ByRef System.Type)
  name.vb: TryGetFuncType(Type(), ByRef Type)
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  id: TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeAs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeAs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 419
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an explicit reference or boxing conversion where <strong>null</strong> is supplied if the conversion fails.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>. The <xref href=\"System.Linq.Expressions.UnaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</p>System.Linq.Expressions.Expression#11"
  syntax:
    content: public static UnaryExpression TypeAs(Expression expression, Type type)
    content.vb: Public Shared Function TypeAs(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeAs\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeEqual(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 420
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that compares run-time type identity.</p>\n"
  example:
  - 
  syntax:
    content: public static TypeBinaryExpression TypeEqual(Expression expression, Type type)
    content.vb: Public Shared Function TypeEqual(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <xref href=\"System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> and for which the <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\" data-throw-if-not-resolved=\"false\"></xref> properties are set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  id: TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeIs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeIs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 421
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> represents <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a type test of a string value against the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>System.Linq.Expressions.Expression#12"
  syntax:
    content: public static TypeBinaryExpression TypeIs(Expression expression, Type type)
    content.vb: Public Shared Function TypeIs(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property is equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeIs\" data-throw-if-not-resolved=\"false\"></xref> and for which the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\" data-throw-if-not-resolved=\"false\"></xref> properties are set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  id: UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: UnaryPlus(Expression)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 422
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a unary plus operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression)
    content.vb: Public Shared Function UnaryPlus(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The unary plus operator is not defined for <em>expression</em>.Type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: UnaryPlus(Expression, MethodInfo)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 423
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a unary plus operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> is set to the implementing method. The <xref href=\"System.Linq.Expressions.Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property is set to the type of the node. If the node is lifted, the <xref href=\"System.Linq.Expressions.BinaryExpression.IsLifted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\" data-throw-if-not-resolved=\"false\"></xref> properties are both <strong>true</strong>. Otherwise, they are false.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression, MethodInfo method)
    content.vb: Public Shared Function UnaryPlus(expression As Expression, method As MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> property equal to.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>expression</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>method</em> is <strong>null</strong> and the unary plus operator is not defined for <em>expression</em>.Type.</p>\n<p>-or-</p>\n<p>\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  id: Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Unbox(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unbox
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 424
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents an explicit unboxing.</p>\n"
  example:
  - 
  syntax:
    content: public static UnaryExpression Unbox(Expression expression, Type type)
    content.vb: Public Shared Function Unbox(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\n<p>An <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> to unbox.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The new <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the expression.</p>\n"
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: "\n<p>An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type)
  id: Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Variable(Type)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 425
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\n"
  example:
  - 
  syntax:
    content: public static ParameterExpression Variable(Type type)
    content.vb: Public Shared Function Variable(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the parameter or variable.</p>\n"
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node with the specified name and type</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  id: Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Variable(Type, String)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 426
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\n"
  example:
  - 
  syntax:
    content: public static ParameterExpression Variable(Type type, string name)
    content.vb: Public Shared Function Variable(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the parameter or variable.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the parameter or variable. This name is used for debugging or printing purpose only.</p>\n"
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> node with the specified name and type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: VisitChildren(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VisitChildren
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 427
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</p>\n"
  remarks: "\n<p>Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual Expression VisitChildren(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function VisitChildren(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: "\n<p>An instance of <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The expression being visited, or an expression which should replace it in the tree.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.Expressions.Expression[]
  isExternal: false
  name: Expression[]
  fullName: System.Linq.Expressions.Expression[]
  fullname.vb: System.Linq.Expressions.Expression()
  name.vb: Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  name.vb: IEnumerable(Of ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.ParameterExpression[]
  isExternal: false
  name: ParameterExpression[]
  fullName: System.Linq.Expressions.ParameterExpression[]
  fullname.vb: System.Linq.Expressions.ParameterExpression()
  name.vb: ParameterExpression()
  spec.csharp:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression{{TDelegate}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit)
  name.vb: IEnumerable(Of ElementInit)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: )
    fullName: )
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ElementInit[]
  isExternal: false
  name: ElementInit[]
  fullName: System.Linq.Expressions.ElementInit[]
  fullname.vb: System.Linq.Expressions.ElementInit()
  name.vb: ElementInit()
  spec.csharp:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.GotoExpressionKind
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpressionKind
  fullName: System.Linq.Expressions.GotoExpressionKind
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CatchBlock>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock)
  name.vb: IEnumerable(Of CatchBlock)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: )
    fullName: )
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding)
  name.vb: IEnumerable(Of MemberBinding)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: )
    fullName: )
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.MemberBinding[]
  isExternal: false
  name: MemberBinding[]
  fullName: System.Linq.Expressions.MemberBinding[]
  fullname.vb: System.Linq.Expressions.MemberBinding()
  name.vb: MemberBinding()
  spec.csharp:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  name.vb: IEnumerable(Of MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo[]
  isExternal: false
  name: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  fullname.vb: System.Reflection.MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.SwitchCase[]
  isExternal: false
  name: SwitchCase[]
  fullName: System.Linq.Expressions.SwitchCase[]
  fullname.vb: System.Linq.Expressions.SwitchCase()
  name.vb: SwitchCase()
  spec.csharp:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SwitchCase>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase)
  name.vb: IEnumerable(Of SwitchCase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Linq.Expressions.CatchBlock[]
  isExternal: false
  name: CatchBlock[]
  fullName: System.Linq.Expressions.CatchBlock[]
  fullname.vb: System.Linq.Expressions.CatchBlock()
  name.vb: CatchBlock()
  spec.csharp:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.AmbiguousMatchException
  isExternal: false
  name: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
